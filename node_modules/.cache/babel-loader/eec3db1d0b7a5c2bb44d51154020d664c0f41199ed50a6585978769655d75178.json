{"ast":null,"code":"import _toConsumableArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _typeof from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar AbstractCommandsQuickAccessProvider_1, CommandsHistory_1;\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService, WillSaveStateReason } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nvar AbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = /*#__PURE__*/function (_PickerQuickAccessPro) {\n  function AbstractCommandsQuickAccessProvider(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n    var _this;\n    _classCallCheck(this, AbstractCommandsQuickAccessProvider);\n    _this = _callSuper(this, AbstractCommandsQuickAccessProvider, [AbstractCommandsQuickAccessProvider_1.PREFIX, options]);\n    _this.instantiationService = instantiationService;\n    _this.keybindingService = keybindingService;\n    _this.commandService = commandService;\n    _this.telemetryService = telemetryService;\n    _this.dialogService = dialogService;\n    _this.commandsHistory = _this._register(_this.instantiationService.createInstance(CommandsHistory));\n    _this.options = options;\n    return _this;\n  }\n  _inherits(AbstractCommandsQuickAccessProvider, _PickerQuickAccessPro);\n  return _createClass(AbstractCommandsQuickAccessProvider, [{\n    key: \"_getPicks\",\n    value: function () {\n      var _getPicks2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(filter, _disposables, token, runOptions) {\n        var _this2 = this;\n        var _a, _b, _c, _d, allCommandPicks, runTfidf, filteredCommandPicks, _iterator, _step, _loop, _ret, mapLabelToCommand, _i, _filteredCommandPicks, commandPick, existingCommandForLabel, commandPicks, addOtherSeparator, addSuggestedSeparator, addCommonlyUsedSeparator, i, _commandPick;\n        return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getCommandPicks(token);\n            case 2:\n              allCommandPicks = _context3.sent;\n              if (!token.isCancellationRequested) {\n                _context3.next = 5;\n                break;\n              }\n              return _context3.abrupt(\"return\", []);\n            case 5:\n              runTfidf = createSingleCallFunction(function () {\n                var tfidf = new TfIdfCalculator();\n                tfidf.updateDocuments(allCommandPicks.map(function (commandPick) {\n                  return {\n                    key: commandPick.commandId,\n                    textChunks: [_this2.getTfIdfChunk(commandPick)]\n                  };\n                }));\n                var result = tfidf.calculateScores(filter, token);\n                return normalizeTfIdfScores(result).filter(function (score) {\n                  return score.score > AbstractCommandsQuickAccessProvider_1.TFIDF_THRESHOLD;\n                }).slice(0, AbstractCommandsQuickAccessProvider_1.TFIDF_MAX_RESULTS);\n              }); // Filter\n              filteredCommandPicks = [];\n              _iterator = _createForOfIteratorHelper(allCommandPicks);\n              _context3.prev = 8;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var commandPick, labelHighlights, aliasHighlights, tfidf, tfidfScore;\n                return _regeneratorRuntime().wrap(function _loop$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      commandPick = _step.value;\n                      labelHighlights = (_a = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.label)) !== null && _a !== void 0 ? _a : undefined;\n                      aliasHighlights = commandPick.commandAlias ? (_b = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.commandAlias)) !== null && _b !== void 0 ? _b : undefined : undefined; // Add if matching in label or alias\n                      if (!(labelHighlights || aliasHighlights)) {\n                        _context2.next = 8;\n                        break;\n                      }\n                      commandPick.highlights = {\n                        label: labelHighlights,\n                        detail: _this2.options.showAlias ? aliasHighlights : undefined\n                      };\n                      filteredCommandPicks.push(commandPick);\n                      _context2.next = 18;\n                      break;\n                    case 8:\n                      if (!(filter === commandPick.commandId)) {\n                        _context2.next = 12;\n                        break;\n                      }\n                      filteredCommandPicks.push(commandPick);\n                      _context2.next = 18;\n                      break;\n                    case 12:\n                      if (!(filter.length >= 3)) {\n                        _context2.next = 18;\n                        break;\n                      }\n                      tfidf = runTfidf();\n                      if (!token.isCancellationRequested) {\n                        _context2.next = 16;\n                        break;\n                      }\n                      return _context2.abrupt(\"return\", {\n                        v: []\n                      });\n                    case 16:\n                      // Add if we have a tf-idf score\n                      tfidfScore = tfidf.find(function (score) {\n                        return score.key === commandPick.commandId;\n                      });\n                      if (tfidfScore) {\n                        commandPick.tfIdfScore = tfidfScore.score;\n                        filteredCommandPicks.push(commandPick);\n                      }\n                    case 18:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _loop);\n              });\n              _iterator.s();\n            case 11:\n              if ((_step = _iterator.n()).done) {\n                _context3.next = 18;\n                break;\n              }\n              return _context3.delegateYield(_loop(), \"t0\", 13);\n            case 13:\n              _ret = _context3.t0;\n              if (!_ret) {\n                _context3.next = 16;\n                break;\n              }\n              return _context3.abrupt(\"return\", _ret.v);\n            case 16:\n              _context3.next = 11;\n              break;\n            case 18:\n              _context3.next = 23;\n              break;\n            case 20:\n              _context3.prev = 20;\n              _context3.t1 = _context3[\"catch\"](8);\n              _iterator.e(_context3.t1);\n            case 23:\n              _context3.prev = 23;\n              _iterator.f();\n              return _context3.finish(23);\n            case 26:\n              // Add description to commands that have duplicate labels\n              mapLabelToCommand = new Map();\n              for (_i = 0, _filteredCommandPicks = filteredCommandPicks; _i < _filteredCommandPicks.length; _i++) {\n                commandPick = _filteredCommandPicks[_i];\n                existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n                if (existingCommandForLabel) {\n                  commandPick.description = commandPick.commandId;\n                  existingCommandForLabel.description = existingCommandForLabel.commandId;\n                } else {\n                  mapLabelToCommand.set(commandPick.label, commandPick);\n                }\n              }\n              // Sort by MRU order and fallback to name otherwise\n              filteredCommandPicks.sort(function (commandPickA, commandPickB) {\n                // If a result came from tf-idf, we want to put that towards the bottom\n                if (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n                  if (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n                    return commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n                  }\n                  return commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n                } else if (commandPickA.tfIdfScore) {\n                  return 1; // first command has a score but other doesn't so other wins\n                } else if (commandPickB.tfIdfScore) {\n                  return -1; // other command has a score but first doesn't so first wins\n                }\n                var commandACounter = _this2.commandsHistory.peek(commandPickA.commandId);\n                var commandBCounter = _this2.commandsHistory.peek(commandPickB.commandId);\n                if (commandACounter && commandBCounter) {\n                  return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n                }\n                if (commandACounter) {\n                  return -1; // first command was used, so it wins over the non used one\n                }\n                if (commandBCounter) {\n                  return 1; // other command was used so it wins over the command\n                }\n                if (_this2.options.suggestedCommandIds) {\n                  var commandASuggestion = _this2.options.suggestedCommandIds.has(commandPickA.commandId);\n                  var commandBSuggestion = _this2.options.suggestedCommandIds.has(commandPickB.commandId);\n                  if (commandASuggestion && commandBSuggestion) {\n                    return 0; // honor the order of the array\n                  }\n                  if (commandASuggestion) {\n                    return -1; // first command was suggested, so it wins over the non suggested one\n                  }\n                  if (commandBSuggestion) {\n                    return 1; // other command was suggested so it wins over the command\n                  }\n                }\n                // both commands were never used, so we sort by name\n                return commandPickA.label.localeCompare(commandPickB.label);\n              });\n              commandPicks = [];\n              addOtherSeparator = false;\n              addSuggestedSeparator = true;\n              addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n              for (i = 0; i < filteredCommandPicks.length; i++) {\n                _commandPick = filteredCommandPicks[i]; // Separator: recently used\n                if (i === 0 && this.commandsHistory.peek(_commandPick.commandId)) {\n                  commandPicks.push({\n                    type: 'separator',\n                    label: localize('recentlyUsed', \"recently used\")\n                  });\n                  addOtherSeparator = true;\n                }\n                if (addSuggestedSeparator && _commandPick.tfIdfScore !== undefined) {\n                  commandPicks.push({\n                    type: 'separator',\n                    label: localize('suggested', \"similar commands\")\n                  });\n                  addSuggestedSeparator = false;\n                }\n                // Separator: commonly used\n                if (addCommonlyUsedSeparator && _commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(_commandPick.commandId) && ((_c = this.options.suggestedCommandIds) === null || _c === void 0 ? void 0 : _c.has(_commandPick.commandId))) {\n                  commandPicks.push({\n                    type: 'separator',\n                    label: localize('commonlyUsed', \"commonly used\")\n                  });\n                  addOtherSeparator = true;\n                  addCommonlyUsedSeparator = false;\n                }\n                // Separator: other commands\n                if (addOtherSeparator && _commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(_commandPick.commandId) && !((_d = this.options.suggestedCommandIds) === null || _d === void 0 ? void 0 : _d.has(_commandPick.commandId))) {\n                  commandPicks.push({\n                    type: 'separator',\n                    label: localize('morecCommands', \"other commands\")\n                  });\n                  addOtherSeparator = false;\n                }\n                // Command\n                commandPicks.push(this.toCommandPick(_commandPick, runOptions));\n              }\n              if (this.hasAdditionalCommandPicks(filter, token)) {\n                _context3.next = 36;\n                break;\n              }\n              return _context3.abrupt(\"return\", commandPicks);\n            case 36:\n              return _context3.abrupt(\"return\", {\n                picks: commandPicks,\n                additionalPicks: _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  var _a, additionalCommandPicks, commandPicks;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return _this2.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n                      case 2:\n                        additionalCommandPicks = _context.sent;\n                        if (!token.isCancellationRequested) {\n                          _context.next = 5;\n                          break;\n                        }\n                        return _context.abrupt(\"return\", []);\n                      case 5:\n                        commandPicks = additionalCommandPicks.map(function (commandPick) {\n                          return _this2.toCommandPick(commandPick, runOptions);\n                        }); // Basically, if we haven't already added a separator, we add one before the additional picks so long\n                        // as one hasn't been added to the start of the array.\n                        if (addSuggestedSeparator && ((_a = commandPicks[0]) === null || _a === void 0 ? void 0 : _a.type) !== 'separator') {\n                          commandPicks.unshift({\n                            type: 'separator',\n                            label: localize('suggested', \"similar commands\")\n                          });\n                        }\n                        return _context.abrupt(\"return\", commandPicks);\n                      case 8:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }))()\n              });\n            case 37:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee2, this, [[8, 20, 23, 26]]);\n      }));\n      function _getPicks(_x, _x2, _x3, _x4) {\n        return _getPicks2.apply(this, arguments);\n      }\n      return _getPicks;\n    }()\n  }, {\n    key: \"toCommandPick\",\n    value: function toCommandPick(commandPick, runOptions) {\n      var _this3 = this;\n      if (commandPick.type === 'separator') {\n        return commandPick;\n      }\n      var keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n      var ariaLabel = keybinding ? localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) : commandPick.label;\n      return _objectSpread(_objectSpread({}, commandPick), {}, {\n        ariaLabel: ariaLabel,\n        detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n        keybinding: keybinding,\n        accept: function () {\n          var _accept = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n            var _a, _b, _this3$commandService;\n            return _regeneratorRuntime().wrap(function _callee3$(_context4) {\n              while (1) switch (_context4.prev = _context4.next) {\n                case 0:\n                  // Add to history\n                  _this3.commandsHistory.push(commandPick.commandId);\n                  // Telementry\n                  _this3.telemetryService.publicLog2('workbenchActionExecuted', {\n                    id: commandPick.commandId,\n                    from: (_a = runOptions === null || runOptions === void 0 ? void 0 : runOptions.from) !== null && _a !== void 0 ? _a : 'quick open'\n                  });\n                  // Run\n                  _context4.prev = 2;\n                  if (!((_b = commandPick.args) === null || _b === void 0 ? void 0 : _b.length)) {\n                    _context4.next = 8;\n                    break;\n                  }\n                  _context4.next = 6;\n                  return (_this3$commandService = _this3.commandService).executeCommand.apply(_this3$commandService, [commandPick.commandId].concat(_toConsumableArray(commandPick.args)));\n                case 6:\n                  _context4.next = 10;\n                  break;\n                case 8:\n                  _context4.next = 10;\n                  return _this3.commandService.executeCommand(commandPick.commandId);\n                case 10:\n                  _context4.next = 15;\n                  break;\n                case 12:\n                  _context4.prev = 12;\n                  _context4.t0 = _context4[\"catch\"](2);\n                  if (!isCancellationError(_context4.t0)) {\n                    _this3.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(_context4.t0));\n                  }\n                case 15:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }, _callee3, null, [[2, 12]]);\n          }));\n          function accept() {\n            return _accept.apply(this, arguments);\n          }\n          return accept;\n        }()\n      });\n    }\n    // TF-IDF string to be indexed\n  }, {\n    key: \"getTfIdfChunk\",\n    value: function getTfIdfChunk(_ref2) {\n      var label = _ref2.label,\n        commandAlias = _ref2.commandAlias,\n        commandDescription = _ref2.commandDescription;\n      var chunk = label;\n      if (commandAlias && commandAlias !== label) {\n        chunk += \" - \".concat(commandAlias);\n      }\n      if (commandDescription && commandDescription.value !== label) {\n        // If the original is the same as the value, don't add it\n        chunk += \" - \".concat(commandDescription.value === commandDescription.original ? commandDescription.value : \"\".concat(commandDescription.value, \" (\").concat(commandDescription.original, \")\"));\n      }\n      return chunk;\n    }\n  }]);\n}(PickerQuickAccessProvider);\nAbstractCommandsQuickAccessProvider.PREFIX = '>';\nAbstractCommandsQuickAccessProvider.TFIDF_THRESHOLD = 0.5;\nAbstractCommandsQuickAccessProvider.TFIDF_MAX_RESULTS = 5;\nAbstractCommandsQuickAccessProvider.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nAbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = __decorate([__param(1, IInstantiationService), __param(2, IKeybindingService), __param(3, ICommandService), __param(4, ITelemetryService), __param(5, IDialogService)], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nvar CommandsHistory = CommandsHistory_1 = /*#__PURE__*/function (_Disposable) {\n  function CommandsHistory(storageService, configurationService, logService) {\n    var _this4;\n    _classCallCheck(this, CommandsHistory);\n    _this4 = _callSuper(this, CommandsHistory);\n    _this4.storageService = storageService;\n    _this4.configurationService = configurationService;\n    _this4.logService = logService;\n    _this4.configuredCommandsHistoryLength = 0;\n    _this4.updateConfiguration();\n    _this4.load();\n    _this4.registerListeners();\n    return _this4;\n  }\n  _inherits(CommandsHistory, _Disposable);\n  return _createClass(CommandsHistory, [{\n    key: \"registerListeners\",\n    value: function registerListeners() {\n      var _this5 = this;\n      this._register(this.configurationService.onDidChangeConfiguration(function (e) {\n        return _this5.updateConfiguration(e);\n      }));\n      this._register(this.storageService.onWillSaveState(function (e) {\n        if (e.reason === WillSaveStateReason.SHUTDOWN) {\n          // Commands history is very dynamic and so we limit impact\n          // on storage to only save on shutdown. This helps reduce\n          // the overhead of syncing this data across machines.\n          _this5.saveState();\n        }\n      }));\n    }\n  }, {\n    key: \"updateConfiguration\",\n    value: function updateConfiguration(e) {\n      if (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n        return;\n      }\n      this.configuredCommandsHistoryLength = CommandsHistory_1.getConfiguredCommandHistoryLength(this.configurationService);\n      if (CommandsHistory_1.cache && CommandsHistory_1.cache.limit !== this.configuredCommandsHistoryLength) {\n        CommandsHistory_1.cache.limit = this.configuredCommandsHistoryLength;\n        CommandsHistory_1.hasChanges = true;\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      var raw = this.storageService.get(CommandsHistory_1.PREF_KEY_CACHE, 0 /* StorageScope.PROFILE */);\n      var serializedCache;\n      if (raw) {\n        try {\n          serializedCache = JSON.parse(raw);\n        } catch (error) {\n          this.logService.error(\"[CommandsHistory] invalid data: \".concat(error));\n        }\n      }\n      var cache = CommandsHistory_1.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n      if (serializedCache) {\n        var entries;\n        if (serializedCache.usesLRU) {\n          entries = serializedCache.entries;\n        } else {\n          entries = serializedCache.entries.sort(function (a, b) {\n            return a.value - b.value;\n          });\n        }\n        entries.forEach(function (entry) {\n          return cache.set(entry.key, entry.value);\n        });\n      }\n      CommandsHistory_1.counter = this.storageService.getNumber(CommandsHistory_1.PREF_KEY_COUNTER, 0 /* StorageScope.PROFILE */, CommandsHistory_1.counter);\n    }\n  }, {\n    key: \"push\",\n    value: function push(commandId) {\n      if (!CommandsHistory_1.cache) {\n        return;\n      }\n      CommandsHistory_1.cache.set(commandId, CommandsHistory_1.counter++); // set counter to command\n      CommandsHistory_1.hasChanges = true;\n    }\n  }, {\n    key: \"peek\",\n    value: function peek(commandId) {\n      var _a;\n      return (_a = CommandsHistory_1.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);\n    }\n  }, {\n    key: \"saveState\",\n    value: function saveState() {\n      if (!CommandsHistory_1.cache) {\n        return;\n      }\n      if (!CommandsHistory_1.hasChanges) {\n        return;\n      }\n      var serializedCache = {\n        usesLRU: true,\n        entries: []\n      };\n      CommandsHistory_1.cache.forEach(function (value, key) {\n        return serializedCache.entries.push({\n          key: key,\n          value: value\n        });\n      });\n      this.storageService.store(CommandsHistory_1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n      this.storageService.store(CommandsHistory_1.PREF_KEY_COUNTER, CommandsHistory_1.counter, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n      CommandsHistory_1.hasChanges = false;\n    }\n  }], [{\n    key: \"getConfiguredCommandHistoryLength\",\n    value: function getConfiguredCommandHistoryLength(configurationService) {\n      var _a, _b;\n      var config = configurationService.getValue();\n      var configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;\n      if (typeof configuredCommandHistoryLength === 'number') {\n        return configuredCommandHistoryLength;\n      }\n      return CommandsHistory_1.DEFAULT_COMMANDS_HISTORY_LENGTH;\n    }\n  }]);\n}(Disposable);\nCommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\nCommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\nCommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\nCommandsHistory.counter = 1;\nCommandsHistory.hasChanges = false;\nCommandsHistory = CommandsHistory_1 = __decorate([__param(0, IStorageService), __param(1, IConfigurationService), __param(2, ILogService)], CommandsHistory);\nexport { CommandsHistory };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","_typeof","decorate","i","defineProperty","__param","paramIndex","decorator","AbstractCommandsQuickAccessProvider_1","CommandsHistory_1","toErrorMessage","isCancellationError","matchesContiguousSubString","matchesPrefix","matchesWords","or","createSingleCallFunction","Disposable","LRUCache","TfIdfCalculator","normalizeTfIdfScores","localize","ICommandService","IConfigurationService","IDialogService","IInstantiationService","IKeybindingService","ILogService","PickerQuickAccessProvider","IStorageService","WillSaveStateReason","ITelemetryService","AbstractCommandsQuickAccessProvider","_PickerQuickAccessPro","options","instantiationService","keybindingService","commandService","telemetryService","dialogService","_this","_classCallCheck","_callSuper","PREFIX","commandsHistory","_register","createInstance","CommandsHistory","_inherits","_createClass","value","_getPicks2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","filter","_disposables","token","runOptions","_this2","_a","_b","_c","_d","allCommandPicks","runTfidf","filteredCommandPicks","_iterator","_step","_loop","_ret","mapLabelToCommand","_i","_filteredCommandPicks","commandPick","existingCommandForLabel","commandPicks","addOtherSeparator","addSuggestedSeparator","addCommonlyUsedSeparator","_commandPick","wrap","_callee2$","_context3","prev","next","getCommandPicks","sent","isCancellationRequested","abrupt","tfidf","updateDocuments","map","commandId","textChunks","getTfIdfChunk","result","calculateScores","score","TFIDF_THRESHOLD","slice","TFIDF_MAX_RESULTS","_createForOfIteratorHelper","labelHighlights","aliasHighlights","tfidfScore","_loop$","_context2","WORD_FILTER","label","undefined","commandAlias","highlights","detail","showAlias","push","v","find","tfIdfScore","stop","s","n","done","delegateYield","t0","t1","e","f","finish","Map","get","description","set","sort","commandPickA","commandPickB","localeCompare","commandACounter","peek","commandBCounter","suggestedCommandIds","commandASuggestion","has","commandBSuggestion","type","toCommandPick","hasAdditionalCommandPicks","picks","additionalPicks","_callee","additionalCommandPicks","_callee$","_context","getAdditionalCommandPicks","unshift","_getPicks","_x","_x2","_x3","_x4","apply","_this3","keybinding","lookupKeybinding","ariaLabel","getAriaLabel","_objectSpread","accept","_accept","_callee3","_this3$commandService","_callee3$","_context4","publicLog2","id","from","args","executeCommand","concat","_toConsumableArray","error","_ref2","commandDescription","chunk","original","_Disposable","storageService","configurationService","logService","_this4","configuredCommandsHistoryLength","updateConfiguration","load","registerListeners","_this5","onDidChangeConfiguration","onWillSaveState","reason","SHUTDOWN","saveState","affectsConfiguration","getConfiguredCommandHistoryLength","cache","limit","hasChanges","raw","PREF_KEY_CACHE","serializedCache","JSON","parse","entries","usesLRU","a","b","forEach","entry","counter","getNumber","PREF_KEY_COUNTER","store","stringify","config","getValue","configuredCommandHistoryLength","workbench","commandPalette","history","DEFAULT_COMMANDS_HISTORY_LENGTH"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/commandsQuickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar AbstractCommandsQuickAccessProvider_1, CommandsHistory_1;\nimport { toErrorMessage } from '../../../base/common/errorMessage.js';\nimport { isCancellationError } from '../../../base/common/errors.js';\nimport { matchesContiguousSubString, matchesPrefix, matchesWords, or } from '../../../base/common/filters.js';\nimport { createSingleCallFunction } from '../../../base/common/functional.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LRUCache } from '../../../base/common/map.js';\nimport { TfIdfCalculator, normalizeTfIdfScores } from '../../../base/common/tfIdf.js';\nimport { localize } from '../../../nls.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../keybinding/common/keybinding.js';\nimport { ILogService } from '../../log/common/log.js';\nimport { PickerQuickAccessProvider } from './pickerQuickAccess.js';\nimport { IStorageService, WillSaveStateReason } from '../../storage/common/storage.js';\nimport { ITelemetryService } from '../../telemetry/common/telemetry.js';\nlet AbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = class AbstractCommandsQuickAccessProvider extends PickerQuickAccessProvider {\n    constructor(options, instantiationService, keybindingService, commandService, telemetryService, dialogService) {\n        super(AbstractCommandsQuickAccessProvider_1.PREFIX, options);\n        this.instantiationService = instantiationService;\n        this.keybindingService = keybindingService;\n        this.commandService = commandService;\n        this.telemetryService = telemetryService;\n        this.dialogService = dialogService;\n        this.commandsHistory = this._register(this.instantiationService.createInstance(CommandsHistory));\n        this.options = options;\n    }\n    async _getPicks(filter, _disposables, token, runOptions) {\n        var _a, _b, _c, _d;\n        // Ask subclass for all command picks\n        const allCommandPicks = await this.getCommandPicks(token);\n        if (token.isCancellationRequested) {\n            return [];\n        }\n        const runTfidf = createSingleCallFunction(() => {\n            const tfidf = new TfIdfCalculator();\n            tfidf.updateDocuments(allCommandPicks.map(commandPick => ({\n                key: commandPick.commandId,\n                textChunks: [this.getTfIdfChunk(commandPick)]\n            })));\n            const result = tfidf.calculateScores(filter, token);\n            return normalizeTfIdfScores(result)\n                .filter(score => score.score > AbstractCommandsQuickAccessProvider_1.TFIDF_THRESHOLD)\n                .slice(0, AbstractCommandsQuickAccessProvider_1.TFIDF_MAX_RESULTS);\n        });\n        // Filter\n        const filteredCommandPicks = [];\n        for (const commandPick of allCommandPicks) {\n            const labelHighlights = (_a = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.label)) !== null && _a !== void 0 ? _a : undefined;\n            const aliasHighlights = commandPick.commandAlias ? (_b = AbstractCommandsQuickAccessProvider_1.WORD_FILTER(filter, commandPick.commandAlias)) !== null && _b !== void 0 ? _b : undefined : undefined;\n            // Add if matching in label or alias\n            if (labelHighlights || aliasHighlights) {\n                commandPick.highlights = {\n                    label: labelHighlights,\n                    detail: this.options.showAlias ? aliasHighlights : undefined\n                };\n                filteredCommandPicks.push(commandPick);\n            }\n            // Also add if we have a 100% command ID match\n            else if (filter === commandPick.commandId) {\n                filteredCommandPicks.push(commandPick);\n            }\n            // Handle tf-idf scoring for the rest if there's a filter\n            else if (filter.length >= 3) {\n                const tfidf = runTfidf();\n                if (token.isCancellationRequested) {\n                    return [];\n                }\n                // Add if we have a tf-idf score\n                const tfidfScore = tfidf.find(score => score.key === commandPick.commandId);\n                if (tfidfScore) {\n                    commandPick.tfIdfScore = tfidfScore.score;\n                    filteredCommandPicks.push(commandPick);\n                }\n            }\n        }\n        // Add description to commands that have duplicate labels\n        const mapLabelToCommand = new Map();\n        for (const commandPick of filteredCommandPicks) {\n            const existingCommandForLabel = mapLabelToCommand.get(commandPick.label);\n            if (existingCommandForLabel) {\n                commandPick.description = commandPick.commandId;\n                existingCommandForLabel.description = existingCommandForLabel.commandId;\n            }\n            else {\n                mapLabelToCommand.set(commandPick.label, commandPick);\n            }\n        }\n        // Sort by MRU order and fallback to name otherwise\n        filteredCommandPicks.sort((commandPickA, commandPickB) => {\n            // If a result came from tf-idf, we want to put that towards the bottom\n            if (commandPickA.tfIdfScore && commandPickB.tfIdfScore) {\n                if (commandPickA.tfIdfScore === commandPickB.tfIdfScore) {\n                    return commandPickA.label.localeCompare(commandPickB.label); // prefer lexicographically smaller command\n                }\n                return commandPickB.tfIdfScore - commandPickA.tfIdfScore; // prefer higher tf-idf score\n            }\n            else if (commandPickA.tfIdfScore) {\n                return 1; // first command has a score but other doesn't so other wins\n            }\n            else if (commandPickB.tfIdfScore) {\n                return -1; // other command has a score but first doesn't so first wins\n            }\n            const commandACounter = this.commandsHistory.peek(commandPickA.commandId);\n            const commandBCounter = this.commandsHistory.peek(commandPickB.commandId);\n            if (commandACounter && commandBCounter) {\n                return commandACounter > commandBCounter ? -1 : 1; // use more recently used command before older\n            }\n            if (commandACounter) {\n                return -1; // first command was used, so it wins over the non used one\n            }\n            if (commandBCounter) {\n                return 1; // other command was used so it wins over the command\n            }\n            if (this.options.suggestedCommandIds) {\n                const commandASuggestion = this.options.suggestedCommandIds.has(commandPickA.commandId);\n                const commandBSuggestion = this.options.suggestedCommandIds.has(commandPickB.commandId);\n                if (commandASuggestion && commandBSuggestion) {\n                    return 0; // honor the order of the array\n                }\n                if (commandASuggestion) {\n                    return -1; // first command was suggested, so it wins over the non suggested one\n                }\n                if (commandBSuggestion) {\n                    return 1; // other command was suggested so it wins over the command\n                }\n            }\n            // both commands were never used, so we sort by name\n            return commandPickA.label.localeCompare(commandPickB.label);\n        });\n        const commandPicks = [];\n        let addOtherSeparator = false;\n        let addSuggestedSeparator = true;\n        let addCommonlyUsedSeparator = !!this.options.suggestedCommandIds;\n        for (let i = 0; i < filteredCommandPicks.length; i++) {\n            const commandPick = filteredCommandPicks[i];\n            // Separator: recently used\n            if (i === 0 && this.commandsHistory.peek(commandPick.commandId)) {\n                commandPicks.push({ type: 'separator', label: localize('recentlyUsed', \"recently used\") });\n                addOtherSeparator = true;\n            }\n            if (addSuggestedSeparator && commandPick.tfIdfScore !== undefined) {\n                commandPicks.push({ type: 'separator', label: localize('suggested', \"similar commands\") });\n                addSuggestedSeparator = false;\n            }\n            // Separator: commonly used\n            if (addCommonlyUsedSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && ((_c = this.options.suggestedCommandIds) === null || _c === void 0 ? void 0 : _c.has(commandPick.commandId))) {\n                commandPicks.push({ type: 'separator', label: localize('commonlyUsed', \"commonly used\") });\n                addOtherSeparator = true;\n                addCommonlyUsedSeparator = false;\n            }\n            // Separator: other commands\n            if (addOtherSeparator && commandPick.tfIdfScore === undefined && !this.commandsHistory.peek(commandPick.commandId) && !((_d = this.options.suggestedCommandIds) === null || _d === void 0 ? void 0 : _d.has(commandPick.commandId))) {\n                commandPicks.push({ type: 'separator', label: localize('morecCommands', \"other commands\") });\n                addOtherSeparator = false;\n            }\n            // Command\n            commandPicks.push(this.toCommandPick(commandPick, runOptions));\n        }\n        if (!this.hasAdditionalCommandPicks(filter, token)) {\n            return commandPicks;\n        }\n        return {\n            picks: commandPicks,\n            additionalPicks: (async () => {\n                var _a;\n                const additionalCommandPicks = await this.getAdditionalCommandPicks(allCommandPicks, filteredCommandPicks, filter, token);\n                if (token.isCancellationRequested) {\n                    return [];\n                }\n                const commandPicks = additionalCommandPicks.map(commandPick => this.toCommandPick(commandPick, runOptions));\n                // Basically, if we haven't already added a separator, we add one before the additional picks so long\n                // as one hasn't been added to the start of the array.\n                if (addSuggestedSeparator && ((_a = commandPicks[0]) === null || _a === void 0 ? void 0 : _a.type) !== 'separator') {\n                    commandPicks.unshift({ type: 'separator', label: localize('suggested', \"similar commands\") });\n                }\n                return commandPicks;\n            })()\n        };\n    }\n    toCommandPick(commandPick, runOptions) {\n        if (commandPick.type === 'separator') {\n            return commandPick;\n        }\n        const keybinding = this.keybindingService.lookupKeybinding(commandPick.commandId);\n        const ariaLabel = keybinding ?\n            localize('commandPickAriaLabelWithKeybinding', \"{0}, {1}\", commandPick.label, keybinding.getAriaLabel()) :\n            commandPick.label;\n        return {\n            ...commandPick,\n            ariaLabel,\n            detail: this.options.showAlias && commandPick.commandAlias !== commandPick.label ? commandPick.commandAlias : undefined,\n            keybinding,\n            accept: async () => {\n                var _a, _b;\n                // Add to history\n                this.commandsHistory.push(commandPick.commandId);\n                // Telementry\n                this.telemetryService.publicLog2('workbenchActionExecuted', {\n                    id: commandPick.commandId,\n                    from: (_a = runOptions === null || runOptions === void 0 ? void 0 : runOptions.from) !== null && _a !== void 0 ? _a : 'quick open'\n                });\n                // Run\n                try {\n                    ((_b = commandPick.args) === null || _b === void 0 ? void 0 : _b.length)\n                        ? await this.commandService.executeCommand(commandPick.commandId, ...commandPick.args)\n                        : await this.commandService.executeCommand(commandPick.commandId);\n                }\n                catch (error) {\n                    if (!isCancellationError(error)) {\n                        this.dialogService.error(localize('canNotRun', \"Command '{0}' resulted in an error\", commandPick.label), toErrorMessage(error));\n                    }\n                }\n            }\n        };\n    }\n    // TF-IDF string to be indexed\n    getTfIdfChunk({ label, commandAlias, commandDescription }) {\n        let chunk = label;\n        if (commandAlias && commandAlias !== label) {\n            chunk += ` - ${commandAlias}`;\n        }\n        if (commandDescription && commandDescription.value !== label) {\n            // If the original is the same as the value, don't add it\n            chunk += ` - ${commandDescription.value === commandDescription.original ? commandDescription.value : `${commandDescription.value} (${commandDescription.original})`}`;\n        }\n        return chunk;\n    }\n};\nAbstractCommandsQuickAccessProvider.PREFIX = '>';\nAbstractCommandsQuickAccessProvider.TFIDF_THRESHOLD = 0.5;\nAbstractCommandsQuickAccessProvider.TFIDF_MAX_RESULTS = 5;\nAbstractCommandsQuickAccessProvider.WORD_FILTER = or(matchesPrefix, matchesWords, matchesContiguousSubString);\nAbstractCommandsQuickAccessProvider = AbstractCommandsQuickAccessProvider_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IKeybindingService),\n    __param(3, ICommandService),\n    __param(4, ITelemetryService),\n    __param(5, IDialogService)\n], AbstractCommandsQuickAccessProvider);\nexport { AbstractCommandsQuickAccessProvider };\nlet CommandsHistory = CommandsHistory_1 = class CommandsHistory extends Disposable {\n    constructor(storageService, configurationService, logService) {\n        super();\n        this.storageService = storageService;\n        this.configurationService = configurationService;\n        this.logService = logService;\n        this.configuredCommandsHistoryLength = 0;\n        this.updateConfiguration();\n        this.load();\n        this.registerListeners();\n    }\n    registerListeners() {\n        this._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n        this._register(this.storageService.onWillSaveState(e => {\n            if (e.reason === WillSaveStateReason.SHUTDOWN) {\n                // Commands history is very dynamic and so we limit impact\n                // on storage to only save on shutdown. This helps reduce\n                // the overhead of syncing this data across machines.\n                this.saveState();\n            }\n        }));\n    }\n    updateConfiguration(e) {\n        if (e && !e.affectsConfiguration('workbench.commandPalette.history')) {\n            return;\n        }\n        this.configuredCommandsHistoryLength = CommandsHistory_1.getConfiguredCommandHistoryLength(this.configurationService);\n        if (CommandsHistory_1.cache && CommandsHistory_1.cache.limit !== this.configuredCommandsHistoryLength) {\n            CommandsHistory_1.cache.limit = this.configuredCommandsHistoryLength;\n            CommandsHistory_1.hasChanges = true;\n        }\n    }\n    load() {\n        const raw = this.storageService.get(CommandsHistory_1.PREF_KEY_CACHE, 0 /* StorageScope.PROFILE */);\n        let serializedCache;\n        if (raw) {\n            try {\n                serializedCache = JSON.parse(raw);\n            }\n            catch (error) {\n                this.logService.error(`[CommandsHistory] invalid data: ${error}`);\n            }\n        }\n        const cache = CommandsHistory_1.cache = new LRUCache(this.configuredCommandsHistoryLength, 1);\n        if (serializedCache) {\n            let entries;\n            if (serializedCache.usesLRU) {\n                entries = serializedCache.entries;\n            }\n            else {\n                entries = serializedCache.entries.sort((a, b) => a.value - b.value);\n            }\n            entries.forEach(entry => cache.set(entry.key, entry.value));\n        }\n        CommandsHistory_1.counter = this.storageService.getNumber(CommandsHistory_1.PREF_KEY_COUNTER, 0 /* StorageScope.PROFILE */, CommandsHistory_1.counter);\n    }\n    push(commandId) {\n        if (!CommandsHistory_1.cache) {\n            return;\n        }\n        CommandsHistory_1.cache.set(commandId, CommandsHistory_1.counter++); // set counter to command\n        CommandsHistory_1.hasChanges = true;\n    }\n    peek(commandId) {\n        var _a;\n        return (_a = CommandsHistory_1.cache) === null || _a === void 0 ? void 0 : _a.peek(commandId);\n    }\n    saveState() {\n        if (!CommandsHistory_1.cache) {\n            return;\n        }\n        if (!CommandsHistory_1.hasChanges) {\n            return;\n        }\n        const serializedCache = { usesLRU: true, entries: [] };\n        CommandsHistory_1.cache.forEach((value, key) => serializedCache.entries.push({ key, value }));\n        this.storageService.store(CommandsHistory_1.PREF_KEY_CACHE, JSON.stringify(serializedCache), 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n        this.storageService.store(CommandsHistory_1.PREF_KEY_COUNTER, CommandsHistory_1.counter, 0 /* StorageScope.PROFILE */, 0 /* StorageTarget.USER */);\n        CommandsHistory_1.hasChanges = false;\n    }\n    static getConfiguredCommandHistoryLength(configurationService) {\n        var _a, _b;\n        const config = configurationService.getValue();\n        const configuredCommandHistoryLength = (_b = (_a = config.workbench) === null || _a === void 0 ? void 0 : _a.commandPalette) === null || _b === void 0 ? void 0 : _b.history;\n        if (typeof configuredCommandHistoryLength === 'number') {\n            return configuredCommandHistoryLength;\n        }\n        return CommandsHistory_1.DEFAULT_COMMANDS_HISTORY_LENGTH;\n    }\n};\nCommandsHistory.DEFAULT_COMMANDS_HISTORY_LENGTH = 50;\nCommandsHistory.PREF_KEY_CACHE = 'commandPalette.mru.cache';\nCommandsHistory.PREF_KEY_COUNTER = 'commandPalette.mru.counter';\nCommandsHistory.counter = 1;\nCommandsHistory.hasChanges = false;\nCommandsHistory = CommandsHistory_1 = __decorate([\n    __param(0, IStorageService),\n    __param(1, IConfigurationService),\n    __param(2, ILogService)\n], CommandsHistory);\nexport { CommandsHistory };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}