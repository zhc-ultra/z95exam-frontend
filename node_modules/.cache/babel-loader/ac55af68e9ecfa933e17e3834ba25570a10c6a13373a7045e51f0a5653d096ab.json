{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _objectSpread from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { equals } from '../../../common/arrays.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nfunction noCompress(element) {\n  var elements = [element.element];\n  var incompressible = element.incompressible || false;\n  return {\n    element: {\n      elements: elements,\n      incompressible: incompressible\n    },\n    children: Iterable.map(Iterable.from(element.children), noCompress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\n// Exported only for test reasons, do not use directly\nexport function compress(element) {\n  var elements = [element.element];\n  var incompressible = element.incompressible || false;\n  var childrenIterator;\n  var children;\n  while (true) {\n    var _Iterable$consume = Iterable.consume(Iterable.from(element.children), 2);\n    var _Iterable$consume2 = _slicedToArray(_Iterable$consume, 2);\n    children = _Iterable$consume2[0];\n    childrenIterator = _Iterable$consume2[1];\n    if (children.length !== 1) {\n      break;\n    }\n    if (children[0].incompressible) {\n      break;\n    }\n    element = children[0];\n    elements.push(element.element);\n  }\n  return {\n    element: {\n      elements: elements,\n      incompressible: incompressible\n    },\n    children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\nfunction _decompress(element) {\n  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var children;\n  if (index < element.element.elements.length - 1) {\n    children = [_decompress(element, index + 1)];\n  } else {\n    children = Iterable.map(Iterable.from(element.children), function (el) {\n      return _decompress(el, 0);\n    });\n  }\n  if (index === 0 && element.element.incompressible) {\n    return {\n      element: element.element.elements[index],\n      children: children,\n      incompressible: true,\n      collapsible: element.collapsible,\n      collapsed: element.collapsed\n    };\n  }\n  return {\n    element: element.element.elements[index],\n    children: children,\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\n// Exported only for test reasons, do not use directly\nexport function decompress(element) {\n  return _decompress(element, 0);\n}\nfunction splice(treeElement, element, children) {\n  if (treeElement.element === element) {\n    return _objectSpread(_objectSpread({}, treeElement), {}, {\n      children: children\n    });\n  }\n  return _objectSpread(_objectSpread({}, treeElement), {}, {\n    children: Iterable.map(Iterable.from(treeElement.children), function (e) {\n      return splice(e, element, children);\n    })\n  });\n}\nvar wrapIdentityProvider = function wrapIdentityProvider(base) {\n  return {\n    getId: function getId(node) {\n      return node.elements.map(function (e) {\n        return base.getId(e).toString();\n      }).join('\\0');\n    }\n  };\n};\n// Exported only for test reasons, do not use directly\nexport var CompressedObjectTreeModel = /*#__PURE__*/function () {\n  function CompressedObjectTreeModel(user, list) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, CompressedObjectTreeModel);\n    this.user = user;\n    this.rootRef = null;\n    this.nodes = new Map();\n    this.model = new ObjectTreeModel(user, list, options);\n    this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n    this.identityProvider = options.identityProvider;\n  }\n  return _createClass(CompressedObjectTreeModel, [{\n    key: \"onDidSplice\",\n    get: function get() {\n      return this.model.onDidSplice;\n    }\n  }, {\n    key: \"onDidChangeCollapseState\",\n    get: function get() {\n      return this.model.onDidChangeCollapseState;\n    }\n  }, {\n    key: \"onDidChangeRenderNodeCount\",\n    get: function get() {\n      return this.model.onDidChangeRenderNodeCount;\n    }\n  }, {\n    key: \"setChildren\",\n    value: function setChildren(element) {\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Iterable.empty();\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      // Diffs must be deep, since the compression can affect nested elements.\n      // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n      var diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n      if (element === null) {\n        var compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n        this._setChildren(null, compressedChildren, {\n          diffIdentityProvider: diffIdentityProvider,\n          diffDepth: Infinity\n        });\n        return;\n      }\n      var compressedNode = this.nodes.get(element);\n      if (!compressedNode) {\n        throw new TreeError(this.user, 'Unknown compressed tree node');\n      }\n      var node = this.model.getNode(compressedNode);\n      var compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n      var parent = this.model.getNode(compressedParentNode);\n      var decompressedElement = decompress(node);\n      var splicedElement = splice(decompressedElement, element, children);\n      var recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n      // If the recompressed node is identical to the original, just set its children.\n      // Saves work and churn diffing the parent element.\n      var elementComparator = options.diffIdentityProvider ? function (a, b) {\n        return options.diffIdentityProvider.getId(a) === options.diffIdentityProvider.getId(b);\n      } : undefined;\n      if (equals(recompressedElement.element.elements, node.element.elements, elementComparator)) {\n        this._setChildren(compressedNode, recompressedElement.children || Iterable.empty(), {\n          diffIdentityProvider: diffIdentityProvider,\n          diffDepth: 1\n        });\n        return;\n      }\n      var parentChildren = parent.children.map(function (child) {\n        return child === node ? recompressedElement : child;\n      });\n      this._setChildren(parent.element, parentChildren, {\n        diffIdentityProvider: diffIdentityProvider,\n        diffDepth: node.depth - parent.depth\n      });\n    }\n  }, {\n    key: \"isCompressionEnabled\",\n    value: function isCompressionEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"setCompressionEnabled\",\n    value: function setCompressionEnabled(enabled) {\n      if (enabled === this.enabled) {\n        return;\n      }\n      this.enabled = enabled;\n      var root = this.model.getNode();\n      var rootChildren = root.children;\n      var decompressedRootChildren = Iterable.map(rootChildren, decompress);\n      var recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n      // it should be safe to always use deep diff mode here if an identity\n      // provider is available, since we know the raw nodes are unchanged.\n      this._setChildren(null, recompressedRootChildren, {\n        diffIdentityProvider: this.identityProvider,\n        diffDepth: Infinity\n      });\n    }\n  }, {\n    key: \"_setChildren\",\n    value: function _setChildren(node, children, options) {\n      var _this = this;\n      var insertedElements = new Set();\n      var onDidCreateNode = function onDidCreateNode(node) {\n        var _iterator = _createForOfIteratorHelper(node.element.elements),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var element = _step.value;\n            insertedElements.add(element);\n            _this.nodes.set(element, node.element);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      };\n      var onDidDeleteNode = function onDidDeleteNode(node) {\n        var _iterator2 = _createForOfIteratorHelper(node.element.elements),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var element = _step2.value;\n            if (!insertedElements.has(element)) {\n              _this.nodes[\"delete\"](element);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      };\n      this.model.setChildren(node, children, _objectSpread(_objectSpread({}, options), {}, {\n        onDidCreateNode: onDidCreateNode,\n        onDidDeleteNode: onDidDeleteNode\n      }));\n    }\n  }, {\n    key: \"has\",\n    value: function has(element) {\n      return this.nodes.has(element);\n    }\n  }, {\n    key: \"getListIndex\",\n    value: function getListIndex(location) {\n      var node = this.getCompressedNode(location);\n      return this.model.getListIndex(node);\n    }\n  }, {\n    key: \"getListRenderCount\",\n    value: function getListRenderCount(location) {\n      var node = this.getCompressedNode(location);\n      return this.model.getListRenderCount(node);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(location) {\n      if (typeof location === 'undefined') {\n        return this.model.getNode();\n      }\n      var node = this.getCompressedNode(location);\n      return this.model.getNode(node);\n    }\n    // TODO: review this\n  }, {\n    key: \"getNodeLocation\",\n    value: function getNodeLocation(node) {\n      var compressedNode = this.model.getNodeLocation(node);\n      if (compressedNode === null) {\n        return null;\n      }\n      return compressedNode.elements[compressedNode.elements.length - 1];\n    }\n    // TODO: review this\n  }, {\n    key: \"getParentNodeLocation\",\n    value: function getParentNodeLocation(location) {\n      var compressedNode = this.getCompressedNode(location);\n      var parentNode = this.model.getParentNodeLocation(compressedNode);\n      if (parentNode === null) {\n        return null;\n      }\n      return parentNode.elements[parentNode.elements.length - 1];\n    }\n  }, {\n    key: \"getFirstElementChild\",\n    value: function getFirstElementChild(location) {\n      var compressedNode = this.getCompressedNode(location);\n      return this.model.getFirstElementChild(compressedNode);\n    }\n  }, {\n    key: \"isCollapsible\",\n    value: function isCollapsible(location) {\n      var compressedNode = this.getCompressedNode(location);\n      return this.model.isCollapsible(compressedNode);\n    }\n  }, {\n    key: \"setCollapsible\",\n    value: function setCollapsible(location, collapsible) {\n      var compressedNode = this.getCompressedNode(location);\n      return this.model.setCollapsible(compressedNode, collapsible);\n    }\n  }, {\n    key: \"isCollapsed\",\n    value: function isCollapsed(location) {\n      var compressedNode = this.getCompressedNode(location);\n      return this.model.isCollapsed(compressedNode);\n    }\n  }, {\n    key: \"setCollapsed\",\n    value: function setCollapsed(location, collapsed, recursive) {\n      var compressedNode = this.getCompressedNode(location);\n      return this.model.setCollapsed(compressedNode, collapsed, recursive);\n    }\n  }, {\n    key: \"expandTo\",\n    value: function expandTo(location) {\n      var compressedNode = this.getCompressedNode(location);\n      this.model.expandTo(compressedNode);\n    }\n  }, {\n    key: \"rerender\",\n    value: function rerender(location) {\n      var compressedNode = this.getCompressedNode(location);\n      this.model.rerender(compressedNode);\n    }\n  }, {\n    key: \"refilter\",\n    value: function refilter() {\n      this.model.refilter();\n    }\n  }, {\n    key: \"getCompressedNode\",\n    value: function getCompressedNode(element) {\n      if (element === null) {\n        return null;\n      }\n      var node = this.nodes.get(element);\n      if (!node) {\n        throw new TreeError(this.user, \"Tree element not found: \".concat(element));\n      }\n      return node;\n    }\n  }]);\n}();\nexport var DefaultElementMapper = function DefaultElementMapper(elements) {\n  return elements[elements.length - 1];\n};\nvar CompressedTreeNodeWrapper = /*#__PURE__*/function () {\n  function CompressedTreeNodeWrapper(unwrapper, node) {\n    _classCallCheck(this, CompressedTreeNodeWrapper);\n    this.unwrapper = unwrapper;\n    this.node = node;\n  }\n  return _createClass(CompressedTreeNodeWrapper, [{\n    key: \"element\",\n    get: function get() {\n      return this.node.element === null ? null : this.unwrapper(this.node.element);\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      var _this2 = this;\n      return this.node.children.map(function (node) {\n        return new CompressedTreeNodeWrapper(_this2.unwrapper, node);\n      });\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      return this.node.depth;\n    }\n  }, {\n    key: \"visibleChildrenCount\",\n    get: function get() {\n      return this.node.visibleChildrenCount;\n    }\n  }, {\n    key: \"visibleChildIndex\",\n    get: function get() {\n      return this.node.visibleChildIndex;\n    }\n  }, {\n    key: \"collapsible\",\n    get: function get() {\n      return this.node.collapsible;\n    }\n  }, {\n    key: \"collapsed\",\n    get: function get() {\n      return this.node.collapsed;\n    }\n  }, {\n    key: \"visible\",\n    get: function get() {\n      return this.node.visible;\n    }\n  }, {\n    key: \"filterData\",\n    get: function get() {\n      return this.node.filterData;\n    }\n  }]);\n}();\nfunction mapList(nodeMapper, list) {\n  return {\n    splice: function splice(start, deleteCount, toInsert) {\n      list.splice(start, deleteCount, toInsert.map(function (node) {\n        return nodeMapper.map(node);\n      }));\n    },\n    updateElementHeight: function updateElementHeight(index, height) {\n      list.updateElementHeight(index, height);\n    }\n  };\n}\nfunction mapOptions(compressedNodeUnwrapper, options) {\n  return _objectSpread(_objectSpread({}, options), {}, {\n    identityProvider: options.identityProvider && {\n      getId: function getId(node) {\n        return options.identityProvider.getId(compressedNodeUnwrapper(node));\n      }\n    },\n    sorter: options.sorter && {\n      compare: function compare(node, otherNode) {\n        return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n      }\n    },\n    filter: options.filter && {\n      filter: function filter(node, parentVisibility) {\n        return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n      }\n    }\n  });\n}\nexport var CompressibleObjectTreeModel = /*#__PURE__*/function () {\n  function CompressibleObjectTreeModel(user, list) {\n    var _this3 = this;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, CompressibleObjectTreeModel);\n    this.rootRef = null;\n    this.elementMapper = options.elementMapper || DefaultElementMapper;\n    var compressedNodeUnwrapper = function compressedNodeUnwrapper(node) {\n      return _this3.elementMapper(node.elements);\n    };\n    this.nodeMapper = new WeakMapper(function (node) {\n      return new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node);\n    });\n    this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n  }\n  return _createClass(CompressibleObjectTreeModel, [{\n    key: \"onDidSplice\",\n    get: function get() {\n      var _this4 = this;\n      return Event.map(this.model.onDidSplice, function (_ref) {\n        var insertedNodes = _ref.insertedNodes,\n          deletedNodes = _ref.deletedNodes;\n        return {\n          insertedNodes: insertedNodes.map(function (node) {\n            return _this4.nodeMapper.map(node);\n          }),\n          deletedNodes: deletedNodes.map(function (node) {\n            return _this4.nodeMapper.map(node);\n          })\n        };\n      });\n    }\n  }, {\n    key: \"onDidChangeCollapseState\",\n    get: function get() {\n      var _this5 = this;\n      return Event.map(this.model.onDidChangeCollapseState, function (_ref2) {\n        var node = _ref2.node,\n          deep = _ref2.deep;\n        return {\n          node: _this5.nodeMapper.map(node),\n          deep: deep\n        };\n      });\n    }\n  }, {\n    key: \"onDidChangeRenderNodeCount\",\n    get: function get() {\n      var _this6 = this;\n      return Event.map(this.model.onDidChangeRenderNodeCount, function (node) {\n        return _this6.nodeMapper.map(node);\n      });\n    }\n  }, {\n    key: \"setChildren\",\n    value: function setChildren(element) {\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Iterable.empty();\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.model.setChildren(element, children, options);\n    }\n  }, {\n    key: \"isCompressionEnabled\",\n    value: function isCompressionEnabled() {\n      return this.model.isCompressionEnabled();\n    }\n  }, {\n    key: \"setCompressionEnabled\",\n    value: function setCompressionEnabled(enabled) {\n      this.model.setCompressionEnabled(enabled);\n    }\n  }, {\n    key: \"has\",\n    value: function has(location) {\n      return this.model.has(location);\n    }\n  }, {\n    key: \"getListIndex\",\n    value: function getListIndex(location) {\n      return this.model.getListIndex(location);\n    }\n  }, {\n    key: \"getListRenderCount\",\n    value: function getListRenderCount(location) {\n      return this.model.getListRenderCount(location);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(location) {\n      return this.nodeMapper.map(this.model.getNode(location));\n    }\n  }, {\n    key: \"getNodeLocation\",\n    value: function getNodeLocation(node) {\n      return node.element;\n    }\n  }, {\n    key: \"getParentNodeLocation\",\n    value: function getParentNodeLocation(location) {\n      return this.model.getParentNodeLocation(location);\n    }\n  }, {\n    key: \"getFirstElementChild\",\n    value: function getFirstElementChild(location) {\n      var result = this.model.getFirstElementChild(location);\n      if (result === null || typeof result === 'undefined') {\n        return result;\n      }\n      return this.elementMapper(result.elements);\n    }\n  }, {\n    key: \"isCollapsible\",\n    value: function isCollapsible(location) {\n      return this.model.isCollapsible(location);\n    }\n  }, {\n    key: \"setCollapsible\",\n    value: function setCollapsible(location, collapsed) {\n      return this.model.setCollapsible(location, collapsed);\n    }\n  }, {\n    key: \"isCollapsed\",\n    value: function isCollapsed(location) {\n      return this.model.isCollapsed(location);\n    }\n  }, {\n    key: \"setCollapsed\",\n    value: function setCollapsed(location, collapsed, recursive) {\n      return this.model.setCollapsed(location, collapsed, recursive);\n    }\n  }, {\n    key: \"expandTo\",\n    value: function expandTo(location) {\n      return this.model.expandTo(location);\n    }\n  }, {\n    key: \"rerender\",\n    value: function rerender(location) {\n      return this.model.rerender(location);\n    }\n  }, {\n    key: \"refilter\",\n    value: function refilter() {\n      return this.model.refilter();\n    }\n  }, {\n    key: \"getCompressedTreeNode\",\n    value: function getCompressedTreeNode() {\n      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return this.model.getNode(location);\n    }\n  }]);\n}();","map":{"version":3,"names":["ObjectTreeModel","TreeError","WeakMapper","equals","Event","Iterable","noCompress","element","elements","incompressible","children","map","from","collapsible","collapsed","compress","childrenIterator","_Iterable$consume","consume","_Iterable$consume2","_slicedToArray","length","push","concat","_decompress","index","arguments","undefined","el","decompress","splice","treeElement","_objectSpread","e","wrapIdentityProvider","base","getId","node","toString","join","CompressedObjectTreeModel","user","list","options","_classCallCheck","rootRef","nodes","Map","model","enabled","compressionEnabled","identityProvider","_createClass","key","get","onDidSplice","onDidChangeCollapseState","onDidChangeRenderNodeCount","value","setChildren","empty","diffIdentityProvider","compressedChildren","_setChildren","diffDepth","Infinity","compressedNode","getNode","compressedParentNode","getParentNodeLocation","parent","decompressedElement","splicedElement","recompressedElement","elementComparator","a","b","parentChildren","child","depth","isCompressionEnabled","setCompressionEnabled","root","rootChildren","decompressedRootChildren","recompressedRootChildren","_this","insertedElements","Set","onDidCreateNode","_iterator","_createForOfIteratorHelper","_step","s","n","done","add","set","err","f","onDidDeleteNode","_iterator2","_step2","has","getListIndex","location","getCompressedNode","getListRenderCount","getNodeLocation","parentNode","getFirstElementChild","isCollapsible","setCollapsible","isCollapsed","setCollapsed","recursive","expandTo","rerender","refilter","DefaultElementMapper","CompressedTreeNodeWrapper","unwrapper","_this2","visibleChildrenCount","visibleChildIndex","visible","filterData","mapList","nodeMapper","start","deleteCount","toInsert","updateElementHeight","height","mapOptions","compressedNodeUnwrapper","sorter","compare","otherNode","filter","parentVisibility","CompressibleObjectTreeModel","_this3","elementMapper","_this4","_ref","insertedNodes","deletedNodes","_this5","_ref2","deep","_this6","result","getCompressedTreeNode"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/compressedObjectTreeModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { equals } from '../../../common/arrays.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nfunction noCompress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.from(element.children), noCompress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function compress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    let childrenIterator;\n    let children;\n    while (true) {\n        [children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n        if (children.length !== 1) {\n            break;\n        }\n        if (children[0].incompressible) {\n            break;\n        }\n        element = children[0];\n        elements.push(element.element);\n    }\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\nfunction _decompress(element, index = 0) {\n    let children;\n    if (index < element.element.elements.length - 1) {\n        children = [_decompress(element, index + 1)];\n    }\n    else {\n        children = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n    }\n    if (index === 0 && element.element.incompressible) {\n        return {\n            element: element.element.elements[index],\n            children,\n            incompressible: true,\n            collapsible: element.collapsible,\n            collapsed: element.collapsed\n        };\n    }\n    return {\n        element: element.element.elements[index],\n        children,\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function decompress(element) {\n    return _decompress(element, 0);\n}\nfunction splice(treeElement, element, children) {\n    if (treeElement.element === element) {\n        return { ...treeElement, children };\n    }\n    return { ...treeElement, children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children)) };\n}\nconst wrapIdentityProvider = (base) => ({\n    getId(node) {\n        return node.elements.map(e => base.getId(e).toString()).join('\\0');\n    }\n});\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel {\n    get onDidSplice() { return this.model.onDidSplice; }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get onDidChangeRenderNodeCount() { return this.model.onDidChangeRenderNodeCount; }\n    constructor(user, list, options = {}) {\n        this.user = user;\n        this.rootRef = null;\n        this.nodes = new Map();\n        this.model = new ObjectTreeModel(user, list, options);\n        this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n        this.identityProvider = options.identityProvider;\n    }\n    setChildren(element, children = Iterable.empty(), options) {\n        // Diffs must be deep, since the compression can affect nested elements.\n        // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n        const diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n        if (element === null) {\n            const compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n            this._setChildren(null, compressedChildren, { diffIdentityProvider, diffDepth: Infinity });\n            return;\n        }\n        const compressedNode = this.nodes.get(element);\n        if (!compressedNode) {\n            throw new TreeError(this.user, 'Unknown compressed tree node');\n        }\n        const node = this.model.getNode(compressedNode);\n        const compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n        const parent = this.model.getNode(compressedParentNode);\n        const decompressedElement = decompress(node);\n        const splicedElement = splice(decompressedElement, element, children);\n        const recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n        // If the recompressed node is identical to the original, just set its children.\n        // Saves work and churn diffing the parent element.\n        const elementComparator = options.diffIdentityProvider\n            ? ((a, b) => options.diffIdentityProvider.getId(a) === options.diffIdentityProvider.getId(b))\n            : undefined;\n        if (equals(recompressedElement.element.elements, node.element.elements, elementComparator)) {\n            this._setChildren(compressedNode, recompressedElement.children || Iterable.empty(), { diffIdentityProvider, diffDepth: 1 });\n            return;\n        }\n        const parentChildren = parent.children\n            .map(child => child === node ? recompressedElement : child);\n        this._setChildren(parent.element, parentChildren, {\n            diffIdentityProvider,\n            diffDepth: node.depth - parent.depth,\n        });\n    }\n    isCompressionEnabled() {\n        return this.enabled;\n    }\n    setCompressionEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n        this.enabled = enabled;\n        const root = this.model.getNode();\n        const rootChildren = root.children;\n        const decompressedRootChildren = Iterable.map(rootChildren, decompress);\n        const recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n        // it should be safe to always use deep diff mode here if an identity\n        // provider is available, since we know the raw nodes are unchanged.\n        this._setChildren(null, recompressedRootChildren, {\n            diffIdentityProvider: this.identityProvider,\n            diffDepth: Infinity,\n        });\n    }\n    _setChildren(node, children, options) {\n        const insertedElements = new Set();\n        const onDidCreateNode = (node) => {\n            for (const element of node.element.elements) {\n                insertedElements.add(element);\n                this.nodes.set(element, node.element);\n            }\n        };\n        const onDidDeleteNode = (node) => {\n            for (const element of node.element.elements) {\n                if (!insertedElements.has(element)) {\n                    this.nodes.delete(element);\n                }\n            }\n        };\n        this.model.setChildren(node, children, { ...options, onDidCreateNode, onDidDeleteNode });\n    }\n    has(element) {\n        return this.nodes.has(element);\n    }\n    getListIndex(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListIndex(node);\n    }\n    getListRenderCount(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListRenderCount(node);\n    }\n    getNode(location) {\n        if (typeof location === 'undefined') {\n            return this.model.getNode();\n        }\n        const node = this.getCompressedNode(location);\n        return this.model.getNode(node);\n    }\n    // TODO: review this\n    getNodeLocation(node) {\n        const compressedNode = this.model.getNodeLocation(node);\n        if (compressedNode === null) {\n            return null;\n        }\n        return compressedNode.elements[compressedNode.elements.length - 1];\n    }\n    // TODO: review this\n    getParentNodeLocation(location) {\n        const compressedNode = this.getCompressedNode(location);\n        const parentNode = this.model.getParentNodeLocation(compressedNode);\n        if (parentNode === null) {\n            return null;\n        }\n        return parentNode.elements[parentNode.elements.length - 1];\n    }\n    getFirstElementChild(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.getFirstElementChild(compressedNode);\n    }\n    isCollapsible(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsible(compressedNode);\n    }\n    setCollapsible(location, collapsible) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsible(compressedNode, collapsible);\n    }\n    isCollapsed(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsed(compressedNode);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsed(compressedNode, collapsed, recursive);\n    }\n    expandTo(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.expandTo(compressedNode);\n    }\n    rerender(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.rerender(compressedNode);\n    }\n    refilter() {\n        this.model.refilter();\n    }\n    getCompressedNode(element) {\n        if (element === null) {\n            return null;\n        }\n        const node = this.nodes.get(element);\n        if (!node) {\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\n        }\n        return node;\n    }\n}\nexport const DefaultElementMapper = elements => elements[elements.length - 1];\nclass CompressedTreeNodeWrapper {\n    get element() { return this.node.element === null ? null : this.unwrapper(this.node.element); }\n    get children() { return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(unwrapper, node) {\n        this.unwrapper = unwrapper;\n        this.node = node;\n    }\n}\nfunction mapList(nodeMapper, list) {\n    return {\n        splice(start, deleteCount, toInsert) {\n            list.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)));\n        },\n        updateElementHeight(index, height) {\n            list.updateElementHeight(index, height);\n        }\n    };\n}\nfunction mapOptions(compressedNodeUnwrapper, options) {\n    return {\n        ...options,\n        identityProvider: options.identityProvider && {\n            getId(node) {\n                return options.identityProvider.getId(compressedNodeUnwrapper(node));\n            }\n        },\n        sorter: options.sorter && {\n            compare(node, otherNode) {\n                return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n            }\n        },\n        filter: options.filter && {\n            filter(node, parentVisibility) {\n                return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n            }\n        }\n    };\n}\nexport class CompressibleObjectTreeModel {\n    get onDidSplice() {\n        return Event.map(this.model.onDidSplice, ({ insertedNodes, deletedNodes }) => ({\n            insertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n            deletedNodes: deletedNodes.map(node => this.nodeMapper.map(node)),\n        }));\n    }\n    get onDidChangeCollapseState() {\n        return Event.map(this.model.onDidChangeCollapseState, ({ node, deep }) => ({\n            node: this.nodeMapper.map(node),\n            deep\n        }));\n    }\n    get onDidChangeRenderNodeCount() {\n        return Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n    }\n    constructor(user, list, options = {}) {\n        this.rootRef = null;\n        this.elementMapper = options.elementMapper || DefaultElementMapper;\n        const compressedNodeUnwrapper = node => this.elementMapper(node.elements);\n        this.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n        this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n    }\n    setChildren(element, children = Iterable.empty(), options = {}) {\n        this.model.setChildren(element, children, options);\n    }\n    isCompressionEnabled() {\n        return this.model.isCompressionEnabled();\n    }\n    setCompressionEnabled(enabled) {\n        this.model.setCompressionEnabled(enabled);\n    }\n    has(location) {\n        return this.model.has(location);\n    }\n    getListIndex(location) {\n        return this.model.getListIndex(location);\n    }\n    getListRenderCount(location) {\n        return this.model.getListRenderCount(location);\n    }\n    getNode(location) {\n        return this.nodeMapper.map(this.model.getNode(location));\n    }\n    getNodeLocation(node) {\n        return node.element;\n    }\n    getParentNodeLocation(location) {\n        return this.model.getParentNodeLocation(location);\n    }\n    getFirstElementChild(location) {\n        const result = this.model.getFirstElementChild(location);\n        if (result === null || typeof result === 'undefined') {\n            return result;\n        }\n        return this.elementMapper(result.elements);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsed) {\n        return this.model.setCollapsible(location, collapsed);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        return this.model.setCollapsed(location, collapsed, recursive);\n    }\n    expandTo(location) {\n        return this.model.expandTo(location);\n    }\n    rerender(location) {\n        return this.model.rerender(location);\n    }\n    refilter() {\n        return this.model.refilter();\n    }\n    getCompressedTreeNode(location = null) {\n        return this.model.getNode(location);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}