{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _get from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.values.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GlyphMarginLane } from '../../../common/model.js';\n/**\n * Represents a decoration that should be shown along the lines from `startLineNumber` to `endLineNumber`.\n * This can end up producing multiple `LineDecorationToRender`.\n */\nexport var DecorationToRender = /*#__PURE__*/_createClass(function DecorationToRender(startLineNumber, endLineNumber, className, tooltip, zIndex) {\n  _classCallCheck(this, DecorationToRender);\n  this.startLineNumber = startLineNumber;\n  this.endLineNumber = endLineNumber;\n  this.className = className;\n  this.tooltip = tooltip;\n  this._decorationToRenderBrand = undefined;\n  this.zIndex = zIndex !== null && zIndex !== void 0 ? zIndex : 0;\n});\n/**\n * A decoration that should be shown along a line.\n */\nexport var LineDecorationToRender = /*#__PURE__*/_createClass(function LineDecorationToRender(className, zIndex, tooltip) {\n  _classCallCheck(this, LineDecorationToRender);\n  this.className = className;\n  this.zIndex = zIndex;\n  this.tooltip = tooltip;\n});\n/**\n * Decorations to render on a visible line.\n */\nexport var VisibleLineDecorationsToRender = /*#__PURE__*/function () {\n  function VisibleLineDecorationsToRender() {\n    _classCallCheck(this, VisibleLineDecorationsToRender);\n    this.decorations = [];\n  }\n  return _createClass(VisibleLineDecorationsToRender, [{\n    key: \"add\",\n    value: function add(decoration) {\n      this.decorations.push(decoration);\n    }\n  }, {\n    key: \"getDecorations\",\n    value: function getDecorations() {\n      return this.decorations;\n    }\n  }]);\n}();\nexport var DedupOverlay = /*#__PURE__*/function (_DynamicViewOverlay) {\n  function DedupOverlay() {\n    _classCallCheck(this, DedupOverlay);\n    return _callSuper(this, DedupOverlay, arguments);\n  }\n  _inherits(DedupOverlay, _DynamicViewOverlay);\n  return _createClass(DedupOverlay, [{\n    key: \"_render\",\n    value:\n    /**\n     * Returns an array with an element for each visible line number.\n     */\n    function _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n      var output = [];\n      for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n        var lineIndex = lineNumber - visibleStartLineNumber;\n        output[lineIndex] = new VisibleLineDecorationsToRender();\n      }\n      if (decorations.length === 0) {\n        return output;\n      }\n      // Sort decorations by className, then by startLineNumber and then by endLineNumber\n      decorations.sort(function (a, b) {\n        if (a.className === b.className) {\n          if (a.startLineNumber === b.startLineNumber) {\n            return a.endLineNumber - b.endLineNumber;\n          }\n          return a.startLineNumber - b.startLineNumber;\n        }\n        return a.className < b.className ? -1 : 1;\n      });\n      var prevClassName = null;\n      var prevEndLineIndex = 0;\n      for (var i = 0, len = decorations.length; i < len; i++) {\n        var d = decorations[i];\n        var className = d.className;\n        var zIndex = d.zIndex;\n        var startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n        var endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n        if (prevClassName === className) {\n          // Here we avoid rendering the same className multiple times on the same line\n          startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n          prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n        } else {\n          prevClassName = className;\n          prevEndLineIndex = endLineIndex;\n        }\n        for (var _i = startLineIndex; _i <= prevEndLineIndex; _i++) {\n          output[_i].add(new LineDecorationToRender(className, zIndex, d.tooltip));\n        }\n      }\n      return output;\n    }\n  }]);\n}(DynamicViewOverlay);\nexport var GlyphMarginWidgets = /*#__PURE__*/function (_ViewPart) {\n  function GlyphMarginWidgets(context) {\n    var _this;\n    _classCallCheck(this, GlyphMarginWidgets);\n    _this = _callSuper(this, GlyphMarginWidgets, [context]);\n    _this._widgets = {};\n    _this._context = context;\n    var options = _this._context.configuration.options;\n    var layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n    _this.domNode = createFastDomNode(document.createElement('div'));\n    _this.domNode.setClassName('glyph-margin-widgets');\n    _this.domNode.setPosition('absolute');\n    _this.domNode.setTop(0);\n    _this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n    _this._glyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n    _this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n    _this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n    _this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n    _this._managedDomNodes = [];\n    _this._decorationGlyphsToRender = [];\n    return _this;\n  }\n  _inherits(GlyphMarginWidgets, _ViewPart);\n  return _createClass(GlyphMarginWidgets, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._managedDomNodes = [];\n      this._decorationGlyphsToRender = [];\n      this._widgets = {};\n      _get(_getPrototypeOf(GlyphMarginWidgets.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"getWidgets\",\n    value: function getWidgets() {\n      return Object.values(this._widgets);\n    }\n    // --- begin event handlers\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      var layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n      this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n      this._glyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n      this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n      this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n      this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n      return true;\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollTopChanged;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    }\n    // --- end event handlers\n    // --- begin widget management\n  }, {\n    key: \"addWidget\",\n    value: function addWidget(widget) {\n      var domNode = createFastDomNode(widget.getDomNode());\n      this._widgets[widget.getId()] = {\n        widget: widget,\n        preference: widget.getPosition(),\n        domNode: domNode,\n        renderInfo: null\n      };\n      domNode.setPosition('absolute');\n      domNode.setDisplay('none');\n      domNode.setAttribute('widgetId', widget.getId());\n      this.domNode.appendChild(domNode);\n      this.setShouldRender();\n    }\n  }, {\n    key: \"setWidgetPosition\",\n    value: function setWidgetPosition(widget, preference) {\n      var myWidget = this._widgets[widget.getId()];\n      if (myWidget.preference.lane === preference.lane && myWidget.preference.zIndex === preference.zIndex && Range.equalsRange(myWidget.preference.range, preference.range)) {\n        return false;\n      }\n      myWidget.preference = preference;\n      this.setShouldRender();\n      return true;\n    }\n  }, {\n    key: \"removeWidget\",\n    value: function removeWidget(widget) {\n      var _a;\n      var widgetId = widget.getId();\n      if (this._widgets[widgetId]) {\n        var widgetData = this._widgets[widgetId];\n        var domNode = widgetData.domNode.domNode;\n        delete this._widgets[widgetId];\n        (_a = domNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(domNode);\n        this.setShouldRender();\n      }\n    }\n    // --- end widget management\n  }, {\n    key: \"_collectDecorationBasedGlyphRenderRequest\",\n    value: function _collectDecorationBasedGlyphRenderRequest(ctx, requests) {\n      var _a, _b, _c;\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n      var decorations = ctx.getDecorationsInViewport();\n      var _iterator = _createForOfIteratorHelper(decorations),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var d = _step.value;\n          var glyphMarginClassName = d.options.glyphMarginClassName;\n          if (!glyphMarginClassName) {\n            continue;\n          }\n          var startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n          var endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n          var lane = (_b = (_a = d.options.glyphMargin) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : GlyphMarginLane.Center;\n          var zIndex = (_c = d.options.zIndex) !== null && _c !== void 0 ? _c : 0;\n          for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            var modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, 0));\n            var laneIndex = this._context.viewModel.glyphLanes.getLanesAtLine(modelPosition.lineNumber).indexOf(lane);\n            requests.push(new DecorationBasedGlyphRenderRequest(lineNumber, laneIndex, zIndex, glyphMarginClassName));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_collectWidgetBasedGlyphRenderRequest\",\n    value: function _collectWidgetBasedGlyphRenderRequest(ctx, requests) {\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n      for (var _i2 = 0, _Object$values = Object.values(this._widgets); _i2 < _Object$values.length; _i2++) {\n        var widget = _Object$values[_i2];\n        var range = widget.preference.range;\n        var _this$_context$viewMo = this._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(Range.lift(range)),\n          startLineNumber = _this$_context$viewMo.startLineNumber,\n          endLineNumber = _this$_context$viewMo.endLineNumber;\n        if (!startLineNumber || !endLineNumber || endLineNumber < visibleStartLineNumber || startLineNumber > visibleEndLineNumber) {\n          // The widget is not in the viewport\n          continue;\n        }\n        // The widget is in the viewport, find a good line for it\n        var widgetLineNumber = Math.max(startLineNumber, visibleStartLineNumber);\n        var modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(widgetLineNumber, 0));\n        var laneIndex = this._context.viewModel.glyphLanes.getLanesAtLine(modelPosition.lineNumber).indexOf(widget.preference.lane);\n        requests.push(new WidgetBasedGlyphRenderRequest(widgetLineNumber, laneIndex, widget.preference.zIndex, widget));\n      }\n    }\n  }, {\n    key: \"_collectSortedGlyphRenderRequests\",\n    value: function _collectSortedGlyphRenderRequests(ctx) {\n      var requests = [];\n      this._collectDecorationBasedGlyphRenderRequest(ctx, requests);\n      this._collectWidgetBasedGlyphRenderRequest(ctx, requests);\n      // sort requests by lineNumber ASC, lane  ASC, zIndex DESC, type DESC (widgets first), className ASC\n      // don't change this sort unless you understand `prepareRender` below.\n      requests.sort(function (a, b) {\n        if (a.lineNumber === b.lineNumber) {\n          if (a.laneIndex === b.laneIndex) {\n            if (a.zIndex === b.zIndex) {\n              if (b.type === a.type) {\n                if (a.type === 0 /* GlyphRenderRequestType.Decoration */ && b.type === 0 /* GlyphRenderRequestType.Decoration */) {\n                  return a.className < b.className ? -1 : 1;\n                }\n                return 0;\n              }\n              return b.type - a.type;\n            }\n            return b.zIndex - a.zIndex;\n          }\n          return a.laneIndex - b.laneIndex;\n        }\n        return a.lineNumber - b.lineNumber;\n      });\n      return requests;\n    }\n    /**\n     * Will store render information in each widget's renderInfo and in `_decorationGlyphsToRender`.\n     */\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      if (!this._glyphMargin) {\n        this._decorationGlyphsToRender = [];\n        return;\n      }\n      for (var _i3 = 0, _Object$values2 = Object.values(this._widgets); _i3 < _Object$values2.length; _i3++) {\n        var widget = _Object$values2[_i3];\n        widget.renderInfo = null;\n      }\n      var requests = new ArrayQueue(this._collectSortedGlyphRenderRequests(ctx));\n      var decorationGlyphsToRender = [];\n      var _loop = function _loop() {\n          var first = requests.peek();\n          if (!first) {\n            // not possible\n            return 0; // break\n          }\n          // Requests are sorted by lineNumber and lane, so we read all requests for this particular location\n          var requestsAtLocation = requests.takeWhile(function (el) {\n            return el.lineNumber === first.lineNumber && el.laneIndex === first.laneIndex;\n          });\n          if (!requestsAtLocation || requestsAtLocation.length === 0) {\n            // not possible\n            return 0; // break\n          }\n          var winner = requestsAtLocation[0];\n          if (winner.type === 0 /* GlyphRenderRequestType.Decoration */) {\n            // combine all decorations with the same z-index\n            var classNames = [];\n            // requests are sorted by zIndex, type, and className so we can dedup className by looking at the previous one\n            var _iterator2 = _createForOfIteratorHelper(requestsAtLocation),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var request = _step2.value;\n                if (request.zIndex !== winner.zIndex || request.type !== winner.type) {\n                  break;\n                }\n                if (classNames.length === 0 || classNames[classNames.length - 1] !== request.className) {\n                  classNames.push(request.className);\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            decorationGlyphsToRender.push(winner.accept(classNames.join(' '))); // TODO@joyceerhl Implement overflow for remaining decorations\n          } else {\n            // widgets cannot be combined\n            winner.widget.renderInfo = {\n              lineNumber: winner.lineNumber,\n              laneIndex: winner.laneIndex\n            };\n          }\n        },\n        _ret;\n      while (requests.length > 0) {\n        _ret = _loop();\n        if (_ret === 0) break;\n      }\n      this._decorationGlyphsToRender = decorationGlyphsToRender;\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      if (!this._glyphMargin) {\n        for (var _i4 = 0, _Object$values3 = Object.values(this._widgets); _i4 < _Object$values3.length; _i4++) {\n          var widget = _Object$values3[_i4];\n          widget.domNode.setDisplay('none');\n        }\n        while (this._managedDomNodes.length > 0) {\n          var domNode = this._managedDomNodes.pop();\n          domNode === null || domNode === void 0 ? void 0 : domNode.domNode.remove();\n        }\n        return;\n      }\n      var width = Math.round(this._glyphMarginWidth / this._glyphMarginDecorationLaneCount);\n      // Render widgets\n      for (var _i5 = 0, _Object$values4 = Object.values(this._widgets); _i5 < _Object$values4.length; _i5++) {\n        var _widget = _Object$values4[_i5];\n        if (!_widget.renderInfo) {\n          // this widget is not visible\n          _widget.domNode.setDisplay('none');\n        } else {\n          var top = ctx.viewportData.relativeVerticalOffset[_widget.renderInfo.lineNumber - ctx.viewportData.startLineNumber];\n          var left = this._glyphMarginLeft + _widget.renderInfo.laneIndex * this._lineHeight;\n          _widget.domNode.setDisplay('block');\n          _widget.domNode.setTop(top);\n          _widget.domNode.setLeft(left);\n          _widget.domNode.setWidth(width);\n          _widget.domNode.setHeight(this._lineHeight);\n        }\n      }\n      // Render decorations, reusing previous dom nodes as possible\n      for (var i = 0; i < this._decorationGlyphsToRender.length; i++) {\n        var dec = this._decorationGlyphsToRender[i];\n        var _top = ctx.viewportData.relativeVerticalOffset[dec.lineNumber - ctx.viewportData.startLineNumber];\n        var _left = this._glyphMarginLeft + dec.laneIndex * this._lineHeight;\n        var _domNode = void 0;\n        if (i < this._managedDomNodes.length) {\n          _domNode = this._managedDomNodes[i];\n        } else {\n          _domNode = createFastDomNode(document.createElement('div'));\n          this._managedDomNodes.push(_domNode);\n          this.domNode.appendChild(_domNode);\n        }\n        _domNode.setClassName(\"cgmr codicon \" + dec.combinedClassName);\n        _domNode.setPosition(\"absolute\");\n        _domNode.setTop(_top);\n        _domNode.setLeft(_left);\n        _domNode.setWidth(width);\n        _domNode.setHeight(this._lineHeight);\n      }\n      // remove extra dom nodes\n      while (this._managedDomNodes.length > this._decorationGlyphsToRender.length) {\n        var _domNode2 = this._managedDomNodes.pop();\n        _domNode2 === null || _domNode2 === void 0 ? void 0 : _domNode2.domNode.remove();\n      }\n    }\n  }]);\n}(ViewPart);\n/**\n * A request to render a decoration in the glyph margin at a certain location.\n */\nvar DecorationBasedGlyphRenderRequest = /*#__PURE__*/function () {\n  function DecorationBasedGlyphRenderRequest(lineNumber, laneIndex, zIndex, className) {\n    _classCallCheck(this, DecorationBasedGlyphRenderRequest);\n    this.lineNumber = lineNumber;\n    this.laneIndex = laneIndex;\n    this.zIndex = zIndex;\n    this.className = className;\n    this.type = 0 /* GlyphRenderRequestType.Decoration */;\n  }\n  return _createClass(DecorationBasedGlyphRenderRequest, [{\n    key: \"accept\",\n    value: function accept(combinedClassName) {\n      return new DecorationBasedGlyph(this.lineNumber, this.laneIndex, combinedClassName);\n    }\n  }]);\n}();\n/**\n * A request to render a widget in the glyph margin at a certain location.\n */\nvar WidgetBasedGlyphRenderRequest = /*#__PURE__*/_createClass(function WidgetBasedGlyphRenderRequest(lineNumber, laneIndex, zIndex, widget) {\n  _classCallCheck(this, WidgetBasedGlyphRenderRequest);\n  this.lineNumber = lineNumber;\n  this.laneIndex = laneIndex;\n  this.zIndex = zIndex;\n  this.widget = widget;\n  this.type = 1 /* GlyphRenderRequestType.Widget */;\n});\nvar DecorationBasedGlyph = /*#__PURE__*/_createClass(function DecorationBasedGlyph(lineNumber, laneIndex, combinedClassName) {\n  _classCallCheck(this, DecorationBasedGlyph);\n  this.lineNumber = lineNumber;\n  this.laneIndex = laneIndex;\n  this.combinedClassName = combinedClassName;\n});","map":{"version":3,"names":["createFastDomNode","ArrayQueue","DynamicViewOverlay","ViewPart","Position","Range","GlyphMarginLane","DecorationToRender","_createClass","startLineNumber","endLineNumber","className","tooltip","zIndex","_classCallCheck","_decorationToRenderBrand","undefined","LineDecorationToRender","VisibleLineDecorationsToRender","decorations","key","value","add","decoration","push","getDecorations","DedupOverlay","_DynamicViewOverlay","_callSuper","arguments","_inherits","_render","visibleStartLineNumber","visibleEndLineNumber","output","lineNumber","lineIndex","length","sort","a","b","prevClassName","prevEndLineIndex","i","len","d","startLineIndex","Math","max","endLineIndex","min","GlyphMarginWidgets","_ViewPart","context","_this","_widgets","_context","options","configuration","layoutInfo","get","domNode","document","createElement","setClassName","setPosition","setTop","_lineHeight","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","_glyphMarginDecorationLaneCount","glyphMarginDecorationLaneCount","_managedDomNodes","_decorationGlyphsToRender","dispose","_get","_getPrototypeOf","prototype","call","getWidgets","Object","values","onConfigurationChanged","e","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","addWidget","widget","getDomNode","getId","preference","getPosition","renderInfo","setDisplay","setAttribute","appendChild","setShouldRender","setWidgetPosition","myWidget","lane","equalsRange","range","removeWidget","_a","widgetId","widgetData","parentNode","removeChild","_collectDecorationBasedGlyphRenderRequest","ctx","requests","_b","_c","visibleRange","getDecorationsInViewport","_iterator","_createForOfIteratorHelper","_step","s","n","done","glyphMarginClassName","glyphMargin","position","Center","modelPosition","viewModel","coordinatesConverter","convertViewPositionToModelPosition","laneIndex","glyphLanes","getLanesAtLine","indexOf","DecorationBasedGlyphRenderRequest","err","f","_collectWidgetBasedGlyphRenderRequest","_i2","_Object$values","_this$_context$viewMo","convertModelRangeToViewRange","lift","widgetLineNumber","WidgetBasedGlyphRenderRequest","_collectSortedGlyphRenderRequests","type","prepareRender","_i3","_Object$values2","decorationGlyphsToRender","_loop","first","peek","requestsAtLocation","takeWhile","el","winner","classNames","_iterator2","_step2","request","accept","join","_ret","render","_i4","_Object$values3","pop","remove","width","round","_i5","_Object$values4","top","viewportData","relativeVerticalOffset","left","setLeft","setWidth","setHeight","dec","combinedClassName","DecorationBasedGlyph"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ArrayQueue } from '../../../../base/common/arrays.js';\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { GlyphMarginLane } from '../../../common/model.js';\n/**\n * Represents a decoration that should be shown along the lines from `startLineNumber` to `endLineNumber`.\n * This can end up producing multiple `LineDecorationToRender`.\n */\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className, tooltip, zIndex) {\n        this.startLineNumber = startLineNumber;\n        this.endLineNumber = endLineNumber;\n        this.className = className;\n        this.tooltip = tooltip;\n        this._decorationToRenderBrand = undefined;\n        this.zIndex = zIndex !== null && zIndex !== void 0 ? zIndex : 0;\n    }\n}\n/**\n * A decoration that should be shown along a line.\n */\nexport class LineDecorationToRender {\n    constructor(className, zIndex, tooltip) {\n        this.className = className;\n        this.zIndex = zIndex;\n        this.tooltip = tooltip;\n    }\n}\n/**\n * Decorations to render on a visible line.\n */\nexport class VisibleLineDecorationsToRender {\n    constructor() {\n        this.decorations = [];\n    }\n    add(decoration) {\n        this.decorations.push(decoration);\n    }\n    getDecorations() {\n        return this.decorations;\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    /**\n     * Returns an array with an element for each visible line number.\n     */\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = new VisibleLineDecorationsToRender();\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        // Sort decorations by className, then by startLineNumber and then by endLineNumber\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            const zIndex = d.zIndex;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                // Here we avoid rendering the same className multiple times on the same line\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].add(new LineDecorationToRender(className, zIndex, d.tooltip));\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginWidgets extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._widgets = {};\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this.domNode = createFastDomNode(document.createElement('div'));\n        this.domNode.setClassName('glyph-margin-widgets');\n        this.domNode.setPosition('absolute');\n        this.domNode.setTop(0);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n        this._managedDomNodes = [];\n        this._decorationGlyphsToRender = [];\n    }\n    dispose() {\n        this._managedDomNodes = [];\n        this._decorationGlyphsToRender = [];\n        this._widgets = {};\n        super.dispose();\n    }\n    getWidgets() {\n        return Object.values(this._widgets);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(57 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // --- begin widget management\n    addWidget(widget) {\n        const domNode = createFastDomNode(widget.getDomNode());\n        this._widgets[widget.getId()] = {\n            widget: widget,\n            preference: widget.getPosition(),\n            domNode: domNode,\n            renderInfo: null\n        };\n        domNode.setPosition('absolute');\n        domNode.setDisplay('none');\n        domNode.setAttribute('widgetId', widget.getId());\n        this.domNode.appendChild(domNode);\n        this.setShouldRender();\n    }\n    setWidgetPosition(widget, preference) {\n        const myWidget = this._widgets[widget.getId()];\n        if (myWidget.preference.lane === preference.lane\n            && myWidget.preference.zIndex === preference.zIndex\n            && Range.equalsRange(myWidget.preference.range, preference.range)) {\n            return false;\n        }\n        myWidget.preference = preference;\n        this.setShouldRender();\n        return true;\n    }\n    removeWidget(widget) {\n        var _a;\n        const widgetId = widget.getId();\n        if (this._widgets[widgetId]) {\n            const widgetData = this._widgets[widgetId];\n            const domNode = widgetData.domNode.domNode;\n            delete this._widgets[widgetId];\n            (_a = domNode.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(domNode);\n            this.setShouldRender();\n        }\n    }\n    // --- end widget management\n    _collectDecorationBasedGlyphRenderRequest(ctx, requests) {\n        var _a, _b, _c;\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const decorations = ctx.getDecorationsInViewport();\n        for (const d of decorations) {\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            if (!glyphMarginClassName) {\n                continue;\n            }\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            const lane = (_b = (_a = d.options.glyphMargin) === null || _a === void 0 ? void 0 : _a.position) !== null && _b !== void 0 ? _b : GlyphMarginLane.Center;\n            const zIndex = (_c = d.options.zIndex) !== null && _c !== void 0 ? _c : 0;\n            for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n                const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, 0));\n                const laneIndex = this._context.viewModel.glyphLanes.getLanesAtLine(modelPosition.lineNumber).indexOf(lane);\n                requests.push(new DecorationBasedGlyphRenderRequest(lineNumber, laneIndex, zIndex, glyphMarginClassName));\n            }\n        }\n    }\n    _collectWidgetBasedGlyphRenderRequest(ctx, requests) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (const widget of Object.values(this._widgets)) {\n            const range = widget.preference.range;\n            const { startLineNumber, endLineNumber } = this._context.viewModel.coordinatesConverter.convertModelRangeToViewRange(Range.lift(range));\n            if (!startLineNumber || !endLineNumber || endLineNumber < visibleStartLineNumber || startLineNumber > visibleEndLineNumber) {\n                // The widget is not in the viewport\n                continue;\n            }\n            // The widget is in the viewport, find a good line for it\n            const widgetLineNumber = Math.max(startLineNumber, visibleStartLineNumber);\n            const modelPosition = this._context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(widgetLineNumber, 0));\n            const laneIndex = this._context.viewModel.glyphLanes.getLanesAtLine(modelPosition.lineNumber).indexOf(widget.preference.lane);\n            requests.push(new WidgetBasedGlyphRenderRequest(widgetLineNumber, laneIndex, widget.preference.zIndex, widget));\n        }\n    }\n    _collectSortedGlyphRenderRequests(ctx) {\n        const requests = [];\n        this._collectDecorationBasedGlyphRenderRequest(ctx, requests);\n        this._collectWidgetBasedGlyphRenderRequest(ctx, requests);\n        // sort requests by lineNumber ASC, lane  ASC, zIndex DESC, type DESC (widgets first), className ASC\n        // don't change this sort unless you understand `prepareRender` below.\n        requests.sort((a, b) => {\n            if (a.lineNumber === b.lineNumber) {\n                if (a.laneIndex === b.laneIndex) {\n                    if (a.zIndex === b.zIndex) {\n                        if (b.type === a.type) {\n                            if (a.type === 0 /* GlyphRenderRequestType.Decoration */ && b.type === 0 /* GlyphRenderRequestType.Decoration */) {\n                                return (a.className < b.className ? -1 : 1);\n                            }\n                            return 0;\n                        }\n                        return b.type - a.type;\n                    }\n                    return b.zIndex - a.zIndex;\n                }\n                return a.laneIndex - b.laneIndex;\n            }\n            return a.lineNumber - b.lineNumber;\n        });\n        return requests;\n    }\n    /**\n     * Will store render information in each widget's renderInfo and in `_decorationGlyphsToRender`.\n     */\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._decorationGlyphsToRender = [];\n            return;\n        }\n        for (const widget of Object.values(this._widgets)) {\n            widget.renderInfo = null;\n        }\n        const requests = new ArrayQueue(this._collectSortedGlyphRenderRequests(ctx));\n        const decorationGlyphsToRender = [];\n        while (requests.length > 0) {\n            const first = requests.peek();\n            if (!first) {\n                // not possible\n                break;\n            }\n            // Requests are sorted by lineNumber and lane, so we read all requests for this particular location\n            const requestsAtLocation = requests.takeWhile((el) => el.lineNumber === first.lineNumber && el.laneIndex === first.laneIndex);\n            if (!requestsAtLocation || requestsAtLocation.length === 0) {\n                // not possible\n                break;\n            }\n            const winner = requestsAtLocation[0];\n            if (winner.type === 0 /* GlyphRenderRequestType.Decoration */) {\n                // combine all decorations with the same z-index\n                const classNames = [];\n                // requests are sorted by zIndex, type, and className so we can dedup className by looking at the previous one\n                for (const request of requestsAtLocation) {\n                    if (request.zIndex !== winner.zIndex || request.type !== winner.type) {\n                        break;\n                    }\n                    if (classNames.length === 0 || classNames[classNames.length - 1] !== request.className) {\n                        classNames.push(request.className);\n                    }\n                }\n                decorationGlyphsToRender.push(winner.accept(classNames.join(' '))); // TODO@joyceerhl Implement overflow for remaining decorations\n            }\n            else {\n                // widgets cannot be combined\n                winner.widget.renderInfo = {\n                    lineNumber: winner.lineNumber,\n                    laneIndex: winner.laneIndex,\n                };\n            }\n        }\n        this._decorationGlyphsToRender = decorationGlyphsToRender;\n    }\n    render(ctx) {\n        if (!this._glyphMargin) {\n            for (const widget of Object.values(this._widgets)) {\n                widget.domNode.setDisplay('none');\n            }\n            while (this._managedDomNodes.length > 0) {\n                const domNode = this._managedDomNodes.pop();\n                domNode === null || domNode === void 0 ? void 0 : domNode.domNode.remove();\n            }\n            return;\n        }\n        const width = (Math.round(this._glyphMarginWidth / this._glyphMarginDecorationLaneCount));\n        // Render widgets\n        for (const widget of Object.values(this._widgets)) {\n            if (!widget.renderInfo) {\n                // this widget is not visible\n                widget.domNode.setDisplay('none');\n            }\n            else {\n                const top = ctx.viewportData.relativeVerticalOffset[widget.renderInfo.lineNumber - ctx.viewportData.startLineNumber];\n                const left = this._glyphMarginLeft + widget.renderInfo.laneIndex * this._lineHeight;\n                widget.domNode.setDisplay('block');\n                widget.domNode.setTop(top);\n                widget.domNode.setLeft(left);\n                widget.domNode.setWidth(width);\n                widget.domNode.setHeight(this._lineHeight);\n            }\n        }\n        // Render decorations, reusing previous dom nodes as possible\n        for (let i = 0; i < this._decorationGlyphsToRender.length; i++) {\n            const dec = this._decorationGlyphsToRender[i];\n            const top = ctx.viewportData.relativeVerticalOffset[dec.lineNumber - ctx.viewportData.startLineNumber];\n            const left = this._glyphMarginLeft + dec.laneIndex * this._lineHeight;\n            let domNode;\n            if (i < this._managedDomNodes.length) {\n                domNode = this._managedDomNodes[i];\n            }\n            else {\n                domNode = createFastDomNode(document.createElement('div'));\n                this._managedDomNodes.push(domNode);\n                this.domNode.appendChild(domNode);\n            }\n            domNode.setClassName(`cgmr codicon ` + dec.combinedClassName);\n            domNode.setPosition(`absolute`);\n            domNode.setTop(top);\n            domNode.setLeft(left);\n            domNode.setWidth(width);\n            domNode.setHeight(this._lineHeight);\n        }\n        // remove extra dom nodes\n        while (this._managedDomNodes.length > this._decorationGlyphsToRender.length) {\n            const domNode = this._managedDomNodes.pop();\n            domNode === null || domNode === void 0 ? void 0 : domNode.domNode.remove();\n        }\n    }\n}\n/**\n * A request to render a decoration in the glyph margin at a certain location.\n */\nclass DecorationBasedGlyphRenderRequest {\n    constructor(lineNumber, laneIndex, zIndex, className) {\n        this.lineNumber = lineNumber;\n        this.laneIndex = laneIndex;\n        this.zIndex = zIndex;\n        this.className = className;\n        this.type = 0 /* GlyphRenderRequestType.Decoration */;\n    }\n    accept(combinedClassName) {\n        return new DecorationBasedGlyph(this.lineNumber, this.laneIndex, combinedClassName);\n    }\n}\n/**\n * A request to render a widget in the glyph margin at a certain location.\n */\nclass WidgetBasedGlyphRenderRequest {\n    constructor(lineNumber, laneIndex, zIndex, widget) {\n        this.lineNumber = lineNumber;\n        this.laneIndex = laneIndex;\n        this.zIndex = zIndex;\n        this.widget = widget;\n        this.type = 1 /* GlyphRenderRequestType.Widget */;\n    }\n}\nclass DecorationBasedGlyph {\n    constructor(lineNumber, laneIndex, combinedClassName) {\n        this.lineNumber = lineNumber;\n        this.laneIndex = laneIndex;\n        this.combinedClassName = combinedClassName;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}