{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\nexport var CharacterPairSupport = /*#__PURE__*/function () {\n  function CharacterPairSupport(config) {\n    _classCallCheck(this, CharacterPairSupport);\n    if (config.autoClosingPairs) {\n      this._autoClosingPairs = config.autoClosingPairs.map(function (el) {\n        return new StandardAutoClosingPairConditional(el);\n      });\n    } else if (config.brackets) {\n      this._autoClosingPairs = config.brackets.map(function (b) {\n        return new StandardAutoClosingPairConditional({\n          open: b[0],\n          close: b[1]\n        });\n      });\n    } else {\n      this._autoClosingPairs = [];\n    }\n    if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n      var docComment = config.__electricCharacterSupport.docComment;\n      // IDocComment is legacy, only partially supported\n      this._autoClosingPairs.push(new StandardAutoClosingPairConditional({\n        open: docComment.open,\n        close: docComment.close || ''\n      }));\n    }\n    this._autoCloseBeforeForQuotes = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES;\n    this._autoCloseBeforeForBrackets = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS;\n    this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n  }\n  return _createClass(CharacterPairSupport, [{\n    key: \"getAutoClosingPairs\",\n    value: function getAutoClosingPairs() {\n      return this._autoClosingPairs;\n    }\n  }, {\n    key: \"getAutoCloseBeforeSet\",\n    value: function getAutoCloseBeforeSet(forQuotes) {\n      return forQuotes ? this._autoCloseBeforeForQuotes : this._autoCloseBeforeForBrackets;\n    }\n  }, {\n    key: \"getSurroundingPairs\",\n    value: function getSurroundingPairs() {\n      return this._surroundingPairs;\n    }\n  }]);\n}();\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES = ';:.,=}])> \\n\\t';\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS = '\\'\"`;:.,=}])> \\n\\t';","map":{"version":3,"names":["StandardAutoClosingPairConditional","CharacterPairSupport","config","_classCallCheck","autoClosingPairs","_autoClosingPairs","map","el","brackets","b","open","close","__electricCharacterSupport","docComment","push","_autoCloseBeforeForQuotes","autoCloseBefore","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES","_autoCloseBeforeForBrackets","DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS","_surroundingPairs","surroundingPairs","_createClass","key","value","getAutoClosingPairs","getAutoCloseBeforeSet","forQuotes","getSurroundingPairs"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/characterPair.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\nexport class CharacterPairSupport {\n    constructor(config) {\n        if (config.autoClosingPairs) {\n            this._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\n        }\n        else if (config.brackets) {\n            this._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\n        }\n        else {\n            this._autoClosingPairs = [];\n        }\n        if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n            const docComment = config.__electricCharacterSupport.docComment;\n            // IDocComment is legacy, only partially supported\n            this._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\n        }\n        this._autoCloseBeforeForQuotes = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES;\n        this._autoCloseBeforeForBrackets = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS;\n        this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n    }\n    getAutoClosingPairs() {\n        return this._autoClosingPairs;\n    }\n    getAutoCloseBeforeSet(forQuotes) {\n        return (forQuotes ? this._autoCloseBeforeForQuotes : this._autoCloseBeforeForBrackets);\n    }\n    getSurroundingPairs() {\n        return this._surroundingPairs;\n    }\n}\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES = ';:.,=}])> \\n\\t';\nCharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS = '\\'\"`;:.,=}])> \\n\\t';\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,SAASA,kCAAkC,QAAQ,6BAA6B;AAChF,WAAaC,oBAAoB;EAC7B,SAAAA,qBAAYC,MAAM,EAAE;IAAAC,eAAA,OAAAF,oBAAA;IAChB,IAAIC,MAAM,CAACE,gBAAgB,EAAE;MACzB,IAAI,CAACC,iBAAiB,GAAGH,MAAM,CAACE,gBAAgB,CAACE,GAAG,CAAC,UAAAC,EAAE;QAAA,OAAI,IAAIP,kCAAkC,CAACO,EAAE,CAAC;MAAA,EAAC;IAC1G,CAAC,MACI,IAAIL,MAAM,CAACM,QAAQ,EAAE;MACtB,IAAI,CAACH,iBAAiB,GAAGH,MAAM,CAACM,QAAQ,CAACF,GAAG,CAAC,UAAAG,CAAC;QAAA,OAAI,IAAIT,kCAAkC,CAAC;UAAEU,IAAI,EAAED,CAAC,CAAC,CAAC,CAAC;UAAEE,KAAK,EAAEF,CAAC,CAAC,CAAC;QAAE,CAAC,CAAC;MAAA,EAAC;IAC1H,CAAC,MACI;MACD,IAAI,CAACJ,iBAAiB,GAAG,EAAE;IAC/B;IACA,IAAIH,MAAM,CAACU,0BAA0B,IAAIV,MAAM,CAACU,0BAA0B,CAACC,UAAU,EAAE;MACnF,IAAMA,UAAU,GAAGX,MAAM,CAACU,0BAA0B,CAACC,UAAU;MAC/D;MACA,IAAI,CAACR,iBAAiB,CAACS,IAAI,CAAC,IAAId,kCAAkC,CAAC;QAAEU,IAAI,EAAEG,UAAU,CAACH,IAAI;QAAEC,KAAK,EAAEE,UAAU,CAACF,KAAK,IAAI;MAAG,CAAC,CAAC,CAAC;IACjI;IACA,IAAI,CAACI,yBAAyB,GAAG,OAAOb,MAAM,CAACc,eAAe,KAAK,QAAQ,GAAGd,MAAM,CAACc,eAAe,GAAGf,oBAAoB,CAACgB,gDAAgD;IAC5K,IAAI,CAACC,2BAA2B,GAAG,OAAOhB,MAAM,CAACc,eAAe,KAAK,QAAQ,GAAGd,MAAM,CAACc,eAAe,GAAGf,oBAAoB,CAACkB,kDAAkD;IAChL,IAAI,CAACC,iBAAiB,GAAGlB,MAAM,CAACmB,gBAAgB,IAAI,IAAI,CAAChB,iBAAiB;EAC9E;EAAC,OAAAiB,YAAA,CAAArB,oBAAA;IAAAsB,GAAA;IAAAC,KAAA,EACD,SAAAC,oBAAA,EAAsB;MAClB,OAAO,IAAI,CAACpB,iBAAiB;IACjC;EAAC;IAAAkB,GAAA;IAAAC,KAAA,EACD,SAAAE,sBAAsBC,SAAS,EAAE;MAC7B,OAAQA,SAAS,GAAG,IAAI,CAACZ,yBAAyB,GAAG,IAAI,CAACG,2BAA2B;IACzF;EAAC;IAAAK,GAAA;IAAAC,KAAA,EACD,SAAAI,oBAAA,EAAsB;MAClB,OAAO,IAAI,CAACR,iBAAiB;IACjC;EAAC;AAAA;AAELnB,oBAAoB,CAACgB,gDAAgD,GAAG,gBAAgB;AACxFhB,oBAAoB,CAACkB,kDAAkD,GAAG,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}