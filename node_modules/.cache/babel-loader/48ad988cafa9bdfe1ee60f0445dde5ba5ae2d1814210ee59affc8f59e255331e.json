{"ast":null,"code":"import _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { buildReplaceStringWithCasePreserved } from '../../../../base/common/search.js';\n/**\n * Assigned when the replace pattern is entirely static.\n */\nvar StaticValueReplacePattern = /*#__PURE__*/_createClass(function StaticValueReplacePattern(staticValue) {\n  _classCallCheck(this, StaticValueReplacePattern);\n  this.staticValue = staticValue;\n  this.kind = 0 /* ReplacePatternKind.StaticValue */;\n});\n/**\n * Assigned when the replace pattern has replacement patterns.\n */\nvar DynamicPiecesReplacePattern = /*#__PURE__*/_createClass(function DynamicPiecesReplacePattern(pieces) {\n  _classCallCheck(this, DynamicPiecesReplacePattern);\n  this.pieces = pieces;\n  this.kind = 1 /* ReplacePatternKind.DynamicPieces */;\n});\nexport var ReplacePattern = /*#__PURE__*/function () {\n  function ReplacePattern(pieces) {\n    _classCallCheck(this, ReplacePattern);\n    if (!pieces || pieces.length === 0) {\n      this._state = new StaticValueReplacePattern('');\n    } else if (pieces.length === 1 && pieces[0].staticValue !== null) {\n      this._state = new StaticValueReplacePattern(pieces[0].staticValue);\n    } else {\n      this._state = new DynamicPiecesReplacePattern(pieces);\n    }\n  }\n  return _createClass(ReplacePattern, [{\n    key: \"hasReplacementPatterns\",\n    get: function get() {\n      return this._state.kind === 1 /* ReplacePatternKind.DynamicPieces */;\n    }\n  }, {\n    key: \"buildReplaceString\",\n    value: function buildReplaceString(matches, preserveCase) {\n      if (this._state.kind === 0 /* ReplacePatternKind.StaticValue */) {\n        if (preserveCase) {\n          return buildReplaceStringWithCasePreserved(matches, this._state.staticValue);\n        } else {\n          return this._state.staticValue;\n        }\n      }\n      var result = '';\n      for (var i = 0, len = this._state.pieces.length; i < len; i++) {\n        var piece = this._state.pieces[i];\n        if (piece.staticValue !== null) {\n          // static value ReplacePiece\n          result += piece.staticValue;\n          continue;\n        }\n        // match index ReplacePiece\n        var match = ReplacePattern._substitute(piece.matchIndex, matches);\n        if (piece.caseOps !== null && piece.caseOps.length > 0) {\n          var repl = [];\n          var lenOps = piece.caseOps.length;\n          var opIdx = 0;\n          for (var idx = 0, _len = match.length; idx < _len; idx++) {\n            if (opIdx >= lenOps) {\n              repl.push(match.slice(idx));\n              break;\n            }\n            switch (piece.caseOps[opIdx]) {\n              case 'U':\n                repl.push(match[idx].toUpperCase());\n                break;\n              case 'u':\n                repl.push(match[idx].toUpperCase());\n                opIdx++;\n                break;\n              case 'L':\n                repl.push(match[idx].toLowerCase());\n                break;\n              case 'l':\n                repl.push(match[idx].toLowerCase());\n                opIdx++;\n                break;\n              default:\n                repl.push(match[idx]);\n            }\n          }\n          match = repl.join('');\n        }\n        result += match;\n      }\n      return result;\n    }\n  }], [{\n    key: \"fromStaticValue\",\n    value: function fromStaticValue(value) {\n      return new ReplacePattern([ReplacePiece.staticValue(value)]);\n    }\n  }, {\n    key: \"_substitute\",\n    value: function _substitute(matchIndex, matches) {\n      if (matches === null) {\n        return '';\n      }\n      if (matchIndex === 0) {\n        return matches[0];\n      }\n      var remainder = '';\n      while (matchIndex > 0) {\n        if (matchIndex < matches.length) {\n          // A match can be undefined\n          var match = matches[matchIndex] || '';\n          return match + remainder;\n        }\n        remainder = String(matchIndex % 10) + remainder;\n        matchIndex = Math.floor(matchIndex / 10);\n      }\n      return '$' + remainder;\n    }\n  }]);\n}();\n/**\n * A replace piece can either be a static string or an index to a specific match.\n */\nexport var ReplacePiece = /*#__PURE__*/function () {\n  function ReplacePiece(staticValue, matchIndex, caseOps) {\n    _classCallCheck(this, ReplacePiece);\n    this.staticValue = staticValue;\n    this.matchIndex = matchIndex;\n    if (!caseOps || caseOps.length === 0) {\n      this.caseOps = null;\n    } else {\n      this.caseOps = caseOps.slice(0);\n    }\n  }\n  return _createClass(ReplacePiece, null, [{\n    key: \"staticValue\",\n    value: function staticValue(value) {\n      return new ReplacePiece(value, -1, null);\n    }\n  }, {\n    key: \"caseOps\",\n    value: function caseOps(index, _caseOps) {\n      return new ReplacePiece(null, index, _caseOps);\n    }\n  }]);\n}();\nvar ReplacePieceBuilder = /*#__PURE__*/function () {\n  function ReplacePieceBuilder(source) {\n    _classCallCheck(this, ReplacePieceBuilder);\n    this._source = source;\n    this._lastCharIndex = 0;\n    this._result = [];\n    this._resultLen = 0;\n    this._currentStaticPiece = '';\n  }\n  return _createClass(ReplacePieceBuilder, [{\n    key: \"emitUnchanged\",\n    value: function emitUnchanged(toCharIndex) {\n      this._emitStatic(this._source.substring(this._lastCharIndex, toCharIndex));\n      this._lastCharIndex = toCharIndex;\n    }\n  }, {\n    key: \"emitStatic\",\n    value: function emitStatic(value, toCharIndex) {\n      this._emitStatic(value);\n      this._lastCharIndex = toCharIndex;\n    }\n  }, {\n    key: \"_emitStatic\",\n    value: function _emitStatic(value) {\n      if (value.length === 0) {\n        return;\n      }\n      this._currentStaticPiece += value;\n    }\n  }, {\n    key: \"emitMatchIndex\",\n    value: function emitMatchIndex(index, toCharIndex, caseOps) {\n      if (this._currentStaticPiece.length !== 0) {\n        this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n        this._currentStaticPiece = '';\n      }\n      this._result[this._resultLen++] = ReplacePiece.caseOps(index, caseOps);\n      this._lastCharIndex = toCharIndex;\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      this.emitUnchanged(this._source.length);\n      if (this._currentStaticPiece.length !== 0) {\n        this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n        this._currentStaticPiece = '';\n      }\n      return new ReplacePattern(this._result);\n    }\n  }]);\n}();\n/**\n * \\n\t\t\t=> inserts a LF\n * \\t\t\t\t=> inserts a TAB\n * \\\\\t\t\t=> inserts a \"\\\".\n * \\u\t\t\t=> upper-cases one character in a match.\n * \\U\t\t\t=> upper-cases ALL remaining characters in a match.\n * \\l\t\t\t=> lower-cases one character in a match.\n * \\L\t\t\t=> lower-cases ALL remaining characters in a match.\n * $$\t\t\t=> inserts a \"$\".\n * $& and $0\t=> inserts the matched substring.\n * $n\t\t\t=> Where n is a non-negative integer lesser than 100, inserts the nth parenthesized submatch string\n * everything else stays untouched\n *\n * Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\n */\nexport function parseReplaceString(replaceString) {\n  if (!replaceString || replaceString.length === 0) {\n    return new ReplacePattern(null);\n  }\n  var caseOps = [];\n  var result = new ReplacePieceBuilder(replaceString);\n  for (var i = 0, len = replaceString.length; i < len; i++) {\n    var chCode = replaceString.charCodeAt(i);\n    if (chCode === 92 /* CharCode.Backslash */) {\n      // move to next char\n      i++;\n      if (i >= len) {\n        // string ends with a \\\n        break;\n      }\n      var nextChCode = replaceString.charCodeAt(i);\n      // let replaceWithCharacter: string | null = null;\n      switch (nextChCode) {\n        case 92 /* CharCode.Backslash */:\n          // \\\\ => inserts a \"\\\"\n          result.emitUnchanged(i - 1);\n          result.emitStatic('\\\\', i + 1);\n          break;\n        case 110 /* CharCode.n */:\n          // \\n => inserts a LF\n          result.emitUnchanged(i - 1);\n          result.emitStatic('\\n', i + 1);\n          break;\n        case 116 /* CharCode.t */:\n          // \\t => inserts a TAB\n          result.emitUnchanged(i - 1);\n          result.emitStatic('\\t', i + 1);\n          break;\n        // Case modification of string replacements, patterned after Boost, but only applied\n        // to the replacement text, not subsequent content.\n        case 117 /* CharCode.u */:\n        // \\u => upper-cases one character.\n        case 85 /* CharCode.U */:\n        // \\U => upper-cases ALL following characters.\n        case 108 /* CharCode.l */:\n        // \\l => lower-cases one character.\n        case 76 /* CharCode.L */:\n          // \\L => lower-cases ALL following characters.\n          result.emitUnchanged(i - 1);\n          result.emitStatic('', i + 1);\n          caseOps.push(String.fromCharCode(nextChCode));\n          break;\n      }\n      continue;\n    }\n    if (chCode === 36 /* CharCode.DollarSign */) {\n      // move to next char\n      i++;\n      if (i >= len) {\n        // string ends with a $\n        break;\n      }\n      var _nextChCode = replaceString.charCodeAt(i);\n      if (_nextChCode === 36 /* CharCode.DollarSign */) {\n        // $$ => inserts a \"$\"\n        result.emitUnchanged(i - 1);\n        result.emitStatic('$', i + 1);\n        continue;\n      }\n      if (_nextChCode === 48 /* CharCode.Digit0 */ || _nextChCode === 38 /* CharCode.Ampersand */) {\n        // $& and $0 => inserts the matched substring.\n        result.emitUnchanged(i - 1);\n        result.emitMatchIndex(0, i + 1, caseOps);\n        caseOps.length = 0;\n        continue;\n      }\n      if (49 /* CharCode.Digit1 */ <= _nextChCode && _nextChCode <= 57 /* CharCode.Digit9 */) {\n        // $n\n        var matchIndex = _nextChCode - 48 /* CharCode.Digit0 */;\n        // peek next char to probe for $nn\n        if (i + 1 < len) {\n          var nextNextChCode = replaceString.charCodeAt(i + 1);\n          if (48 /* CharCode.Digit0 */ <= nextNextChCode && nextNextChCode <= 57 /* CharCode.Digit9 */) {\n            // $nn\n            // move to next char\n            i++;\n            matchIndex = matchIndex * 10 + (nextNextChCode - 48 /* CharCode.Digit0 */);\n            result.emitUnchanged(i - 2);\n            result.emitMatchIndex(matchIndex, i + 1, caseOps);\n            caseOps.length = 0;\n            continue;\n          }\n        }\n        result.emitUnchanged(i - 1);\n        result.emitMatchIndex(matchIndex, i + 1, caseOps);\n        caseOps.length = 0;\n        continue;\n      }\n    }\n  }\n  return result.finalize();\n}","map":{"version":3,"names":["buildReplaceStringWithCasePreserved","StaticValueReplacePattern","_createClass","staticValue","_classCallCheck","kind","DynamicPiecesReplacePattern","pieces","ReplacePattern","length","_state","key","get","value","buildReplaceString","matches","preserveCase","result","i","len","piece","match","_substitute","matchIndex","caseOps","repl","lenOps","opIdx","idx","push","slice","toUpperCase","toLowerCase","join","fromStaticValue","ReplacePiece","remainder","String","Math","floor","index","ReplacePieceBuilder","source","_source","_lastCharIndex","_result","_resultLen","_currentStaticPiece","emitUnchanged","toCharIndex","_emitStatic","substring","emitStatic","emitMatchIndex","finalize","parseReplaceString","replaceString","chCode","charCodeAt","nextChCode","fromCharCode","nextNextChCode"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/contrib/find/browser/replacePattern.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { buildReplaceStringWithCasePreserved } from '../../../../base/common/search.js';\n/**\n * Assigned when the replace pattern is entirely static.\n */\nclass StaticValueReplacePattern {\n    constructor(staticValue) {\n        this.staticValue = staticValue;\n        this.kind = 0 /* ReplacePatternKind.StaticValue */;\n    }\n}\n/**\n * Assigned when the replace pattern has replacement patterns.\n */\nclass DynamicPiecesReplacePattern {\n    constructor(pieces) {\n        this.pieces = pieces;\n        this.kind = 1 /* ReplacePatternKind.DynamicPieces */;\n    }\n}\nexport class ReplacePattern {\n    static fromStaticValue(value) {\n        return new ReplacePattern([ReplacePiece.staticValue(value)]);\n    }\n    get hasReplacementPatterns() {\n        return (this._state.kind === 1 /* ReplacePatternKind.DynamicPieces */);\n    }\n    constructor(pieces) {\n        if (!pieces || pieces.length === 0) {\n            this._state = new StaticValueReplacePattern('');\n        }\n        else if (pieces.length === 1 && pieces[0].staticValue !== null) {\n            this._state = new StaticValueReplacePattern(pieces[0].staticValue);\n        }\n        else {\n            this._state = new DynamicPiecesReplacePattern(pieces);\n        }\n    }\n    buildReplaceString(matches, preserveCase) {\n        if (this._state.kind === 0 /* ReplacePatternKind.StaticValue */) {\n            if (preserveCase) {\n                return buildReplaceStringWithCasePreserved(matches, this._state.staticValue);\n            }\n            else {\n                return this._state.staticValue;\n            }\n        }\n        let result = '';\n        for (let i = 0, len = this._state.pieces.length; i < len; i++) {\n            const piece = this._state.pieces[i];\n            if (piece.staticValue !== null) {\n                // static value ReplacePiece\n                result += piece.staticValue;\n                continue;\n            }\n            // match index ReplacePiece\n            let match = ReplacePattern._substitute(piece.matchIndex, matches);\n            if (piece.caseOps !== null && piece.caseOps.length > 0) {\n                const repl = [];\n                const lenOps = piece.caseOps.length;\n                let opIdx = 0;\n                for (let idx = 0, len = match.length; idx < len; idx++) {\n                    if (opIdx >= lenOps) {\n                        repl.push(match.slice(idx));\n                        break;\n                    }\n                    switch (piece.caseOps[opIdx]) {\n                        case 'U':\n                            repl.push(match[idx].toUpperCase());\n                            break;\n                        case 'u':\n                            repl.push(match[idx].toUpperCase());\n                            opIdx++;\n                            break;\n                        case 'L':\n                            repl.push(match[idx].toLowerCase());\n                            break;\n                        case 'l':\n                            repl.push(match[idx].toLowerCase());\n                            opIdx++;\n                            break;\n                        default:\n                            repl.push(match[idx]);\n                    }\n                }\n                match = repl.join('');\n            }\n            result += match;\n        }\n        return result;\n    }\n    static _substitute(matchIndex, matches) {\n        if (matches === null) {\n            return '';\n        }\n        if (matchIndex === 0) {\n            return matches[0];\n        }\n        let remainder = '';\n        while (matchIndex > 0) {\n            if (matchIndex < matches.length) {\n                // A match can be undefined\n                const match = (matches[matchIndex] || '');\n                return match + remainder;\n            }\n            remainder = String(matchIndex % 10) + remainder;\n            matchIndex = Math.floor(matchIndex / 10);\n        }\n        return '$' + remainder;\n    }\n}\n/**\n * A replace piece can either be a static string or an index to a specific match.\n */\nexport class ReplacePiece {\n    static staticValue(value) {\n        return new ReplacePiece(value, -1, null);\n    }\n    static caseOps(index, caseOps) {\n        return new ReplacePiece(null, index, caseOps);\n    }\n    constructor(staticValue, matchIndex, caseOps) {\n        this.staticValue = staticValue;\n        this.matchIndex = matchIndex;\n        if (!caseOps || caseOps.length === 0) {\n            this.caseOps = null;\n        }\n        else {\n            this.caseOps = caseOps.slice(0);\n        }\n    }\n}\nclass ReplacePieceBuilder {\n    constructor(source) {\n        this._source = source;\n        this._lastCharIndex = 0;\n        this._result = [];\n        this._resultLen = 0;\n        this._currentStaticPiece = '';\n    }\n    emitUnchanged(toCharIndex) {\n        this._emitStatic(this._source.substring(this._lastCharIndex, toCharIndex));\n        this._lastCharIndex = toCharIndex;\n    }\n    emitStatic(value, toCharIndex) {\n        this._emitStatic(value);\n        this._lastCharIndex = toCharIndex;\n    }\n    _emitStatic(value) {\n        if (value.length === 0) {\n            return;\n        }\n        this._currentStaticPiece += value;\n    }\n    emitMatchIndex(index, toCharIndex, caseOps) {\n        if (this._currentStaticPiece.length !== 0) {\n            this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n            this._currentStaticPiece = '';\n        }\n        this._result[this._resultLen++] = ReplacePiece.caseOps(index, caseOps);\n        this._lastCharIndex = toCharIndex;\n    }\n    finalize() {\n        this.emitUnchanged(this._source.length);\n        if (this._currentStaticPiece.length !== 0) {\n            this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n            this._currentStaticPiece = '';\n        }\n        return new ReplacePattern(this._result);\n    }\n}\n/**\n * \\n\t\t\t=> inserts a LF\n * \\t\t\t\t=> inserts a TAB\n * \\\\\t\t\t=> inserts a \"\\\".\n * \\u\t\t\t=> upper-cases one character in a match.\n * \\U\t\t\t=> upper-cases ALL remaining characters in a match.\n * \\l\t\t\t=> lower-cases one character in a match.\n * \\L\t\t\t=> lower-cases ALL remaining characters in a match.\n * $$\t\t\t=> inserts a \"$\".\n * $& and $0\t=> inserts the matched substring.\n * $n\t\t\t=> Where n is a non-negative integer lesser than 100, inserts the nth parenthesized submatch string\n * everything else stays untouched\n *\n * Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\n */\nexport function parseReplaceString(replaceString) {\n    if (!replaceString || replaceString.length === 0) {\n        return new ReplacePattern(null);\n    }\n    const caseOps = [];\n    const result = new ReplacePieceBuilder(replaceString);\n    for (let i = 0, len = replaceString.length; i < len; i++) {\n        const chCode = replaceString.charCodeAt(i);\n        if (chCode === 92 /* CharCode.Backslash */) {\n            // move to next char\n            i++;\n            if (i >= len) {\n                // string ends with a \\\n                break;\n            }\n            const nextChCode = replaceString.charCodeAt(i);\n            // let replaceWithCharacter: string | null = null;\n            switch (nextChCode) {\n                case 92 /* CharCode.Backslash */:\n                    // \\\\ => inserts a \"\\\"\n                    result.emitUnchanged(i - 1);\n                    result.emitStatic('\\\\', i + 1);\n                    break;\n                case 110 /* CharCode.n */:\n                    // \\n => inserts a LF\n                    result.emitUnchanged(i - 1);\n                    result.emitStatic('\\n', i + 1);\n                    break;\n                case 116 /* CharCode.t */:\n                    // \\t => inserts a TAB\n                    result.emitUnchanged(i - 1);\n                    result.emitStatic('\\t', i + 1);\n                    break;\n                // Case modification of string replacements, patterned after Boost, but only applied\n                // to the replacement text, not subsequent content.\n                case 117 /* CharCode.u */:\n                // \\u => upper-cases one character.\n                case 85 /* CharCode.U */:\n                // \\U => upper-cases ALL following characters.\n                case 108 /* CharCode.l */:\n                // \\l => lower-cases one character.\n                case 76 /* CharCode.L */:\n                    // \\L => lower-cases ALL following characters.\n                    result.emitUnchanged(i - 1);\n                    result.emitStatic('', i + 1);\n                    caseOps.push(String.fromCharCode(nextChCode));\n                    break;\n            }\n            continue;\n        }\n        if (chCode === 36 /* CharCode.DollarSign */) {\n            // move to next char\n            i++;\n            if (i >= len) {\n                // string ends with a $\n                break;\n            }\n            const nextChCode = replaceString.charCodeAt(i);\n            if (nextChCode === 36 /* CharCode.DollarSign */) {\n                // $$ => inserts a \"$\"\n                result.emitUnchanged(i - 1);\n                result.emitStatic('$', i + 1);\n                continue;\n            }\n            if (nextChCode === 48 /* CharCode.Digit0 */ || nextChCode === 38 /* CharCode.Ampersand */) {\n                // $& and $0 => inserts the matched substring.\n                result.emitUnchanged(i - 1);\n                result.emitMatchIndex(0, i + 1, caseOps);\n                caseOps.length = 0;\n                continue;\n            }\n            if (49 /* CharCode.Digit1 */ <= nextChCode && nextChCode <= 57 /* CharCode.Digit9 */) {\n                // $n\n                let matchIndex = nextChCode - 48 /* CharCode.Digit0 */;\n                // peek next char to probe for $nn\n                if (i + 1 < len) {\n                    const nextNextChCode = replaceString.charCodeAt(i + 1);\n                    if (48 /* CharCode.Digit0 */ <= nextNextChCode && nextNextChCode <= 57 /* CharCode.Digit9 */) {\n                        // $nn\n                        // move to next char\n                        i++;\n                        matchIndex = matchIndex * 10 + (nextNextChCode - 48 /* CharCode.Digit0 */);\n                        result.emitUnchanged(i - 2);\n                        result.emitMatchIndex(matchIndex, i + 1, caseOps);\n                        caseOps.length = 0;\n                        continue;\n                    }\n                }\n                result.emitUnchanged(i - 1);\n                result.emitMatchIndex(matchIndex, i + 1, caseOps);\n                caseOps.length = 0;\n                continue;\n            }\n        }\n    }\n    return result.finalize();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}