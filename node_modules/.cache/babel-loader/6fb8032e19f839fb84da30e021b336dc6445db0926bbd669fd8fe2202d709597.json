{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Extensions as ConfigurationExtensions } from '../../../platform/configuration/common/configurationRegistry.js';\n// Define extension point ids\nexport var Extensions = {\n  ModesRegistry: 'editor.modesRegistry'\n};\nexport var EditorModesRegistry = /*#__PURE__*/function () {\n  function EditorModesRegistry() {\n    _classCallCheck(this, EditorModesRegistry);\n    this._onDidChangeLanguages = new Emitter();\n    this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n    this._languages = [];\n  }\n  return _createClass(EditorModesRegistry, [{\n    key: \"registerLanguage\",\n    value: function registerLanguage(def) {\n      var _this = this;\n      this._languages.push(def);\n      this._onDidChangeLanguages.fire(undefined);\n      return {\n        dispose: function dispose() {\n          for (var i = 0, len = _this._languages.length; i < len; i++) {\n            if (_this._languages[i] === def) {\n              _this._languages.splice(i, 1);\n              return;\n            }\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getLanguages\",\n    value: function getLanguages() {\n      return this._languages;\n    }\n  }]);\n}();\nexport var ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport var PLAINTEXT_LANGUAGE_ID = 'plaintext';\nexport var PLAINTEXT_EXTENSION = '.txt';\nModesRegistry.registerLanguage({\n  id: PLAINTEXT_LANGUAGE_ID,\n  extensions: [PLAINTEXT_EXTENSION],\n  aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n  mimetypes: [Mimes.text]\n});\nRegistry.as(ConfigurationExtensions.Configuration).registerDefaultConfigurations([{\n  overrides: {\n    '[plaintext]': {\n      'editor.unicodeHighlight.ambiguousCharacters': false,\n      'editor.unicodeHighlight.invisibleCharacters': false\n    }\n  }\n}]);","map":{"version":3,"names":["nls","Emitter","Registry","Mimes","Extensions","ConfigurationExtensions","ModesRegistry","EditorModesRegistry","_classCallCheck","_onDidChangeLanguages","onDidChangeLanguages","event","_languages","_createClass","key","value","registerLanguage","def","_this","push","fire","undefined","dispose","i","len","length","splice","getLanguages","add","PLAINTEXT_LANGUAGE_ID","PLAINTEXT_EXTENSION","id","extensions","aliases","localize","mimetypes","text","as","Configuration","registerDefaultConfigurations","overrides"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/languages/modesRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Mimes } from '../../../base/common/mime.js';\nimport { Extensions as ConfigurationExtensions } from '../../../platform/configuration/common/configurationRegistry.js';\n// Define extension point ids\nexport const Extensions = {\n    ModesRegistry: 'editor.modesRegistry'\n};\nexport class EditorModesRegistry {\n    constructor() {\n        this._onDidChangeLanguages = new Emitter();\n        this.onDidChangeLanguages = this._onDidChangeLanguages.event;\n        this._languages = [];\n    }\n    registerLanguage(def) {\n        this._languages.push(def);\n        this._onDidChangeLanguages.fire(undefined);\n        return {\n            dispose: () => {\n                for (let i = 0, len = this._languages.length; i < len; i++) {\n                    if (this._languages[i] === def) {\n                        this._languages.splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        };\n    }\n    getLanguages() {\n        return this._languages;\n    }\n}\nexport const ModesRegistry = new EditorModesRegistry();\nRegistry.add(Extensions.ModesRegistry, ModesRegistry);\nexport const PLAINTEXT_LANGUAGE_ID = 'plaintext';\nexport const PLAINTEXT_EXTENSION = '.txt';\nModesRegistry.registerLanguage({\n    id: PLAINTEXT_LANGUAGE_ID,\n    extensions: [PLAINTEXT_EXTENSION],\n    aliases: [nls.localize('plainText.alias', \"Plain Text\"), 'text'],\n    mimetypes: [Mimes.text]\n});\nRegistry.as(ConfigurationExtensions.Configuration)\n    .registerDefaultConfigurations([{\n        overrides: {\n            '[plaintext]': {\n                'editor.unicodeHighlight.ambiguousCharacters': false,\n                'editor.unicodeHighlight.invisibleCharacters': false\n            }\n        }\n    }]);\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,GAAG,MAAM,iBAAiB;AACtC,SAASC,OAAO,QAAQ,+BAA+B;AACvD,SAASC,QAAQ,QAAQ,+CAA+C;AACxE,SAASC,KAAK,QAAQ,8BAA8B;AACpD,SAASC,UAAU,IAAIC,uBAAuB,QAAQ,iEAAiE;AACvH;AACA,OAAO,IAAMD,UAAU,GAAG;EACtBE,aAAa,EAAE;AACnB,CAAC;AACD,WAAaC,mBAAmB;EAC5B,SAAAA,oBAAA,EAAc;IAAAC,eAAA,OAAAD,mBAAA;IACV,IAAI,CAACE,qBAAqB,GAAG,IAAIR,OAAO,CAAC,CAAC;IAC1C,IAAI,CAACS,oBAAoB,GAAG,IAAI,CAACD,qBAAqB,CAACE,KAAK;IAC5D,IAAI,CAACC,UAAU,GAAG,EAAE;EACxB;EAAC,OAAAC,YAAA,CAAAN,mBAAA;IAAAO,GAAA;IAAAC,KAAA,EACD,SAAAC,iBAAiBC,GAAG,EAAE;MAAA,IAAAC,KAAA;MAClB,IAAI,CAACN,UAAU,CAACO,IAAI,CAACF,GAAG,CAAC;MACzB,IAAI,CAACR,qBAAqB,CAACW,IAAI,CAACC,SAAS,CAAC;MAC1C,OAAO;QACHC,OAAO,EAAE,SAAAA,QAAA,EAAM;UACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGN,KAAI,CAACN,UAAU,CAACa,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;YACxD,IAAIL,KAAI,CAACN,UAAU,CAACW,CAAC,CAAC,KAAKN,GAAG,EAAE;cAC5BC,KAAI,CAACN,UAAU,CAACc,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;cAC5B;YACJ;UACJ;QACJ;MACJ,CAAC;IACL;EAAC;IAAAT,GAAA;IAAAC,KAAA,EACD,SAAAY,aAAA,EAAe;MACX,OAAO,IAAI,CAACf,UAAU;IAC1B;EAAC;AAAA;AAEL,OAAO,IAAMN,aAAa,GAAG,IAAIC,mBAAmB,CAAC,CAAC;AACtDL,QAAQ,CAAC0B,GAAG,CAACxB,UAAU,CAACE,aAAa,EAAEA,aAAa,CAAC;AACrD,OAAO,IAAMuB,qBAAqB,GAAG,WAAW;AAChD,OAAO,IAAMC,mBAAmB,GAAG,MAAM;AACzCxB,aAAa,CAACU,gBAAgB,CAAC;EAC3Be,EAAE,EAAEF,qBAAqB;EACzBG,UAAU,EAAE,CAACF,mBAAmB,CAAC;EACjCG,OAAO,EAAE,CAACjC,GAAG,CAACkC,QAAQ,CAAC,iBAAiB,EAAE,YAAY,CAAC,EAAE,MAAM,CAAC;EAChEC,SAAS,EAAE,CAAChC,KAAK,CAACiC,IAAI;AAC1B,CAAC,CAAC;AACFlC,QAAQ,CAACmC,EAAE,CAAChC,uBAAuB,CAACiC,aAAa,CAAC,CAC7CC,6BAA6B,CAAC,CAAC;EAC5BC,SAAS,EAAE;IACP,aAAa,EAAE;MACX,6CAA6C,EAAE,KAAK;MACpD,6CAA6C,EAAE;IACnD;EACJ;AACJ,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}