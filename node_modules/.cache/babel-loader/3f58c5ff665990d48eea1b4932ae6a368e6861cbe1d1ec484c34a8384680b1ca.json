{"ast":null,"code":"import _slicedToArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.substr.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as buffer from '../../../base/common/buffer.js';\nimport { decodeUTF16LE } from './stringBuilder.js';\nfunction escapeNewLine(str) {\n  return str.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n}\nexport var TextChange = /*#__PURE__*/function () {\n  function TextChange(oldPosition, oldText, newPosition, newText) {\n    _classCallCheck(this, TextChange);\n    this.oldPosition = oldPosition;\n    this.oldText = oldText;\n    this.newPosition = newPosition;\n    this.newText = newText;\n  }\n  return _createClass(TextChange, [{\n    key: \"oldLength\",\n    get: function get() {\n      return this.oldText.length;\n    }\n  }, {\n    key: \"oldEnd\",\n    get: function get() {\n      return this.oldPosition + this.oldText.length;\n    }\n  }, {\n    key: \"newLength\",\n    get: function get() {\n      return this.newText.length;\n    }\n  }, {\n    key: \"newEnd\",\n    get: function get() {\n      return this.newPosition + this.newText.length;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this.oldText.length === 0) {\n        return \"(insert@\".concat(this.oldPosition, \" \\\"\").concat(escapeNewLine(this.newText), \"\\\")\");\n      }\n      if (this.newText.length === 0) {\n        return \"(delete@\".concat(this.oldPosition, \" \\\"\").concat(escapeNewLine(this.oldText), \"\\\")\");\n      }\n      return \"(replace@\".concat(this.oldPosition, \" \\\"\").concat(escapeNewLine(this.oldText), \"\\\" with \\\"\").concat(escapeNewLine(this.newText), \"\\\")\");\n    }\n  }, {\n    key: \"writeSize\",\n    value: function writeSize() {\n      return +4 // oldPosition\n      + 4 // newPosition\n      + TextChange._writeStringSize(this.oldText) + TextChange._writeStringSize(this.newText);\n    }\n  }, {\n    key: \"write\",\n    value: function write(b, offset) {\n      buffer.writeUInt32BE(b, this.oldPosition, offset);\n      offset += 4;\n      buffer.writeUInt32BE(b, this.newPosition, offset);\n      offset += 4;\n      offset = TextChange._writeString(b, this.oldText, offset);\n      offset = TextChange._writeString(b, this.newText, offset);\n      return offset;\n    }\n  }], [{\n    key: \"_writeStringSize\",\n    value: function _writeStringSize(str) {\n      return 4 + 2 * str.length;\n    }\n  }, {\n    key: \"_writeString\",\n    value: function _writeString(b, str, offset) {\n      var len = str.length;\n      buffer.writeUInt32BE(b, len, offset);\n      offset += 4;\n      for (var i = 0; i < len; i++) {\n        buffer.writeUInt16LE(b, str.charCodeAt(i), offset);\n        offset += 2;\n      }\n      return offset;\n    }\n  }, {\n    key: \"_readString\",\n    value: function _readString(b, offset) {\n      var len = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      return decodeUTF16LE(b, offset, len);\n    }\n  }, {\n    key: \"read\",\n    value: function read(b, offset, dest) {\n      var oldPosition = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      var newPosition = buffer.readUInt32BE(b, offset);\n      offset += 4;\n      var oldText = TextChange._readString(b, offset);\n      offset += TextChange._writeStringSize(oldText);\n      var newText = TextChange._readString(b, offset);\n      offset += TextChange._writeStringSize(newText);\n      dest.push(new TextChange(oldPosition, oldText, newPosition, newText));\n      return offset;\n    }\n  }]);\n}();\nexport function compressConsecutiveTextChanges(prevEdits, currEdits) {\n  if (prevEdits === null || prevEdits.length === 0) {\n    return currEdits;\n  }\n  var compressor = new TextChangeCompressor(prevEdits, currEdits);\n  return compressor.compress();\n}\nvar TextChangeCompressor = /*#__PURE__*/function () {\n  function TextChangeCompressor(prevEdits, currEdits) {\n    _classCallCheck(this, TextChangeCompressor);\n    this._prevEdits = prevEdits;\n    this._currEdits = currEdits;\n    this._result = [];\n    this._resultLen = 0;\n    this._prevLen = this._prevEdits.length;\n    this._prevDeltaOffset = 0;\n    this._currLen = this._currEdits.length;\n    this._currDeltaOffset = 0;\n  }\n  return _createClass(TextChangeCompressor, [{\n    key: \"compress\",\n    value: function compress() {\n      var prevIndex = 0;\n      var currIndex = 0;\n      var prevEdit = this._getPrev(prevIndex);\n      var currEdit = this._getCurr(currIndex);\n      while (prevIndex < this._prevLen || currIndex < this._currLen) {\n        if (prevEdit === null) {\n          this._acceptCurr(currEdit);\n          currEdit = this._getCurr(++currIndex);\n          continue;\n        }\n        if (currEdit === null) {\n          this._acceptPrev(prevEdit);\n          prevEdit = this._getPrev(++prevIndex);\n          continue;\n        }\n        if (currEdit.oldEnd <= prevEdit.newPosition) {\n          this._acceptCurr(currEdit);\n          currEdit = this._getCurr(++currIndex);\n          continue;\n        }\n        if (prevEdit.newEnd <= currEdit.oldPosition) {\n          this._acceptPrev(prevEdit);\n          prevEdit = this._getPrev(++prevIndex);\n          continue;\n        }\n        if (currEdit.oldPosition < prevEdit.newPosition) {\n          var _TextChangeCompressor = TextChangeCompressor._splitCurr(currEdit, prevEdit.newPosition - currEdit.oldPosition),\n            _TextChangeCompressor2 = _slicedToArray(_TextChangeCompressor, 2),\n            e1 = _TextChangeCompressor2[0],\n            e2 = _TextChangeCompressor2[1];\n          this._acceptCurr(e1);\n          currEdit = e2;\n          continue;\n        }\n        if (prevEdit.newPosition < currEdit.oldPosition) {\n          var _TextChangeCompressor3 = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldPosition - prevEdit.newPosition),\n            _TextChangeCompressor4 = _slicedToArray(_TextChangeCompressor3, 2),\n            _e = _TextChangeCompressor4[0],\n            _e2 = _TextChangeCompressor4[1];\n          this._acceptPrev(_e);\n          prevEdit = _e2;\n          continue;\n        }\n        // At this point, currEdit.oldPosition === prevEdit.newPosition\n        var mergePrev = void 0;\n        var mergeCurr = void 0;\n        if (currEdit.oldEnd === prevEdit.newEnd) {\n          mergePrev = prevEdit;\n          mergeCurr = currEdit;\n          prevEdit = this._getPrev(++prevIndex);\n          currEdit = this._getCurr(++currIndex);\n        } else if (currEdit.oldEnd < prevEdit.newEnd) {\n          var _TextChangeCompressor5 = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldLength),\n            _TextChangeCompressor6 = _slicedToArray(_TextChangeCompressor5, 2),\n            _e3 = _TextChangeCompressor6[0],\n            _e4 = _TextChangeCompressor6[1];\n          mergePrev = _e3;\n          mergeCurr = currEdit;\n          prevEdit = _e4;\n          currEdit = this._getCurr(++currIndex);\n        } else {\n          var _TextChangeCompressor7 = TextChangeCompressor._splitCurr(currEdit, prevEdit.newLength),\n            _TextChangeCompressor8 = _slicedToArray(_TextChangeCompressor7, 2),\n            _e5 = _TextChangeCompressor8[0],\n            _e6 = _TextChangeCompressor8[1];\n          mergePrev = prevEdit;\n          mergeCurr = _e5;\n          prevEdit = this._getPrev(++prevIndex);\n          currEdit = _e6;\n        }\n        this._result[this._resultLen++] = new TextChange(mergePrev.oldPosition, mergePrev.oldText, mergeCurr.newPosition, mergeCurr.newText);\n        this._prevDeltaOffset += mergePrev.newLength - mergePrev.oldLength;\n        this._currDeltaOffset += mergeCurr.newLength - mergeCurr.oldLength;\n      }\n      var merged = TextChangeCompressor._merge(this._result);\n      var cleaned = TextChangeCompressor._removeNoOps(merged);\n      return cleaned;\n    }\n  }, {\n    key: \"_acceptCurr\",\n    value: function _acceptCurr(currEdit) {\n      this._result[this._resultLen++] = TextChangeCompressor._rebaseCurr(this._prevDeltaOffset, currEdit);\n      this._currDeltaOffset += currEdit.newLength - currEdit.oldLength;\n    }\n  }, {\n    key: \"_getCurr\",\n    value: function _getCurr(currIndex) {\n      return currIndex < this._currLen ? this._currEdits[currIndex] : null;\n    }\n  }, {\n    key: \"_acceptPrev\",\n    value: function _acceptPrev(prevEdit) {\n      this._result[this._resultLen++] = TextChangeCompressor._rebasePrev(this._currDeltaOffset, prevEdit);\n      this._prevDeltaOffset += prevEdit.newLength - prevEdit.oldLength;\n    }\n  }, {\n    key: \"_getPrev\",\n    value: function _getPrev(prevIndex) {\n      return prevIndex < this._prevLen ? this._prevEdits[prevIndex] : null;\n    }\n  }], [{\n    key: \"_rebaseCurr\",\n    value: function _rebaseCurr(prevDeltaOffset, currEdit) {\n      return new TextChange(currEdit.oldPosition - prevDeltaOffset, currEdit.oldText, currEdit.newPosition, currEdit.newText);\n    }\n  }, {\n    key: \"_rebasePrev\",\n    value: function _rebasePrev(currDeltaOffset, prevEdit) {\n      return new TextChange(prevEdit.oldPosition, prevEdit.oldText, prevEdit.newPosition + currDeltaOffset, prevEdit.newText);\n    }\n  }, {\n    key: \"_splitPrev\",\n    value: function _splitPrev(edit, offset) {\n      var preText = edit.newText.substr(0, offset);\n      var postText = edit.newText.substr(offset);\n      return [new TextChange(edit.oldPosition, edit.oldText, edit.newPosition, preText), new TextChange(edit.oldEnd, '', edit.newPosition + offset, postText)];\n    }\n  }, {\n    key: \"_splitCurr\",\n    value: function _splitCurr(edit, offset) {\n      var preText = edit.oldText.substr(0, offset);\n      var postText = edit.oldText.substr(offset);\n      return [new TextChange(edit.oldPosition, preText, edit.newPosition, edit.newText), new TextChange(edit.oldPosition + offset, postText, edit.newEnd, '')];\n    }\n  }, {\n    key: \"_merge\",\n    value: function _merge(edits) {\n      if (edits.length === 0) {\n        return edits;\n      }\n      var result = [];\n      var resultLen = 0;\n      var prev = edits[0];\n      for (var i = 1; i < edits.length; i++) {\n        var curr = edits[i];\n        if (prev.oldEnd === curr.oldPosition) {\n          // Merge into `prev`\n          prev = new TextChange(prev.oldPosition, prev.oldText + curr.oldText, prev.newPosition, prev.newText + curr.newText);\n        } else {\n          result[resultLen++] = prev;\n          prev = curr;\n        }\n      }\n      result[resultLen++] = prev;\n      return result;\n    }\n  }, {\n    key: \"_removeNoOps\",\n    value: function _removeNoOps(edits) {\n      if (edits.length === 0) {\n        return edits;\n      }\n      var result = [];\n      var resultLen = 0;\n      for (var i = 0; i < edits.length; i++) {\n        var edit = edits[i];\n        if (edit.oldText === edit.newText) {\n          continue;\n        }\n        result[resultLen++] = edit;\n      }\n      return result;\n    }\n  }]);\n}();","map":{"version":3,"names":["buffer","decodeUTF16LE","escapeNewLine","str","replace","TextChange","oldPosition","oldText","newPosition","newText","_classCallCheck","_createClass","key","get","length","value","toString","concat","writeSize","_writeStringSize","write","b","offset","writeUInt32BE","_writeString","len","i","writeUInt16LE","charCodeAt","_readString","readUInt32BE","read","dest","push","compressConsecutiveTextChanges","prevEdits","currEdits","compressor","TextChangeCompressor","compress","_prevEdits","_currEdits","_result","_resultLen","_prevLen","_prevDeltaOffset","_currLen","_currDeltaOffset","prevIndex","currIndex","prevEdit","_getPrev","currEdit","_getCurr","_acceptCurr","_acceptPrev","oldEnd","newEnd","_TextChangeCompressor","_splitCurr","_TextChangeCompressor2","_slicedToArray","e1","e2","_TextChangeCompressor3","_splitPrev","_TextChangeCompressor4","mergePrev","mergeCurr","_TextChangeCompressor5","oldLength","_TextChangeCompressor6","_TextChangeCompressor7","newLength","_TextChangeCompressor8","merged","_merge","cleaned","_removeNoOps","_rebaseCurr","_rebasePrev","prevDeltaOffset","currDeltaOffset","edit","preText","substr","postText","edits","result","resultLen","prev","curr"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/core/textChange.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as buffer from '../../../base/common/buffer.js';\nimport { decodeUTF16LE } from './stringBuilder.js';\nfunction escapeNewLine(str) {\n    return (str\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r'));\n}\nexport class TextChange {\n    get oldLength() {\n        return this.oldText.length;\n    }\n    get oldEnd() {\n        return this.oldPosition + this.oldText.length;\n    }\n    get newLength() {\n        return this.newText.length;\n    }\n    get newEnd() {\n        return this.newPosition + this.newText.length;\n    }\n    constructor(oldPosition, oldText, newPosition, newText) {\n        this.oldPosition = oldPosition;\n        this.oldText = oldText;\n        this.newPosition = newPosition;\n        this.newText = newText;\n    }\n    toString() {\n        if (this.oldText.length === 0) {\n            return `(insert@${this.oldPosition} \"${escapeNewLine(this.newText)}\")`;\n        }\n        if (this.newText.length === 0) {\n            return `(delete@${this.oldPosition} \"${escapeNewLine(this.oldText)}\")`;\n        }\n        return `(replace@${this.oldPosition} \"${escapeNewLine(this.oldText)}\" with \"${escapeNewLine(this.newText)}\")`;\n    }\n    static _writeStringSize(str) {\n        return (4 + 2 * str.length);\n    }\n    static _writeString(b, str, offset) {\n        const len = str.length;\n        buffer.writeUInt32BE(b, len, offset);\n        offset += 4;\n        for (let i = 0; i < len; i++) {\n            buffer.writeUInt16LE(b, str.charCodeAt(i), offset);\n            offset += 2;\n        }\n        return offset;\n    }\n    static _readString(b, offset) {\n        const len = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        return decodeUTF16LE(b, offset, len);\n    }\n    writeSize() {\n        return (+4 // oldPosition\n            + 4 // newPosition\n            + TextChange._writeStringSize(this.oldText)\n            + TextChange._writeStringSize(this.newText));\n    }\n    write(b, offset) {\n        buffer.writeUInt32BE(b, this.oldPosition, offset);\n        offset += 4;\n        buffer.writeUInt32BE(b, this.newPosition, offset);\n        offset += 4;\n        offset = TextChange._writeString(b, this.oldText, offset);\n        offset = TextChange._writeString(b, this.newText, offset);\n        return offset;\n    }\n    static read(b, offset, dest) {\n        const oldPosition = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const newPosition = buffer.readUInt32BE(b, offset);\n        offset += 4;\n        const oldText = TextChange._readString(b, offset);\n        offset += TextChange._writeStringSize(oldText);\n        const newText = TextChange._readString(b, offset);\n        offset += TextChange._writeStringSize(newText);\n        dest.push(new TextChange(oldPosition, oldText, newPosition, newText));\n        return offset;\n    }\n}\nexport function compressConsecutiveTextChanges(prevEdits, currEdits) {\n    if (prevEdits === null || prevEdits.length === 0) {\n        return currEdits;\n    }\n    const compressor = new TextChangeCompressor(prevEdits, currEdits);\n    return compressor.compress();\n}\nclass TextChangeCompressor {\n    constructor(prevEdits, currEdits) {\n        this._prevEdits = prevEdits;\n        this._currEdits = currEdits;\n        this._result = [];\n        this._resultLen = 0;\n        this._prevLen = this._prevEdits.length;\n        this._prevDeltaOffset = 0;\n        this._currLen = this._currEdits.length;\n        this._currDeltaOffset = 0;\n    }\n    compress() {\n        let prevIndex = 0;\n        let currIndex = 0;\n        let prevEdit = this._getPrev(prevIndex);\n        let currEdit = this._getCurr(currIndex);\n        while (prevIndex < this._prevLen || currIndex < this._currLen) {\n            if (prevEdit === null) {\n                this._acceptCurr(currEdit);\n                currEdit = this._getCurr(++currIndex);\n                continue;\n            }\n            if (currEdit === null) {\n                this._acceptPrev(prevEdit);\n                prevEdit = this._getPrev(++prevIndex);\n                continue;\n            }\n            if (currEdit.oldEnd <= prevEdit.newPosition) {\n                this._acceptCurr(currEdit);\n                currEdit = this._getCurr(++currIndex);\n                continue;\n            }\n            if (prevEdit.newEnd <= currEdit.oldPosition) {\n                this._acceptPrev(prevEdit);\n                prevEdit = this._getPrev(++prevIndex);\n                continue;\n            }\n            if (currEdit.oldPosition < prevEdit.newPosition) {\n                const [e1, e2] = TextChangeCompressor._splitCurr(currEdit, prevEdit.newPosition - currEdit.oldPosition);\n                this._acceptCurr(e1);\n                currEdit = e2;\n                continue;\n            }\n            if (prevEdit.newPosition < currEdit.oldPosition) {\n                const [e1, e2] = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldPosition - prevEdit.newPosition);\n                this._acceptPrev(e1);\n                prevEdit = e2;\n                continue;\n            }\n            // At this point, currEdit.oldPosition === prevEdit.newPosition\n            let mergePrev;\n            let mergeCurr;\n            if (currEdit.oldEnd === prevEdit.newEnd) {\n                mergePrev = prevEdit;\n                mergeCurr = currEdit;\n                prevEdit = this._getPrev(++prevIndex);\n                currEdit = this._getCurr(++currIndex);\n            }\n            else if (currEdit.oldEnd < prevEdit.newEnd) {\n                const [e1, e2] = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldLength);\n                mergePrev = e1;\n                mergeCurr = currEdit;\n                prevEdit = e2;\n                currEdit = this._getCurr(++currIndex);\n            }\n            else {\n                const [e1, e2] = TextChangeCompressor._splitCurr(currEdit, prevEdit.newLength);\n                mergePrev = prevEdit;\n                mergeCurr = e1;\n                prevEdit = this._getPrev(++prevIndex);\n                currEdit = e2;\n            }\n            this._result[this._resultLen++] = new TextChange(mergePrev.oldPosition, mergePrev.oldText, mergeCurr.newPosition, mergeCurr.newText);\n            this._prevDeltaOffset += mergePrev.newLength - mergePrev.oldLength;\n            this._currDeltaOffset += mergeCurr.newLength - mergeCurr.oldLength;\n        }\n        const merged = TextChangeCompressor._merge(this._result);\n        const cleaned = TextChangeCompressor._removeNoOps(merged);\n        return cleaned;\n    }\n    _acceptCurr(currEdit) {\n        this._result[this._resultLen++] = TextChangeCompressor._rebaseCurr(this._prevDeltaOffset, currEdit);\n        this._currDeltaOffset += currEdit.newLength - currEdit.oldLength;\n    }\n    _getCurr(currIndex) {\n        return (currIndex < this._currLen ? this._currEdits[currIndex] : null);\n    }\n    _acceptPrev(prevEdit) {\n        this._result[this._resultLen++] = TextChangeCompressor._rebasePrev(this._currDeltaOffset, prevEdit);\n        this._prevDeltaOffset += prevEdit.newLength - prevEdit.oldLength;\n    }\n    _getPrev(prevIndex) {\n        return (prevIndex < this._prevLen ? this._prevEdits[prevIndex] : null);\n    }\n    static _rebaseCurr(prevDeltaOffset, currEdit) {\n        return new TextChange(currEdit.oldPosition - prevDeltaOffset, currEdit.oldText, currEdit.newPosition, currEdit.newText);\n    }\n    static _rebasePrev(currDeltaOffset, prevEdit) {\n        return new TextChange(prevEdit.oldPosition, prevEdit.oldText, prevEdit.newPosition + currDeltaOffset, prevEdit.newText);\n    }\n    static _splitPrev(edit, offset) {\n        const preText = edit.newText.substr(0, offset);\n        const postText = edit.newText.substr(offset);\n        return [\n            new TextChange(edit.oldPosition, edit.oldText, edit.newPosition, preText),\n            new TextChange(edit.oldEnd, '', edit.newPosition + offset, postText)\n        ];\n    }\n    static _splitCurr(edit, offset) {\n        const preText = edit.oldText.substr(0, offset);\n        const postText = edit.oldText.substr(offset);\n        return [\n            new TextChange(edit.oldPosition, preText, edit.newPosition, edit.newText),\n            new TextChange(edit.oldPosition + offset, postText, edit.newEnd, '')\n        ];\n    }\n    static _merge(edits) {\n        if (edits.length === 0) {\n            return edits;\n        }\n        const result = [];\n        let resultLen = 0;\n        let prev = edits[0];\n        for (let i = 1; i < edits.length; i++) {\n            const curr = edits[i];\n            if (prev.oldEnd === curr.oldPosition) {\n                // Merge into `prev`\n                prev = new TextChange(prev.oldPosition, prev.oldText + curr.oldText, prev.newPosition, prev.newText + curr.newText);\n            }\n            else {\n                result[resultLen++] = prev;\n                prev = curr;\n            }\n        }\n        result[resultLen++] = prev;\n        return result;\n    }\n    static _removeNoOps(edits) {\n        if (edits.length === 0) {\n            return edits;\n        }\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0; i < edits.length; i++) {\n            const edit = edits[i];\n            if (edit.oldText === edit.newText) {\n                continue;\n            }\n            result[resultLen++] = edit;\n        }\n        return result;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}