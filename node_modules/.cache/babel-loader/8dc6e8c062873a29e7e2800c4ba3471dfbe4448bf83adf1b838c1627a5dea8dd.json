{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function diffSets(before, after) {\n  var removed = [];\n  var added = [];\n  var _iterator = _createForOfIteratorHelper(before),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var element = _step.value;\n      if (!after.has(element)) {\n        removed.push(element);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(after),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _element = _step2.value;\n      if (!before.has(_element)) {\n        added.push(_element);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return {\n    removed: removed,\n    added: added\n  };\n}\n/**\n * Computes the intersection of two sets.\n *\n * @param setA - The first set.\n * @param setB - The second iterable.\n * @returns A new set containing the elements that are in both `setA` and `setB`.\n */\nexport function intersection(setA, setB) {\n  var result = new Set();\n  var _iterator3 = _createForOfIteratorHelper(setB),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var elem = _step3.value;\n      if (setA.has(elem)) {\n        result.add(elem);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return result;\n}","map":{"version":3,"names":["diffSets","before","after","removed","added","_iterator","_createForOfIteratorHelper","_step","s","n","done","element","value","has","push","err","e","f","_iterator2","_step2","intersection","setA","setB","result","Set","_iterator3","_step3","elem","add"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/base/common/collections.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport function diffSets(before, after) {\n    const removed = [];\n    const added = [];\n    for (const element of before) {\n        if (!after.has(element)) {\n            removed.push(element);\n        }\n    }\n    for (const element of after) {\n        if (!before.has(element)) {\n            added.push(element);\n        }\n    }\n    return { removed, added };\n}\n/**\n * Computes the intersection of two sets.\n *\n * @param setA - The first set.\n * @param setB - The second iterable.\n * @returns A new set containing the elements that are in both `setA` and `setB`.\n */\nexport function intersection(setA, setB) {\n    const result = new Set();\n    for (const elem of setB) {\n        if (setA.has(elem)) {\n            result.add(elem);\n        }\n    }\n    return result;\n}\n"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQA,CAACC,MAAM,EAAEC,KAAK,EAAE;EACpC,IAAMC,OAAO,GAAG,EAAE;EAClB,IAAMC,KAAK,GAAG,EAAE;EAAC,IAAAC,SAAA,GAAAC,0BAAA,CACKL,MAAM;IAAAM,KAAA;EAAA;IAA5B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA8B;MAAA,IAAnBC,OAAO,GAAAJ,KAAA,CAAAK,KAAA;MACd,IAAI,CAACV,KAAK,CAACW,GAAG,CAACF,OAAO,CAAC,EAAE;QACrBR,OAAO,CAACW,IAAI,CAACH,OAAO,CAAC;MACzB;IACJ;EAAC,SAAAI,GAAA;IAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;EAAA;IAAAV,SAAA,CAAAY,CAAA;EAAA;EAAA,IAAAC,UAAA,GAAAZ,0BAAA,CACqBJ,KAAK;IAAAiB,MAAA;EAAA;IAA3B,KAAAD,UAAA,CAAAV,CAAA,MAAAW,MAAA,GAAAD,UAAA,CAAAT,CAAA,IAAAC,IAAA,GAA6B;MAAA,IAAlBC,QAAO,GAAAQ,MAAA,CAAAP,KAAA;MACd,IAAI,CAACX,MAAM,CAACY,GAAG,CAACF,QAAO,CAAC,EAAE;QACtBP,KAAK,CAACU,IAAI,CAACH,QAAO,CAAC;MACvB;IACJ;EAAC,SAAAI,GAAA;IAAAG,UAAA,CAAAF,CAAA,CAAAD,GAAA;EAAA;IAAAG,UAAA,CAAAD,CAAA;EAAA;EACD,OAAO;IAAEd,OAAO,EAAPA,OAAO;IAAEC,KAAK,EAALA;EAAM,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,YAAYA,CAACC,IAAI,EAAEC,IAAI,EAAE;EACrC,IAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;EAAC,IAAAC,UAAA,GAAAnB,0BAAA,CACNgB,IAAI;IAAAI,MAAA;EAAA;IAAvB,KAAAD,UAAA,CAAAjB,CAAA,MAAAkB,MAAA,GAAAD,UAAA,CAAAhB,CAAA,IAAAC,IAAA,GAAyB;MAAA,IAAdiB,IAAI,GAAAD,MAAA,CAAAd,KAAA;MACX,IAAIS,IAAI,CAACR,GAAG,CAACc,IAAI,CAAC,EAAE;QAChBJ,MAAM,CAACK,GAAG,CAACD,IAAI,CAAC;MACpB;IACJ;EAAC,SAAAZ,GAAA;IAAAU,UAAA,CAAAT,CAAA,CAAAD,GAAA;EAAA;IAAAU,UAAA,CAAAR,CAAA;EAAA;EACD,OAAOM,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}