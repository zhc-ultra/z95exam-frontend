{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _get from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _typeof from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.create.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar TextModel_1;\nimport { ArrayQueue, pushMany } from '../../../base/common/arrays.js';\nimport { Color } from '../../../base/common/color.js';\nimport { BugIndicatingError, illegalArgument, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, MutableDisposable, combinedDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { normalizeIndentation as _normalizeIndentation } from '../core/indentation.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport * as model from '../model.js';\nimport { BracketPairsTextModelPart } from './bracketPairsTextModelPart/bracketPairsImpl.js';\nimport { ColorizedBracketPairsDecorationProvider } from './bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js';\nimport { EditStack } from './editStack.js';\nimport { GuidesTextModelPart } from './guidesTextModelPart.js';\nimport { guessIndentation } from './indentationGuesser.js';\nimport { IntervalNode, IntervalTree, recomputeMaxEnd } from './intervalTree.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer/pieceTreeTextBuffer.js';\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\nimport { TokenizationTextModelPart } from './tokenizationTextModelPart.js';\nimport { InternalModelContentChangeEvent, LineInjectedText, ModelInjectedTextChangedEvent, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted } from '../textModelEvents.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nexport function createTextBufferFactory(text) {\n  var builder = new PieceTreeTextBufferBuilder();\n  builder.acceptChunk(text);\n  return builder.finish();\n}\nexport function createTextBufferFactoryFromSnapshot(snapshot) {\n  var builder = new PieceTreeTextBufferBuilder();\n  var chunk;\n  while (typeof (chunk = snapshot.read()) === 'string') {\n    builder.acceptChunk(chunk);\n  }\n  return builder.finish();\n}\nexport function createTextBuffer(value, defaultEOL) {\n  var factory;\n  if (typeof value === 'string') {\n    factory = createTextBufferFactory(value);\n  } else if (model.isITextSnapshot(value)) {\n    factory = createTextBufferFactoryFromSnapshot(value);\n  } else {\n    factory = value;\n  }\n  return factory.create(defaultEOL);\n}\nvar MODEL_ID = 0;\nvar LIMIT_FIND_COUNT = 999;\nvar LONG_LINE_BOUNDARY = 10000;\nvar TextModelSnapshot = /*#__PURE__*/function () {\n  function TextModelSnapshot(source) {\n    _classCallCheck(this, TextModelSnapshot);\n    this._source = source;\n    this._eos = false;\n  }\n  return _createClass(TextModelSnapshot, [{\n    key: \"read\",\n    value: function read() {\n      if (this._eos) {\n        return null;\n      }\n      var result = [];\n      var resultCnt = 0;\n      var resultLength = 0;\n      do {\n        var tmp = this._source.read();\n        if (tmp === null) {\n          // end-of-stream\n          this._eos = true;\n          if (resultCnt === 0) {\n            return null;\n          } else {\n            return result.join('');\n          }\n        }\n        if (tmp.length > 0) {\n          result[resultCnt++] = tmp;\n          resultLength += tmp.length;\n        }\n        if (resultLength >= 64 * 1024) {\n          return result.join('');\n        }\n      } while (true);\n    }\n  }]);\n}();\nvar invalidFunc = function invalidFunc() {\n  throw new Error(\"Invalid change accessor\");\n};\nvar TextModel = TextModel_1 = /*#__PURE__*/function (_Disposable) {\n  function TextModel(source, languageIdOrSelection, creationOptions) {\n    var _this;\n    var associatedResource = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var _undoRedoService = arguments.length > 4 ? arguments[4] : undefined;\n    var _languageService = arguments.length > 5 ? arguments[5] : undefined;\n    var _languageConfigurationService = arguments.length > 6 ? arguments[6] : undefined;\n    _classCallCheck(this, TextModel);\n    _this = _callSuper(this, TextModel);\n    _this._undoRedoService = _undoRedoService;\n    _this._languageService = _languageService;\n    _this._languageConfigurationService = _languageConfigurationService;\n    //#region Events\n    _this._onWillDispose = _this._register(new Emitter());\n    _this.onWillDispose = _this._onWillDispose.event;\n    _this._onDidChangeDecorations = _this._register(new DidChangeDecorationsEmitter(function (affectedInjectedTextLines) {\n      return _this.handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines);\n    }));\n    _this.onDidChangeDecorations = _this._onDidChangeDecorations.event;\n    _this._onDidChangeOptions = _this._register(new Emitter());\n    _this.onDidChangeOptions = _this._onDidChangeOptions.event;\n    _this._onDidChangeAttached = _this._register(new Emitter());\n    _this.onDidChangeAttached = _this._onDidChangeAttached.event;\n    _this._onDidChangeInjectedText = _this._register(new Emitter());\n    _this._eventEmitter = _this._register(new DidChangeContentEmitter());\n    _this._languageSelectionListener = _this._register(new MutableDisposable());\n    _this._deltaDecorationCallCnt = 0;\n    _this._attachedViews = new AttachedViews();\n    // Generate a new unique model id\n    MODEL_ID++;\n    _this.id = '$model' + MODEL_ID;\n    _this.isForSimpleWidget = creationOptions.isForSimpleWidget;\n    if (typeof associatedResource === 'undefined' || associatedResource === null) {\n      _this._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n    } else {\n      _this._associatedResource = associatedResource;\n    }\n    _this._attachedEditorCount = 0;\n    var _createTextBuffer = createTextBuffer(source, creationOptions.defaultEOL),\n      textBuffer = _createTextBuffer.textBuffer,\n      disposable = _createTextBuffer.disposable;\n    _this._buffer = textBuffer;\n    _this._bufferDisposable = disposable;\n    _this._options = TextModel_1.resolveOptions(_this._buffer, creationOptions);\n    var languageId = typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId;\n    if (typeof languageIdOrSelection !== 'string') {\n      _this._languageSelectionListener.value = languageIdOrSelection.onDidChange(function () {\n        return _this._setLanguage(languageIdOrSelection.languageId);\n      });\n    }\n    _this._bracketPairs = _this._register(new BracketPairsTextModelPart(_this, _this._languageConfigurationService));\n    _this._guidesTextModelPart = _this._register(new GuidesTextModelPart(_this, _this._languageConfigurationService));\n    _this._decorationProvider = _this._register(new ColorizedBracketPairsDecorationProvider(_this));\n    _this._tokenizationTextModelPart = new TokenizationTextModelPart(_this._languageService, _this._languageConfigurationService, _this, _this._bracketPairs, languageId, _this._attachedViews);\n    var bufferLineCount = _this._buffer.getLineCount();\n    var bufferTextLength = _this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, _this._buffer.getLineLength(bufferLineCount) + 1), 0 /* model.EndOfLinePreference.TextDefined */);\n    // !!! Make a decision in the ctor and permanently respect this decision !!!\n    // If a model is too large at construction time, it will never get tokenized,\n    // under no circumstances.\n    if (creationOptions.largeFileOptimizations) {\n      _this._isTooLargeForTokenization = bufferTextLength > TextModel_1.LARGE_FILE_SIZE_THRESHOLD || bufferLineCount > TextModel_1.LARGE_FILE_LINE_COUNT_THRESHOLD;\n      _this._isTooLargeForHeapOperation = bufferTextLength > TextModel_1.LARGE_FILE_HEAP_OPERATION_THRESHOLD;\n    } else {\n      _this._isTooLargeForTokenization = false;\n      _this._isTooLargeForHeapOperation = false;\n    }\n    _this._isTooLargeForSyncing = bufferTextLength > TextModel_1._MODEL_SYNC_LIMIT;\n    _this._versionId = 1;\n    _this._alternativeVersionId = 1;\n    _this._initialUndoRedoSnapshot = null;\n    _this._isDisposed = false;\n    _this.__isDisposing = false;\n    _this._instanceId = strings.singleLetterHash(MODEL_ID);\n    _this._lastDecorationId = 0;\n    _this._decorations = Object.create(null);\n    _this._decorationsTree = new DecorationsTrees();\n    _this._commandManager = new EditStack(_this, _this._undoRedoService);\n    _this._isUndoing = false;\n    _this._isRedoing = false;\n    _this._trimAutoWhitespaceLines = null;\n    _this._register(_this._decorationProvider.onDidChange(function () {\n      _this._onDidChangeDecorations.beginDeferredEmit();\n      _this._onDidChangeDecorations.fire();\n      _this._onDidChangeDecorations.endDeferredEmit();\n    }));\n    _this._languageService.requestRichLanguageFeatures(languageId);\n    return _this;\n  }\n  _inherits(TextModel, _Disposable);\n  return _createClass(TextModel, [{\n    key: \"onDidChangeLanguage\",\n    get: function get() {\n      return this._tokenizationTextModelPart.onDidChangeLanguage;\n    }\n  }, {\n    key: \"onDidChangeLanguageConfiguration\",\n    get: function get() {\n      return this._tokenizationTextModelPart.onDidChangeLanguageConfiguration;\n    }\n  }, {\n    key: \"onDidChangeTokens\",\n    get: function get() {\n      return this._tokenizationTextModelPart.onDidChangeTokens;\n    }\n  }, {\n    key: \"onDidChangeContent\",\n    value: function onDidChangeContent(listener) {\n      return this._eventEmitter.slowEvent(function (e) {\n        return listener(e.contentChangedEvent);\n      });\n    }\n  }, {\n    key: \"onDidChangeContentOrInjectedText\",\n    value: function onDidChangeContentOrInjectedText(listener) {\n      return combinedDisposable(this._eventEmitter.fastEvent(function (e) {\n        return listener(e);\n      }), this._onDidChangeInjectedText.event(function (e) {\n        return listener(e);\n      }));\n    }\n  }, {\n    key: \"_isDisposing\",\n    value: function _isDisposing() {\n      return this.__isDisposing;\n    }\n  }, {\n    key: \"tokenization\",\n    get: function get() {\n      return this._tokenizationTextModelPart;\n    }\n  }, {\n    key: \"bracketPairs\",\n    get: function get() {\n      return this._bracketPairs;\n    }\n  }, {\n    key: \"guides\",\n    get: function get() {\n      return this._guidesTextModelPart;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.__isDisposing = true;\n      this._onWillDispose.fire();\n      this._tokenizationTextModelPart.dispose();\n      this._isDisposed = true;\n      _get(_getPrototypeOf(TextModel.prototype), \"dispose\", this).call(this);\n      this._bufferDisposable.dispose();\n      this.__isDisposing = false;\n      // Manually release reference to previous text buffer to avoid large leaks\n      // in case someone leaks a TextModel reference\n      var emptyDisposedTextBuffer = new PieceTreeTextBuffer([], '', '\\n', false, false, true, true);\n      emptyDisposedTextBuffer.dispose();\n      this._buffer = emptyDisposedTextBuffer;\n      this._bufferDisposable = Disposable.None;\n    }\n  }, {\n    key: \"_assertNotDisposed\",\n    value: function _assertNotDisposed() {\n      if (this._isDisposed) {\n        throw new Error('Model is disposed!');\n      }\n    }\n  }, {\n    key: \"_emitContentChangedEvent\",\n    value: function _emitContentChangedEvent(rawChange, change) {\n      if (this.__isDisposing) {\n        // Do not confuse listeners by emitting any event after disposing\n        return;\n      }\n      this._tokenizationTextModelPart.handleDidChangeContent(change);\n      this._bracketPairs.handleDidChangeContent(change);\n      this._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      this._assertNotDisposed();\n      if (value === null || value === undefined) {\n        throw illegalArgument();\n      }\n      var _createTextBuffer2 = createTextBuffer(value, this._options.defaultEOL),\n        textBuffer = _createTextBuffer2.textBuffer,\n        disposable = _createTextBuffer2.disposable;\n      this._setValueFromTextBuffer(textBuffer, disposable);\n    }\n  }, {\n    key: \"_createContentChanged2\",\n    value: function _createContentChanged2(range, rangeOffset, rangeLength, text, isUndoing, isRedoing, isFlush, isEolChange) {\n      return {\n        changes: [{\n          range: range,\n          rangeOffset: rangeOffset,\n          rangeLength: rangeLength,\n          text: text\n        }],\n        eol: this._buffer.getEOL(),\n        isEolChange: isEolChange,\n        versionId: this.getVersionId(),\n        isUndoing: isUndoing,\n        isRedoing: isRedoing,\n        isFlush: isFlush\n      };\n    }\n  }, {\n    key: \"_setValueFromTextBuffer\",\n    value: function _setValueFromTextBuffer(textBuffer, textBufferDisposable) {\n      this._assertNotDisposed();\n      var oldFullModelRange = this.getFullModelRange();\n      var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n      var endLineNumber = this.getLineCount();\n      var endColumn = this.getLineMaxColumn(endLineNumber);\n      this._buffer = textBuffer;\n      this._bufferDisposable.dispose();\n      this._bufferDisposable = textBufferDisposable;\n      this._increaseVersionId();\n      // Destroy all my decorations\n      this._decorations = Object.create(null);\n      this._decorationsTree = new DecorationsTrees();\n      // Destroy my edit history and settings\n      this._commandManager.clear();\n      this._trimAutoWhitespaceLines = null;\n      this._emitContentChangedEvent(new ModelRawContentChangedEvent([new ModelRawFlush()], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, true, false));\n    }\n  }, {\n    key: \"setEOL\",\n    value: function setEOL(eol) {\n      this._assertNotDisposed();\n      var newEOL = eol === 1 /* model.EndOfLineSequence.CRLF */ ? '\\r\\n' : '\\n';\n      if (this._buffer.getEOL() === newEOL) {\n        // Nothing to do\n        return;\n      }\n      var oldFullModelRange = this.getFullModelRange();\n      var oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n      var endLineNumber = this.getLineCount();\n      var endColumn = this.getLineMaxColumn(endLineNumber);\n      this._onBeforeEOLChange();\n      this._buffer.setEOL(newEOL);\n      this._increaseVersionId();\n      this._onAfterEOLChange();\n      this._emitContentChangedEvent(new ModelRawContentChangedEvent([new ModelRawEOLChanged()], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, false, true));\n    }\n  }, {\n    key: \"_onBeforeEOLChange\",\n    value: function _onBeforeEOLChange() {\n      // Ensure all decorations get their `range` set.\n      this._decorationsTree.ensureAllNodesHaveRanges(this);\n    }\n  }, {\n    key: \"_onAfterEOLChange\",\n    value: function _onAfterEOLChange() {\n      // Transform back `range` to offsets\n      var versionId = this.getVersionId();\n      var allDecorations = this._decorationsTree.collectNodesPostOrder();\n      for (var i = 0, len = allDecorations.length; i < len; i++) {\n        var node = allDecorations[i];\n        var range = node.range; // the range is defined due to `_onBeforeEOLChange`\n        var delta = node.cachedAbsoluteStart - node.start;\n        var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        node.cachedAbsoluteStart = startOffset;\n        node.cachedAbsoluteEnd = endOffset;\n        node.cachedVersionId = versionId;\n        node.start = startOffset - delta;\n        node.end = endOffset - delta;\n        recomputeMaxEnd(node);\n      }\n    }\n  }, {\n    key: \"onBeforeAttached\",\n    value: function onBeforeAttached() {\n      this._attachedEditorCount++;\n      if (this._attachedEditorCount === 1) {\n        this._tokenizationTextModelPart.handleDidChangeAttached();\n        this._onDidChangeAttached.fire(undefined);\n      }\n      return this._attachedViews.attachView();\n    }\n  }, {\n    key: \"onBeforeDetached\",\n    value: function onBeforeDetached(view) {\n      this._attachedEditorCount--;\n      if (this._attachedEditorCount === 0) {\n        this._tokenizationTextModelPart.handleDidChangeAttached();\n        this._onDidChangeAttached.fire(undefined);\n      }\n      this._attachedViews.detachView(view);\n    }\n  }, {\n    key: \"isAttachedToEditor\",\n    value: function isAttachedToEditor() {\n      return this._attachedEditorCount > 0;\n    }\n  }, {\n    key: \"getAttachedEditorCount\",\n    value: function getAttachedEditorCount() {\n      return this._attachedEditorCount;\n    }\n  }, {\n    key: \"isTooLargeForSyncing\",\n    value: function isTooLargeForSyncing() {\n      return this._isTooLargeForSyncing;\n    }\n  }, {\n    key: \"isTooLargeForTokenization\",\n    value: function isTooLargeForTokenization() {\n      return this._isTooLargeForTokenization;\n    }\n  }, {\n    key: \"isTooLargeForHeapOperation\",\n    value: function isTooLargeForHeapOperation() {\n      return this._isTooLargeForHeapOperation;\n    }\n  }, {\n    key: \"isDisposed\",\n    value: function isDisposed() {\n      return this._isDisposed;\n    }\n  }, {\n    key: \"isDominatedByLongLines\",\n    value: function isDominatedByLongLines() {\n      this._assertNotDisposed();\n      if (this.isTooLargeForTokenization()) {\n        // Cannot word wrap huge files anyways, so it doesn't really matter\n        return false;\n      }\n      var smallLineCharCount = 0;\n      var longLineCharCount = 0;\n      var lineCount = this._buffer.getLineCount();\n      for (var lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n        var lineLength = this._buffer.getLineLength(lineNumber);\n        if (lineLength >= LONG_LINE_BOUNDARY) {\n          longLineCharCount += lineLength;\n        } else {\n          smallLineCharCount += lineLength;\n        }\n      }\n      return longLineCharCount > smallLineCharCount;\n    }\n  }, {\n    key: \"uri\",\n    get: function get() {\n      return this._associatedResource;\n    }\n    //#region Options\n  }, {\n    key: \"getOptions\",\n    value: function getOptions() {\n      this._assertNotDisposed();\n      return this._options;\n    }\n  }, {\n    key: \"getFormattingOptions\",\n    value: function getFormattingOptions() {\n      return {\n        tabSize: this._options.indentSize,\n        insertSpaces: this._options.insertSpaces\n      };\n    }\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(_newOpts) {\n      this._assertNotDisposed();\n      var tabSize = typeof _newOpts.tabSize !== 'undefined' ? _newOpts.tabSize : this._options.tabSize;\n      var indentSize = typeof _newOpts.indentSize !== 'undefined' ? _newOpts.indentSize : this._options.originalIndentSize;\n      var insertSpaces = typeof _newOpts.insertSpaces !== 'undefined' ? _newOpts.insertSpaces : this._options.insertSpaces;\n      var trimAutoWhitespace = typeof _newOpts.trimAutoWhitespace !== 'undefined' ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\n      var bracketPairColorizationOptions = typeof _newOpts.bracketColorizationOptions !== 'undefined' ? _newOpts.bracketColorizationOptions : this._options.bracketPairColorizationOptions;\n      var newOpts = new model.TextModelResolvedOptions({\n        tabSize: tabSize,\n        indentSize: indentSize,\n        insertSpaces: insertSpaces,\n        defaultEOL: this._options.defaultEOL,\n        trimAutoWhitespace: trimAutoWhitespace,\n        bracketPairColorizationOptions: bracketPairColorizationOptions\n      });\n      if (this._options.equals(newOpts)) {\n        return;\n      }\n      var e = this._options.createChangeEvent(newOpts);\n      this._options = newOpts;\n      this._bracketPairs.handleDidChangeOptions(e);\n      this._decorationProvider.handleDidChangeOptions(e);\n      this._onDidChangeOptions.fire(e);\n    }\n  }, {\n    key: \"detectIndentation\",\n    value: function detectIndentation(defaultInsertSpaces, defaultTabSize) {\n      this._assertNotDisposed();\n      var guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\n      this.updateOptions({\n        insertSpaces: guessedIndentation.insertSpaces,\n        tabSize: guessedIndentation.tabSize,\n        indentSize: guessedIndentation.tabSize // TODO@Alex: guess indentSize independent of tabSize\n      });\n    }\n  }, {\n    key: \"normalizeIndentation\",\n    value: function normalizeIndentation(str) {\n      this._assertNotDisposed();\n      return _normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\n    }\n    //#endregion\n    //#region Reading\n  }, {\n    key: \"getVersionId\",\n    value: function getVersionId() {\n      this._assertNotDisposed();\n      return this._versionId;\n    }\n  }, {\n    key: \"mightContainRTL\",\n    value: function mightContainRTL() {\n      return this._buffer.mightContainRTL();\n    }\n  }, {\n    key: \"mightContainUnusualLineTerminators\",\n    value: function mightContainUnusualLineTerminators() {\n      return this._buffer.mightContainUnusualLineTerminators();\n    }\n  }, {\n    key: \"removeUnusualLineTerminators\",\n    value: function removeUnusualLineTerminators() {\n      var selections = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var matches = this.findMatches(strings.UNUSUAL_LINE_TERMINATORS.source, false, true, false, null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n      this._buffer.resetMightContainUnusualLineTerminators();\n      this.pushEditOperations(selections, matches.map(function (m) {\n        return {\n          range: m.range,\n          text: null\n        };\n      }), function () {\n        return null;\n      });\n    }\n  }, {\n    key: \"mightContainNonBasicASCII\",\n    value: function mightContainNonBasicASCII() {\n      return this._buffer.mightContainNonBasicASCII();\n    }\n  }, {\n    key: \"getAlternativeVersionId\",\n    value: function getAlternativeVersionId() {\n      this._assertNotDisposed();\n      return this._alternativeVersionId;\n    }\n  }, {\n    key: \"getInitialUndoRedoSnapshot\",\n    value: function getInitialUndoRedoSnapshot() {\n      this._assertNotDisposed();\n      return this._initialUndoRedoSnapshot;\n    }\n  }, {\n    key: \"getOffsetAt\",\n    value: function getOffsetAt(rawPosition) {\n      this._assertNotDisposed();\n      var position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, 0 /* StringOffsetValidationType.Relaxed */);\n      return this._buffer.getOffsetAt(position.lineNumber, position.column);\n    }\n  }, {\n    key: \"getPositionAt\",\n    value: function getPositionAt(rawOffset) {\n      this._assertNotDisposed();\n      var offset = Math.min(this._buffer.getLength(), Math.max(0, rawOffset));\n      return this._buffer.getPositionAt(offset);\n    }\n  }, {\n    key: \"_increaseVersionId\",\n    value: function _increaseVersionId() {\n      this._versionId = this._versionId + 1;\n      this._alternativeVersionId = this._versionId;\n    }\n  }, {\n    key: \"_overwriteVersionId\",\n    value: function _overwriteVersionId(versionId) {\n      this._versionId = versionId;\n    }\n  }, {\n    key: \"_overwriteAlternativeVersionId\",\n    value: function _overwriteAlternativeVersionId(newAlternativeVersionId) {\n      this._alternativeVersionId = newAlternativeVersionId;\n    }\n  }, {\n    key: \"_overwriteInitialUndoRedoSnapshot\",\n    value: function _overwriteInitialUndoRedoSnapshot(newInitialUndoRedoSnapshot) {\n      this._initialUndoRedoSnapshot = newInitialUndoRedoSnapshot;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(eol) {\n      var preserveBOM = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this._assertNotDisposed();\n      if (this.isTooLargeForHeapOperation()) {\n        throw new BugIndicatingError('Operation would exceed heap memory limits');\n      }\n      var fullModelRange = this.getFullModelRange();\n      var fullModelValue = this.getValueInRange(fullModelRange, eol);\n      if (preserveBOM) {\n        return this._buffer.getBOM() + fullModelValue;\n      }\n      return fullModelValue;\n    }\n  }, {\n    key: \"createSnapshot\",\n    value: function createSnapshot() {\n      var preserveBOM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new TextModelSnapshot(this._buffer.createSnapshot(preserveBOM));\n    }\n  }, {\n    key: \"getValueLength\",\n    value: function getValueLength(eol) {\n      var preserveBOM = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this._assertNotDisposed();\n      var fullModelRange = this.getFullModelRange();\n      var fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n      if (preserveBOM) {\n        return this._buffer.getBOM().length + fullModelValue;\n      }\n      return fullModelValue;\n    }\n  }, {\n    key: \"getValueInRange\",\n    value: function getValueInRange(rawRange) {\n      var eol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this._assertNotDisposed();\n      return this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n    }\n  }, {\n    key: \"getValueLengthInRange\",\n    value: function getValueLengthInRange(rawRange) {\n      var eol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this._assertNotDisposed();\n      return this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\n    }\n  }, {\n    key: \"getCharacterCountInRange\",\n    value: function getCharacterCountInRange(rawRange) {\n      var eol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this._assertNotDisposed();\n      return this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\n    }\n  }, {\n    key: \"getLineCount\",\n    value: function getLineCount() {\n      this._assertNotDisposed();\n      return this._buffer.getLineCount();\n    }\n  }, {\n    key: \"getLineContent\",\n    value: function getLineContent(lineNumber) {\n      this._assertNotDisposed();\n      if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n        throw new BugIndicatingError('Illegal value for lineNumber');\n      }\n      return this._buffer.getLineContent(lineNumber);\n    }\n  }, {\n    key: \"getLineLength\",\n    value: function getLineLength(lineNumber) {\n      this._assertNotDisposed();\n      if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n        throw new BugIndicatingError('Illegal value for lineNumber');\n      }\n      return this._buffer.getLineLength(lineNumber);\n    }\n  }, {\n    key: \"getLinesContent\",\n    value: function getLinesContent() {\n      this._assertNotDisposed();\n      if (this.isTooLargeForHeapOperation()) {\n        throw new BugIndicatingError('Operation would exceed heap memory limits');\n      }\n      return this._buffer.getLinesContent();\n    }\n  }, {\n    key: \"getEOL\",\n    value: function getEOL() {\n      this._assertNotDisposed();\n      return this._buffer.getEOL();\n    }\n  }, {\n    key: \"getEndOfLineSequence\",\n    value: function getEndOfLineSequence() {\n      this._assertNotDisposed();\n      return this._buffer.getEOL() === '\\n' ? 0 /* model.EndOfLineSequence.LF */ : 1 /* model.EndOfLineSequence.CRLF */;\n    }\n  }, {\n    key: \"getLineMinColumn\",\n    value: function getLineMinColumn(lineNumber) {\n      this._assertNotDisposed();\n      return 1;\n    }\n  }, {\n    key: \"getLineMaxColumn\",\n    value: function getLineMaxColumn(lineNumber) {\n      this._assertNotDisposed();\n      if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n        throw new BugIndicatingError('Illegal value for lineNumber');\n      }\n      return this._buffer.getLineLength(lineNumber) + 1;\n    }\n  }, {\n    key: \"getLineFirstNonWhitespaceColumn\",\n    value: function getLineFirstNonWhitespaceColumn(lineNumber) {\n      this._assertNotDisposed();\n      if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n        throw new BugIndicatingError('Illegal value for lineNumber');\n      }\n      return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n    }\n  }, {\n    key: \"getLineLastNonWhitespaceColumn\",\n    value: function getLineLastNonWhitespaceColumn(lineNumber) {\n      this._assertNotDisposed();\n      if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n        throw new BugIndicatingError('Illegal value for lineNumber');\n      }\n      return this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n    }\n    /**\n     * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\n     * Will try to not allocate if possible.\n     */\n  }, {\n    key: \"_validateRangeRelaxedNoAllocations\",\n    value: function _validateRangeRelaxedNoAllocations(range) {\n      var linesCount = this._buffer.getLineCount();\n      var initialStartLineNumber = range.startLineNumber;\n      var initialStartColumn = range.startColumn;\n      var startLineNumber = Math.floor(typeof initialStartLineNumber === 'number' && !isNaN(initialStartLineNumber) ? initialStartLineNumber : 1);\n      var startColumn = Math.floor(typeof initialStartColumn === 'number' && !isNaN(initialStartColumn) ? initialStartColumn : 1);\n      if (startLineNumber < 1) {\n        startLineNumber = 1;\n        startColumn = 1;\n      } else if (startLineNumber > linesCount) {\n        startLineNumber = linesCount;\n        startColumn = this.getLineMaxColumn(startLineNumber);\n      } else {\n        if (startColumn <= 1) {\n          startColumn = 1;\n        } else {\n          var maxColumn = this.getLineMaxColumn(startLineNumber);\n          if (startColumn >= maxColumn) {\n            startColumn = maxColumn;\n          }\n        }\n      }\n      var initialEndLineNumber = range.endLineNumber;\n      var initialEndColumn = range.endColumn;\n      var endLineNumber = Math.floor(typeof initialEndLineNumber === 'number' && !isNaN(initialEndLineNumber) ? initialEndLineNumber : 1);\n      var endColumn = Math.floor(typeof initialEndColumn === 'number' && !isNaN(initialEndColumn) ? initialEndColumn : 1);\n      if (endLineNumber < 1) {\n        endLineNumber = 1;\n        endColumn = 1;\n      } else if (endLineNumber > linesCount) {\n        endLineNumber = linesCount;\n        endColumn = this.getLineMaxColumn(endLineNumber);\n      } else {\n        if (endColumn <= 1) {\n          endColumn = 1;\n        } else {\n          var _maxColumn = this.getLineMaxColumn(endLineNumber);\n          if (endColumn >= _maxColumn) {\n            endColumn = _maxColumn;\n          }\n        }\n      }\n      if (initialStartLineNumber === startLineNumber && initialStartColumn === startColumn && initialEndLineNumber === endLineNumber && initialEndColumn === endColumn && range instanceof Range && !(range instanceof Selection)) {\n        return range;\n      }\n      return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n  }, {\n    key: \"_isValidPosition\",\n    value: function _isValidPosition(lineNumber, column, validationType) {\n      if (typeof lineNumber !== 'number' || typeof column !== 'number') {\n        return false;\n      }\n      if (isNaN(lineNumber) || isNaN(column)) {\n        return false;\n      }\n      if (lineNumber < 1 || column < 1) {\n        return false;\n      }\n      if ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n        return false;\n      }\n      var lineCount = this._buffer.getLineCount();\n      if (lineNumber > lineCount) {\n        return false;\n      }\n      if (column === 1) {\n        return true;\n      }\n      var maxColumn = this.getLineMaxColumn(lineNumber);\n      if (column > maxColumn) {\n        return false;\n      }\n      if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n        // !!At this point, column > 1\n        var charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n        if (strings.isHighSurrogate(charCodeBefore)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"_validatePosition\",\n    value: function _validatePosition(_lineNumber, _column, validationType) {\n      var lineNumber = Math.floor(typeof _lineNumber === 'number' && !isNaN(_lineNumber) ? _lineNumber : 1);\n      var column = Math.floor(typeof _column === 'number' && !isNaN(_column) ? _column : 1);\n      var lineCount = this._buffer.getLineCount();\n      if (lineNumber < 1) {\n        return new Position(1, 1);\n      }\n      if (lineNumber > lineCount) {\n        return new Position(lineCount, this.getLineMaxColumn(lineCount));\n      }\n      if (column <= 1) {\n        return new Position(lineNumber, 1);\n      }\n      var maxColumn = this.getLineMaxColumn(lineNumber);\n      if (column >= maxColumn) {\n        return new Position(lineNumber, maxColumn);\n      }\n      if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n        // If the position would end up in the middle of a high-low surrogate pair,\n        // we move it to before the pair\n        // !!At this point, column > 1\n        var charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n        if (strings.isHighSurrogate(charCodeBefore)) {\n          return new Position(lineNumber, column - 1);\n        }\n      }\n      return new Position(lineNumber, column);\n    }\n  }, {\n    key: \"validatePosition\",\n    value: function validatePosition(position) {\n      var validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n      this._assertNotDisposed();\n      // Avoid object allocation and cover most likely case\n      if (position instanceof Position) {\n        if (this._isValidPosition(position.lineNumber, position.column, validationType)) {\n          return position;\n        }\n      }\n      return this._validatePosition(position.lineNumber, position.column, validationType);\n    }\n  }, {\n    key: \"_isValidRange\",\n    value: function _isValidRange(range, validationType) {\n      var startLineNumber = range.startLineNumber;\n      var startColumn = range.startColumn;\n      var endLineNumber = range.endLineNumber;\n      var endColumn = range.endColumn;\n      if (!this._isValidPosition(startLineNumber, startColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n        return false;\n      }\n      if (!this._isValidPosition(endLineNumber, endColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n        return false;\n      }\n      if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n        var charCodeBeforeStart = startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0;\n        var charCodeBeforeEnd = endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0;\n        var startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n        var endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n        if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n          return true;\n        }\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"validateRange\",\n    value: function validateRange(_range) {\n      var validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n      this._assertNotDisposed();\n      // Avoid object allocation and cover most likely case\n      if (_range instanceof Range && !(_range instanceof Selection)) {\n        if (this._isValidRange(_range, validationType)) {\n          return _range;\n        }\n      }\n      var start = this._validatePosition(_range.startLineNumber, _range.startColumn, 0 /* StringOffsetValidationType.Relaxed */);\n      var end = this._validatePosition(_range.endLineNumber, _range.endColumn, 0 /* StringOffsetValidationType.Relaxed */);\n      var startLineNumber = start.lineNumber;\n      var startColumn = start.column;\n      var endLineNumber = end.lineNumber;\n      var endColumn = end.column;\n      if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n        var charCodeBeforeStart = startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0;\n        var charCodeBeforeEnd = endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0;\n        var startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n        var endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n        if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n          return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        if (startLineNumber === endLineNumber && startColumn === endColumn) {\n          // do not expand a collapsed range, simply move it to a valid location\n          return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\n        }\n        if (startInsideSurrogatePair && endInsideSurrogatePair) {\n          // expand range at both ends\n          return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\n        }\n        if (startInsideSurrogatePair) {\n          // only expand range at the start\n          return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\n        }\n        // only expand range at the end\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\n      }\n      return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n  }, {\n    key: \"modifyPosition\",\n    value: function modifyPosition(rawPosition, offset) {\n      this._assertNotDisposed();\n      var candidate = this.getOffsetAt(rawPosition) + offset;\n      return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\n    }\n  }, {\n    key: \"getFullModelRange\",\n    value: function getFullModelRange() {\n      this._assertNotDisposed();\n      var lineCount = this.getLineCount();\n      return new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n    }\n  }, {\n    key: \"findMatchesLineByLine\",\n    value: function findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n      return this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n  }, {\n    key: \"findMatches\",\n    value: function findMatches(searchString, rawSearchScope, isRegex, matchCase, wordSeparators, captureMatches) {\n      var _this2 = this;\n      var limitResultCount = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : LIMIT_FIND_COUNT;\n      this._assertNotDisposed();\n      var searchRanges = null;\n      if (rawSearchScope !== null) {\n        if (!Array.isArray(rawSearchScope)) {\n          rawSearchScope = [rawSearchScope];\n        }\n        if (rawSearchScope.every(function (searchScope) {\n          return Range.isIRange(searchScope);\n        })) {\n          searchRanges = rawSearchScope.map(function (searchScope) {\n            return _this2.validateRange(searchScope);\n          });\n        }\n      }\n      if (searchRanges === null) {\n        searchRanges = [this.getFullModelRange()];\n      }\n      searchRanges = searchRanges.sort(function (d1, d2) {\n        return d1.startLineNumber - d2.startLineNumber || d1.startColumn - d2.startColumn;\n      });\n      var uniqueSearchRanges = [];\n      uniqueSearchRanges.push(searchRanges.reduce(function (prev, curr) {\n        if (Range.areIntersecting(prev, curr)) {\n          return prev.plusRange(curr);\n        }\n        uniqueSearchRanges.push(prev);\n        return curr;\n      }));\n      var matchMapper;\n      if (!isRegex && searchString.indexOf('\\n') < 0) {\n        // not regex, not multi line\n        var searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n        var searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n          return [];\n        }\n        matchMapper = function matchMapper(searchRange) {\n          return _this2.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n        };\n      } else {\n        matchMapper = function matchMapper(searchRange) {\n          return TextModelSearch.findMatches(_this2, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\n        };\n      }\n      return uniqueSearchRanges.map(matchMapper).reduce(function (arr, matches) {\n        return arr.concat(matches);\n      }, []);\n    }\n  }, {\n    key: \"findNextMatch\",\n    value: function findNextMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n      this._assertNotDisposed();\n      var searchStart = this.validatePosition(rawSearchStart);\n      if (!isRegex && searchString.indexOf('\\n') < 0) {\n        var searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n        var searchData = searchParams.parseSearchRequest();\n        if (!searchData) {\n          return null;\n        }\n        var lineCount = this.getLineCount();\n        var searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\n        var ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n        TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n        if (ret.length > 0) {\n          return ret[0];\n        }\n        searchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\n        ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n        if (ret.length > 0) {\n          return ret[0];\n        }\n        return null;\n      }\n      return TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n  }, {\n    key: \"findPreviousMatch\",\n    value: function findPreviousMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n      this._assertNotDisposed();\n      var searchStart = this.validatePosition(rawSearchStart);\n      return TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    //#endregion\n    //#region Editing\n  }, {\n    key: \"pushStackElement\",\n    value: function pushStackElement() {\n      this._commandManager.pushStackElement();\n    }\n  }, {\n    key: \"popStackElement\",\n    value: function popStackElement() {\n      this._commandManager.popStackElement();\n    }\n  }, {\n    key: \"pushEOL\",\n    value: function pushEOL(eol) {\n      var currentEOL = this.getEOL() === '\\n' ? 0 /* model.EndOfLineSequence.LF */ : 1 /* model.EndOfLineSequence.CRLF */;\n      if (currentEOL === eol) {\n        return;\n      }\n      try {\n        this._onDidChangeDecorations.beginDeferredEmit();\n        this._eventEmitter.beginDeferredEmit();\n        if (this._initialUndoRedoSnapshot === null) {\n          this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n        }\n        this._commandManager.pushEOL(eol);\n      } finally {\n        this._eventEmitter.endDeferredEmit();\n        this._onDidChangeDecorations.endDeferredEmit();\n      }\n    }\n  }, {\n    key: \"_validateEditOperation\",\n    value: function _validateEditOperation(rawOperation) {\n      if (rawOperation instanceof model.ValidAnnotatedEditOperation) {\n        return rawOperation;\n      }\n      return new model.ValidAnnotatedEditOperation(rawOperation.identifier || null, this.validateRange(rawOperation.range), rawOperation.text, rawOperation.forceMoveMarkers || false, rawOperation.isAutoWhitespaceEdit || false, rawOperation._isTracked || false);\n    }\n  }, {\n    key: \"_validateEditOperations\",\n    value: function _validateEditOperations(rawOperations) {\n      var result = [];\n      for (var i = 0, len = rawOperations.length; i < len; i++) {\n        result[i] = this._validateEditOperation(rawOperations[i]);\n      }\n      return result;\n    }\n  }, {\n    key: \"pushEditOperations\",\n    value: function pushEditOperations(beforeCursorState, editOperations, cursorStateComputer, group) {\n      try {\n        this._onDidChangeDecorations.beginDeferredEmit();\n        this._eventEmitter.beginDeferredEmit();\n        return this._pushEditOperations(beforeCursorState, this._validateEditOperations(editOperations), cursorStateComputer, group);\n      } finally {\n        this._eventEmitter.endDeferredEmit();\n        this._onDidChangeDecorations.endDeferredEmit();\n      }\n    }\n  }, {\n    key: \"_pushEditOperations\",\n    value: function _pushEditOperations(beforeCursorState, editOperations, cursorStateComputer, group) {\n      var _this3 = this;\n      if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n        // Go through each saved line number and insert a trim whitespace edit\n        // if it is safe to do so (no conflicts with other edits).\n        var incomingEdits = editOperations.map(function (op) {\n          return {\n            range: _this3.validateRange(op.range),\n            text: op.text\n          };\n        });\n        // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n        // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n        var editsAreNearCursors = true;\n        if (beforeCursorState) {\n          for (var i = 0, len = beforeCursorState.length; i < len; i++) {\n            var sel = beforeCursorState[i];\n            var foundEditNearSel = false;\n            for (var j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n              var editRange = incomingEdits[j].range;\n              var selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n              var selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n              if (!selIsAbove && !selIsBelow) {\n                foundEditNearSel = true;\n                break;\n              }\n            }\n            if (!foundEditNearSel) {\n              editsAreNearCursors = false;\n              break;\n            }\n          }\n        }\n        if (editsAreNearCursors) {\n          for (var _i = 0, _len = this._trimAutoWhitespaceLines.length; _i < _len; _i++) {\n            var trimLineNumber = this._trimAutoWhitespaceLines[_i];\n            var maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n            var allowTrimLine = true;\n            for (var _j = 0, _lenJ = incomingEdits.length; _j < _lenJ; _j++) {\n              var _editRange = incomingEdits[_j].range;\n              var editText = incomingEdits[_j].text;\n              if (trimLineNumber < _editRange.startLineNumber || trimLineNumber > _editRange.endLineNumber) {\n                // `trimLine` is completely outside this edit\n                continue;\n              }\n              // At this point:\n              //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n              if (trimLineNumber === _editRange.startLineNumber && _editRange.startColumn === maxLineColumn && _editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\n                // This edit inserts a new line (and maybe other text) after `trimLine`\n                continue;\n              }\n              if (trimLineNumber === _editRange.startLineNumber && _editRange.startColumn === 1 && _editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n') {\n                // This edit inserts a new line (and maybe other text) before `trimLine`\n                continue;\n              }\n              // Looks like we can't trim this line as it would interfere with an incoming edit\n              allowTrimLine = false;\n              break;\n            }\n            if (allowTrimLine) {\n              var trimRange = new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn);\n              editOperations.push(new model.ValidAnnotatedEditOperation(null, trimRange, null, false, false, false));\n            }\n          }\n        }\n        this._trimAutoWhitespaceLines = null;\n      }\n      if (this._initialUndoRedoSnapshot === null) {\n        this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n      }\n      return this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group);\n    }\n  }, {\n    key: \"_applyUndo\",\n    value: function _applyUndo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n      var _this4 = this;\n      var edits = changes.map(function (change) {\n        var rangeStart = _this4.getPositionAt(change.newPosition);\n        var rangeEnd = _this4.getPositionAt(change.newEnd);\n        return {\n          range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n          text: change.oldText\n        };\n      });\n      this._applyUndoRedoEdits(edits, eol, true, false, resultingAlternativeVersionId, resultingSelection);\n    }\n  }, {\n    key: \"_applyRedo\",\n    value: function _applyRedo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n      var _this5 = this;\n      var edits = changes.map(function (change) {\n        var rangeStart = _this5.getPositionAt(change.oldPosition);\n        var rangeEnd = _this5.getPositionAt(change.oldEnd);\n        return {\n          range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n          text: change.newText\n        };\n      });\n      this._applyUndoRedoEdits(edits, eol, false, true, resultingAlternativeVersionId, resultingSelection);\n    }\n  }, {\n    key: \"_applyUndoRedoEdits\",\n    value: function _applyUndoRedoEdits(edits, eol, isUndoing, isRedoing, resultingAlternativeVersionId, resultingSelection) {\n      try {\n        this._onDidChangeDecorations.beginDeferredEmit();\n        this._eventEmitter.beginDeferredEmit();\n        this._isUndoing = isUndoing;\n        this._isRedoing = isRedoing;\n        this.applyEdits(edits, false);\n        this.setEOL(eol);\n        this._overwriteAlternativeVersionId(resultingAlternativeVersionId);\n      } finally {\n        this._isUndoing = false;\n        this._isRedoing = false;\n        this._eventEmitter.endDeferredEmit(resultingSelection);\n        this._onDidChangeDecorations.endDeferredEmit();\n      }\n    }\n  }, {\n    key: \"applyEdits\",\n    value: function applyEdits(rawOperations) {\n      var computeUndoEdits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      try {\n        this._onDidChangeDecorations.beginDeferredEmit();\n        this._eventEmitter.beginDeferredEmit();\n        var operations = this._validateEditOperations(rawOperations);\n        return this._doApplyEdits(operations, computeUndoEdits);\n      } finally {\n        this._eventEmitter.endDeferredEmit();\n        this._onDidChangeDecorations.endDeferredEmit();\n      }\n    }\n  }, {\n    key: \"_doApplyEdits\",\n    value: function _doApplyEdits(rawOperations, computeUndoEdits) {\n      var _this6 = this;\n      var oldLineCount = this._buffer.getLineCount();\n      var result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace, computeUndoEdits);\n      var newLineCount = this._buffer.getLineCount();\n      var contentChanges = result.changes;\n      this._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n      if (contentChanges.length !== 0) {\n        // We do a first pass to update decorations\n        // because we want to read decorations in the second pass\n        // where we will emit content change events\n        // and we want to read the final decorations\n        for (var i = 0, len = contentChanges.length; i < len; i++) {\n          var change = contentChanges[i];\n          this._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\n        }\n        var rawContentChanges = [];\n        this._increaseVersionId();\n        var lineCount = oldLineCount;\n        for (var _i2 = 0, _len2 = contentChanges.length; _i2 < _len2; _i2++) {\n          var _change = contentChanges[_i2];\n          var _countEOL = countEOL(_change.text),\n            _countEOL2 = _slicedToArray(_countEOL, 1),\n            eolCount = _countEOL2[0];\n          this._onDidChangeDecorations.fire();\n          var startLineNumber = _change.range.startLineNumber;\n          var endLineNumber = _change.range.endLineNumber;\n          var deletingLinesCnt = endLineNumber - startLineNumber;\n          var insertingLinesCnt = eolCount;\n          var editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n          var changeLineCountDelta = insertingLinesCnt - deletingLinesCnt;\n          var currentEditStartLineNumber = newLineCount - lineCount - changeLineCountDelta + startLineNumber;\n          var firstEditLineNumber = currentEditStartLineNumber;\n          var lastInsertedLineNumber = currentEditStartLineNumber + insertingLinesCnt;\n          var decorationsWithInjectedTextInEditedRange = this._decorationsTree.getInjectedTextInInterval(this, this.getOffsetAt(new Position(firstEditLineNumber, 1)), this.getOffsetAt(new Position(lastInsertedLineNumber, this.getLineMaxColumn(lastInsertedLineNumber))), 0);\n          var injectedTextInEditedRange = LineInjectedText.fromDecorations(decorationsWithInjectedTextInEditedRange);\n          var injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n          var _loop = function _loop() {\n            var editLineNumber = startLineNumber + j;\n            var currentEditLineNumber = currentEditStartLineNumber + j;\n            injectedTextInEditedRangeQueue.takeFromEndWhile(function (r) {\n              return r.lineNumber > currentEditLineNumber;\n            });\n            var decorationsInCurrentLine = injectedTextInEditedRangeQueue.takeFromEndWhile(function (r) {\n              return r.lineNumber === currentEditLineNumber;\n            });\n            rawContentChanges.push(new ModelRawLineChanged(editLineNumber, _this6.getLineContent(currentEditLineNumber), decorationsInCurrentLine));\n          };\n          for (var j = editingLinesCnt; j >= 0; j--) {\n            _loop();\n          }\n          if (editingLinesCnt < deletingLinesCnt) {\n            // Must delete some lines\n            var spliceStartLineNumber = startLineNumber + editingLinesCnt;\n            rawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\n          }\n          if (editingLinesCnt < insertingLinesCnt) {\n            var _injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n            // Must insert some lines\n            var spliceLineNumber = startLineNumber + editingLinesCnt;\n            var cnt = insertingLinesCnt - editingLinesCnt;\n            var fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\n            var injectedTexts = [];\n            var newLines = [];\n            var _loop2 = function _loop2() {\n              var lineNumber = fromLineNumber + _i3;\n              newLines[_i3] = _this6.getLineContent(lineNumber);\n              _injectedTextInEditedRangeQueue.takeWhile(function (r) {\n                return r.lineNumber < lineNumber;\n              });\n              injectedTexts[_i3] = _injectedTextInEditedRangeQueue.takeWhile(function (r) {\n                return r.lineNumber === lineNumber;\n              });\n            };\n            for (var _i3 = 0; _i3 < cnt; _i3++) {\n              _loop2();\n            }\n            rawContentChanges.push(new ModelRawLinesInserted(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLines, injectedTexts));\n          }\n          lineCount += changeLineCountDelta;\n        }\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent(rawContentChanges, this.getVersionId(), this._isUndoing, this._isRedoing), {\n          changes: contentChanges,\n          eol: this._buffer.getEOL(),\n          isEolChange: false,\n          versionId: this.getVersionId(),\n          isUndoing: this._isUndoing,\n          isRedoing: this._isRedoing,\n          isFlush: false\n        });\n      }\n      return result.reverseEdits === null ? undefined : result.reverseEdits;\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      return this._undoRedoService.undo(this.uri);\n    }\n  }, {\n    key: \"canUndo\",\n    value: function canUndo() {\n      return this._undoRedoService.canUndo(this.uri);\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      return this._undoRedoService.redo(this.uri);\n    }\n  }, {\n    key: \"canRedo\",\n    value: function canRedo() {\n      return this._undoRedoService.canRedo(this.uri);\n    }\n    //#endregion\n    //#region Decorations\n  }, {\n    key: \"handleBeforeFireDecorationsChangedEvent\",\n    value: function handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines) {\n      var _this7 = this;\n      // This is called before the decoration changed event is fired.\n      if (affectedInjectedTextLines === null || affectedInjectedTextLines.size === 0) {\n        return;\n      }\n      var affectedLines = Array.from(affectedInjectedTextLines);\n      var lineChangeEvents = affectedLines.map(function (lineNumber) {\n        return new ModelRawLineChanged(lineNumber, _this7.getLineContent(lineNumber), _this7._getInjectedTextInLine(lineNumber));\n      });\n      this._onDidChangeInjectedText.fire(new ModelInjectedTextChangedEvent(lineChangeEvents));\n    }\n  }, {\n    key: \"changeDecorations\",\n    value: function changeDecorations(callback) {\n      var ownerId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this._assertNotDisposed();\n      try {\n        this._onDidChangeDecorations.beginDeferredEmit();\n        return this._changeDecorations(ownerId, callback);\n      } finally {\n        this._onDidChangeDecorations.endDeferredEmit();\n      }\n    }\n  }, {\n    key: \"_changeDecorations\",\n    value: function _changeDecorations(ownerId, callback) {\n      var _this8 = this;\n      var changeAccessor = {\n        addDecoration: function addDecoration(range, options) {\n          return _this8._deltaDecorationsImpl(ownerId, [], [{\n            range: range,\n            options: options\n          }])[0];\n        },\n        changeDecoration: function changeDecoration(id, newRange) {\n          _this8._changeDecorationImpl(id, newRange);\n        },\n        changeDecorationOptions: function changeDecorationOptions(id, options) {\n          _this8._changeDecorationOptionsImpl(id, _normalizeOptions(options));\n        },\n        removeDecoration: function removeDecoration(id) {\n          _this8._deltaDecorationsImpl(ownerId, [id], []);\n        },\n        deltaDecorations: function deltaDecorations(oldDecorations, newDecorations) {\n          if (oldDecorations.length === 0 && newDecorations.length === 0) {\n            // nothing to do\n            return [];\n          }\n          return _this8._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n        }\n      };\n      var result = null;\n      try {\n        result = callback(changeAccessor);\n      } catch (e) {\n        onUnexpectedError(e);\n      }\n      // Invalidate change accessor\n      changeAccessor.addDecoration = invalidFunc;\n      changeAccessor.changeDecoration = invalidFunc;\n      changeAccessor.changeDecorationOptions = invalidFunc;\n      changeAccessor.removeDecoration = invalidFunc;\n      changeAccessor.deltaDecorations = invalidFunc;\n      return result;\n    }\n  }, {\n    key: \"deltaDecorations\",\n    value: function deltaDecorations(oldDecorations, newDecorations) {\n      var ownerId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      this._assertNotDisposed();\n      if (!oldDecorations) {\n        oldDecorations = [];\n      }\n      if (oldDecorations.length === 0 && newDecorations.length === 0) {\n        // nothing to do\n        return [];\n      }\n      try {\n        this._deltaDecorationCallCnt++;\n        if (this._deltaDecorationCallCnt > 1) {\n          console.warn(\"Invoking deltaDecorations recursively could lead to leaking decorations.\");\n          onUnexpectedError(new Error(\"Invoking deltaDecorations recursively could lead to leaking decorations.\"));\n        }\n        this._onDidChangeDecorations.beginDeferredEmit();\n        return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n      } finally {\n        this._onDidChangeDecorations.endDeferredEmit();\n        this._deltaDecorationCallCnt--;\n      }\n    }\n  }, {\n    key: \"_getTrackedRange\",\n    value: function _getTrackedRange(id) {\n      return this.getDecorationRange(id);\n    }\n  }, {\n    key: \"_setTrackedRange\",\n    value: function _setTrackedRange(id, newRange, newStickiness) {\n      var node = id ? this._decorations[id] : null;\n      if (!node) {\n        if (!newRange) {\n          // node doesn't exist, the request is to delete => nothing to do\n          return null;\n        }\n        // node doesn't exist, the request is to set => add the tracked range\n        return this._deltaDecorationsImpl(0, [], [{\n          range: newRange,\n          options: TRACKED_RANGE_OPTIONS[newStickiness]\n        }], true)[0];\n      }\n      if (!newRange) {\n        // node exists, the request is to delete => delete node\n        this._decorationsTree[\"delete\"](node);\n        delete this._decorations[node.id];\n        return null;\n      }\n      // node exists, the request is to set => change the tracked range and its options\n      var range = this._validateRangeRelaxedNoAllocations(newRange);\n      var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n      var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n      this._decorationsTree[\"delete\"](node);\n      node.reset(this.getVersionId(), startOffset, endOffset, range);\n      node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n      this._decorationsTree.insert(node);\n      return node.id;\n    }\n  }, {\n    key: \"removeAllDecorationsWithOwnerId\",\n    value: function removeAllDecorationsWithOwnerId(ownerId) {\n      if (this._isDisposed) {\n        return;\n      }\n      var nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n      for (var i = 0, len = nodes.length; i < len; i++) {\n        var node = nodes[i];\n        this._decorationsTree[\"delete\"](node);\n        delete this._decorations[node.id];\n      }\n    }\n  }, {\n    key: \"getDecorationOptions\",\n    value: function getDecorationOptions(decorationId) {\n      var node = this._decorations[decorationId];\n      if (!node) {\n        return null;\n      }\n      return node.options;\n    }\n  }, {\n    key: \"getDecorationRange\",\n    value: function getDecorationRange(decorationId) {\n      var node = this._decorations[decorationId];\n      if (!node) {\n        return null;\n      }\n      return this._decorationsTree.getNodeRange(this, node);\n    }\n  }, {\n    key: \"getLineDecorations\",\n    value: function getLineDecorations(lineNumber) {\n      var ownerId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var filterOutValidation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n        return [];\n      }\n      return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\n    }\n  }, {\n    key: \"getLinesDecorations\",\n    value: function getLinesDecorations(_startLineNumber, _endLineNumber) {\n      var ownerId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var filterOutValidation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var onlyMarginDecorations = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var lineCount = this.getLineCount();\n      var startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\n      var endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n      var endColumn = this.getLineMaxColumn(endLineNumber);\n      var range = new Range(startLineNumber, 1, endLineNumber, endColumn);\n      var decorations = this._getDecorationsInRange(range, ownerId, filterOutValidation, onlyMarginDecorations);\n      pushMany(decorations, this._decorationProvider.getDecorationsInRange(range, ownerId, filterOutValidation));\n      return decorations;\n    }\n  }, {\n    key: \"getDecorationsInRange\",\n    value: function getDecorationsInRange(range) {\n      var ownerId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var filterOutValidation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var onlyMinimapDecorations = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var onlyMarginDecorations = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var validatedRange = this.validateRange(range);\n      var decorations = this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMarginDecorations);\n      pushMany(decorations, this._decorationProvider.getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMinimapDecorations));\n      return decorations;\n    }\n  }, {\n    key: \"getOverviewRulerDecorations\",\n    value: function getOverviewRulerDecorations() {\n      var ownerId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var filterOutValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return this._decorationsTree.getAll(this, ownerId, filterOutValidation, true, false);\n    }\n  }, {\n    key: \"getInjectedTextDecorations\",\n    value: function getInjectedTextDecorations() {\n      var ownerId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this._decorationsTree.getAllInjectedText(this, ownerId);\n    }\n  }, {\n    key: \"_getInjectedTextInLine\",\n    value: function _getInjectedTextInLine(lineNumber) {\n      var startOffset = this._buffer.getOffsetAt(lineNumber, 1);\n      var endOffset = startOffset + this._buffer.getLineLength(lineNumber);\n      var result = this._decorationsTree.getInjectedTextInInterval(this, startOffset, endOffset, 0);\n      return LineInjectedText.fromDecorations(result).filter(function (t) {\n        return t.lineNumber === lineNumber;\n      });\n    }\n  }, {\n    key: \"getAllDecorations\",\n    value: function getAllDecorations() {\n      var ownerId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var filterOutValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var result = this._decorationsTree.getAll(this, ownerId, filterOutValidation, false, false);\n      result = result.concat(this._decorationProvider.getAllDecorations(ownerId, filterOutValidation));\n      return result;\n    }\n  }, {\n    key: \"getAllMarginDecorations\",\n    value: function getAllMarginDecorations() {\n      var ownerId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this._decorationsTree.getAll(this, ownerId, false, false, true);\n    }\n  }, {\n    key: \"_getDecorationsInRange\",\n    value: function _getDecorationsInRange(filterRange, filterOwnerId, filterOutValidation, onlyMarginDecorations) {\n      var startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\n      var endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\n      return this._decorationsTree.getAllInInterval(this, startOffset, endOffset, filterOwnerId, filterOutValidation, onlyMarginDecorations);\n    }\n  }, {\n    key: \"getRangeAt\",\n    value: function getRangeAt(start, end) {\n      return this._buffer.getRangeAt(start, end - start);\n    }\n  }, {\n    key: \"_changeDecorationImpl\",\n    value: function _changeDecorationImpl(decorationId, _range) {\n      var node = this._decorations[decorationId];\n      if (!node) {\n        return;\n      }\n      if (node.options.after) {\n        var oldRange = this.getDecorationRange(decorationId);\n        this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.endLineNumber);\n      }\n      if (node.options.before) {\n        var _oldRange = this.getDecorationRange(decorationId);\n        this._onDidChangeDecorations.recordLineAffectedByInjectedText(_oldRange.startLineNumber);\n      }\n      var range = this._validateRangeRelaxedNoAllocations(_range);\n      var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n      var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n      this._decorationsTree[\"delete\"](node);\n      node.reset(this.getVersionId(), startOffset, endOffset, range);\n      this._decorationsTree.insert(node);\n      this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n      if (node.options.after) {\n        this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n      }\n      if (node.options.before) {\n        this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n      }\n    }\n  }, {\n    key: \"_changeDecorationOptionsImpl\",\n    value: function _changeDecorationOptionsImpl(decorationId, options) {\n      var node = this._decorations[decorationId];\n      if (!node) {\n        return;\n      }\n      var nodeWasInOverviewRuler = node.options.overviewRuler && node.options.overviewRuler.color ? true : false;\n      var nodeIsInOverviewRuler = options.overviewRuler && options.overviewRuler.color ? true : false;\n      this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n      this._onDidChangeDecorations.checkAffectedAndFire(options);\n      if (node.options.after || options.after) {\n        var nodeRange = this._decorationsTree.getNodeRange(this, node);\n        this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n      }\n      if (node.options.before || options.before) {\n        var _nodeRange = this._decorationsTree.getNodeRange(this, node);\n        this._onDidChangeDecorations.recordLineAffectedByInjectedText(_nodeRange.startLineNumber);\n      }\n      var movedInOverviewRuler = nodeWasInOverviewRuler !== nodeIsInOverviewRuler;\n      var changedWhetherInjectedText = isOptionsInjectedText(options) !== isNodeInjectedText(node);\n      if (movedInOverviewRuler || changedWhetherInjectedText) {\n        this._decorationsTree[\"delete\"](node);\n        node.setOptions(options);\n        this._decorationsTree.insert(node);\n      } else {\n        node.setOptions(options);\n      }\n    }\n  }, {\n    key: \"_deltaDecorationsImpl\",\n    value: function _deltaDecorationsImpl(ownerId, oldDecorationsIds, newDecorations) {\n      var suppressEvents = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var versionId = this.getVersionId();\n      var oldDecorationsLen = oldDecorationsIds.length;\n      var oldDecorationIndex = 0;\n      var newDecorationsLen = newDecorations.length;\n      var newDecorationIndex = 0;\n      this._onDidChangeDecorations.beginDeferredEmit();\n      try {\n        var result = new Array(newDecorationsLen);\n        while (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n          var node = null;\n          if (oldDecorationIndex < oldDecorationsLen) {\n            // (1) get ourselves an old node\n            do {\n              node = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\n            } while (!node && oldDecorationIndex < oldDecorationsLen);\n            // (2) remove the node from the tree (if it exists)\n            if (node) {\n              if (node.options.after) {\n                var nodeRange = this._decorationsTree.getNodeRange(this, node);\n                this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n              }\n              if (node.options.before) {\n                var _nodeRange2 = this._decorationsTree.getNodeRange(this, node);\n                this._onDidChangeDecorations.recordLineAffectedByInjectedText(_nodeRange2.startLineNumber);\n              }\n              this._decorationsTree[\"delete\"](node);\n              if (!suppressEvents) {\n                this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n              }\n            }\n          }\n          if (newDecorationIndex < newDecorationsLen) {\n            // (3) create a new node if necessary\n            if (!node) {\n              var internalDecorationId = ++this._lastDecorationId;\n              var decorationId = \"\".concat(this._instanceId, \";\").concat(internalDecorationId);\n              node = new IntervalNode(decorationId, 0, 0);\n              this._decorations[decorationId] = node;\n            }\n            // (4) initialize node\n            var newDecoration = newDecorations[newDecorationIndex];\n            var range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\n            var options = _normalizeOptions(newDecoration.options);\n            var startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n            var endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n            node.ownerId = ownerId;\n            node.reset(versionId, startOffset, endOffset, range);\n            node.setOptions(options);\n            if (node.options.after) {\n              this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n            }\n            if (node.options.before) {\n              this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n            }\n            if (!suppressEvents) {\n              this._onDidChangeDecorations.checkAffectedAndFire(options);\n            }\n            this._decorationsTree.insert(node);\n            result[newDecorationIndex] = node.id;\n            newDecorationIndex++;\n          } else {\n            if (node) {\n              delete this._decorations[node.id];\n            }\n          }\n        }\n        return result;\n      } finally {\n        this._onDidChangeDecorations.endDeferredEmit();\n      }\n    }\n    //#endregion\n    //#region Tokenization\n    // TODO move them to the tokenization part.\n  }, {\n    key: \"getLanguageId\",\n    value: function getLanguageId() {\n      return this.tokenization.getLanguageId();\n    }\n  }, {\n    key: \"setLanguage\",\n    value: function setLanguage(languageIdOrSelection, source) {\n      var _this9 = this;\n      if (typeof languageIdOrSelection === 'string') {\n        this._languageSelectionListener.clear();\n        this._setLanguage(languageIdOrSelection, source);\n      } else {\n        this._languageSelectionListener.value = languageIdOrSelection.onDidChange(function () {\n          return _this9._setLanguage(languageIdOrSelection.languageId, source);\n        });\n        this._setLanguage(languageIdOrSelection.languageId, source);\n      }\n    }\n  }, {\n    key: \"_setLanguage\",\n    value: function _setLanguage(languageId, source) {\n      this.tokenization.setLanguageId(languageId, source);\n      this._languageService.requestRichLanguageFeatures(languageId);\n    }\n  }, {\n    key: \"getLanguageIdAtPosition\",\n    value: function getLanguageIdAtPosition(lineNumber, column) {\n      return this.tokenization.getLanguageIdAtPosition(lineNumber, column);\n    }\n  }, {\n    key: \"getWordAtPosition\",\n    value: function getWordAtPosition(position) {\n      return this._tokenizationTextModelPart.getWordAtPosition(position);\n    }\n  }, {\n    key: \"getWordUntilPosition\",\n    value: function getWordUntilPosition(position) {\n      return this._tokenizationTextModelPart.getWordUntilPosition(position);\n    }\n    //#endregion\n  }, {\n    key: \"normalizePosition\",\n    value: function normalizePosition(position, affinity) {\n      return position;\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n  }, {\n    key: \"getLineIndentColumn\",\n    value: function getLineIndentColumn(lineNumber) {\n      // Columns start with 1.\n      return indentOfLine(this.getLineContent(lineNumber)) + 1;\n    }\n  }], [{\n    key: \"resolveOptions\",\n    value: function resolveOptions(textBuffer, options) {\n      if (options.detectIndentation) {\n        var guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\n        return new model.TextModelResolvedOptions({\n          tabSize: guessedIndentation.tabSize,\n          indentSize: 'tabSize',\n          // TODO@Alex: guess indentSize independent of tabSize\n          insertSpaces: guessedIndentation.insertSpaces,\n          trimAutoWhitespace: options.trimAutoWhitespace,\n          defaultEOL: options.defaultEOL,\n          bracketPairColorizationOptions: options.bracketPairColorizationOptions\n        });\n      }\n      return new model.TextModelResolvedOptions(options);\n    }\n  }]);\n}(Disposable);\nTextModel._MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB,  // used in tests\nTextModel.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\nTextModel.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\nTextModel.LARGE_FILE_HEAP_OPERATION_THRESHOLD = 256 * 1024 * 1024; // 256M characters, usually ~> 512MB memory usage\nTextModel.DEFAULT_CREATION_OPTIONS = {\n  isForSimpleWidget: false,\n  tabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n  indentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n  insertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n  detectIndentation: false,\n  defaultEOL: 1 /* model.DefaultEndOfLine.LF */,\n  trimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n  largeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n  bracketPairColorizationOptions: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions\n};\nTextModel = TextModel_1 = __decorate([__param(4, IUndoRedoService), __param(5, ILanguageService), __param(6, ILanguageConfigurationService)], TextModel);\nexport { TextModel };\nfunction indentOfLine(line) {\n  var indent = 0;\n  var _iterator = _createForOfIteratorHelper(line),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var c = _step.value;\n      if (c === ' ' || c === '\\t') {\n        indent++;\n      } else {\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return indent;\n}\n//#region Decorations\nfunction isNodeInOverviewRuler(node) {\n  return node.options.overviewRuler && node.options.overviewRuler.color ? true : false;\n}\nfunction isOptionsInjectedText(options) {\n  return !!options.after || !!options.before;\n}\nfunction isNodeInjectedText(node) {\n  return !!node.options.after || !!node.options.before;\n}\nvar DecorationsTrees = /*#__PURE__*/function () {\n  function DecorationsTrees() {\n    _classCallCheck(this, DecorationsTrees);\n    this._decorationsTree0 = new IntervalTree();\n    this._decorationsTree1 = new IntervalTree();\n    this._injectedTextDecorationsTree = new IntervalTree();\n  }\n  return _createClass(DecorationsTrees, [{\n    key: \"ensureAllNodesHaveRanges\",\n    value: function ensureAllNodesHaveRanges(host) {\n      this.getAll(host, 0, false, false, false);\n    }\n  }, {\n    key: \"_ensureNodesHaveRanges\",\n    value: function _ensureNodesHaveRanges(host, nodes) {\n      var _iterator2 = _createForOfIteratorHelper(nodes),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var node = _step2.value;\n          if (node.range === null) {\n            node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return nodes;\n    }\n  }, {\n    key: \"getAllInInterval\",\n    value: function getAllInInterval(host, start, end, filterOwnerId, filterOutValidation, onlyMarginDecorations) {\n      var versionId = host.getVersionId();\n      var result = this._intervalSearch(start, end, filterOwnerId, filterOutValidation, versionId, onlyMarginDecorations);\n      return this._ensureNodesHaveRanges(host, result);\n    }\n  }, {\n    key: \"_intervalSearch\",\n    value: function _intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations) {\n      var r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n      var r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n      var r2 = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n      return r0.concat(r1).concat(r2);\n    }\n  }, {\n    key: \"getInjectedTextInInterval\",\n    value: function getInjectedTextInInterval(host, start, end, filterOwnerId) {\n      var versionId = host.getVersionId();\n      var result = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, false, versionId, false);\n      return this._ensureNodesHaveRanges(host, result).filter(function (i) {\n        return i.options.showIfCollapsed || !i.range.isEmpty();\n      });\n    }\n  }, {\n    key: \"getAllInjectedText\",\n    value: function getAllInjectedText(host, filterOwnerId) {\n      var versionId = host.getVersionId();\n      var result = this._injectedTextDecorationsTree.search(filterOwnerId, false, versionId, false);\n      return this._ensureNodesHaveRanges(host, result).filter(function (i) {\n        return i.options.showIfCollapsed || !i.range.isEmpty();\n      });\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll(host, filterOwnerId, filterOutValidation, overviewRulerOnly, onlyMarginDecorations) {\n      var versionId = host.getVersionId();\n      var result = this._search(filterOwnerId, filterOutValidation, overviewRulerOnly, versionId, onlyMarginDecorations);\n      return this._ensureNodesHaveRanges(host, result);\n    }\n  }, {\n    key: \"_search\",\n    value: function _search(filterOwnerId, filterOutValidation, overviewRulerOnly, cachedVersionId, onlyMarginDecorations) {\n      if (overviewRulerOnly) {\n        return this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n      } else {\n        var r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        var r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        var r2 = this._injectedTextDecorationsTree.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        return r0.concat(r1).concat(r2);\n      }\n    }\n  }, {\n    key: \"collectNodesFromOwner\",\n    value: function collectNodesFromOwner(ownerId) {\n      var r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n      var r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n      var r2 = this._injectedTextDecorationsTree.collectNodesFromOwner(ownerId);\n      return r0.concat(r1).concat(r2);\n    }\n  }, {\n    key: \"collectNodesPostOrder\",\n    value: function collectNodesPostOrder() {\n      var r0 = this._decorationsTree0.collectNodesPostOrder();\n      var r1 = this._decorationsTree1.collectNodesPostOrder();\n      var r2 = this._injectedTextDecorationsTree.collectNodesPostOrder();\n      return r0.concat(r1).concat(r2);\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(node) {\n      if (isNodeInjectedText(node)) {\n        this._injectedTextDecorationsTree.insert(node);\n      } else if (isNodeInOverviewRuler(node)) {\n        this._decorationsTree1.insert(node);\n      } else {\n        this._decorationsTree0.insert(node);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(node) {\n      if (isNodeInjectedText(node)) {\n        this._injectedTextDecorationsTree[\"delete\"](node);\n      } else if (isNodeInOverviewRuler(node)) {\n        this._decorationsTree1[\"delete\"](node);\n      } else {\n        this._decorationsTree0[\"delete\"](node);\n      }\n    }\n  }, {\n    key: \"getNodeRange\",\n    value: function getNodeRange(host, node) {\n      var versionId = host.getVersionId();\n      if (node.cachedVersionId !== versionId) {\n        this._resolveNode(node, versionId);\n      }\n      if (node.range === null) {\n        node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n      }\n      return node.range;\n    }\n  }, {\n    key: \"_resolveNode\",\n    value: function _resolveNode(node, cachedVersionId) {\n      if (isNodeInjectedText(node)) {\n        this._injectedTextDecorationsTree.resolveNode(node, cachedVersionId);\n      } else if (isNodeInOverviewRuler(node)) {\n        this._decorationsTree1.resolveNode(node, cachedVersionId);\n      } else {\n        this._decorationsTree0.resolveNode(node, cachedVersionId);\n      }\n    }\n  }, {\n    key: \"acceptReplace\",\n    value: function acceptReplace(offset, length, textLength, forceMoveMarkers) {\n      this._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\n      this._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\n      this._injectedTextDecorationsTree.acceptReplace(offset, length, textLength, forceMoveMarkers);\n    }\n  }]);\n}();\nfunction cleanClassName(className) {\n  return className.replace(/[^a-z0-9\\-_]/gi, ' ');\n}\nvar DecorationOptions = /*#__PURE__*/_createClass(function DecorationOptions(options) {\n  _classCallCheck(this, DecorationOptions);\n  this.color = options.color || '';\n  this.darkColor = options.darkColor || '';\n});\nexport var ModelDecorationOverviewRulerOptions = /*#__PURE__*/function (_DecorationOptions) {\n  function ModelDecorationOverviewRulerOptions(options) {\n    var _this10;\n    _classCallCheck(this, ModelDecorationOverviewRulerOptions);\n    _this10 = _callSuper(this, ModelDecorationOverviewRulerOptions, [options]);\n    _this10._resolvedColor = null;\n    _this10.position = typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center;\n    return _this10;\n  }\n  _inherits(ModelDecorationOverviewRulerOptions, _DecorationOptions);\n  return _createClass(ModelDecorationOverviewRulerOptions, [{\n    key: \"getColor\",\n    value: function getColor(theme) {\n      if (!this._resolvedColor) {\n        if (theme.type !== 'light' && this.darkColor) {\n          this._resolvedColor = this._resolveColor(this.darkColor, theme);\n        } else {\n          this._resolvedColor = this._resolveColor(this.color, theme);\n        }\n      }\n      return this._resolvedColor;\n    }\n  }, {\n    key: \"invalidateCachedColor\",\n    value: function invalidateCachedColor() {\n      this._resolvedColor = null;\n    }\n  }, {\n    key: \"_resolveColor\",\n    value: function _resolveColor(color, theme) {\n      if (typeof color === 'string') {\n        return color;\n      }\n      var c = color ? theme.getColor(color.id) : null;\n      if (!c) {\n        return '';\n      }\n      return c.toString();\n    }\n  }]);\n}(DecorationOptions);\nexport var ModelDecorationGlyphMarginOptions = /*#__PURE__*/_createClass(function ModelDecorationGlyphMarginOptions(options) {\n  _classCallCheck(this, ModelDecorationGlyphMarginOptions);\n  var _a;\n  this.position = (_a = options === null || options === void 0 ? void 0 : options.position) !== null && _a !== void 0 ? _a : model.GlyphMarginLane.Center;\n  this.persistLane = options === null || options === void 0 ? void 0 : options.persistLane;\n});\nexport var ModelDecorationMinimapOptions = /*#__PURE__*/function (_DecorationOptions2) {\n  function ModelDecorationMinimapOptions(options) {\n    var _this11;\n    _classCallCheck(this, ModelDecorationMinimapOptions);\n    var _a, _b;\n    _this11 = _callSuper(this, ModelDecorationMinimapOptions, [options]);\n    _this11.position = options.position;\n    _this11.sectionHeaderStyle = (_a = options.sectionHeaderStyle) !== null && _a !== void 0 ? _a : null;\n    _this11.sectionHeaderText = (_b = options.sectionHeaderText) !== null && _b !== void 0 ? _b : null;\n    return _this11;\n  }\n  _inherits(ModelDecorationMinimapOptions, _DecorationOptions2);\n  return _createClass(ModelDecorationMinimapOptions, [{\n    key: \"getColor\",\n    value: function getColor(theme) {\n      if (!this._resolvedColor) {\n        if (theme.type !== 'light' && this.darkColor) {\n          this._resolvedColor = this._resolveColor(this.darkColor, theme);\n        } else {\n          this._resolvedColor = this._resolveColor(this.color, theme);\n        }\n      }\n      return this._resolvedColor;\n    }\n  }, {\n    key: \"invalidateCachedColor\",\n    value: function invalidateCachedColor() {\n      this._resolvedColor = undefined;\n    }\n  }, {\n    key: \"_resolveColor\",\n    value: function _resolveColor(color, theme) {\n      if (typeof color === 'string') {\n        return Color.fromHex(color);\n      }\n      return theme.getColor(color.id);\n    }\n  }]);\n}(DecorationOptions);\nexport var ModelDecorationInjectedTextOptions = /*#__PURE__*/function () {\n  function ModelDecorationInjectedTextOptions(options) {\n    _classCallCheck(this, ModelDecorationInjectedTextOptions);\n    this.content = options.content || '';\n    this.inlineClassName = options.inlineClassName || null;\n    this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n    this.attachedData = options.attachedData || null;\n    this.cursorStops = options.cursorStops || null;\n  }\n  return _createClass(ModelDecorationInjectedTextOptions, null, [{\n    key: \"from\",\n    value: function from(options) {\n      if (options instanceof ModelDecorationInjectedTextOptions) {\n        return options;\n      }\n      return new ModelDecorationInjectedTextOptions(options);\n    }\n  }]);\n}();\nexport var ModelDecorationOptions = /*#__PURE__*/function () {\n  function ModelDecorationOptions(options) {\n    _classCallCheck(this, ModelDecorationOptions);\n    var _a, _b, _c, _d, _e, _f;\n    this.description = options.description;\n    this.blockClassName = options.blockClassName ? cleanClassName(options.blockClassName) : null;\n    this.blockDoesNotCollapse = (_a = options.blockDoesNotCollapse) !== null && _a !== void 0 ? _a : null;\n    this.blockIsAfterEnd = (_b = options.blockIsAfterEnd) !== null && _b !== void 0 ? _b : null;\n    this.blockPadding = (_c = options.blockPadding) !== null && _c !== void 0 ? _c : null;\n    this.stickiness = options.stickiness || 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */;\n    this.zIndex = options.zIndex || 0;\n    this.className = options.className ? cleanClassName(options.className) : null;\n    this.shouldFillLineOnLineBreak = (_d = options.shouldFillLineOnLineBreak) !== null && _d !== void 0 ? _d : null;\n    this.hoverMessage = options.hoverMessage || null;\n    this.glyphMarginHoverMessage = options.glyphMarginHoverMessage || null;\n    this.lineNumberHoverMessage = options.lineNumberHoverMessage || null;\n    this.isWholeLine = options.isWholeLine || false;\n    this.showIfCollapsed = options.showIfCollapsed || false;\n    this.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n    this.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\n    this.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\n    this.glyphMargin = options.glyphMarginClassName ? new ModelDecorationGlyphMarginOptions(options.glyphMargin) : null;\n    this.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\n    this.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\n    this.lineNumberClassName = options.lineNumberClassName ? cleanClassName(options.lineNumberClassName) : null;\n    this.linesDecorationsTooltip = options.linesDecorationsTooltip ? strings.htmlAttributeEncodeValue(options.linesDecorationsTooltip) : null;\n    this.firstLineDecorationClassName = options.firstLineDecorationClassName ? cleanClassName(options.firstLineDecorationClassName) : null;\n    this.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\n    this.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\n    this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n    this.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\n    this.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\n    this.after = options.after ? ModelDecorationInjectedTextOptions.from(options.after) : null;\n    this.before = options.before ? ModelDecorationInjectedTextOptions.from(options.before) : null;\n    this.hideInCommentTokens = (_e = options.hideInCommentTokens) !== null && _e !== void 0 ? _e : false;\n    this.hideInStringTokens = (_f = options.hideInStringTokens) !== null && _f !== void 0 ? _f : false;\n  }\n  return _createClass(ModelDecorationOptions, null, [{\n    key: \"register\",\n    value: function register(options) {\n      return new ModelDecorationOptions(options);\n    }\n  }, {\n    key: \"createDynamic\",\n    value: function createDynamic(options) {\n      return new ModelDecorationOptions(options);\n    }\n  }]);\n}();\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({\n  description: 'empty'\n});\n/**\n * The order carefully matches the values of the enum.\n */\nvar TRACKED_RANGE_OPTIONS = [ModelDecorationOptions.register({\n  description: 'tracked-range-always-grows-when-typing-at-edges',\n  stickiness: 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */\n}), ModelDecorationOptions.register({\n  description: 'tracked-range-never-grows-when-typing-at-edges',\n  stickiness: 1 /* model.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */\n}), ModelDecorationOptions.register({\n  description: 'tracked-range-grows-only-when-typing-before',\n  stickiness: 2 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */\n}), ModelDecorationOptions.register({\n  description: 'tracked-range-grows-only-when-typing-after',\n  stickiness: 3 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */\n})];\nfunction _normalizeOptions(options) {\n  if (options instanceof ModelDecorationOptions) {\n    return options;\n  }\n  return ModelDecorationOptions.createDynamic(options);\n}\nvar DidChangeDecorationsEmitter = /*#__PURE__*/function (_Disposable2) {\n  function DidChangeDecorationsEmitter(handleBeforeFire) {\n    var _this12;\n    _classCallCheck(this, DidChangeDecorationsEmitter);\n    _this12 = _callSuper(this, DidChangeDecorationsEmitter);\n    _this12.handleBeforeFire = handleBeforeFire;\n    _this12._actual = _this12._register(new Emitter());\n    _this12.event = _this12._actual.event;\n    _this12._affectedInjectedTextLines = null;\n    _this12._deferredCnt = 0;\n    _this12._shouldFireDeferred = false;\n    _this12._affectsMinimap = false;\n    _this12._affectsOverviewRuler = false;\n    _this12._affectsGlyphMargin = false;\n    _this12._affectsLineNumber = false;\n    return _this12;\n  }\n  _inherits(DidChangeDecorationsEmitter, _Disposable2);\n  return _createClass(DidChangeDecorationsEmitter, [{\n    key: \"beginDeferredEmit\",\n    value: function beginDeferredEmit() {\n      this._deferredCnt++;\n    }\n  }, {\n    key: \"endDeferredEmit\",\n    value: function endDeferredEmit() {\n      var _a;\n      this._deferredCnt--;\n      if (this._deferredCnt === 0) {\n        if (this._shouldFireDeferred) {\n          this.doFire();\n        }\n        (_a = this._affectedInjectedTextLines) === null || _a === void 0 ? void 0 : _a.clear();\n        this._affectedInjectedTextLines = null;\n      }\n    }\n  }, {\n    key: \"recordLineAffectedByInjectedText\",\n    value: function recordLineAffectedByInjectedText(lineNumber) {\n      if (!this._affectedInjectedTextLines) {\n        this._affectedInjectedTextLines = new Set();\n      }\n      this._affectedInjectedTextLines.add(lineNumber);\n    }\n  }, {\n    key: \"checkAffectedAndFire\",\n    value: function checkAffectedAndFire(options) {\n      var _a, _b;\n      this._affectsMinimap || (this._affectsMinimap = !!((_a = options.minimap) === null || _a === void 0 ? void 0 : _a.position));\n      this._affectsOverviewRuler || (this._affectsOverviewRuler = !!((_b = options.overviewRuler) === null || _b === void 0 ? void 0 : _b.color));\n      this._affectsGlyphMargin || (this._affectsGlyphMargin = !!options.glyphMarginClassName);\n      this._affectsLineNumber || (this._affectsLineNumber = !!options.lineNumberClassName);\n      this.tryFire();\n    }\n  }, {\n    key: \"fire\",\n    value: function fire() {\n      this._affectsMinimap = true;\n      this._affectsOverviewRuler = true;\n      this._affectsGlyphMargin = true;\n      this.tryFire();\n    }\n  }, {\n    key: \"tryFire\",\n    value: function tryFire() {\n      if (this._deferredCnt === 0) {\n        this.doFire();\n      } else {\n        this._shouldFireDeferred = true;\n      }\n    }\n  }, {\n    key: \"doFire\",\n    value: function doFire() {\n      this.handleBeforeFire(this._affectedInjectedTextLines);\n      var event = {\n        affectsMinimap: this._affectsMinimap,\n        affectsOverviewRuler: this._affectsOverviewRuler,\n        affectsGlyphMargin: this._affectsGlyphMargin,\n        affectsLineNumber: this._affectsLineNumber\n      };\n      this._shouldFireDeferred = false;\n      this._affectsMinimap = false;\n      this._affectsOverviewRuler = false;\n      this._affectsGlyphMargin = false;\n      this._actual.fire(event);\n    }\n  }]);\n}(Disposable); //#endregion\nvar DidChangeContentEmitter = /*#__PURE__*/function (_Disposable3) {\n  function DidChangeContentEmitter() {\n    var _this13;\n    _classCallCheck(this, DidChangeContentEmitter);\n    _this13 = _callSuper(this, DidChangeContentEmitter);\n    /**\n     * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\n     */\n    _this13._fastEmitter = _this13._register(new Emitter());\n    _this13.fastEvent = _this13._fastEmitter.event;\n    _this13._slowEmitter = _this13._register(new Emitter());\n    _this13.slowEvent = _this13._slowEmitter.event;\n    _this13._deferredCnt = 0;\n    _this13._deferredEvent = null;\n    return _this13;\n  }\n  _inherits(DidChangeContentEmitter, _Disposable3);\n  return _createClass(DidChangeContentEmitter, [{\n    key: \"beginDeferredEmit\",\n    value: function beginDeferredEmit() {\n      this._deferredCnt++;\n    }\n  }, {\n    key: \"endDeferredEmit\",\n    value: function endDeferredEmit() {\n      var resultingSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this._deferredCnt--;\n      if (this._deferredCnt === 0) {\n        if (this._deferredEvent !== null) {\n          this._deferredEvent.rawContentChangedEvent.resultingSelection = resultingSelection;\n          var e = this._deferredEvent;\n          this._deferredEvent = null;\n          this._fastEmitter.fire(e);\n          this._slowEmitter.fire(e);\n        }\n      }\n    }\n  }, {\n    key: \"fire\",\n    value: function fire(e) {\n      if (this._deferredCnt > 0) {\n        if (this._deferredEvent) {\n          this._deferredEvent = this._deferredEvent.merge(e);\n        } else {\n          this._deferredEvent = e;\n        }\n        return;\n      }\n      this._fastEmitter.fire(e);\n      this._slowEmitter.fire(e);\n    }\n  }]);\n}(Disposable);\n/**\n * @internal\n */\nexport var AttachedViews = /*#__PURE__*/function () {\n  function AttachedViews() {\n    _classCallCheck(this, AttachedViews);\n    this._onDidChangeVisibleRanges = new Emitter();\n    this.onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n    this._views = new Set();\n  }\n  return _createClass(AttachedViews, [{\n    key: \"attachView\",\n    value: function attachView() {\n      var _this14 = this;\n      var view = new AttachedViewImpl(function (state) {\n        _this14._onDidChangeVisibleRanges.fire({\n          view: view,\n          state: state\n        });\n      });\n      this._views.add(view);\n      return view;\n    }\n  }, {\n    key: \"detachView\",\n    value: function detachView(view) {\n      this._views[\"delete\"](view);\n      this._onDidChangeVisibleRanges.fire({\n        view: view,\n        state: undefined\n      });\n    }\n  }]);\n}();\nvar AttachedViewImpl = /*#__PURE__*/function () {\n  function AttachedViewImpl(handleStateChange) {\n    _classCallCheck(this, AttachedViewImpl);\n    this.handleStateChange = handleStateChange;\n  }\n  return _createClass(AttachedViewImpl, [{\n    key: \"setVisibleLines\",\n    value: function setVisibleLines(visibleLines, stabilized) {\n      var visibleLineRanges = visibleLines.map(function (line) {\n        return new LineRange(line.startLineNumber, line.endLineNumber + 1);\n      });\n      this.handleStateChange({\n        visibleLineRanges: visibleLineRanges,\n        stabilized: stabilized\n      });\n    }\n  }]);\n}();","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","_typeof","decorate","i","defineProperty","__param","paramIndex","decorator","TextModel_1","ArrayQueue","pushMany","Color","BugIndicatingError","illegalArgument","onUnexpectedError","Emitter","Disposable","MutableDisposable","combinedDisposable","strings","URI","countEOL","normalizeIndentation","LineRange","Position","Range","Selection","EDITOR_MODEL_DEFAULTS","ILanguageService","ILanguageConfigurationService","model","BracketPairsTextModelPart","ColorizedBracketPairsDecorationProvider","EditStack","GuidesTextModelPart","guessIndentation","IntervalNode","IntervalTree","recomputeMaxEnd","PieceTreeTextBuffer","PieceTreeTextBufferBuilder","SearchParams","TextModelSearch","TokenizationTextModelPart","InternalModelContentChangeEvent","LineInjectedText","ModelInjectedTextChangedEvent","ModelRawContentChangedEvent","ModelRawEOLChanged","ModelRawFlush","ModelRawLineChanged","ModelRawLinesDeleted","ModelRawLinesInserted","IUndoRedoService","createTextBufferFactory","text","builder","acceptChunk","finish","createTextBufferFactoryFromSnapshot","snapshot","chunk","read","createTextBuffer","value","defaultEOL","factory","isITextSnapshot","create","MODEL_ID","LIMIT_FIND_COUNT","LONG_LINE_BOUNDARY","TextModelSnapshot","source","_classCallCheck","_source","_eos","_createClass","result","resultCnt","resultLength","tmp","join","invalidFunc","Error","TextModel","_Disposable","languageIdOrSelection","creationOptions","_this","associatedResource","undefined","_undoRedoService","_languageService","_languageConfigurationService","_callSuper","_onWillDispose","_register","onWillDispose","event","_onDidChangeDecorations","DidChangeDecorationsEmitter","affectedInjectedTextLines","handleBeforeFireDecorationsChangedEvent","onDidChangeDecorations","_onDidChangeOptions","onDidChangeOptions","_onDidChangeAttached","onDidChangeAttached","_onDidChangeInjectedText","_eventEmitter","DidChangeContentEmitter","_languageSelectionListener","_deltaDecorationCallCnt","_attachedViews","AttachedViews","id","isForSimpleWidget","_associatedResource","parse","_attachedEditorCount","_createTextBuffer","textBuffer","disposable","_buffer","_bufferDisposable","_options","resolveOptions","languageId","onDidChange","_setLanguage","_bracketPairs","_guidesTextModelPart","_decorationProvider","_tokenizationTextModelPart","bufferLineCount","getLineCount","bufferTextLength","getValueLengthInRange","getLineLength","largeFileOptimizations","_isTooLargeForTokenization","LARGE_FILE_SIZE_THRESHOLD","LARGE_FILE_LINE_COUNT_THRESHOLD","_isTooLargeForHeapOperation","LARGE_FILE_HEAP_OPERATION_THRESHOLD","_isTooLargeForSyncing","_MODEL_SYNC_LIMIT","_versionId","_alternativeVersionId","_initialUndoRedoSnapshot","_isDisposed","__isDisposing","_instanceId","singleLetterHash","_lastDecorationId","_decorations","_decorationsTree","DecorationsTrees","_commandManager","_isUndoing","_isRedoing","_trimAutoWhitespaceLines","beginDeferredEmit","fire","endDeferredEmit","requestRichLanguageFeatures","_inherits","get","onDidChangeLanguage","onDidChangeLanguageConfiguration","onDidChangeTokens","onDidChangeContent","listener","slowEvent","e","contentChangedEvent","onDidChangeContentOrInjectedText","fastEvent","_isDisposing","dispose","_get","_getPrototypeOf","prototype","call","emptyDisposedTextBuffer","None","_assertNotDisposed","_emitContentChangedEvent","rawChange","change","handleDidChangeContent","setValue","_createTextBuffer2","_setValueFromTextBuffer","_createContentChanged2","range","rangeOffset","rangeLength","isUndoing","isRedoing","isFlush","isEolChange","changes","eol","getEOL","versionId","getVersionId","textBufferDisposable","oldFullModelRange","getFullModelRange","oldModelValueLength","endLineNumber","endColumn","getLineMaxColumn","_increaseVersionId","clear","getValue","setEOL","newEOL","_onBeforeEOLChange","_onAfterEOLChange","ensureAllNodesHaveRanges","allDecorations","collectNodesPostOrder","len","node","delta","cachedAbsoluteStart","start","startOffset","getOffsetAt","startLineNumber","startColumn","endOffset","cachedAbsoluteEnd","cachedVersionId","end","onBeforeAttached","handleDidChangeAttached","attachView","onBeforeDetached","view","detachView","isAttachedToEditor","getAttachedEditorCount","isTooLargeForSyncing","isTooLargeForTokenization","isTooLargeForHeapOperation","isDisposed","isDominatedByLongLines","smallLineCharCount","longLineCharCount","lineCount","lineNumber","lineLength","getOptions","getFormattingOptions","tabSize","indentSize","insertSpaces","updateOptions","_newOpts","originalIndentSize","trimAutoWhitespace","bracketPairColorizationOptions","bracketColorizationOptions","newOpts","TextModelResolvedOptions","equals","createChangeEvent","handleDidChangeOptions","detectIndentation","defaultInsertSpaces","defaultTabSize","guessedIndentation","str","mightContainRTL","mightContainUnusualLineTerminators","removeUnusualLineTerminators","selections","matches","findMatches","UNUSUAL_LINE_TERMINATORS","resetMightContainUnusualLineTerminators","pushEditOperations","map","m","mightContainNonBasicASCII","getAlternativeVersionId","getInitialUndoRedoSnapshot","rawPosition","position","_validatePosition","column","getPositionAt","rawOffset","offset","Math","min","getLength","max","_overwriteVersionId","_overwriteAlternativeVersionId","newAlternativeVersionId","_overwriteInitialUndoRedoSnapshot","newInitialUndoRedoSnapshot","preserveBOM","fullModelRange","fullModelValue","getValueInRange","getBOM","createSnapshot","getValueLength","rawRange","validateRange","getCharacterCountInRange","getLineContent","getLinesContent","getEndOfLineSequence","getLineMinColumn","getLineFirstNonWhitespaceColumn","getLineLastNonWhitespaceColumn","_validateRangeRelaxedNoAllocations","linesCount","initialStartLineNumber","initialStartColumn","floor","isNaN","maxColumn","initialEndLineNumber","initialEndColumn","_isValidPosition","validationType","charCodeBefore","getLineCharCode","isHighSurrogate","_lineNumber","_column","validatePosition","_isValidRange","charCodeBeforeStart","charCodeBeforeEnd","startInsideSurrogatePair","endInsideSurrogatePair","_range","modifyPosition","candidate","findMatchesLineByLine","searchRange","searchData","captureMatches","limitResultCount","searchString","rawSearchScope","isRegex","matchCase","wordSeparators","_this2","searchRanges","Array","isArray","every","searchScope","isIRange","sort","d1","d2","uniqueSearchRanges","push","reduce","prev","curr","areIntersecting","plusRange","matchMapper","indexOf","searchParams","parseSearchRequest","arr","concat","findNextMatch","rawSearchStart","searchStart","ret","findPreviousMatch","pushStackElement","popStackElement","pushEOL","currentEOL","uri","_validateEditOperation","rawOperation","ValidAnnotatedEditOperation","identifier","forceMoveMarkers","isAutoWhitespaceEdit","_isTracked","_validateEditOperations","rawOperations","beforeCursorState","editOperations","cursorStateComputer","group","_pushEditOperations","_this3","incomingEdits","op","editsAreNearCursors","sel","foundEditNearSel","j","lenJ","editRange","selIsAbove","selIsBelow","trimLineNumber","maxLineColumn","allowTrimLine","editText","isEmpty","charAt","trimRange","pushEditOperation","_applyUndo","resultingAlternativeVersionId","resultingSelection","_this4","edits","rangeStart","newPosition","rangeEnd","newEnd","oldText","_applyUndoRedoEdits","_applyRedo","_this5","oldPosition","oldEnd","newText","applyEdits","computeUndoEdits","operations","_doApplyEdits","_this6","oldLineCount","newLineCount","contentChanges","trimAutoWhitespaceLineNumbers","acceptReplace","rawContentChanges","_countEOL","_countEOL2","_slicedToArray","eolCount","deletingLinesCnt","insertingLinesCnt","editingLinesCnt","changeLineCountDelta","currentEditStartLineNumber","firstEditLineNumber","lastInsertedLineNumber","decorationsWithInjectedTextInEditedRange","getInjectedTextInInterval","injectedTextInEditedRange","fromDecorations","injectedTextInEditedRangeQueue","_loop","editLineNumber","currentEditLineNumber","takeFromEndWhile","decorationsInCurrentLine","spliceStartLineNumber","spliceLineNumber","cnt","fromLineNumber","injectedTexts","newLines","_loop2","takeWhile","reverseEdits","undo","canUndo","redo","canRedo","_this7","size","affectedLines","from","lineChangeEvents","_getInjectedTextInLine","changeDecorations","callback","ownerId","_changeDecorations","_this8","changeAccessor","addDecoration","options","_deltaDecorationsImpl","changeDecoration","newRange","_changeDecorationImpl","changeDecorationOptions","_changeDecorationOptionsImpl","_normalizeOptions","removeDecoration","deltaDecorations","oldDecorations","newDecorations","console","warn","_getTrackedRange","getDecorationRange","_setTrackedRange","newStickiness","TRACKED_RANGE_OPTIONS","reset","setOptions","insert","removeAllDecorationsWithOwnerId","nodes","collectNodesFromOwner","getDecorationOptions","decorationId","getNodeRange","getLineDecorations","filterOutValidation","getLinesDecorations","_startLineNumber","_endLineNumber","onlyMarginDecorations","decorations","_getDecorationsInRange","getDecorationsInRange","onlyMinimapDecorations","validatedRange","getOverviewRulerDecorations","getAll","getInjectedTextDecorations","getAllInjectedText","filter","t","getAllDecorations","getAllMarginDecorations","filterRange","filterOwnerId","getAllInInterval","getRangeAt","after","oldRange","recordLineAffectedByInjectedText","before","checkAffectedAndFire","nodeWasInOverviewRuler","overviewRuler","color","nodeIsInOverviewRuler","nodeRange","movedInOverviewRuler","changedWhetherInjectedText","isOptionsInjectedText","isNodeInjectedText","oldDecorationsIds","suppressEvents","oldDecorationsLen","oldDecorationIndex","newDecorationsLen","newDecorationIndex","internalDecorationId","newDecoration","getLanguageId","tokenization","setLanguage","_this9","setLanguageId","getLanguageIdAtPosition","getWordAtPosition","getWordUntilPosition","normalizePosition","affinity","getLineIndentColumn","indentOfLine","DEFAULT_CREATION_OPTIONS","line","indent","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","f","isNodeInOverviewRuler","_decorationsTree0","_decorationsTree1","_injectedTextDecorationsTree","host","_ensureNodesHaveRanges","_iterator2","_step2","_intervalSearch","r0","intervalSearch","r1","r2","showIfCollapsed","search","overviewRulerOnly","_search","_delete","_resolveNode","resolveNode","textLength","cleanClassName","className","replace","DecorationOptions","darkColor","ModelDecorationOverviewRulerOptions","_DecorationOptions","_this10","_resolvedColor","OverviewRulerLane","Center","getColor","theme","type","_resolveColor","invalidateCachedColor","toString","ModelDecorationGlyphMarginOptions","_a","GlyphMarginLane","persistLane","ModelDecorationMinimapOptions","_DecorationOptions2","_this11","_b","sectionHeaderStyle","sectionHeaderText","fromHex","ModelDecorationInjectedTextOptions","content","inlineClassName","inlineClassNameAffectsLetterSpacing","attachedData","cursorStops","ModelDecorationOptions","_c","_d","_e","_f","description","blockClassName","blockDoesNotCollapse","blockIsAfterEnd","blockPadding","stickiness","zIndex","shouldFillLineOnLineBreak","hoverMessage","glyphMarginHoverMessage","lineNumberHoverMessage","isWholeLine","collapseOnReplaceEdit","minimap","glyphMargin","glyphMarginClassName","linesDecorationsClassName","lineNumberClassName","linesDecorationsTooltip","htmlAttributeEncodeValue","firstLineDecorationClassName","marginClassName","beforeContentClassName","afterContentClassName","hideInCommentTokens","hideInStringTokens","register","createDynamic","EMPTY","_Disposable2","handleBeforeFire","_this12","_actual","_affectedInjectedTextLines","_deferredCnt","_shouldFireDeferred","_affectsMinimap","_affectsOverviewRuler","_affectsGlyphMargin","_affectsLineNumber","doFire","Set","add","tryFire","affectsMinimap","affectsOverviewRuler","affectsGlyphMargin","affectsLineNumber","_Disposable3","_this13","_fastEmitter","_slowEmitter","_deferredEvent","rawContentChangedEvent","merge","_onDidChangeVisibleRanges","onDidChangeVisibleRanges","_views","_this14","AttachedViewImpl","state","handleStateChange","setVisibleLines","visibleLines","stabilized","visibleLineRanges"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/model/textModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar TextModel_1;\nimport { ArrayQueue, pushMany } from '../../../base/common/arrays.js';\nimport { Color } from '../../../base/common/color.js';\nimport { BugIndicatingError, illegalArgument, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, MutableDisposable, combinedDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { countEOL } from '../core/eolCounter.js';\nimport { normalizeIndentation } from '../core/indentation.js';\nimport { LineRange } from '../core/lineRange.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport * as model from '../model.js';\nimport { BracketPairsTextModelPart } from './bracketPairsTextModelPart/bracketPairsImpl.js';\nimport { ColorizedBracketPairsDecorationProvider } from './bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js';\nimport { EditStack } from './editStack.js';\nimport { GuidesTextModelPart } from './guidesTextModelPart.js';\nimport { guessIndentation } from './indentationGuesser.js';\nimport { IntervalNode, IntervalTree, recomputeMaxEnd } from './intervalTree.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer/pieceTreeTextBuffer.js';\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\nimport { TokenizationTextModelPart } from './tokenizationTextModelPart.js';\nimport { InternalModelContentChangeEvent, LineInjectedText, ModelInjectedTextChangedEvent, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted } from '../textModelEvents.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nexport function createTextBufferFactory(text) {\n    const builder = new PieceTreeTextBufferBuilder();\n    builder.acceptChunk(text);\n    return builder.finish();\n}\nexport function createTextBufferFactoryFromSnapshot(snapshot) {\n    const builder = new PieceTreeTextBufferBuilder();\n    let chunk;\n    while (typeof (chunk = snapshot.read()) === 'string') {\n        builder.acceptChunk(chunk);\n    }\n    return builder.finish();\n}\nexport function createTextBuffer(value, defaultEOL) {\n    let factory;\n    if (typeof value === 'string') {\n        factory = createTextBufferFactory(value);\n    }\n    else if (model.isITextSnapshot(value)) {\n        factory = createTextBufferFactoryFromSnapshot(value);\n    }\n    else {\n        factory = value;\n    }\n    return factory.create(defaultEOL);\n}\nlet MODEL_ID = 0;\nconst LIMIT_FIND_COUNT = 999;\nconst LONG_LINE_BOUNDARY = 10000;\nclass TextModelSnapshot {\n    constructor(source) {\n        this._source = source;\n        this._eos = false;\n    }\n    read() {\n        if (this._eos) {\n            return null;\n        }\n        const result = [];\n        let resultCnt = 0;\n        let resultLength = 0;\n        do {\n            const tmp = this._source.read();\n            if (tmp === null) {\n                // end-of-stream\n                this._eos = true;\n                if (resultCnt === 0) {\n                    return null;\n                }\n                else {\n                    return result.join('');\n                }\n            }\n            if (tmp.length > 0) {\n                result[resultCnt++] = tmp;\n                resultLength += tmp.length;\n            }\n            if (resultLength >= 64 * 1024) {\n                return result.join('');\n            }\n        } while (true);\n    }\n}\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\nlet TextModel = TextModel_1 = class TextModel extends Disposable {\n    static resolveOptions(textBuffer, options) {\n        if (options.detectIndentation) {\n            const guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\n            return new model.TextModelResolvedOptions({\n                tabSize: guessedIndentation.tabSize,\n                indentSize: 'tabSize', // TODO@Alex: guess indentSize independent of tabSize\n                insertSpaces: guessedIndentation.insertSpaces,\n                trimAutoWhitespace: options.trimAutoWhitespace,\n                defaultEOL: options.defaultEOL,\n                bracketPairColorizationOptions: options.bracketPairColorizationOptions,\n            });\n        }\n        return new model.TextModelResolvedOptions(options);\n    }\n    get onDidChangeLanguage() { return this._tokenizationTextModelPart.onDidChangeLanguage; }\n    get onDidChangeLanguageConfiguration() { return this._tokenizationTextModelPart.onDidChangeLanguageConfiguration; }\n    get onDidChangeTokens() { return this._tokenizationTextModelPart.onDidChangeTokens; }\n    onDidChangeContent(listener) {\n        return this._eventEmitter.slowEvent((e) => listener(e.contentChangedEvent));\n    }\n    onDidChangeContentOrInjectedText(listener) {\n        return combinedDisposable(this._eventEmitter.fastEvent(e => listener(e)), this._onDidChangeInjectedText.event(e => listener(e)));\n    }\n    _isDisposing() { return this.__isDisposing; }\n    get tokenization() { return this._tokenizationTextModelPart; }\n    get bracketPairs() { return this._bracketPairs; }\n    get guides() { return this._guidesTextModelPart; }\n    constructor(source, languageIdOrSelection, creationOptions, associatedResource = null, _undoRedoService, _languageService, _languageConfigurationService) {\n        super();\n        this._undoRedoService = _undoRedoService;\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        //#region Events\n        this._onWillDispose = this._register(new Emitter());\n        this.onWillDispose = this._onWillDispose.event;\n        this._onDidChangeDecorations = this._register(new DidChangeDecorationsEmitter(affectedInjectedTextLines => this.handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines)));\n        this.onDidChangeDecorations = this._onDidChangeDecorations.event;\n        this._onDidChangeOptions = this._register(new Emitter());\n        this.onDidChangeOptions = this._onDidChangeOptions.event;\n        this._onDidChangeAttached = this._register(new Emitter());\n        this.onDidChangeAttached = this._onDidChangeAttached.event;\n        this._onDidChangeInjectedText = this._register(new Emitter());\n        this._eventEmitter = this._register(new DidChangeContentEmitter());\n        this._languageSelectionListener = this._register(new MutableDisposable());\n        this._deltaDecorationCallCnt = 0;\n        this._attachedViews = new AttachedViews();\n        // Generate a new unique model id\n        MODEL_ID++;\n        this.id = '$model' + MODEL_ID;\n        this.isForSimpleWidget = creationOptions.isForSimpleWidget;\n        if (typeof associatedResource === 'undefined' || associatedResource === null) {\n            this._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n        }\n        else {\n            this._associatedResource = associatedResource;\n        }\n        this._attachedEditorCount = 0;\n        const { textBuffer, disposable } = createTextBuffer(source, creationOptions.defaultEOL);\n        this._buffer = textBuffer;\n        this._bufferDisposable = disposable;\n        this._options = TextModel_1.resolveOptions(this._buffer, creationOptions);\n        const languageId = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n        if (typeof languageIdOrSelection !== 'string') {\n            this._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId));\n        }\n        this._bracketPairs = this._register(new BracketPairsTextModelPart(this, this._languageConfigurationService));\n        this._guidesTextModelPart = this._register(new GuidesTextModelPart(this, this._languageConfigurationService));\n        this._decorationProvider = this._register(new ColorizedBracketPairsDecorationProvider(this));\n        this._tokenizationTextModelPart = new TokenizationTextModelPart(this._languageService, this._languageConfigurationService, this, this._bracketPairs, languageId, this._attachedViews);\n        const bufferLineCount = this._buffer.getLineCount();\n        const bufferTextLength = this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, this._buffer.getLineLength(bufferLineCount) + 1), 0 /* model.EndOfLinePreference.TextDefined */);\n        // !!! Make a decision in the ctor and permanently respect this decision !!!\n        // If a model is too large at construction time, it will never get tokenized,\n        // under no circumstances.\n        if (creationOptions.largeFileOptimizations) {\n            this._isTooLargeForTokenization = ((bufferTextLength > TextModel_1.LARGE_FILE_SIZE_THRESHOLD)\n                || (bufferLineCount > TextModel_1.LARGE_FILE_LINE_COUNT_THRESHOLD));\n            this._isTooLargeForHeapOperation = bufferTextLength > TextModel_1.LARGE_FILE_HEAP_OPERATION_THRESHOLD;\n        }\n        else {\n            this._isTooLargeForTokenization = false;\n            this._isTooLargeForHeapOperation = false;\n        }\n        this._isTooLargeForSyncing = (bufferTextLength > TextModel_1._MODEL_SYNC_LIMIT);\n        this._versionId = 1;\n        this._alternativeVersionId = 1;\n        this._initialUndoRedoSnapshot = null;\n        this._isDisposed = false;\n        this.__isDisposing = false;\n        this._instanceId = strings.singleLetterHash(MODEL_ID);\n        this._lastDecorationId = 0;\n        this._decorations = Object.create(null);\n        this._decorationsTree = new DecorationsTrees();\n        this._commandManager = new EditStack(this, this._undoRedoService);\n        this._isUndoing = false;\n        this._isRedoing = false;\n        this._trimAutoWhitespaceLines = null;\n        this._register(this._decorationProvider.onDidChange(() => {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._onDidChangeDecorations.fire();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }));\n        this._languageService.requestRichLanguageFeatures(languageId);\n    }\n    dispose() {\n        this.__isDisposing = true;\n        this._onWillDispose.fire();\n        this._tokenizationTextModelPart.dispose();\n        this._isDisposed = true;\n        super.dispose();\n        this._bufferDisposable.dispose();\n        this.__isDisposing = false;\n        // Manually release reference to previous text buffer to avoid large leaks\n        // in case someone leaks a TextModel reference\n        const emptyDisposedTextBuffer = new PieceTreeTextBuffer([], '', '\\n', false, false, true, true);\n        emptyDisposedTextBuffer.dispose();\n        this._buffer = emptyDisposedTextBuffer;\n        this._bufferDisposable = Disposable.None;\n    }\n    _assertNotDisposed() {\n        if (this._isDisposed) {\n            throw new Error('Model is disposed!');\n        }\n    }\n    _emitContentChangedEvent(rawChange, change) {\n        if (this.__isDisposing) {\n            // Do not confuse listeners by emitting any event after disposing\n            return;\n        }\n        this._tokenizationTextModelPart.handleDidChangeContent(change);\n        this._bracketPairs.handleDidChangeContent(change);\n        this._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\n    }\n    setValue(value) {\n        this._assertNotDisposed();\n        if (value === null || value === undefined) {\n            throw illegalArgument();\n        }\n        const { textBuffer, disposable } = createTextBuffer(value, this._options.defaultEOL);\n        this._setValueFromTextBuffer(textBuffer, disposable);\n    }\n    _createContentChanged2(range, rangeOffset, rangeLength, text, isUndoing, isRedoing, isFlush, isEolChange) {\n        return {\n            changes: [{\n                    range: range,\n                    rangeOffset: rangeOffset,\n                    rangeLength: rangeLength,\n                    text: text,\n                }],\n            eol: this._buffer.getEOL(),\n            isEolChange: isEolChange,\n            versionId: this.getVersionId(),\n            isUndoing: isUndoing,\n            isRedoing: isRedoing,\n            isFlush: isFlush\n        };\n    }\n    _setValueFromTextBuffer(textBuffer, textBufferDisposable) {\n        this._assertNotDisposed();\n        const oldFullModelRange = this.getFullModelRange();\n        const oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n        const endLineNumber = this.getLineCount();\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        this._buffer = textBuffer;\n        this._bufferDisposable.dispose();\n        this._bufferDisposable = textBufferDisposable;\n        this._increaseVersionId();\n        // Destroy all my decorations\n        this._decorations = Object.create(null);\n        this._decorationsTree = new DecorationsTrees();\n        // Destroy my edit history and settings\n        this._commandManager.clear();\n        this._trimAutoWhitespaceLines = null;\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\n            new ModelRawFlush()\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, true, false));\n    }\n    setEOL(eol) {\n        this._assertNotDisposed();\n        const newEOL = (eol === 1 /* model.EndOfLineSequence.CRLF */ ? '\\r\\n' : '\\n');\n        if (this._buffer.getEOL() === newEOL) {\n            // Nothing to do\n            return;\n        }\n        const oldFullModelRange = this.getFullModelRange();\n        const oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n        const endLineNumber = this.getLineCount();\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        this._onBeforeEOLChange();\n        this._buffer.setEOL(newEOL);\n        this._increaseVersionId();\n        this._onAfterEOLChange();\n        this._emitContentChangedEvent(new ModelRawContentChangedEvent([\n            new ModelRawEOLChanged()\n        ], this._versionId, false, false), this._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, this.getValue(), false, false, false, true));\n    }\n    _onBeforeEOLChange() {\n        // Ensure all decorations get their `range` set.\n        this._decorationsTree.ensureAllNodesHaveRanges(this);\n    }\n    _onAfterEOLChange() {\n        // Transform back `range` to offsets\n        const versionId = this.getVersionId();\n        const allDecorations = this._decorationsTree.collectNodesPostOrder();\n        for (let i = 0, len = allDecorations.length; i < len; i++) {\n            const node = allDecorations[i];\n            const range = node.range; // the range is defined due to `_onBeforeEOLChange`\n            const delta = node.cachedAbsoluteStart - node.start;\n            const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n            const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n            node.cachedAbsoluteStart = startOffset;\n            node.cachedAbsoluteEnd = endOffset;\n            node.cachedVersionId = versionId;\n            node.start = startOffset - delta;\n            node.end = endOffset - delta;\n            recomputeMaxEnd(node);\n        }\n    }\n    onBeforeAttached() {\n        this._attachedEditorCount++;\n        if (this._attachedEditorCount === 1) {\n            this._tokenizationTextModelPart.handleDidChangeAttached();\n            this._onDidChangeAttached.fire(undefined);\n        }\n        return this._attachedViews.attachView();\n    }\n    onBeforeDetached(view) {\n        this._attachedEditorCount--;\n        if (this._attachedEditorCount === 0) {\n            this._tokenizationTextModelPart.handleDidChangeAttached();\n            this._onDidChangeAttached.fire(undefined);\n        }\n        this._attachedViews.detachView(view);\n    }\n    isAttachedToEditor() {\n        return this._attachedEditorCount > 0;\n    }\n    getAttachedEditorCount() {\n        return this._attachedEditorCount;\n    }\n    isTooLargeForSyncing() {\n        return this._isTooLargeForSyncing;\n    }\n    isTooLargeForTokenization() {\n        return this._isTooLargeForTokenization;\n    }\n    isTooLargeForHeapOperation() {\n        return this._isTooLargeForHeapOperation;\n    }\n    isDisposed() {\n        return this._isDisposed;\n    }\n    isDominatedByLongLines() {\n        this._assertNotDisposed();\n        if (this.isTooLargeForTokenization()) {\n            // Cannot word wrap huge files anyways, so it doesn't really matter\n            return false;\n        }\n        let smallLineCharCount = 0;\n        let longLineCharCount = 0;\n        const lineCount = this._buffer.getLineCount();\n        for (let lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n            const lineLength = this._buffer.getLineLength(lineNumber);\n            if (lineLength >= LONG_LINE_BOUNDARY) {\n                longLineCharCount += lineLength;\n            }\n            else {\n                smallLineCharCount += lineLength;\n            }\n        }\n        return (longLineCharCount > smallLineCharCount);\n    }\n    get uri() {\n        return this._associatedResource;\n    }\n    //#region Options\n    getOptions() {\n        this._assertNotDisposed();\n        return this._options;\n    }\n    getFormattingOptions() {\n        return {\n            tabSize: this._options.indentSize,\n            insertSpaces: this._options.insertSpaces\n        };\n    }\n    updateOptions(_newOpts) {\n        this._assertNotDisposed();\n        const tabSize = (typeof _newOpts.tabSize !== 'undefined') ? _newOpts.tabSize : this._options.tabSize;\n        const indentSize = (typeof _newOpts.indentSize !== 'undefined') ? _newOpts.indentSize : this._options.originalIndentSize;\n        const insertSpaces = (typeof _newOpts.insertSpaces !== 'undefined') ? _newOpts.insertSpaces : this._options.insertSpaces;\n        const trimAutoWhitespace = (typeof _newOpts.trimAutoWhitespace !== 'undefined') ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\n        const bracketPairColorizationOptions = (typeof _newOpts.bracketColorizationOptions !== 'undefined') ? _newOpts.bracketColorizationOptions : this._options.bracketPairColorizationOptions;\n        const newOpts = new model.TextModelResolvedOptions({\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            defaultEOL: this._options.defaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            bracketPairColorizationOptions,\n        });\n        if (this._options.equals(newOpts)) {\n            return;\n        }\n        const e = this._options.createChangeEvent(newOpts);\n        this._options = newOpts;\n        this._bracketPairs.handleDidChangeOptions(e);\n        this._decorationProvider.handleDidChangeOptions(e);\n        this._onDidChangeOptions.fire(e);\n    }\n    detectIndentation(defaultInsertSpaces, defaultTabSize) {\n        this._assertNotDisposed();\n        const guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\n        this.updateOptions({\n            insertSpaces: guessedIndentation.insertSpaces,\n            tabSize: guessedIndentation.tabSize,\n            indentSize: guessedIndentation.tabSize, // TODO@Alex: guess indentSize independent of tabSize\n        });\n    }\n    normalizeIndentation(str) {\n        this._assertNotDisposed();\n        return normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\n    }\n    //#endregion\n    //#region Reading\n    getVersionId() {\n        this._assertNotDisposed();\n        return this._versionId;\n    }\n    mightContainRTL() {\n        return this._buffer.mightContainRTL();\n    }\n    mightContainUnusualLineTerminators() {\n        return this._buffer.mightContainUnusualLineTerminators();\n    }\n    removeUnusualLineTerminators(selections = null) {\n        const matches = this.findMatches(strings.UNUSUAL_LINE_TERMINATORS.source, false, true, false, null, false, 1073741824 /* Constants.MAX_SAFE_SMALL_INTEGER */);\n        this._buffer.resetMightContainUnusualLineTerminators();\n        this.pushEditOperations(selections, matches.map(m => ({ range: m.range, text: null })), () => null);\n    }\n    mightContainNonBasicASCII() {\n        return this._buffer.mightContainNonBasicASCII();\n    }\n    getAlternativeVersionId() {\n        this._assertNotDisposed();\n        return this._alternativeVersionId;\n    }\n    getInitialUndoRedoSnapshot() {\n        this._assertNotDisposed();\n        return this._initialUndoRedoSnapshot;\n    }\n    getOffsetAt(rawPosition) {\n        this._assertNotDisposed();\n        const position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, 0 /* StringOffsetValidationType.Relaxed */);\n        return this._buffer.getOffsetAt(position.lineNumber, position.column);\n    }\n    getPositionAt(rawOffset) {\n        this._assertNotDisposed();\n        const offset = (Math.min(this._buffer.getLength(), Math.max(0, rawOffset)));\n        return this._buffer.getPositionAt(offset);\n    }\n    _increaseVersionId() {\n        this._versionId = this._versionId + 1;\n        this._alternativeVersionId = this._versionId;\n    }\n    _overwriteVersionId(versionId) {\n        this._versionId = versionId;\n    }\n    _overwriteAlternativeVersionId(newAlternativeVersionId) {\n        this._alternativeVersionId = newAlternativeVersionId;\n    }\n    _overwriteInitialUndoRedoSnapshot(newInitialUndoRedoSnapshot) {\n        this._initialUndoRedoSnapshot = newInitialUndoRedoSnapshot;\n    }\n    getValue(eol, preserveBOM = false) {\n        this._assertNotDisposed();\n        if (this.isTooLargeForHeapOperation()) {\n            throw new BugIndicatingError('Operation would exceed heap memory limits');\n        }\n        const fullModelRange = this.getFullModelRange();\n        const fullModelValue = this.getValueInRange(fullModelRange, eol);\n        if (preserveBOM) {\n            return this._buffer.getBOM() + fullModelValue;\n        }\n        return fullModelValue;\n    }\n    createSnapshot(preserveBOM = false) {\n        return new TextModelSnapshot(this._buffer.createSnapshot(preserveBOM));\n    }\n    getValueLength(eol, preserveBOM = false) {\n        this._assertNotDisposed();\n        const fullModelRange = this.getFullModelRange();\n        const fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n        if (preserveBOM) {\n            return this._buffer.getBOM().length + fullModelValue;\n        }\n        return fullModelValue;\n    }\n    getValueInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n    }\n    getValueLengthInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\n    }\n    getCharacterCountInRange(rawRange, eol = 0 /* model.EndOfLinePreference.TextDefined */) {\n        this._assertNotDisposed();\n        return this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\n    }\n    getLineCount() {\n        this._assertNotDisposed();\n        return this._buffer.getLineCount();\n    }\n    getLineContent(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLength(lineNumber);\n    }\n    getLinesContent() {\n        this._assertNotDisposed();\n        if (this.isTooLargeForHeapOperation()) {\n            throw new BugIndicatingError('Operation would exceed heap memory limits');\n        }\n        return this._buffer.getLinesContent();\n    }\n    getEOL() {\n        this._assertNotDisposed();\n        return this._buffer.getEOL();\n    }\n    getEndOfLineSequence() {\n        this._assertNotDisposed();\n        return (this._buffer.getEOL() === '\\n'\n            ? 0 /* model.EndOfLineSequence.LF */\n            : 1 /* model.EndOfLineSequence.CRLF */);\n    }\n    getLineMinColumn(lineNumber) {\n        this._assertNotDisposed();\n        return 1;\n    }\n    getLineMaxColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLength(lineNumber) + 1;\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        this._assertNotDisposed();\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n    }\n    /**\n     * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\n     * Will try to not allocate if possible.\n     */\n    _validateRangeRelaxedNoAllocations(range) {\n        const linesCount = this._buffer.getLineCount();\n        const initialStartLineNumber = range.startLineNumber;\n        const initialStartColumn = range.startColumn;\n        let startLineNumber = Math.floor((typeof initialStartLineNumber === 'number' && !isNaN(initialStartLineNumber)) ? initialStartLineNumber : 1);\n        let startColumn = Math.floor((typeof initialStartColumn === 'number' && !isNaN(initialStartColumn)) ? initialStartColumn : 1);\n        if (startLineNumber < 1) {\n            startLineNumber = 1;\n            startColumn = 1;\n        }\n        else if (startLineNumber > linesCount) {\n            startLineNumber = linesCount;\n            startColumn = this.getLineMaxColumn(startLineNumber);\n        }\n        else {\n            if (startColumn <= 1) {\n                startColumn = 1;\n            }\n            else {\n                const maxColumn = this.getLineMaxColumn(startLineNumber);\n                if (startColumn >= maxColumn) {\n                    startColumn = maxColumn;\n                }\n            }\n        }\n        const initialEndLineNumber = range.endLineNumber;\n        const initialEndColumn = range.endColumn;\n        let endLineNumber = Math.floor((typeof initialEndLineNumber === 'number' && !isNaN(initialEndLineNumber)) ? initialEndLineNumber : 1);\n        let endColumn = Math.floor((typeof initialEndColumn === 'number' && !isNaN(initialEndColumn)) ? initialEndColumn : 1);\n        if (endLineNumber < 1) {\n            endLineNumber = 1;\n            endColumn = 1;\n        }\n        else if (endLineNumber > linesCount) {\n            endLineNumber = linesCount;\n            endColumn = this.getLineMaxColumn(endLineNumber);\n        }\n        else {\n            if (endColumn <= 1) {\n                endColumn = 1;\n            }\n            else {\n                const maxColumn = this.getLineMaxColumn(endLineNumber);\n                if (endColumn >= maxColumn) {\n                    endColumn = maxColumn;\n                }\n            }\n        }\n        if (initialStartLineNumber === startLineNumber\n            && initialStartColumn === startColumn\n            && initialEndLineNumber === endLineNumber\n            && initialEndColumn === endColumn\n            && range instanceof Range\n            && !(range instanceof Selection)) {\n            return range;\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    _isValidPosition(lineNumber, column, validationType) {\n        if (typeof lineNumber !== 'number' || typeof column !== 'number') {\n            return false;\n        }\n        if (isNaN(lineNumber) || isNaN(column)) {\n            return false;\n        }\n        if (lineNumber < 1 || column < 1) {\n            return false;\n        }\n        if ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n            return false;\n        }\n        const lineCount = this._buffer.getLineCount();\n        if (lineNumber > lineCount) {\n            return false;\n        }\n        if (column === 1) {\n            return true;\n        }\n        const maxColumn = this.getLineMaxColumn(lineNumber);\n        if (column > maxColumn) {\n            return false;\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            // !!At this point, column > 1\n            const charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n            if (strings.isHighSurrogate(charCodeBefore)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _validatePosition(_lineNumber, _column, validationType) {\n        const lineNumber = Math.floor((typeof _lineNumber === 'number' && !isNaN(_lineNumber)) ? _lineNumber : 1);\n        const column = Math.floor((typeof _column === 'number' && !isNaN(_column)) ? _column : 1);\n        const lineCount = this._buffer.getLineCount();\n        if (lineNumber < 1) {\n            return new Position(1, 1);\n        }\n        if (lineNumber > lineCount) {\n            return new Position(lineCount, this.getLineMaxColumn(lineCount));\n        }\n        if (column <= 1) {\n            return new Position(lineNumber, 1);\n        }\n        const maxColumn = this.getLineMaxColumn(lineNumber);\n        if (column >= maxColumn) {\n            return new Position(lineNumber, maxColumn);\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            // If the position would end up in the middle of a high-low surrogate pair,\n            // we move it to before the pair\n            // !!At this point, column > 1\n            const charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n            if (strings.isHighSurrogate(charCodeBefore)) {\n                return new Position(lineNumber, column - 1);\n            }\n        }\n        return new Position(lineNumber, column);\n    }\n    validatePosition(position) {\n        const validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n        this._assertNotDisposed();\n        // Avoid object allocation and cover most likely case\n        if (position instanceof Position) {\n            if (this._isValidPosition(position.lineNumber, position.column, validationType)) {\n                return position;\n            }\n        }\n        return this._validatePosition(position.lineNumber, position.column, validationType);\n    }\n    _isValidRange(range, validationType) {\n        const startLineNumber = range.startLineNumber;\n        const startColumn = range.startColumn;\n        const endLineNumber = range.endLineNumber;\n        const endColumn = range.endColumn;\n        if (!this._isValidPosition(startLineNumber, startColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n            return false;\n        }\n        if (!this._isValidPosition(endLineNumber, endColumn, 0 /* StringOffsetValidationType.Relaxed */)) {\n            return false;\n        }\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            const charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n            const charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n            const startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n            const endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }\n    validateRange(_range) {\n        const validationType = 1 /* StringOffsetValidationType.SurrogatePairs */;\n        this._assertNotDisposed();\n        // Avoid object allocation and cover most likely case\n        if ((_range instanceof Range) && !(_range instanceof Selection)) {\n            if (this._isValidRange(_range, validationType)) {\n                return _range;\n            }\n        }\n        const start = this._validatePosition(_range.startLineNumber, _range.startColumn, 0 /* StringOffsetValidationType.Relaxed */);\n        const end = this._validatePosition(_range.endLineNumber, _range.endColumn, 0 /* StringOffsetValidationType.Relaxed */);\n        const startLineNumber = start.lineNumber;\n        const startColumn = start.column;\n        const endLineNumber = end.lineNumber;\n        const endColumn = end.column;\n        if (validationType === 1 /* StringOffsetValidationType.SurrogatePairs */) {\n            const charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n            const charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n            const startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n            const endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n            if (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n                return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            }\n            if (startLineNumber === endLineNumber && startColumn === endColumn) {\n                // do not expand a collapsed range, simply move it to a valid location\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\n            }\n            if (startInsideSurrogatePair && endInsideSurrogatePair) {\n                // expand range at both ends\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\n            }\n            if (startInsideSurrogatePair) {\n                // only expand range at the start\n                return new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\n            }\n            // only expand range at the end\n            return new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\n        }\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    modifyPosition(rawPosition, offset) {\n        this._assertNotDisposed();\n        const candidate = this.getOffsetAt(rawPosition) + offset;\n        return this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\n    }\n    getFullModelRange() {\n        this._assertNotDisposed();\n        const lineCount = this.getLineCount();\n        return new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n    }\n    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {\n        return this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n    }\n    findMatches(searchString, rawSearchScope, isRegex, matchCase, wordSeparators, captureMatches, limitResultCount = LIMIT_FIND_COUNT) {\n        this._assertNotDisposed();\n        let searchRanges = null;\n        if (rawSearchScope !== null) {\n            if (!Array.isArray(rawSearchScope)) {\n                rawSearchScope = [rawSearchScope];\n            }\n            if (rawSearchScope.every((searchScope) => Range.isIRange(searchScope))) {\n                searchRanges = rawSearchScope.map((searchScope) => this.validateRange(searchScope));\n            }\n        }\n        if (searchRanges === null) {\n            searchRanges = [this.getFullModelRange()];\n        }\n        searchRanges = searchRanges.sort((d1, d2) => d1.startLineNumber - d2.startLineNumber || d1.startColumn - d2.startColumn);\n        const uniqueSearchRanges = [];\n        uniqueSearchRanges.push(searchRanges.reduce((prev, curr) => {\n            if (Range.areIntersecting(prev, curr)) {\n                return prev.plusRange(curr);\n            }\n            uniqueSearchRanges.push(prev);\n            return curr;\n        }));\n        let matchMapper;\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\n            // not regex, not multi line\n            const searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n            const searchData = searchParams.parseSearchRequest();\n            if (!searchData) {\n                return [];\n            }\n            matchMapper = (searchRange) => this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n        }\n        else {\n            matchMapper = (searchRange) => TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\n        }\n        return uniqueSearchRanges.map(matchMapper).reduce((arr, matches) => arr.concat(matches), []);\n    }\n    findNextMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n        this._assertNotDisposed();\n        const searchStart = this.validatePosition(rawSearchStart);\n        if (!isRegex && searchString.indexOf('\\n') < 0) {\n            const searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n            const searchData = searchParams.parseSearchRequest();\n            if (!searchData) {\n                return null;\n            }\n            const lineCount = this.getLineCount();\n            let searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\n            let ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n            TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n            if (ret.length > 0) {\n                return ret[0];\n            }\n            searchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\n            ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n            if (ret.length > 0) {\n                return ret[0];\n            }\n            return null;\n        }\n        return TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    findPreviousMatch(searchString, rawSearchStart, isRegex, matchCase, wordSeparators, captureMatches) {\n        this._assertNotDisposed();\n        const searchStart = this.validatePosition(rawSearchStart);\n        return TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n    }\n    //#endregion\n    //#region Editing\n    pushStackElement() {\n        this._commandManager.pushStackElement();\n    }\n    popStackElement() {\n        this._commandManager.popStackElement();\n    }\n    pushEOL(eol) {\n        const currentEOL = (this.getEOL() === '\\n' ? 0 /* model.EndOfLineSequence.LF */ : 1 /* model.EndOfLineSequence.CRLF */);\n        if (currentEOL === eol) {\n            return;\n        }\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            if (this._initialUndoRedoSnapshot === null) {\n                this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n            }\n            this._commandManager.pushEOL(eol);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _validateEditOperation(rawOperation) {\n        if (rawOperation instanceof model.ValidAnnotatedEditOperation) {\n            return rawOperation;\n        }\n        return new model.ValidAnnotatedEditOperation(rawOperation.identifier || null, this.validateRange(rawOperation.range), rawOperation.text, rawOperation.forceMoveMarkers || false, rawOperation.isAutoWhitespaceEdit || false, rawOperation._isTracked || false);\n    }\n    _validateEditOperations(rawOperations) {\n        const result = [];\n        for (let i = 0, len = rawOperations.length; i < len; i++) {\n            result[i] = this._validateEditOperation(rawOperations[i]);\n        }\n        return result;\n    }\n    pushEditOperations(beforeCursorState, editOperations, cursorStateComputer, group) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            return this._pushEditOperations(beforeCursorState, this._validateEditOperations(editOperations), cursorStateComputer, group);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _pushEditOperations(beforeCursorState, editOperations, cursorStateComputer, group) {\n        if (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n            // Go through each saved line number and insert a trim whitespace edit\n            // if it is safe to do so (no conflicts with other edits).\n            const incomingEdits = editOperations.map((op) => {\n                return {\n                    range: this.validateRange(op.range),\n                    text: op.text\n                };\n            });\n            // Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n            // We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n            let editsAreNearCursors = true;\n            if (beforeCursorState) {\n                for (let i = 0, len = beforeCursorState.length; i < len; i++) {\n                    const sel = beforeCursorState[i];\n                    let foundEditNearSel = false;\n                    for (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n                        const editRange = incomingEdits[j].range;\n                        const selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n                        const selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n                        if (!selIsAbove && !selIsBelow) {\n                            foundEditNearSel = true;\n                            break;\n                        }\n                    }\n                    if (!foundEditNearSel) {\n                        editsAreNearCursors = false;\n                        break;\n                    }\n                }\n            }\n            if (editsAreNearCursors) {\n                for (let i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\n                    const trimLineNumber = this._trimAutoWhitespaceLines[i];\n                    const maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n                    let allowTrimLine = true;\n                    for (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n                        const editRange = incomingEdits[j].range;\n                        const editText = incomingEdits[j].text;\n                        if (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\n                            // `trimLine` is completely outside this edit\n                            continue;\n                        }\n                        // At this point:\n                        //   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n') {\n                            // This edit inserts a new line (and maybe other text) after `trimLine`\n                            continue;\n                        }\n                        if (trimLineNumber === editRange.startLineNumber && editRange.startColumn === 1\n                            && editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n') {\n                            // This edit inserts a new line (and maybe other text) before `trimLine`\n                            continue;\n                        }\n                        // Looks like we can't trim this line as it would interfere with an incoming edit\n                        allowTrimLine = false;\n                        break;\n                    }\n                    if (allowTrimLine) {\n                        const trimRange = new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn);\n                        editOperations.push(new model.ValidAnnotatedEditOperation(null, trimRange, null, false, false, false));\n                    }\n                }\n            }\n            this._trimAutoWhitespaceLines = null;\n        }\n        if (this._initialUndoRedoSnapshot === null) {\n            this._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n        }\n        return this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group);\n    }\n    _applyUndo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n        const edits = changes.map((change) => {\n            const rangeStart = this.getPositionAt(change.newPosition);\n            const rangeEnd = this.getPositionAt(change.newEnd);\n            return {\n                range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n                text: change.oldText\n            };\n        });\n        this._applyUndoRedoEdits(edits, eol, true, false, resultingAlternativeVersionId, resultingSelection);\n    }\n    _applyRedo(changes, eol, resultingAlternativeVersionId, resultingSelection) {\n        const edits = changes.map((change) => {\n            const rangeStart = this.getPositionAt(change.oldPosition);\n            const rangeEnd = this.getPositionAt(change.oldEnd);\n            return {\n                range: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n                text: change.newText\n            };\n        });\n        this._applyUndoRedoEdits(edits, eol, false, true, resultingAlternativeVersionId, resultingSelection);\n    }\n    _applyUndoRedoEdits(edits, eol, isUndoing, isRedoing, resultingAlternativeVersionId, resultingSelection) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            this._isUndoing = isUndoing;\n            this._isRedoing = isRedoing;\n            this.applyEdits(edits, false);\n            this.setEOL(eol);\n            this._overwriteAlternativeVersionId(resultingAlternativeVersionId);\n        }\n        finally {\n            this._isUndoing = false;\n            this._isRedoing = false;\n            this._eventEmitter.endDeferredEmit(resultingSelection);\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    applyEdits(rawOperations, computeUndoEdits = false) {\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            this._eventEmitter.beginDeferredEmit();\n            const operations = this._validateEditOperations(rawOperations);\n            return this._doApplyEdits(operations, computeUndoEdits);\n        }\n        finally {\n            this._eventEmitter.endDeferredEmit();\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _doApplyEdits(rawOperations, computeUndoEdits) {\n        const oldLineCount = this._buffer.getLineCount();\n        const result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace, computeUndoEdits);\n        const newLineCount = this._buffer.getLineCount();\n        const contentChanges = result.changes;\n        this._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n        if (contentChanges.length !== 0) {\n            // We do a first pass to update decorations\n            // because we want to read decorations in the second pass\n            // where we will emit content change events\n            // and we want to read the final decorations\n            for (let i = 0, len = contentChanges.length; i < len; i++) {\n                const change = contentChanges[i];\n                this._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\n            }\n            const rawContentChanges = [];\n            this._increaseVersionId();\n            let lineCount = oldLineCount;\n            for (let i = 0, len = contentChanges.length; i < len; i++) {\n                const change = contentChanges[i];\n                const [eolCount] = countEOL(change.text);\n                this._onDidChangeDecorations.fire();\n                const startLineNumber = change.range.startLineNumber;\n                const endLineNumber = change.range.endLineNumber;\n                const deletingLinesCnt = endLineNumber - startLineNumber;\n                const insertingLinesCnt = eolCount;\n                const editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n                const changeLineCountDelta = (insertingLinesCnt - deletingLinesCnt);\n                const currentEditStartLineNumber = newLineCount - lineCount - changeLineCountDelta + startLineNumber;\n                const firstEditLineNumber = currentEditStartLineNumber;\n                const lastInsertedLineNumber = currentEditStartLineNumber + insertingLinesCnt;\n                const decorationsWithInjectedTextInEditedRange = this._decorationsTree.getInjectedTextInInterval(this, this.getOffsetAt(new Position(firstEditLineNumber, 1)), this.getOffsetAt(new Position(lastInsertedLineNumber, this.getLineMaxColumn(lastInsertedLineNumber))), 0);\n                const injectedTextInEditedRange = LineInjectedText.fromDecorations(decorationsWithInjectedTextInEditedRange);\n                const injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n                for (let j = editingLinesCnt; j >= 0; j--) {\n                    const editLineNumber = startLineNumber + j;\n                    const currentEditLineNumber = currentEditStartLineNumber + j;\n                    injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber > currentEditLineNumber);\n                    const decorationsInCurrentLine = injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber === currentEditLineNumber);\n                    rawContentChanges.push(new ModelRawLineChanged(editLineNumber, this.getLineContent(currentEditLineNumber), decorationsInCurrentLine));\n                }\n                if (editingLinesCnt < deletingLinesCnt) {\n                    // Must delete some lines\n                    const spliceStartLineNumber = startLineNumber + editingLinesCnt;\n                    rawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\n                }\n                if (editingLinesCnt < insertingLinesCnt) {\n                    const injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n                    // Must insert some lines\n                    const spliceLineNumber = startLineNumber + editingLinesCnt;\n                    const cnt = insertingLinesCnt - editingLinesCnt;\n                    const fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\n                    const injectedTexts = [];\n                    const newLines = [];\n                    for (let i = 0; i < cnt; i++) {\n                        const lineNumber = fromLineNumber + i;\n                        newLines[i] = this.getLineContent(lineNumber);\n                        injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber < lineNumber);\n                        injectedTexts[i] = injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber === lineNumber);\n                    }\n                    rawContentChanges.push(new ModelRawLinesInserted(spliceLineNumber + 1, startLineNumber + insertingLinesCnt, newLines, injectedTexts));\n                }\n                lineCount += changeLineCountDelta;\n            }\n            this._emitContentChangedEvent(new ModelRawContentChangedEvent(rawContentChanges, this.getVersionId(), this._isUndoing, this._isRedoing), {\n                changes: contentChanges,\n                eol: this._buffer.getEOL(),\n                isEolChange: false,\n                versionId: this.getVersionId(),\n                isUndoing: this._isUndoing,\n                isRedoing: this._isRedoing,\n                isFlush: false\n            });\n        }\n        return (result.reverseEdits === null ? undefined : result.reverseEdits);\n    }\n    undo() {\n        return this._undoRedoService.undo(this.uri);\n    }\n    canUndo() {\n        return this._undoRedoService.canUndo(this.uri);\n    }\n    redo() {\n        return this._undoRedoService.redo(this.uri);\n    }\n    canRedo() {\n        return this._undoRedoService.canRedo(this.uri);\n    }\n    //#endregion\n    //#region Decorations\n    handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines) {\n        // This is called before the decoration changed event is fired.\n        if (affectedInjectedTextLines === null || affectedInjectedTextLines.size === 0) {\n            return;\n        }\n        const affectedLines = Array.from(affectedInjectedTextLines);\n        const lineChangeEvents = affectedLines.map(lineNumber => new ModelRawLineChanged(lineNumber, this.getLineContent(lineNumber), this._getInjectedTextInLine(lineNumber)));\n        this._onDidChangeInjectedText.fire(new ModelInjectedTextChangedEvent(lineChangeEvents));\n    }\n    changeDecorations(callback, ownerId = 0) {\n        this._assertNotDisposed();\n        try {\n            this._onDidChangeDecorations.beginDeferredEmit();\n            return this._changeDecorations(ownerId, callback);\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    _changeDecorations(ownerId, callback) {\n        const changeAccessor = {\n            addDecoration: (range, options) => {\n                return this._deltaDecorationsImpl(ownerId, [], [{ range: range, options: options }])[0];\n            },\n            changeDecoration: (id, newRange) => {\n                this._changeDecorationImpl(id, newRange);\n            },\n            changeDecorationOptions: (id, options) => {\n                this._changeDecorationOptionsImpl(id, _normalizeOptions(options));\n            },\n            removeDecoration: (id) => {\n                this._deltaDecorationsImpl(ownerId, [id], []);\n            },\n            deltaDecorations: (oldDecorations, newDecorations) => {\n                if (oldDecorations.length === 0 && newDecorations.length === 0) {\n                    // nothing to do\n                    return [];\n                }\n                return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n            }\n        };\n        let result = null;\n        try {\n            result = callback(changeAccessor);\n        }\n        catch (e) {\n            onUnexpectedError(e);\n        }\n        // Invalidate change accessor\n        changeAccessor.addDecoration = invalidFunc;\n        changeAccessor.changeDecoration = invalidFunc;\n        changeAccessor.changeDecorationOptions = invalidFunc;\n        changeAccessor.removeDecoration = invalidFunc;\n        changeAccessor.deltaDecorations = invalidFunc;\n        return result;\n    }\n    deltaDecorations(oldDecorations, newDecorations, ownerId = 0) {\n        this._assertNotDisposed();\n        if (!oldDecorations) {\n            oldDecorations = [];\n        }\n        if (oldDecorations.length === 0 && newDecorations.length === 0) {\n            // nothing to do\n            return [];\n        }\n        try {\n            this._deltaDecorationCallCnt++;\n            if (this._deltaDecorationCallCnt > 1) {\n                console.warn(`Invoking deltaDecorations recursively could lead to leaking decorations.`);\n                onUnexpectedError(new Error(`Invoking deltaDecorations recursively could lead to leaking decorations.`));\n            }\n            this._onDidChangeDecorations.beginDeferredEmit();\n            return this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n            this._deltaDecorationCallCnt--;\n        }\n    }\n    _getTrackedRange(id) {\n        return this.getDecorationRange(id);\n    }\n    _setTrackedRange(id, newRange, newStickiness) {\n        const node = (id ? this._decorations[id] : null);\n        if (!node) {\n            if (!newRange) {\n                // node doesn't exist, the request is to delete => nothing to do\n                return null;\n            }\n            // node doesn't exist, the request is to set => add the tracked range\n            return this._deltaDecorationsImpl(0, [], [{ range: newRange, options: TRACKED_RANGE_OPTIONS[newStickiness] }], true)[0];\n        }\n        if (!newRange) {\n            // node exists, the request is to delete => delete node\n            this._decorationsTree.delete(node);\n            delete this._decorations[node.id];\n            return null;\n        }\n        // node exists, the request is to set => change the tracked range and its options\n        const range = this._validateRangeRelaxedNoAllocations(newRange);\n        const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        this._decorationsTree.delete(node);\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\n        node.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n        this._decorationsTree.insert(node);\n        return node.id;\n    }\n    removeAllDecorationsWithOwnerId(ownerId) {\n        if (this._isDisposed) {\n            return;\n        }\n        const nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n        for (let i = 0, len = nodes.length; i < len; i++) {\n            const node = nodes[i];\n            this._decorationsTree.delete(node);\n            delete this._decorations[node.id];\n        }\n    }\n    getDecorationOptions(decorationId) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return null;\n        }\n        return node.options;\n    }\n    getDecorationRange(decorationId) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return null;\n        }\n        return this._decorationsTree.getNodeRange(this, node);\n    }\n    getLineDecorations(lineNumber, ownerId = 0, filterOutValidation = false) {\n        if (lineNumber < 1 || lineNumber > this.getLineCount()) {\n            return [];\n        }\n        return this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation);\n    }\n    getLinesDecorations(_startLineNumber, _endLineNumber, ownerId = 0, filterOutValidation = false, onlyMarginDecorations = false) {\n        const lineCount = this.getLineCount();\n        const startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\n        const endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n        const endColumn = this.getLineMaxColumn(endLineNumber);\n        const range = new Range(startLineNumber, 1, endLineNumber, endColumn);\n        const decorations = this._getDecorationsInRange(range, ownerId, filterOutValidation, onlyMarginDecorations);\n        pushMany(decorations, this._decorationProvider.getDecorationsInRange(range, ownerId, filterOutValidation));\n        return decorations;\n    }\n    getDecorationsInRange(range, ownerId = 0, filterOutValidation = false, onlyMinimapDecorations = false, onlyMarginDecorations = false) {\n        const validatedRange = this.validateRange(range);\n        const decorations = this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMarginDecorations);\n        pushMany(decorations, this._decorationProvider.getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMinimapDecorations));\n        return decorations;\n    }\n    getOverviewRulerDecorations(ownerId = 0, filterOutValidation = false) {\n        return this._decorationsTree.getAll(this, ownerId, filterOutValidation, true, false);\n    }\n    getInjectedTextDecorations(ownerId = 0) {\n        return this._decorationsTree.getAllInjectedText(this, ownerId);\n    }\n    _getInjectedTextInLine(lineNumber) {\n        const startOffset = this._buffer.getOffsetAt(lineNumber, 1);\n        const endOffset = startOffset + this._buffer.getLineLength(lineNumber);\n        const result = this._decorationsTree.getInjectedTextInInterval(this, startOffset, endOffset, 0);\n        return LineInjectedText.fromDecorations(result).filter(t => t.lineNumber === lineNumber);\n    }\n    getAllDecorations(ownerId = 0, filterOutValidation = false) {\n        let result = this._decorationsTree.getAll(this, ownerId, filterOutValidation, false, false);\n        result = result.concat(this._decorationProvider.getAllDecorations(ownerId, filterOutValidation));\n        return result;\n    }\n    getAllMarginDecorations(ownerId = 0) {\n        return this._decorationsTree.getAll(this, ownerId, false, false, true);\n    }\n    _getDecorationsInRange(filterRange, filterOwnerId, filterOutValidation, onlyMarginDecorations) {\n        const startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\n        const endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\n        return this._decorationsTree.getAllInInterval(this, startOffset, endOffset, filterOwnerId, filterOutValidation, onlyMarginDecorations);\n    }\n    getRangeAt(start, end) {\n        return this._buffer.getRangeAt(start, end - start);\n    }\n    _changeDecorationImpl(decorationId, _range) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return;\n        }\n        if (node.options.after) {\n            const oldRange = this.getDecorationRange(decorationId);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.endLineNumber);\n        }\n        if (node.options.before) {\n            const oldRange = this.getDecorationRange(decorationId);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange.startLineNumber);\n        }\n        const range = this._validateRangeRelaxedNoAllocations(_range);\n        const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n        const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n        this._decorationsTree.delete(node);\n        node.reset(this.getVersionId(), startOffset, endOffset, range);\n        this._decorationsTree.insert(node);\n        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n        if (node.options.after) {\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n        }\n        if (node.options.before) {\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n        }\n    }\n    _changeDecorationOptionsImpl(decorationId, options) {\n        const node = this._decorations[decorationId];\n        if (!node) {\n            return;\n        }\n        const nodeWasInOverviewRuler = (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n        const nodeIsInOverviewRuler = (options.overviewRuler && options.overviewRuler.color ? true : false);\n        this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n        this._onDidChangeDecorations.checkAffectedAndFire(options);\n        if (node.options.after || options.after) {\n            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n        }\n        if (node.options.before || options.before) {\n            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n        }\n        const movedInOverviewRuler = nodeWasInOverviewRuler !== nodeIsInOverviewRuler;\n        const changedWhetherInjectedText = isOptionsInjectedText(options) !== isNodeInjectedText(node);\n        if (movedInOverviewRuler || changedWhetherInjectedText) {\n            this._decorationsTree.delete(node);\n            node.setOptions(options);\n            this._decorationsTree.insert(node);\n        }\n        else {\n            node.setOptions(options);\n        }\n    }\n    _deltaDecorationsImpl(ownerId, oldDecorationsIds, newDecorations, suppressEvents = false) {\n        const versionId = this.getVersionId();\n        const oldDecorationsLen = oldDecorationsIds.length;\n        let oldDecorationIndex = 0;\n        const newDecorationsLen = newDecorations.length;\n        let newDecorationIndex = 0;\n        this._onDidChangeDecorations.beginDeferredEmit();\n        try {\n            const result = new Array(newDecorationsLen);\n            while (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n                let node = null;\n                if (oldDecorationIndex < oldDecorationsLen) {\n                    // (1) get ourselves an old node\n                    do {\n                        node = this._decorations[oldDecorationsIds[oldDecorationIndex++]];\n                    } while (!node && oldDecorationIndex < oldDecorationsLen);\n                    // (2) remove the node from the tree (if it exists)\n                    if (node) {\n                        if (node.options.after) {\n                            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n                            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n                        }\n                        if (node.options.before) {\n                            const nodeRange = this._decorationsTree.getNodeRange(this, node);\n                            this._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n                        }\n                        this._decorationsTree.delete(node);\n                        if (!suppressEvents) {\n                            this._onDidChangeDecorations.checkAffectedAndFire(node.options);\n                        }\n                    }\n                }\n                if (newDecorationIndex < newDecorationsLen) {\n                    // (3) create a new node if necessary\n                    if (!node) {\n                        const internalDecorationId = (++this._lastDecorationId);\n                        const decorationId = `${this._instanceId};${internalDecorationId}`;\n                        node = new IntervalNode(decorationId, 0, 0);\n                        this._decorations[decorationId] = node;\n                    }\n                    // (4) initialize node\n                    const newDecoration = newDecorations[newDecorationIndex];\n                    const range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\n                    const options = _normalizeOptions(newDecoration.options);\n                    const startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n                    const endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n                    node.ownerId = ownerId;\n                    node.reset(versionId, startOffset, endOffset, range);\n                    node.setOptions(options);\n                    if (node.options.after) {\n                        this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n                    }\n                    if (node.options.before) {\n                        this._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n                    }\n                    if (!suppressEvents) {\n                        this._onDidChangeDecorations.checkAffectedAndFire(options);\n                    }\n                    this._decorationsTree.insert(node);\n                    result[newDecorationIndex] = node.id;\n                    newDecorationIndex++;\n                }\n                else {\n                    if (node) {\n                        delete this._decorations[node.id];\n                    }\n                }\n            }\n            return result;\n        }\n        finally {\n            this._onDidChangeDecorations.endDeferredEmit();\n        }\n    }\n    //#endregion\n    //#region Tokenization\n    // TODO move them to the tokenization part.\n    getLanguageId() {\n        return this.tokenization.getLanguageId();\n    }\n    setLanguage(languageIdOrSelection, source) {\n        if (typeof languageIdOrSelection === 'string') {\n            this._languageSelectionListener.clear();\n            this._setLanguage(languageIdOrSelection, source);\n        }\n        else {\n            this._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId, source));\n            this._setLanguage(languageIdOrSelection.languageId, source);\n        }\n    }\n    _setLanguage(languageId, source) {\n        this.tokenization.setLanguageId(languageId, source);\n        this._languageService.requestRichLanguageFeatures(languageId);\n    }\n    getLanguageIdAtPosition(lineNumber, column) {\n        return this.tokenization.getLanguageIdAtPosition(lineNumber, column);\n    }\n    getWordAtPosition(position) {\n        return this._tokenizationTextModelPart.getWordAtPosition(position);\n    }\n    getWordUntilPosition(position) {\n        return this._tokenizationTextModelPart.getWordUntilPosition(position);\n    }\n    //#endregion\n    normalizePosition(position, affinity) {\n        return position;\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        // Columns start with 1.\n        return indentOfLine(this.getLineContent(lineNumber)) + 1;\n    }\n};\nTextModel._MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB,  // used in tests\nTextModel.LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\nTextModel.LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\nTextModel.LARGE_FILE_HEAP_OPERATION_THRESHOLD = 256 * 1024 * 1024; // 256M characters, usually ~> 512MB memory usage\nTextModel.DEFAULT_CREATION_OPTIONS = {\n    isForSimpleWidget: false,\n    tabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n    indentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n    insertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n    detectIndentation: false,\n    defaultEOL: 1 /* model.DefaultEndOfLine.LF */,\n    trimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n    largeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n    bracketPairColorizationOptions: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions,\n};\nTextModel = TextModel_1 = __decorate([\n    __param(4, IUndoRedoService),\n    __param(5, ILanguageService),\n    __param(6, ILanguageConfigurationService)\n], TextModel);\nexport { TextModel };\nfunction indentOfLine(line) {\n    let indent = 0;\n    for (const c of line) {\n        if (c === ' ' || c === '\\t') {\n            indent++;\n        }\n        else {\n            break;\n        }\n    }\n    return indent;\n}\n//#region Decorations\nfunction isNodeInOverviewRuler(node) {\n    return (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n}\nfunction isOptionsInjectedText(options) {\n    return !!options.after || !!options.before;\n}\nfunction isNodeInjectedText(node) {\n    return !!node.options.after || !!node.options.before;\n}\nclass DecorationsTrees {\n    constructor() {\n        this._decorationsTree0 = new IntervalTree();\n        this._decorationsTree1 = new IntervalTree();\n        this._injectedTextDecorationsTree = new IntervalTree();\n    }\n    ensureAllNodesHaveRanges(host) {\n        this.getAll(host, 0, false, false, false);\n    }\n    _ensureNodesHaveRanges(host, nodes) {\n        for (const node of nodes) {\n            if (node.range === null) {\n                node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n            }\n        }\n        return nodes;\n    }\n    getAllInInterval(host, start, end, filterOwnerId, filterOutValidation, onlyMarginDecorations) {\n        const versionId = host.getVersionId();\n        const result = this._intervalSearch(start, end, filterOwnerId, filterOutValidation, versionId, onlyMarginDecorations);\n        return this._ensureNodesHaveRanges(host, result);\n    }\n    _intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations) {\n        const r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        const r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        const r2 = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        return r0.concat(r1).concat(r2);\n    }\n    getInjectedTextInInterval(host, start, end, filterOwnerId) {\n        const versionId = host.getVersionId();\n        const result = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, false, versionId, false);\n        return this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n    }\n    getAllInjectedText(host, filterOwnerId) {\n        const versionId = host.getVersionId();\n        const result = this._injectedTextDecorationsTree.search(filterOwnerId, false, versionId, false);\n        return this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n    }\n    getAll(host, filterOwnerId, filterOutValidation, overviewRulerOnly, onlyMarginDecorations) {\n        const versionId = host.getVersionId();\n        const result = this._search(filterOwnerId, filterOutValidation, overviewRulerOnly, versionId, onlyMarginDecorations);\n        return this._ensureNodesHaveRanges(host, result);\n    }\n    _search(filterOwnerId, filterOutValidation, overviewRulerOnly, cachedVersionId, onlyMarginDecorations) {\n        if (overviewRulerOnly) {\n            return this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n        }\n        else {\n            const r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n            const r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n            const r2 = this._injectedTextDecorationsTree.search(filterOwnerId, filterOutValidation, cachedVersionId, onlyMarginDecorations);\n            return r0.concat(r1).concat(r2);\n        }\n    }\n    collectNodesFromOwner(ownerId) {\n        const r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n        const r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n        const r2 = this._injectedTextDecorationsTree.collectNodesFromOwner(ownerId);\n        return r0.concat(r1).concat(r2);\n    }\n    collectNodesPostOrder() {\n        const r0 = this._decorationsTree0.collectNodesPostOrder();\n        const r1 = this._decorationsTree1.collectNodesPostOrder();\n        const r2 = this._injectedTextDecorationsTree.collectNodesPostOrder();\n        return r0.concat(r1).concat(r2);\n    }\n    insert(node) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.insert(node);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.insert(node);\n        }\n        else {\n            this._decorationsTree0.insert(node);\n        }\n    }\n    delete(node) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.delete(node);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.delete(node);\n        }\n        else {\n            this._decorationsTree0.delete(node);\n        }\n    }\n    getNodeRange(host, node) {\n        const versionId = host.getVersionId();\n        if (node.cachedVersionId !== versionId) {\n            this._resolveNode(node, versionId);\n        }\n        if (node.range === null) {\n            node.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n        }\n        return node.range;\n    }\n    _resolveNode(node, cachedVersionId) {\n        if (isNodeInjectedText(node)) {\n            this._injectedTextDecorationsTree.resolveNode(node, cachedVersionId);\n        }\n        else if (isNodeInOverviewRuler(node)) {\n            this._decorationsTree1.resolveNode(node, cachedVersionId);\n        }\n        else {\n            this._decorationsTree0.resolveNode(node, cachedVersionId);\n        }\n    }\n    acceptReplace(offset, length, textLength, forceMoveMarkers) {\n        this._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\n        this._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\n        this._injectedTextDecorationsTree.acceptReplace(offset, length, textLength, forceMoveMarkers);\n    }\n}\nfunction cleanClassName(className) {\n    return className.replace(/[^a-z0-9\\-_]/gi, ' ');\n}\nclass DecorationOptions {\n    constructor(options) {\n        this.color = options.color || '';\n        this.darkColor = options.darkColor || '';\n    }\n}\nexport class ModelDecorationOverviewRulerOptions extends DecorationOptions {\n    constructor(options) {\n        super(options);\n        this._resolvedColor = null;\n        this.position = (typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center);\n    }\n    getColor(theme) {\n        if (!this._resolvedColor) {\n            if (theme.type !== 'light' && this.darkColor) {\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\n            }\n            else {\n                this._resolvedColor = this._resolveColor(this.color, theme);\n            }\n        }\n        return this._resolvedColor;\n    }\n    invalidateCachedColor() {\n        this._resolvedColor = null;\n    }\n    _resolveColor(color, theme) {\n        if (typeof color === 'string') {\n            return color;\n        }\n        const c = color ? theme.getColor(color.id) : null;\n        if (!c) {\n            return '';\n        }\n        return c.toString();\n    }\n}\nexport class ModelDecorationGlyphMarginOptions {\n    constructor(options) {\n        var _a;\n        this.position = (_a = options === null || options === void 0 ? void 0 : options.position) !== null && _a !== void 0 ? _a : model.GlyphMarginLane.Center;\n        this.persistLane = options === null || options === void 0 ? void 0 : options.persistLane;\n    }\n}\nexport class ModelDecorationMinimapOptions extends DecorationOptions {\n    constructor(options) {\n        var _a, _b;\n        super(options);\n        this.position = options.position;\n        this.sectionHeaderStyle = (_a = options.sectionHeaderStyle) !== null && _a !== void 0 ? _a : null;\n        this.sectionHeaderText = (_b = options.sectionHeaderText) !== null && _b !== void 0 ? _b : null;\n    }\n    getColor(theme) {\n        if (!this._resolvedColor) {\n            if (theme.type !== 'light' && this.darkColor) {\n                this._resolvedColor = this._resolveColor(this.darkColor, theme);\n            }\n            else {\n                this._resolvedColor = this._resolveColor(this.color, theme);\n            }\n        }\n        return this._resolvedColor;\n    }\n    invalidateCachedColor() {\n        this._resolvedColor = undefined;\n    }\n    _resolveColor(color, theme) {\n        if (typeof color === 'string') {\n            return Color.fromHex(color);\n        }\n        return theme.getColor(color.id);\n    }\n}\nexport class ModelDecorationInjectedTextOptions {\n    static from(options) {\n        if (options instanceof ModelDecorationInjectedTextOptions) {\n            return options;\n        }\n        return new ModelDecorationInjectedTextOptions(options);\n    }\n    constructor(options) {\n        this.content = options.content || '';\n        this.inlineClassName = options.inlineClassName || null;\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n        this.attachedData = options.attachedData || null;\n        this.cursorStops = options.cursorStops || null;\n    }\n}\nexport class ModelDecorationOptions {\n    static register(options) {\n        return new ModelDecorationOptions(options);\n    }\n    static createDynamic(options) {\n        return new ModelDecorationOptions(options);\n    }\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f;\n        this.description = options.description;\n        this.blockClassName = options.blockClassName ? cleanClassName(options.blockClassName) : null;\n        this.blockDoesNotCollapse = (_a = options.blockDoesNotCollapse) !== null && _a !== void 0 ? _a : null;\n        this.blockIsAfterEnd = (_b = options.blockIsAfterEnd) !== null && _b !== void 0 ? _b : null;\n        this.blockPadding = (_c = options.blockPadding) !== null && _c !== void 0 ? _c : null;\n        this.stickiness = options.stickiness || 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */;\n        this.zIndex = options.zIndex || 0;\n        this.className = options.className ? cleanClassName(options.className) : null;\n        this.shouldFillLineOnLineBreak = (_d = options.shouldFillLineOnLineBreak) !== null && _d !== void 0 ? _d : null;\n        this.hoverMessage = options.hoverMessage || null;\n        this.glyphMarginHoverMessage = options.glyphMarginHoverMessage || null;\n        this.lineNumberHoverMessage = options.lineNumberHoverMessage || null;\n        this.isWholeLine = options.isWholeLine || false;\n        this.showIfCollapsed = options.showIfCollapsed || false;\n        this.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n        this.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\n        this.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\n        this.glyphMargin = options.glyphMarginClassName ? new ModelDecorationGlyphMarginOptions(options.glyphMargin) : null;\n        this.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\n        this.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\n        this.lineNumberClassName = options.lineNumberClassName ? cleanClassName(options.lineNumberClassName) : null;\n        this.linesDecorationsTooltip = options.linesDecorationsTooltip ? strings.htmlAttributeEncodeValue(options.linesDecorationsTooltip) : null;\n        this.firstLineDecorationClassName = options.firstLineDecorationClassName ? cleanClassName(options.firstLineDecorationClassName) : null;\n        this.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\n        this.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\n        this.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n        this.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\n        this.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\n        this.after = options.after ? ModelDecorationInjectedTextOptions.from(options.after) : null;\n        this.before = options.before ? ModelDecorationInjectedTextOptions.from(options.before) : null;\n        this.hideInCommentTokens = (_e = options.hideInCommentTokens) !== null && _e !== void 0 ? _e : false;\n        this.hideInStringTokens = (_f = options.hideInStringTokens) !== null && _f !== void 0 ? _f : false;\n    }\n}\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({ description: 'empty' });\n/**\n * The order carefully matches the values of the enum.\n */\nconst TRACKED_RANGE_OPTIONS = [\n    ModelDecorationOptions.register({ description: 'tracked-range-always-grows-when-typing-at-edges', stickiness: 0 /* model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-never-grows-when-typing-at-edges', stickiness: 1 /* model.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-before', stickiness: 2 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore */ }),\n    ModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-after', stickiness: 3 /* model.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter */ }),\n];\nfunction _normalizeOptions(options) {\n    if (options instanceof ModelDecorationOptions) {\n        return options;\n    }\n    return ModelDecorationOptions.createDynamic(options);\n}\nclass DidChangeDecorationsEmitter extends Disposable {\n    constructor(handleBeforeFire) {\n        super();\n        this.handleBeforeFire = handleBeforeFire;\n        this._actual = this._register(new Emitter());\n        this.event = this._actual.event;\n        this._affectedInjectedTextLines = null;\n        this._deferredCnt = 0;\n        this._shouldFireDeferred = false;\n        this._affectsMinimap = false;\n        this._affectsOverviewRuler = false;\n        this._affectsGlyphMargin = false;\n        this._affectsLineNumber = false;\n    }\n    beginDeferredEmit() {\n        this._deferredCnt++;\n    }\n    endDeferredEmit() {\n        var _a;\n        this._deferredCnt--;\n        if (this._deferredCnt === 0) {\n            if (this._shouldFireDeferred) {\n                this.doFire();\n            }\n            (_a = this._affectedInjectedTextLines) === null || _a === void 0 ? void 0 : _a.clear();\n            this._affectedInjectedTextLines = null;\n        }\n    }\n    recordLineAffectedByInjectedText(lineNumber) {\n        if (!this._affectedInjectedTextLines) {\n            this._affectedInjectedTextLines = new Set();\n        }\n        this._affectedInjectedTextLines.add(lineNumber);\n    }\n    checkAffectedAndFire(options) {\n        var _a, _b;\n        this._affectsMinimap || (this._affectsMinimap = !!((_a = options.minimap) === null || _a === void 0 ? void 0 : _a.position));\n        this._affectsOverviewRuler || (this._affectsOverviewRuler = !!((_b = options.overviewRuler) === null || _b === void 0 ? void 0 : _b.color));\n        this._affectsGlyphMargin || (this._affectsGlyphMargin = !!options.glyphMarginClassName);\n        this._affectsLineNumber || (this._affectsLineNumber = !!options.lineNumberClassName);\n        this.tryFire();\n    }\n    fire() {\n        this._affectsMinimap = true;\n        this._affectsOverviewRuler = true;\n        this._affectsGlyphMargin = true;\n        this.tryFire();\n    }\n    tryFire() {\n        if (this._deferredCnt === 0) {\n            this.doFire();\n        }\n        else {\n            this._shouldFireDeferred = true;\n        }\n    }\n    doFire() {\n        this.handleBeforeFire(this._affectedInjectedTextLines);\n        const event = {\n            affectsMinimap: this._affectsMinimap,\n            affectsOverviewRuler: this._affectsOverviewRuler,\n            affectsGlyphMargin: this._affectsGlyphMargin,\n            affectsLineNumber: this._affectsLineNumber,\n        };\n        this._shouldFireDeferred = false;\n        this._affectsMinimap = false;\n        this._affectsOverviewRuler = false;\n        this._affectsGlyphMargin = false;\n        this._actual.fire(event);\n    }\n}\n//#endregion\nclass DidChangeContentEmitter extends Disposable {\n    constructor() {\n        super();\n        /**\n         * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\n         */\n        this._fastEmitter = this._register(new Emitter());\n        this.fastEvent = this._fastEmitter.event;\n        this._slowEmitter = this._register(new Emitter());\n        this.slowEvent = this._slowEmitter.event;\n        this._deferredCnt = 0;\n        this._deferredEvent = null;\n    }\n    beginDeferredEmit() {\n        this._deferredCnt++;\n    }\n    endDeferredEmit(resultingSelection = null) {\n        this._deferredCnt--;\n        if (this._deferredCnt === 0) {\n            if (this._deferredEvent !== null) {\n                this._deferredEvent.rawContentChangedEvent.resultingSelection = resultingSelection;\n                const e = this._deferredEvent;\n                this._deferredEvent = null;\n                this._fastEmitter.fire(e);\n                this._slowEmitter.fire(e);\n            }\n        }\n    }\n    fire(e) {\n        if (this._deferredCnt > 0) {\n            if (this._deferredEvent) {\n                this._deferredEvent = this._deferredEvent.merge(e);\n            }\n            else {\n                this._deferredEvent = e;\n            }\n            return;\n        }\n        this._fastEmitter.fire(e);\n        this._slowEmitter.fire(e);\n    }\n}\n/**\n * @internal\n */\nexport class AttachedViews {\n    constructor() {\n        this._onDidChangeVisibleRanges = new Emitter();\n        this.onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n        this._views = new Set();\n    }\n    attachView() {\n        const view = new AttachedViewImpl((state) => {\n            this._onDidChangeVisibleRanges.fire({ view, state });\n        });\n        this._views.add(view);\n        return view;\n    }\n    detachView(view) {\n        this._views.delete(view);\n        this._onDidChangeVisibleRanges.fire({ view, state: undefined });\n    }\n}\nclass AttachedViewImpl {\n    constructor(handleStateChange) {\n        this.handleStateChange = handleStateChange;\n    }\n    setVisibleLines(visibleLines, stabilized) {\n        const visibleLineRanges = visibleLines.map((line) => new LineRange(line.startLineNumber, line.endLineNumber + 1));\n        this.handleStateChange({ visibleLineRanges, stabilized });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}