{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../../base/common/color.js';\nexport var ParsedTokenThemeRule = /*#__PURE__*/_createClass(function ParsedTokenThemeRule(token, index, fontStyle, foreground, background) {\n  _classCallCheck(this, ParsedTokenThemeRule);\n  this._parsedThemeRuleBrand = undefined;\n  this.token = token;\n  this.index = index;\n  this.fontStyle = fontStyle;\n  this.foreground = foreground;\n  this.background = background;\n});\n/**\n * Parse a raw theme into rules.\n */\nexport function parseTokenTheme(source) {\n  if (!source || !Array.isArray(source)) {\n    return [];\n  }\n  var result = [];\n  var resultLen = 0;\n  for (var i = 0, len = source.length; i < len; i++) {\n    var entry = source[i];\n    var fontStyle = -1 /* FontStyle.NotSet */;\n    if (typeof entry.fontStyle === 'string') {\n      fontStyle = 0 /* FontStyle.None */;\n      var segments = entry.fontStyle.split(' ');\n      for (var j = 0, lenJ = segments.length; j < lenJ; j++) {\n        var segment = segments[j];\n        switch (segment) {\n          case 'italic':\n            fontStyle = fontStyle | 1 /* FontStyle.Italic */;\n            break;\n          case 'bold':\n            fontStyle = fontStyle | 2 /* FontStyle.Bold */;\n            break;\n          case 'underline':\n            fontStyle = fontStyle | 4 /* FontStyle.Underline */;\n            break;\n          case 'strikethrough':\n            fontStyle = fontStyle | 8 /* FontStyle.Strikethrough */;\n            break;\n        }\n      }\n    }\n    var foreground = null;\n    if (typeof entry.foreground === 'string') {\n      foreground = entry.foreground;\n    }\n    var background = null;\n    if (typeof entry.background === 'string') {\n      background = entry.background;\n    }\n    result[resultLen++] = new ParsedTokenThemeRule(entry.token || '', i, fontStyle, foreground, background);\n  }\n  return result;\n}\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedTokenThemeRules(parsedThemeRules, customTokenColors) {\n  // Sort rules lexicographically, and then by index if necessary\n  parsedThemeRules.sort(function (a, b) {\n    var r = strcmp(a.token, b.token);\n    if (r !== 0) {\n      return r;\n    }\n    return a.index - b.index;\n  });\n  // Determine defaults\n  var defaultFontStyle = 0 /* FontStyle.None */;\n  var defaultForeground = '000000';\n  var defaultBackground = 'ffffff';\n  while (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === '') {\n    var incomingDefaults = parsedThemeRules.shift();\n    if (incomingDefaults.fontStyle !== -1 /* FontStyle.NotSet */) {\n      defaultFontStyle = incomingDefaults.fontStyle;\n    }\n    if (incomingDefaults.foreground !== null) {\n      defaultForeground = incomingDefaults.foreground;\n    }\n    if (incomingDefaults.background !== null) {\n      defaultBackground = incomingDefaults.background;\n    }\n  }\n  var colorMap = new ColorMap();\n  // start with token colors from custom token themes\n  var _iterator = _createForOfIteratorHelper(customTokenColors),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var color = _step.value;\n      colorMap.getId(color);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var foregroundColorId = colorMap.getId(defaultForeground);\n  var backgroundColorId = colorMap.getId(defaultBackground);\n  var defaults = new ThemeTrieElementRule(defaultFontStyle, foregroundColorId, backgroundColorId);\n  var root = new ThemeTrieElement(defaults);\n  for (var i = 0, len = parsedThemeRules.length; i < len; i++) {\n    var rule = parsedThemeRules[i];\n    root.insert(rule.token, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n  }\n  return new TokenTheme(colorMap, root);\n}\nvar colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\nexport var ColorMap = /*#__PURE__*/function () {\n  function ColorMap() {\n    _classCallCheck(this, ColorMap);\n    this._lastColorId = 0;\n    this._id2color = [];\n    this._color2id = new Map();\n  }\n  return _createClass(ColorMap, [{\n    key: \"getId\",\n    value: function getId(color) {\n      if (color === null) {\n        return 0;\n      }\n      var match = color.match(colorRegExp);\n      if (!match) {\n        throw new Error('Illegal value for token color: ' + color);\n      }\n      color = match[1].toUpperCase();\n      var value = this._color2id.get(color);\n      if (value) {\n        return value;\n      }\n      value = ++this._lastColorId;\n      this._color2id.set(color, value);\n      this._id2color[value] = Color.fromHex('#' + color);\n      return value;\n    }\n  }, {\n    key: \"getColorMap\",\n    value: function getColorMap() {\n      return this._id2color.slice(0);\n    }\n  }]);\n}();\nexport var TokenTheme = /*#__PURE__*/function () {\n  function TokenTheme(colorMap, root) {\n    _classCallCheck(this, TokenTheme);\n    this._colorMap = colorMap;\n    this._root = root;\n    this._cache = new Map();\n  }\n  return _createClass(TokenTheme, [{\n    key: \"getColorMap\",\n    value: function getColorMap() {\n      return this._colorMap.getColorMap();\n    }\n  }, {\n    key: \"_match\",\n    value: function _match(token) {\n      return this._root.match(token);\n    }\n  }, {\n    key: \"match\",\n    value: function match(languageId, token) {\n      // The cache contains the metadata without the language bits set.\n      var result = this._cache.get(token);\n      if (typeof result === 'undefined') {\n        var rule = this._match(token);\n        var standardToken = toStandardTokenType(token);\n        result = (rule.metadata | standardToken << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */) >>> 0;\n        this._cache.set(token, result);\n      }\n      return (result | languageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */) >>> 0;\n    }\n  }], [{\n    key: \"createFromRawTokenTheme\",\n    value: function createFromRawTokenTheme(source, customTokenColors) {\n      return this.createFromParsedTokenTheme(parseTokenTheme(source), customTokenColors);\n    }\n  }, {\n    key: \"createFromParsedTokenTheme\",\n    value: function createFromParsedTokenTheme(source, customTokenColors) {\n      return resolveParsedTokenThemeRules(source, customTokenColors);\n    }\n  }]);\n}();\nvar STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\nexport function toStandardTokenType(tokenType) {\n  var m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\n  if (!m) {\n    return 0 /* StandardTokenType.Other */;\n  }\n  switch (m[1]) {\n    case 'comment':\n      return 1 /* StandardTokenType.Comment */;\n    case 'string':\n      return 2 /* StandardTokenType.String */;\n    case 'regex':\n      return 3 /* StandardTokenType.RegEx */;\n    case 'regexp':\n      return 3 /* StandardTokenType.RegEx */;\n  }\n  throw new Error('Unexpected match for standard token type!');\n}\nexport function strcmp(a, b) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\nexport var ThemeTrieElementRule = /*#__PURE__*/function () {\n  function ThemeTrieElementRule(fontStyle, foreground, background) {\n    _classCallCheck(this, ThemeTrieElementRule);\n    this._themeTrieElementRuleBrand = undefined;\n    this._fontStyle = fontStyle;\n    this._foreground = foreground;\n    this._background = background;\n    this.metadata = (this._fontStyle << 11 /* MetadataConsts.FONT_STYLE_OFFSET */ | this._foreground << 15 /* MetadataConsts.FOREGROUND_OFFSET */ | this._background << 24 /* MetadataConsts.BACKGROUND_OFFSET */) >>> 0;\n  }\n  return _createClass(ThemeTrieElementRule, [{\n    key: \"clone\",\n    value: function clone() {\n      return new ThemeTrieElementRule(this._fontStyle, this._foreground, this._background);\n    }\n  }, {\n    key: \"acceptOverwrite\",\n    value: function acceptOverwrite(fontStyle, foreground, background) {\n      if (fontStyle !== -1 /* FontStyle.NotSet */) {\n        this._fontStyle = fontStyle;\n      }\n      if (foreground !== 0 /* ColorId.None */) {\n        this._foreground = foreground;\n      }\n      if (background !== 0 /* ColorId.None */) {\n        this._background = background;\n      }\n      this.metadata = (this._fontStyle << 11 /* MetadataConsts.FONT_STYLE_OFFSET */ | this._foreground << 15 /* MetadataConsts.FOREGROUND_OFFSET */ | this._background << 24 /* MetadataConsts.BACKGROUND_OFFSET */) >>> 0;\n    }\n  }]);\n}();\nexport var ThemeTrieElement = /*#__PURE__*/function () {\n  function ThemeTrieElement(mainRule) {\n    _classCallCheck(this, ThemeTrieElement);\n    this._themeTrieElementBrand = undefined;\n    this._mainRule = mainRule;\n    this._children = new Map();\n  }\n  return _createClass(ThemeTrieElement, [{\n    key: \"match\",\n    value: function match(token) {\n      if (token === '') {\n        return this._mainRule;\n      }\n      var dotIndex = token.indexOf('.');\n      var head;\n      var tail;\n      if (dotIndex === -1) {\n        head = token;\n        tail = '';\n      } else {\n        head = token.substring(0, dotIndex);\n        tail = token.substring(dotIndex + 1);\n      }\n      var child = this._children.get(head);\n      if (typeof child !== 'undefined') {\n        return child.match(tail);\n      }\n      return this._mainRule;\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(token, fontStyle, foreground, background) {\n      if (token === '') {\n        // Merge into the main rule\n        this._mainRule.acceptOverwrite(fontStyle, foreground, background);\n        return;\n      }\n      var dotIndex = token.indexOf('.');\n      var head;\n      var tail;\n      if (dotIndex === -1) {\n        head = token;\n        tail = '';\n      } else {\n        head = token.substring(0, dotIndex);\n        tail = token.substring(dotIndex + 1);\n      }\n      var child = this._children.get(head);\n      if (typeof child === 'undefined') {\n        child = new ThemeTrieElement(this._mainRule.clone());\n        this._children.set(head, child);\n      }\n      child.insert(tail, fontStyle, foreground, background);\n    }\n  }]);\n}();\nexport function generateTokensCSSForColorMap(colorMap) {\n  var rules = [];\n  for (var i = 1, len = colorMap.length; i < len; i++) {\n    var color = colorMap[i];\n    rules[i] = \".mtk\".concat(i, \" { color: \").concat(color, \"; }\");\n  }\n  rules.push('.mtki { font-style: italic; }');\n  rules.push('.mtkb { font-weight: bold; }');\n  rules.push('.mtku { text-decoration: underline; text-underline-position: under; }');\n  rules.push('.mtks { text-decoration: line-through; }');\n  rules.push('.mtks.mtku { text-decoration: underline line-through; text-underline-position: under; }');\n  return rules.join('\\n');\n}","map":{"version":3,"names":["Color","ParsedTokenThemeRule","_createClass","token","index","fontStyle","foreground","background","_classCallCheck","_parsedThemeRuleBrand","undefined","parseTokenTheme","source","Array","isArray","result","resultLen","i","len","length","entry","segments","split","j","lenJ","segment","resolveParsedTokenThemeRules","parsedThemeRules","customTokenColors","sort","a","b","r","strcmp","defaultFontStyle","defaultForeground","defaultBackground","incomingDefaults","shift","colorMap","ColorMap","_iterator","_createForOfIteratorHelper","_step","s","n","done","color","value","getId","err","e","f","foregroundColorId","backgroundColorId","defaults","ThemeTrieElementRule","root","ThemeTrieElement","rule","insert","TokenTheme","colorRegExp","_lastColorId","_id2color","_color2id","Map","key","match","Error","toUpperCase","get","set","fromHex","getColorMap","slice","_colorMap","_root","_cache","_match","languageId","standardToken","toStandardTokenType","metadata","createFromRawTokenTheme","createFromParsedTokenTheme","STANDARD_TOKEN_TYPE_REGEXP","tokenType","m","_themeTrieElementRuleBrand","_fontStyle","_foreground","_background","clone","acceptOverwrite","mainRule","_themeTrieElementBrand","_mainRule","_children","dotIndex","indexOf","head","tail","substring","child","generateTokensCSSForColorMap","rules","concat","push","join"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/tokenization.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../../base/common/color.js';\nexport class ParsedTokenThemeRule {\n    constructor(token, index, fontStyle, foreground, background) {\n        this._parsedThemeRuleBrand = undefined;\n        this.token = token;\n        this.index = index;\n        this.fontStyle = fontStyle;\n        this.foreground = foreground;\n        this.background = background;\n    }\n}\n/**\n * Parse a raw theme into rules.\n */\nexport function parseTokenTheme(source) {\n    if (!source || !Array.isArray(source)) {\n        return [];\n    }\n    const result = [];\n    let resultLen = 0;\n    for (let i = 0, len = source.length; i < len; i++) {\n        const entry = source[i];\n        let fontStyle = -1 /* FontStyle.NotSet */;\n        if (typeof entry.fontStyle === 'string') {\n            fontStyle = 0 /* FontStyle.None */;\n            const segments = entry.fontStyle.split(' ');\n            for (let j = 0, lenJ = segments.length; j < lenJ; j++) {\n                const segment = segments[j];\n                switch (segment) {\n                    case 'italic':\n                        fontStyle = fontStyle | 1 /* FontStyle.Italic */;\n                        break;\n                    case 'bold':\n                        fontStyle = fontStyle | 2 /* FontStyle.Bold */;\n                        break;\n                    case 'underline':\n                        fontStyle = fontStyle | 4 /* FontStyle.Underline */;\n                        break;\n                    case 'strikethrough':\n                        fontStyle = fontStyle | 8 /* FontStyle.Strikethrough */;\n                        break;\n                }\n            }\n        }\n        let foreground = null;\n        if (typeof entry.foreground === 'string') {\n            foreground = entry.foreground;\n        }\n        let background = null;\n        if (typeof entry.background === 'string') {\n            background = entry.background;\n        }\n        result[resultLen++] = new ParsedTokenThemeRule(entry.token || '', i, fontStyle, foreground, background);\n    }\n    return result;\n}\n/**\n * Resolve rules (i.e. inheritance).\n */\nfunction resolveParsedTokenThemeRules(parsedThemeRules, customTokenColors) {\n    // Sort rules lexicographically, and then by index if necessary\n    parsedThemeRules.sort((a, b) => {\n        const r = strcmp(a.token, b.token);\n        if (r !== 0) {\n            return r;\n        }\n        return a.index - b.index;\n    });\n    // Determine defaults\n    let defaultFontStyle = 0 /* FontStyle.None */;\n    let defaultForeground = '000000';\n    let defaultBackground = 'ffffff';\n    while (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === '') {\n        const incomingDefaults = parsedThemeRules.shift();\n        if (incomingDefaults.fontStyle !== -1 /* FontStyle.NotSet */) {\n            defaultFontStyle = incomingDefaults.fontStyle;\n        }\n        if (incomingDefaults.foreground !== null) {\n            defaultForeground = incomingDefaults.foreground;\n        }\n        if (incomingDefaults.background !== null) {\n            defaultBackground = incomingDefaults.background;\n        }\n    }\n    const colorMap = new ColorMap();\n    // start with token colors from custom token themes\n    for (const color of customTokenColors) {\n        colorMap.getId(color);\n    }\n    const foregroundColorId = colorMap.getId(defaultForeground);\n    const backgroundColorId = colorMap.getId(defaultBackground);\n    const defaults = new ThemeTrieElementRule(defaultFontStyle, foregroundColorId, backgroundColorId);\n    const root = new ThemeTrieElement(defaults);\n    for (let i = 0, len = parsedThemeRules.length; i < len; i++) {\n        const rule = parsedThemeRules[i];\n        root.insert(rule.token, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n    }\n    return new TokenTheme(colorMap, root);\n}\nconst colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\nexport class ColorMap {\n    constructor() {\n        this._lastColorId = 0;\n        this._id2color = [];\n        this._color2id = new Map();\n    }\n    getId(color) {\n        if (color === null) {\n            return 0;\n        }\n        const match = color.match(colorRegExp);\n        if (!match) {\n            throw new Error('Illegal value for token color: ' + color);\n        }\n        color = match[1].toUpperCase();\n        let value = this._color2id.get(color);\n        if (value) {\n            return value;\n        }\n        value = ++this._lastColorId;\n        this._color2id.set(color, value);\n        this._id2color[value] = Color.fromHex('#' + color);\n        return value;\n    }\n    getColorMap() {\n        return this._id2color.slice(0);\n    }\n}\nexport class TokenTheme {\n    static createFromRawTokenTheme(source, customTokenColors) {\n        return this.createFromParsedTokenTheme(parseTokenTheme(source), customTokenColors);\n    }\n    static createFromParsedTokenTheme(source, customTokenColors) {\n        return resolveParsedTokenThemeRules(source, customTokenColors);\n    }\n    constructor(colorMap, root) {\n        this._colorMap = colorMap;\n        this._root = root;\n        this._cache = new Map();\n    }\n    getColorMap() {\n        return this._colorMap.getColorMap();\n    }\n    _match(token) {\n        return this._root.match(token);\n    }\n    match(languageId, token) {\n        // The cache contains the metadata without the language bits set.\n        let result = this._cache.get(token);\n        if (typeof result === 'undefined') {\n            const rule = this._match(token);\n            const standardToken = toStandardTokenType(token);\n            result = (rule.metadata\n                | (standardToken << 8 /* MetadataConsts.TOKEN_TYPE_OFFSET */)) >>> 0;\n            this._cache.set(token, result);\n        }\n        return (result\n            | (languageId << 0 /* MetadataConsts.LANGUAGEID_OFFSET */)) >>> 0;\n    }\n}\nconst STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\nexport function toStandardTokenType(tokenType) {\n    const m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\n    if (!m) {\n        return 0 /* StandardTokenType.Other */;\n    }\n    switch (m[1]) {\n        case 'comment':\n            return 1 /* StandardTokenType.Comment */;\n        case 'string':\n            return 2 /* StandardTokenType.String */;\n        case 'regex':\n            return 3 /* StandardTokenType.RegEx */;\n        case 'regexp':\n            return 3 /* StandardTokenType.RegEx */;\n    }\n    throw new Error('Unexpected match for standard token type!');\n}\nexport function strcmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nexport class ThemeTrieElementRule {\n    constructor(fontStyle, foreground, background) {\n        this._themeTrieElementRuleBrand = undefined;\n        this._fontStyle = fontStyle;\n        this._foreground = foreground;\n        this._background = background;\n        this.metadata = ((this._fontStyle << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n            | (this._foreground << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n            | (this._background << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\n    }\n    clone() {\n        return new ThemeTrieElementRule(this._fontStyle, this._foreground, this._background);\n    }\n    acceptOverwrite(fontStyle, foreground, background) {\n        if (fontStyle !== -1 /* FontStyle.NotSet */) {\n            this._fontStyle = fontStyle;\n        }\n        if (foreground !== 0 /* ColorId.None */) {\n            this._foreground = foreground;\n        }\n        if (background !== 0 /* ColorId.None */) {\n            this._background = background;\n        }\n        this.metadata = ((this._fontStyle << 11 /* MetadataConsts.FONT_STYLE_OFFSET */)\n            | (this._foreground << 15 /* MetadataConsts.FOREGROUND_OFFSET */)\n            | (this._background << 24 /* MetadataConsts.BACKGROUND_OFFSET */)) >>> 0;\n    }\n}\nexport class ThemeTrieElement {\n    constructor(mainRule) {\n        this._themeTrieElementBrand = undefined;\n        this._mainRule = mainRule;\n        this._children = new Map();\n    }\n    match(token) {\n        if (token === '') {\n            return this._mainRule;\n        }\n        const dotIndex = token.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = token;\n            tail = '';\n        }\n        else {\n            head = token.substring(0, dotIndex);\n            tail = token.substring(dotIndex + 1);\n        }\n        const child = this._children.get(head);\n        if (typeof child !== 'undefined') {\n            return child.match(tail);\n        }\n        return this._mainRule;\n    }\n    insert(token, fontStyle, foreground, background) {\n        if (token === '') {\n            // Merge into the main rule\n            this._mainRule.acceptOverwrite(fontStyle, foreground, background);\n            return;\n        }\n        const dotIndex = token.indexOf('.');\n        let head;\n        let tail;\n        if (dotIndex === -1) {\n            head = token;\n            tail = '';\n        }\n        else {\n            head = token.substring(0, dotIndex);\n            tail = token.substring(dotIndex + 1);\n        }\n        let child = this._children.get(head);\n        if (typeof child === 'undefined') {\n            child = new ThemeTrieElement(this._mainRule.clone());\n            this._children.set(head, child);\n        }\n        child.insert(tail, fontStyle, foreground, background);\n    }\n}\nexport function generateTokensCSSForColorMap(colorMap) {\n    const rules = [];\n    for (let i = 1, len = colorMap.length; i < len; i++) {\n        const color = colorMap[i];\n        rules[i] = `.mtk${i} { color: ${color}; }`;\n    }\n    rules.push('.mtki { font-style: italic; }');\n    rules.push('.mtkb { font-weight: bold; }');\n    rules.push('.mtku { text-decoration: underline; text-underline-position: under; }');\n    rules.push('.mtks { text-decoration: line-through; }');\n    rules.push('.mtks.mtku { text-decoration: underline line-through; text-underline-position: under; }');\n    return rules.join('\\n');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}