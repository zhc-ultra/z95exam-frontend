{"ast":null,"code":"import _toConsumableArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.string.replace.js\";\n/**\n * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n */\n\n/**\n * @typedef {Content | Root} Node\n *   Any node.\n * @typedef {Extract<Node, import('unist').Parent>} Parent\n *   Any parent.\n * @typedef {'normal' | 'pre' | 'nowrap' | 'pre-wrap'} Whitespace\n *   Valid and useful whitespace values (from CSS).\n * @typedef {0 | 1 | 2} BreakNumber\n *   Specific break:\n *\n *   *   `0` — space\n *   *   `1` — line ending\n *   *   `2` — blank line\n * @typedef {'\\n'} BreakForce\n *   Forced break.\n * @typedef {boolean} BreakValue\n *   Whether there was a break.\n * @typedef {BreakValue | BreakNumber | undefined} BreakBefore\n *   Any value for a break before.\n * @typedef {BreakValue | BreakNumber | BreakForce | undefined} BreakAfter\n *   Any value for a break after.\n *\n * @typedef CollectionInfo\n *   Info on current collection.\n * @property {Whitespace} whitespace\n *   Current whitespace setting.\n * @property {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @property {BreakAfter} breakAfter\n *   Whether there was a break after.\n *\n * @typedef Options\n *   Configuration.\n * @property {Whitespace | null | undefined} [whitespace='normal']\n *   Initial CSS whitespace setting to use.\n */\n\nimport { convertElement } from 'hast-util-is-element';\nimport { findAfter } from 'unist-util-find-after';\nvar searchLineFeeds = /\\n/g;\nvar searchTabOrSpaces = /[\\t ]+/g;\nvar br = convertElement('br');\nvar p = convertElement('p');\nvar cell = convertElement(['th', 'td']);\nvar row = convertElement('tr');\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nvar notRendered = convertElement([\n// List from: <https://html.spec.whatwg.org/#hidden-elements>\n'datalist', 'head', 'noembed', 'noframes', 'noscript',\n// Act as if we support scripting.\n'rp', 'script', 'style', 'template', 'title',\n// Hidden attribute.\nhidden,\n// From: <https://html.spec.whatwg.org/#flow-content-3>\nclosedDialog]);\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nvar blockOrCaption = convertElement(['address',\n// Flow content\n'article',\n// Sections and headings\n'aside',\n// Sections and headings\n'blockquote',\n// Flow content\n'body',\n// Page\n'caption',\n// `table-caption`\n'center',\n// Flow content (legacy)\n'dd',\n// Lists\n'dialog',\n// Flow content\n'dir',\n// Lists (legacy)\n'dl',\n// Lists\n'dt',\n// Lists\n'div',\n// Flow content\n'figure',\n// Flow content\n'figcaption',\n// Flow content\n'footer',\n// Flow content\n'form,',\n// Flow content\n'h1',\n// Sections and headings\n'h2',\n// Sections and headings\n'h3',\n// Sections and headings\n'h4',\n// Sections and headings\n'h5',\n// Sections and headings\n'h6',\n// Sections and headings\n'header',\n// Flow content\n'hgroup',\n// Sections and headings\n'hr',\n// Flow content\n'html',\n// Page\n'legend',\n// Flow content\n'listing',\n// Flow content (legacy)\n'main',\n// Flow content\n'menu',\n// Lists\n'nav',\n// Sections and headings\n'ol',\n// Lists\n'p',\n// Flow content\n'plaintext',\n// Flow content (legacy)\n'pre',\n// Flow content\n'section',\n// Sections and headings\n'ul',\n// Lists\n'xmp' // Flow content (legacy)\n]);\n\n/**\n * Get the plain-text value of a node.\n *\n * ###### Algorithm\n *\n * *   if `tree` is a comment, returns its `value`\n * *   if `tree` is a text, applies normal whitespace collapsing to its\n *     `value`, as defined by the CSS Text spec\n * *   if `tree` is a root or element, applies an algorithm similar to the\n *     `innerText` getter as defined by HTML\n *\n * ###### Notes\n *\n * > 👉 **Note**: the algorithm acts as if `tree` is being rendered, and as if\n * > we’re a CSS-supporting user agent, with scripting enabled.\n *\n * *   if `tree` is an element that is not displayed (such as a `head`), we’ll\n *     still use the `innerText` algorithm instead of switching to `textContent`\n * *   if descendants of `tree` are elements that are not displayed, they are\n *     ignored\n * *   CSS is not considered, except for the default user agent style sheet\n * *   a line feed is collapsed instead of ignored in cases where Fullwidth, Wide,\n *     or Halfwidth East Asian Width characters are used, the same goes for a case\n *     with Chinese, Japanese, or Yi writing systems\n * *   replaced elements (such as `audio`) are treated like non-replaced elements\n *\n * @param {Node} tree\n *   Tree to turn into text.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `tree`.\n */\nexport function toText(tree) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var children = 'children' in tree ? tree.children : [];\n  var block = blockOrCaption(tree);\n  var whitespace = inferWhitespace(tree, {\n    whitespace: options.whitespace || 'normal',\n    breakBefore: false,\n    breakAfter: false\n  });\n\n  /** @type {Array<string | BreakNumber>} */\n  var results = [];\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (tree.type === 'text' || tree.type === 'comment') {\n    results.push.apply(results, _toConsumableArray(collectText(tree, {\n      whitespace: whitespace,\n      breakBefore: true,\n      breakAfter: true\n    })));\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  var index = -1;\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results.push.apply(results, _toConsumableArray(innerTextCollection(children[index], tree, {\n      whitespace: whitespace,\n      breakBefore: index ? undefined : block,\n      breakAfter: index < children.length - 1 ? br(children[index + 1]) : block\n    })));\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  /** @type {Array<string>} */\n  var result = [];\n  /** @type {number | undefined} */\n  var count;\n  index = -1;\n  while (++index < results.length) {\n    var value = results[index];\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value;\n    } else if (value) {\n      if (count !== undefined && count > -1) {\n        result.push('\\n'.repeat(count) || ' ');\n      }\n      count = -1;\n      result.push(value);\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('');\n}\n\n/**\n * <https://html.spec.whatwg.org/#inner-text-collection-steps>\n *\n * @param {Node} node\n * @param {Parent} parent\n * @param {CollectionInfo} info\n * @returns {Array<string | BreakNumber>}\n */\nfunction innerTextCollection(node, parent, info) {\n  if (node.type === 'element') {\n    return collectElement(node, parent, info);\n  }\n  if (node.type === 'text') {\n    return info.whitespace === 'normal' ? collectText(node, info) : collectPreText(node);\n  }\n  return [];\n}\n\n/**\n * Collect an element.\n *\n * @param {Element} node\n *   Element node.\n * @param {Parent} parent\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<string | BreakNumber>}\n */\nfunction collectElement(node, parent, info) {\n  // First we infer the `white-space` property.\n  var whitespace = inferWhitespace(node, info);\n  var children = node.children || [];\n  var index = -1;\n  /** @type {Array<string | BreakNumber>} */\n  var items = [];\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items;\n  }\n\n  /** @type {BreakNumber | undefined} */\n  var prefix;\n  /** @type {BreakNumber | BreakForce | undefined} */\n  var suffix;\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n';\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (row(node) && findAfter(parent, node, row)) {\n    suffix = '\\n';\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2;\n    suffix = 2;\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1;\n    suffix = 1;\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(innerTextCollection(children[index], node, {\n      whitespace: whitespace,\n      breakBefore: index ? undefined : prefix,\n      breakAfter: index < children.length - 1 ? br(children[index + 1]) : suffix\n    }));\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  if (cell(node) && findAfter(parent, node, cell)) {\n    items.push('\\t');\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix);\n  if (suffix) items.push(suffix);\n  return items;\n}\n\n/**\n * 4.  If node is a Text node, then for each CSS text box produced by node,\n *     in content order, compute the text of the box after application of the\n *     CSS `white-space` processing rules and `text-transform` rules, set\n *     items to the list of the resulting strings, and return items.\n *     The CSS `white-space` processing rules are slightly modified:\n *     collapsible spaces at the end of lines are always collapsed, but they\n *     are only removed if the line is the last line of the block, or it ends\n *     with a br element.\n *     Soft hyphens should be preserved.\n *\n *     Note: See `collectText` and `collectPreText`.\n *     Note: we don’t deal with `text-transform`, no element has that by\n *     default.\n *\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\n *\n * @param {Text | Comment} node\n *   Text node.\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<string | BreakNumber>}\n *   Result.\n */\nfunction collectText(node, info) {\n  var value = String(node.value);\n  /** @type {Array<string>} */\n  var lines = [];\n  /** @type {Array<string | BreakNumber>} */\n  var result = [];\n  var start = 0;\n  while (start <= value.length) {\n    searchLineFeeds.lastIndex = start;\n    var match = searchLineFeeds.exec(value);\n    var end = match && 'index' in match ? match.index : value.length;\n    lines.push(\n    // Any sequence of collapsible spaces and tabs immediately preceding or\n    // following a segment break is removed.\n    trimAndCollapseSpacesAndTabs(\n    // […] ignoring bidi formatting characters (characters with the\n    // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n    // they were not there.\n    value.slice(start, end).replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''), start === 0 ? info.breakBefore : true, end === value.length ? info.breakAfter : true));\n    start = end + 1;\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  var index = -1;\n  /** @type {BreakNumber | undefined} */\n  var join;\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ || index < lines.length - 1 && lines[index + 1].charCodeAt(0) === 0x200b /* ZWSP */) {\n      result.push(lines[index]);\n      join = undefined;\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (typeof join === 'number') result.push(join);\n      result.push(lines[index]);\n      join = 0;\n    } else if (index === 0 || index === lines.length - 1) {\n      // If this line is empty, and it’s the first or last, add a space.\n      // Note that this function is only called in normal whitespace, so we\n      // don’t worry about `pre`.\n      result.push(0);\n    }\n  }\n  return result;\n}\n\n/**\n * Collect a text node as “pre” whitespace.\n *\n * @param {Text} node\n *   Text node.\n * @returns {Array<string | BreakNumber>}\n *   Result.\n */\nfunction collectPreText(node) {\n  return [String(node.value)];\n}\n\n/**\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n * 4.  Any collapsible space immediately following another collapsible\n *     space—even one outside the boundary of the inline containing that\n *     space, provided both spaces are within the same inline formatting\n *     context—is collapsed to have zero advance width. (It is invisible,\n *     but retains its soft wrap opportunity, if any.)\n *\n * @param {string} value\n *   Value to collapse.\n * @param {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @param {BreakAfter} breakAfter\n *   Whether there was a break after.\n * @returns {string}\n *   Result.\n */\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  /** @type {Array<string>} */\n  var result = [];\n  var start = 0;\n  /** @type {number | undefined} */\n  var end;\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start;\n    var match = searchTabOrSpaces.exec(value);\n    end = match ? match.index : value.length;\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('');\n    }\n    if (start !== end) {\n      result.push(value.slice(start, end));\n    }\n    start = match ? end + match[0].length : end;\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  if (start !== end && !breakAfter) {\n    result.push('');\n  }\n  return result.join(' ');\n}\n\n/**\n * Figure out the whitespace of a node.\n *\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\n *\n * @param {Node} node\n *   Node (typically `Element`).\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Whitespace}\n *   Applied whitespace.\n */\nfunction inferWhitespace(node, info) {\n  if (node.type === 'element') {\n    var props = node.properties || {};\n    switch (node.tagName) {\n      case 'listing':\n      case 'plaintext':\n      case 'xmp':\n        {\n          return 'pre';\n        }\n      case 'nobr':\n        {\n          return 'nowrap';\n        }\n      case 'pre':\n        {\n          return props.wrap ? 'pre-wrap' : 'pre';\n        }\n      case 'td':\n      case 'th':\n        {\n          return props.noWrap ? 'nowrap' : info.whitespace;\n        }\n      case 'textarea':\n        {\n          return 'pre-wrap';\n        }\n      default:\n    }\n  }\n  return info.whitespace;\n}\n\n/** @type {TestFunctionAnything} */\nfunction hidden(node) {\n  return Boolean((node.properties || {}).hidden);\n}\n\n/** @type {TestFunctionAnything} */\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open;\n}","map":{"version":3,"names":["convertElement","findAfter","searchLineFeeds","searchTabOrSpaces","br","p","cell","row","notRendered","hidden","closedDialog","blockOrCaption","toText","tree","options","arguments","length","undefined","children","block","whitespace","inferWhitespace","breakBefore","breakAfter","results","type","push","apply","_toConsumableArray","collectText","index","innerTextCollection","result","count","value","repeat","join","node","parent","info","collectElement","collectPreText","items","prefix","suffix","concat","unshift","String","lines","start","lastIndex","match","exec","end","trimAndCollapseSpacesAndTabs","slice","replace","charCodeAt","props","properties","tagName","wrap","noWrap","Boolean","open"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/hast-util-to-text/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything\n * @typedef {import('hast').Content} Content\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n */\n\n/**\n * @typedef {Content | Root} Node\n *   Any node.\n * @typedef {Extract<Node, import('unist').Parent>} Parent\n *   Any parent.\n * @typedef {'normal' | 'pre' | 'nowrap' | 'pre-wrap'} Whitespace\n *   Valid and useful whitespace values (from CSS).\n * @typedef {0 | 1 | 2} BreakNumber\n *   Specific break:\n *\n *   *   `0` — space\n *   *   `1` — line ending\n *   *   `2` — blank line\n * @typedef {'\\n'} BreakForce\n *   Forced break.\n * @typedef {boolean} BreakValue\n *   Whether there was a break.\n * @typedef {BreakValue | BreakNumber | undefined} BreakBefore\n *   Any value for a break before.\n * @typedef {BreakValue | BreakNumber | BreakForce | undefined} BreakAfter\n *   Any value for a break after.\n *\n * @typedef CollectionInfo\n *   Info on current collection.\n * @property {Whitespace} whitespace\n *   Current whitespace setting.\n * @property {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @property {BreakAfter} breakAfter\n *   Whether there was a break after.\n *\n * @typedef Options\n *   Configuration.\n * @property {Whitespace | null | undefined} [whitespace='normal']\n *   Initial CSS whitespace setting to use.\n */\n\nimport {convertElement} from 'hast-util-is-element'\nimport {findAfter} from 'unist-util-find-after'\n\nconst searchLineFeeds = /\\n/g\nconst searchTabOrSpaces = /[\\t ]+/g\n\nconst br = convertElement('br')\nconst p = convertElement('p')\nconst cell = convertElement(['th', 'td'])\nconst row = convertElement('tr')\n\n// Note that we don’t need to include void elements here as they don’t have text.\n// See: <https://github.com/wooorm/html-void-elements>\nconst notRendered = convertElement([\n  // List from: <https://html.spec.whatwg.org/#hidden-elements>\n  'datalist',\n  'head',\n  'noembed',\n  'noframes',\n  'noscript', // Act as if we support scripting.\n  'rp',\n  'script',\n  'style',\n  'template',\n  'title',\n  // Hidden attribute.\n  hidden,\n  // From: <https://html.spec.whatwg.org/#flow-content-3>\n  closedDialog\n])\n\n// See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>\nconst blockOrCaption = convertElement([\n  'address', // Flow content\n  'article', // Sections and headings\n  'aside', // Sections and headings\n  'blockquote', // Flow content\n  'body', // Page\n  'caption', // `table-caption`\n  'center', // Flow content (legacy)\n  'dd', // Lists\n  'dialog', // Flow content\n  'dir', // Lists (legacy)\n  'dl', // Lists\n  'dt', // Lists\n  'div', // Flow content\n  'figure', // Flow content\n  'figcaption', // Flow content\n  'footer', // Flow content\n  'form,', // Flow content\n  'h1', // Sections and headings\n  'h2', // Sections and headings\n  'h3', // Sections and headings\n  'h4', // Sections and headings\n  'h5', // Sections and headings\n  'h6', // Sections and headings\n  'header', // Flow content\n  'hgroup', // Sections and headings\n  'hr', // Flow content\n  'html', // Page\n  'legend', // Flow content\n  'listing', // Flow content (legacy)\n  'main', // Flow content\n  'menu', // Lists\n  'nav', // Sections and headings\n  'ol', // Lists\n  'p', // Flow content\n  'plaintext', // Flow content (legacy)\n  'pre', // Flow content\n  'section', // Sections and headings\n  'ul', // Lists\n  'xmp' // Flow content (legacy)\n])\n\n/**\n * Get the plain-text value of a node.\n *\n * ###### Algorithm\n *\n * *   if `tree` is a comment, returns its `value`\n * *   if `tree` is a text, applies normal whitespace collapsing to its\n *     `value`, as defined by the CSS Text spec\n * *   if `tree` is a root or element, applies an algorithm similar to the\n *     `innerText` getter as defined by HTML\n *\n * ###### Notes\n *\n * > 👉 **Note**: the algorithm acts as if `tree` is being rendered, and as if\n * > we’re a CSS-supporting user agent, with scripting enabled.\n *\n * *   if `tree` is an element that is not displayed (such as a `head`), we’ll\n *     still use the `innerText` algorithm instead of switching to `textContent`\n * *   if descendants of `tree` are elements that are not displayed, they are\n *     ignored\n * *   CSS is not considered, except for the default user agent style sheet\n * *   a line feed is collapsed instead of ignored in cases where Fullwidth, Wide,\n *     or Halfwidth East Asian Width characters are used, the same goes for a case\n *     with Chinese, Japanese, or Yi writing systems\n * *   replaced elements (such as `audio`) are treated like non-replaced elements\n *\n * @param {Node} tree\n *   Tree to turn into text.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `tree`.\n */\nexport function toText(tree, options = {}) {\n  const children = 'children' in tree ? tree.children : []\n  const block = blockOrCaption(tree)\n  const whitespace = inferWhitespace(tree, {\n    whitespace: options.whitespace || 'normal',\n    breakBefore: false,\n    breakAfter: false\n  })\n\n  /** @type {Array<string | BreakNumber>} */\n  const results = []\n\n  // Treat `text` and `comment` as having normal white-space.\n  // This deviates from the spec as in the DOM the node’s `.data` has to be\n  // returned.\n  // If you want that behavior use `hast-util-to-string`.\n  // All other nodes are later handled as if they are `element`s (so the\n  // algorithm also works on a `root`).\n  // Nodes without children are treated as a void element, so `doctype` is thus\n  // ignored.\n  if (tree.type === 'text' || tree.type === 'comment') {\n    results.push(\n      ...collectText(tree, {\n        whitespace,\n        breakBefore: true,\n        breakAfter: true\n      })\n    )\n  }\n\n  // 1.  If this element is not being rendered, or if the user agent is a\n  //     non-CSS user agent, then return the same value as the textContent IDL\n  //     attribute on this element.\n  //\n  //     Note: we’re not supporting stylesheets so we’re acting as if the node\n  //     is rendered.\n  //\n  //     If you want that behavior use `hast-util-to-string`.\n  //     Important: we’ll have to account for this later though.\n\n  // 2.  Let results be a new empty list.\n  let index = -1\n\n  // 3.  For each child node node of this element:\n  while (++index < children.length) {\n    // 3.1. Let current be the list resulting in running the inner text\n    //      collection steps with node.\n    //      Each item in results will either be a JavaScript string or a\n    //      positive integer (a required line break count).\n    // 3.2. For each item item in current, append item to results.\n    results.push(\n      // @ts-expect-error Looks like a parent.\n      ...innerTextCollection(children[index], tree, {\n        whitespace,\n        breakBefore: index ? undefined : block,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : block\n      })\n    )\n  }\n\n  // 4.  Remove any items from results that are the empty string.\n  // 5.  Remove any runs of consecutive required line break count items at the\n  //     start or end of results.\n  // 6.  Replace each remaining run of consecutive required line break count\n  //     items with a string consisting of as many U+000A LINE FEED (LF)\n  //     characters as the maximum of the values in the required line break\n  //     count items.\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {number | undefined} */\n  let count\n\n  index = -1\n\n  while (++index < results.length) {\n    const value = results[index]\n\n    if (typeof value === 'number') {\n      if (count !== undefined && value > count) count = value\n    } else if (value) {\n      if (count !== undefined && count > -1) {\n        result.push('\\n'.repeat(count) || ' ')\n      }\n\n      count = -1\n      result.push(value)\n    }\n  }\n\n  // 7.  Return the concatenation of the string items in results.\n  return result.join('')\n}\n\n/**\n * <https://html.spec.whatwg.org/#inner-text-collection-steps>\n *\n * @param {Node} node\n * @param {Parent} parent\n * @param {CollectionInfo} info\n * @returns {Array<string | BreakNumber>}\n */\nfunction innerTextCollection(node, parent, info) {\n  if (node.type === 'element') {\n    return collectElement(node, parent, info)\n  }\n\n  if (node.type === 'text') {\n    return info.whitespace === 'normal'\n      ? collectText(node, info)\n      : collectPreText(node)\n  }\n\n  return []\n}\n\n/**\n * Collect an element.\n *\n * @param {Element} node\n *   Element node.\n * @param {Parent} parent\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<string | BreakNumber>}\n */\nfunction collectElement(node, parent, info) {\n  // First we infer the `white-space` property.\n  const whitespace = inferWhitespace(node, info)\n  const children = node.children || []\n  let index = -1\n  /** @type {Array<string | BreakNumber>} */\n  let items = []\n\n  // We’re ignoring point 3, and exiting without any content here, because we\n  // deviated from the spec in `toText` at step 3.\n  if (notRendered(node)) {\n    return items\n  }\n\n  /** @type {BreakNumber | undefined} */\n  let prefix\n  /** @type {BreakNumber | BreakForce | undefined} */\n  let suffix\n  // Note: we first detect if there is going to be a break before or after the\n  // contents, as that changes the white-space handling.\n\n  // 2.  If node’s computed value of `visibility` is not `visible`, then return\n  //     items.\n  //\n  //     Note: Ignored, as everything is visible by default user agent styles.\n\n  // 3.  If node is not being rendered, then return items. [...]\n  //\n  //     Note: We already did this above.\n\n  // See `collectText` for step 4.\n\n  // 5.  If node is a `<br>` element, then append a string containing a single\n  //     U+000A LINE FEED (LF) character to items.\n  if (br(node)) {\n    suffix = '\\n'\n  }\n\n  // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS\n  //     box is not the last `table-row` box of the nearest ancestor `table`\n  //     box, then append a string containing a single U+000A LINE FEED (LF)\n  //     character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  //     Note: needs further investigation as this does not account for implicit\n  //     rows.\n  else if (row(node) && findAfter(parent, node, row)) {\n    suffix = '\\n'\n  }\n\n  // 8.  If node is a `<p>` element, then append 2 (a required line break count)\n  //     at the beginning and end of items.\n  else if (p(node)) {\n    prefix = 2\n    suffix = 2\n  }\n\n  // 9.  If node’s used value of `display` is block-level or `table-caption`,\n  //     then append 1 (a required line break count) at the beginning and end of\n  //     items.\n  else if (blockOrCaption(node)) {\n    prefix = 1\n    suffix = 1\n  }\n\n  // 1.  Let items be the result of running the inner text collection steps with\n  //     each child node of node in tree order, and then concatenating the\n  //     results to a single list.\n  while (++index < children.length) {\n    items = items.concat(\n      innerTextCollection(children[index], node, {\n        whitespace,\n        breakBefore: index ? undefined : prefix,\n        breakAfter:\n          index < children.length - 1 ? br(children[index + 1]) : suffix\n      })\n    )\n  }\n\n  // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS\n  //     box is not the last `table-cell` box of its enclosing `table-row` box,\n  //     then append a string containing a single U+0009 CHARACTER TABULATION\n  //     (tab) character to items.\n  //\n  //     See: <https://html.spec.whatwg.org/#tables-2>\n  if (cell(node) && findAfter(parent, node, cell)) {\n    items.push('\\t')\n  }\n\n  // Add the pre- and suffix.\n  if (prefix) items.unshift(prefix)\n  if (suffix) items.push(suffix)\n\n  return items\n}\n\n/**\n * 4.  If node is a Text node, then for each CSS text box produced by node,\n *     in content order, compute the text of the box after application of the\n *     CSS `white-space` processing rules and `text-transform` rules, set\n *     items to the list of the resulting strings, and return items.\n *     The CSS `white-space` processing rules are slightly modified:\n *     collapsible spaces at the end of lines are always collapsed, but they\n *     are only removed if the line is the last line of the block, or it ends\n *     with a br element.\n *     Soft hyphens should be preserved.\n *\n *     Note: See `collectText` and `collectPreText`.\n *     Note: we don’t deal with `text-transform`, no element has that by\n *     default.\n *\n * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>\n *\n * @param {Text | Comment} node\n *   Text node.\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Array<string | BreakNumber>}\n *   Result.\n */\nfunction collectText(node, info) {\n  const value = String(node.value)\n  /** @type {Array<string>} */\n  const lines = []\n  /** @type {Array<string | BreakNumber>} */\n  const result = []\n  let start = 0\n\n  while (start <= value.length) {\n    searchLineFeeds.lastIndex = start\n\n    const match = searchLineFeeds.exec(value)\n    const end = match && 'index' in match ? match.index : value.length\n\n    lines.push(\n      // Any sequence of collapsible spaces and tabs immediately preceding or\n      // following a segment break is removed.\n      trimAndCollapseSpacesAndTabs(\n        // […] ignoring bidi formatting characters (characters with the\n        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if\n        // they were not there.\n        value\n          .slice(start, end)\n          .replace(/[\\u061C\\u200E\\u200F\\u202A-\\u202E\\u2066-\\u2069]/g, ''),\n        start === 0 ? info.breakBefore : true,\n        end === value.length ? info.breakAfter : true\n      )\n    )\n\n    start = end + 1\n  }\n\n  // Collapsible segment breaks are transformed for rendering according to the\n  // segment break transformation rules.\n  // So here we jump to 4.1.2 of [CSSTEXT]:\n  // Any collapsible segment break immediately following another collapsible\n  // segment break is removed\n  let index = -1\n  /** @type {BreakNumber | undefined} */\n  let join\n\n  while (++index < lines.length) {\n    // *   If the character immediately before or immediately after the segment\n    //     break is the zero-width space character (U+200B), then the break is\n    //     removed, leaving behind the zero-width space.\n    if (\n      lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||\n      (index < lines.length - 1 &&\n        lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */\n    ) {\n      result.push(lines[index])\n      join = undefined\n    }\n\n    // *   Otherwise, if the East Asian Width property [UAX11] of both the\n    //     character before and after the segment break is Fullwidth, Wide, or\n    //     Halfwidth (not Ambiguous), and neither side is Hangul, then the\n    //     segment break is removed.\n    //\n    //     Note: ignored.\n    // *   Otherwise, if the writing system of the segment break is Chinese,\n    //     Japanese, or Yi, and the character before or after the segment break\n    //     is punctuation or a symbol (Unicode general category P* or S*) and\n    //     has an East Asian Width property of Ambiguous, and the character on\n    //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,\n    //     and not Hangul, then the segment break is removed.\n    //\n    //     Note: ignored.\n\n    // *   Otherwise, the segment break is converted to a space (U+0020).\n    else if (lines[index]) {\n      if (typeof join === 'number') result.push(join)\n      result.push(lines[index])\n      join = 0\n    } else if (index === 0 || index === lines.length - 1) {\n      // If this line is empty, and it’s the first or last, add a space.\n      // Note that this function is only called in normal whitespace, so we\n      // don’t worry about `pre`.\n      result.push(0)\n    }\n  }\n\n  return result\n}\n\n/**\n * Collect a text node as “pre” whitespace.\n *\n * @param {Text} node\n *   Text node.\n * @returns {Array<string | BreakNumber>}\n *   Result.\n */\nfunction collectPreText(node) {\n  return [String(node.value)]\n}\n\n/**\n * 3.  Every collapsible tab is converted to a collapsible space (U+0020).\n * 4.  Any collapsible space immediately following another collapsible\n *     space—even one outside the boundary of the inline containing that\n *     space, provided both spaces are within the same inline formatting\n *     context—is collapsed to have zero advance width. (It is invisible,\n *     but retains its soft wrap opportunity, if any.)\n *\n * @param {string} value\n *   Value to collapse.\n * @param {BreakBefore} breakBefore\n *   Whether there was a break before.\n * @param {BreakAfter} breakAfter\n *   Whether there was a break after.\n * @returns {string}\n *   Result.\n */\nfunction trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  /** @type {number | undefined} */\n  let end\n\n  while (start < value.length) {\n    searchTabOrSpaces.lastIndex = start\n    const match = searchTabOrSpaces.exec(value)\n    end = match ? match.index : value.length\n\n    // If we’re not directly after a segment break, but there was white space,\n    // add an empty value that will be turned into a space.\n    if (!start && !end && match && !breakBefore) {\n      result.push('')\n    }\n\n    if (start !== end) {\n      result.push(value.slice(start, end))\n    }\n\n    start = match ? end + match[0].length : end\n  }\n\n  // If we reached the end, there was trailing white space, and there’s no\n  // segment break after this node, add an empty value that will be turned\n  // into a space.\n  if (start !== end && !breakAfter) {\n    result.push('')\n  }\n\n  return result.join(' ')\n}\n\n/**\n * Figure out the whitespace of a node.\n *\n * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).\n *\n * @param {Node} node\n *   Node (typically `Element`).\n * @param {CollectionInfo} info\n *   Info on current collection.\n * @returns {Whitespace}\n *   Applied whitespace.\n */\nfunction inferWhitespace(node, info) {\n  if (node.type === 'element') {\n    const props = node.properties || {}\n    switch (node.tagName) {\n      case 'listing':\n      case 'plaintext':\n      case 'xmp': {\n        return 'pre'\n      }\n\n      case 'nobr': {\n        return 'nowrap'\n      }\n\n      case 'pre': {\n        return props.wrap ? 'pre-wrap' : 'pre'\n      }\n\n      case 'td':\n      case 'th': {\n        return props.noWrap ? 'nowrap' : info.whitespace\n      }\n\n      case 'textarea': {\n        return 'pre-wrap'\n      }\n\n      default:\n    }\n  }\n\n  return info.whitespace\n}\n\n/** @type {TestFunctionAnything} */\nfunction hidden(node) {\n  return Boolean((node.properties || {}).hidden)\n}\n\n/** @type {TestFunctionAnything} */\nfunction closedDialog(node) {\n  return node.tagName === 'dialog' && !(node.properties || {}).open\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}