{"ast":null,"code":"import _typeof from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _slicedToArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.is-frozen.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationValue, removeFromValueTree, toValuesTree } from './configuration.js';\nimport { Extensions, overrideIdentifiersFromKey, OVERRIDE_PROPERTY_REGEX } from './configurationRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nfunction freeze(data) {\n  return Object.isFrozen(data) ? data : objects.deepFreeze(data);\n}\nexport var ConfigurationModel = /*#__PURE__*/function () {\n  function ConfigurationModel() {\n    var _contents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var _overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var raw = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, ConfigurationModel);\n    this._contents = _contents;\n    this._keys = _keys;\n    this._overrides = _overrides;\n    this.raw = raw;\n    this.overrideConfigurations = new Map();\n  }\n  return _createClass(ConfigurationModel, [{\n    key: \"rawConfiguration\",\n    get: function get() {\n      var _a;\n      if (!this._rawConfiguration) {\n        if ((_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) {\n          var rawConfigurationModels = this.raw.map(function (raw) {\n            if (raw instanceof ConfigurationModel) {\n              return raw;\n            }\n            var parser = new ConfigurationModelParser('');\n            parser.parseRaw(raw);\n            return parser.configurationModel;\n          });\n          this._rawConfiguration = rawConfigurationModels.reduce(function (previous, current) {\n            return current === previous ? current : previous.merge(current);\n          }, rawConfigurationModels[0]);\n        } else {\n          // raw is same as current\n          this._rawConfiguration = this;\n        }\n      }\n      return this._rawConfiguration;\n    }\n  }, {\n    key: \"contents\",\n    get: function get() {\n      return this._contents;\n    }\n  }, {\n    key: \"overrides\",\n    get: function get() {\n      return this._overrides;\n    }\n  }, {\n    key: \"keys\",\n    get: function get() {\n      return this._keys;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(section) {\n      return section ? getConfigurationValue(this.contents, section) : this.contents;\n    }\n  }, {\n    key: \"inspect\",\n    value: function inspect(section, overrideIdentifier) {\n      var that = this;\n      return {\n        get value() {\n          return freeze(that.rawConfiguration.getValue(section));\n        },\n        get override() {\n          return overrideIdentifier ? freeze(that.rawConfiguration.getOverrideValue(section, overrideIdentifier)) : undefined;\n        },\n        get merged() {\n          return freeze(overrideIdentifier ? that.rawConfiguration.override(overrideIdentifier).getValue(section) : that.rawConfiguration.getValue(section));\n        },\n        get overrides() {\n          var overrides = [];\n          var _iterator = _createForOfIteratorHelper(that.rawConfiguration.overrides),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _step$value = _step.value,\n                contents = _step$value.contents,\n                identifiers = _step$value.identifiers,\n                keys = _step$value.keys;\n              var value = new ConfigurationModel(contents, keys).getValue(section);\n              if (value !== undefined) {\n                overrides.push({\n                  identifiers: identifiers,\n                  value: value\n                });\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          return overrides.length ? freeze(overrides) : undefined;\n        }\n      };\n    }\n  }, {\n    key: \"getOverrideValue\",\n    value: function getOverrideValue(section, overrideIdentifier) {\n      var overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);\n      return overrideContents ? section ? getConfigurationValue(overrideContents, section) : overrideContents : undefined;\n    }\n  }, {\n    key: \"override\",\n    value: function override(identifier) {\n      var overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n      if (!overrideConfigurationModel) {\n        overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n        this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n      }\n      return overrideConfigurationModel;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge() {\n      var _this = this;\n      var _a, _b;\n      var contents = objects.deepClone(this.contents);\n      var overrides = objects.deepClone(this.overrides);\n      var keys = _toConsumableArray(this.keys);\n      var raws = ((_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) ? _toConsumableArray(this.raw) : [this];\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n      for (var _i = 0, _others = others; _i < _others.length; _i++) {\n        var other = _others[_i];\n        raws.push.apply(raws, _toConsumableArray(((_b = other.raw) === null || _b === void 0 ? void 0 : _b.length) ? other.raw : [other]));\n        if (other.isEmpty()) {\n          continue;\n        }\n        this.mergeContents(contents, other.contents);\n        var _iterator2 = _createForOfIteratorHelper(other.overrides),\n          _step2;\n        try {\n          var _loop = function _loop() {\n            var otherOverride = _step2.value;\n            var _overrides$filter = overrides.filter(function (o) {\n                return arrays.equals(o.identifiers, otherOverride.identifiers);\n              }),\n              _overrides$filter2 = _slicedToArray(_overrides$filter, 1),\n              override = _overrides$filter2[0];\n            if (override) {\n              var _override$keys;\n              _this.mergeContents(override.contents, otherOverride.contents);\n              (_override$keys = override.keys).push.apply(_override$keys, _toConsumableArray(otherOverride.keys));\n              override.keys = arrays.distinct(override.keys);\n            } else {\n              overrides.push(objects.deepClone(otherOverride));\n            }\n          };\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            _loop();\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        var _iterator3 = _createForOfIteratorHelper(other.keys),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var key = _step3.value;\n            if (keys.indexOf(key) === -1) {\n              keys.push(key);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      return new ConfigurationModel(contents, keys, overrides, raws.every(function (raw) {\n        return raw instanceof ConfigurationModel;\n      }) ? undefined : raws);\n    }\n  }, {\n    key: \"createOverrideConfigurationModel\",\n    value: function createOverrideConfigurationModel(identifier) {\n      var overrideContents = this.getContentsForOverrideIdentifer(identifier);\n      if (!overrideContents || _typeof(overrideContents) !== 'object' || !Object.keys(overrideContents).length) {\n        // If there are no valid overrides, return self\n        return this;\n      }\n      var contents = {};\n      var _iterator4 = _createForOfIteratorHelper(arrays.distinct([].concat(_toConsumableArray(Object.keys(this.contents)), _toConsumableArray(Object.keys(overrideContents))))),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var key = _step4.value;\n          var contentsForKey = this.contents[key];\n          var overrideContentsForKey = overrideContents[key];\n          // If there are override contents for the key, clone and merge otherwise use base contents\n          if (overrideContentsForKey) {\n            // Clone and merge only if base contents and override contents are of type object otherwise just override\n            if (_typeof(contentsForKey) === 'object' && _typeof(overrideContentsForKey) === 'object') {\n              contentsForKey = objects.deepClone(contentsForKey);\n              this.mergeContents(contentsForKey, overrideContentsForKey);\n            } else {\n              contentsForKey = overrideContentsForKey;\n            }\n          }\n          contents[key] = contentsForKey;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return new ConfigurationModel(contents, this.keys, this.overrides);\n    }\n  }, {\n    key: \"mergeContents\",\n    value: function mergeContents(source, target) {\n      for (var _i2 = 0, _Object$keys = Object.keys(target); _i2 < _Object$keys.length; _i2++) {\n        var key = _Object$keys[_i2];\n        if (key in source) {\n          if (types.isObject(source[key]) && types.isObject(target[key])) {\n            this.mergeContents(source[key], target[key]);\n            continue;\n          }\n        }\n        source[key] = objects.deepClone(target[key]);\n      }\n    }\n  }, {\n    key: \"getContentsForOverrideIdentifer\",\n    value: function getContentsForOverrideIdentifer(identifier) {\n      var _this2 = this;\n      var contentsForIdentifierOnly = null;\n      var contents = null;\n      var mergeContents = function mergeContents(contentsToMerge) {\n        if (contentsToMerge) {\n          if (contents) {\n            _this2.mergeContents(contents, contentsToMerge);\n          } else {\n            contents = objects.deepClone(contentsToMerge);\n          }\n        }\n      };\n      var _iterator5 = _createForOfIteratorHelper(this.overrides),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var override = _step5.value;\n          if (override.identifiers.length === 1 && override.identifiers[0] === identifier) {\n            contentsForIdentifierOnly = override.contents;\n          } else if (override.identifiers.includes(identifier)) {\n            mergeContents(override.contents);\n          }\n        }\n        // Merge contents of the identifier only at the end to take precedence.\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      mergeContents(contentsForIdentifierOnly);\n      return contents;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        contents: this.contents,\n        overrides: this.overrides,\n        keys: this.keys\n      };\n    }\n    // Update methods\n  }, {\n    key: \"addValue\",\n    value: function addValue(key, value) {\n      this.updateValue(key, value, true);\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(key, value) {\n      this.updateValue(key, value, false);\n    }\n  }, {\n    key: \"removeValue\",\n    value: function removeValue(key) {\n      var index = this.keys.indexOf(key);\n      if (index === -1) {\n        return;\n      }\n      this.keys.splice(index, 1);\n      removeFromValueTree(this.contents, key);\n      if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        this.overrides.splice(this.overrides.findIndex(function (o) {\n          return arrays.equals(o.identifiers, overrideIdentifiersFromKey(key));\n        }), 1);\n      }\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(key, value, add) {\n      addToValueTree(this.contents, key, value, function (e) {\n        return console.error(e);\n      });\n      add = add || this.keys.indexOf(key) === -1;\n      if (add) {\n        this.keys.push(key);\n      }\n      if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        this.overrides.push({\n          identifiers: overrideIdentifiersFromKey(key),\n          keys: Object.keys(this.contents[key]),\n          contents: toValuesTree(this.contents[key], function (message) {\n            return console.error(message);\n          })\n        });\n      }\n    }\n  }]);\n}();\nexport var ConfigurationModelParser = /*#__PURE__*/function () {\n  function ConfigurationModelParser(_name) {\n    _classCallCheck(this, ConfigurationModelParser);\n    this._name = _name;\n    this._raw = null;\n    this._configurationModel = null;\n    this._restrictedConfigurations = [];\n  }\n  return _createClass(ConfigurationModelParser, [{\n    key: \"configurationModel\",\n    get: function get() {\n      return this._configurationModel || new ConfigurationModel();\n    }\n  }, {\n    key: \"parseRaw\",\n    value: function parseRaw(raw, options) {\n      this._raw = raw;\n      var _this$doParseRaw = this.doParseRaw(raw, options),\n        contents = _this$doParseRaw.contents,\n        keys = _this$doParseRaw.keys,\n        overrides = _this$doParseRaw.overrides,\n        restricted = _this$doParseRaw.restricted,\n        hasExcludedProperties = _this$doParseRaw.hasExcludedProperties;\n      this._configurationModel = new ConfigurationModel(contents, keys, overrides, hasExcludedProperties ? [raw] : undefined /* raw has not changed */);\n      this._restrictedConfigurations = restricted || [];\n    }\n  }, {\n    key: \"doParseRaw\",\n    value: function doParseRaw(raw, options) {\n      var _this3 = this;\n      var configurationProperties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n      var filtered = this.filter(raw, configurationProperties, true, options);\n      raw = filtered.raw;\n      var contents = toValuesTree(raw, function (message) {\n        return console.error(\"Conflict in settings file \".concat(_this3._name, \": \").concat(message));\n      });\n      var keys = Object.keys(raw);\n      var overrides = this.toOverrides(raw, function (message) {\n        return console.error(\"Conflict in settings file \".concat(_this3._name, \": \").concat(message));\n      });\n      return {\n        contents: contents,\n        keys: keys,\n        overrides: overrides,\n        restricted: filtered.restricted,\n        hasExcludedProperties: filtered.hasExcludedProperties\n      };\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(properties, configurationProperties, filterOverriddenProperties, options) {\n      var _a, _b, _c;\n      var hasExcludedProperties = false;\n      if (!(options === null || options === void 0 ? void 0 : options.scopes) && !(options === null || options === void 0 ? void 0 : options.skipRestricted) && !((_a = options === null || options === void 0 ? void 0 : options.exclude) === null || _a === void 0 ? void 0 : _a.length)) {\n        return {\n          raw: properties,\n          restricted: [],\n          hasExcludedProperties: hasExcludedProperties\n        };\n      }\n      var raw = {};\n      var restricted = [];\n      for (var key in properties) {\n        if (OVERRIDE_PROPERTY_REGEX.test(key) && filterOverriddenProperties) {\n          var result = this.filter(properties[key], configurationProperties, false, options);\n          raw[key] = result.raw;\n          hasExcludedProperties = hasExcludedProperties || result.hasExcludedProperties;\n          restricted.push.apply(restricted, _toConsumableArray(result.restricted));\n        } else {\n          var propertySchema = configurationProperties[key];\n          var scope = propertySchema ? typeof propertySchema.scope !== 'undefined' ? propertySchema.scope : 3 /* ConfigurationScope.WINDOW */ : undefined;\n          if (propertySchema === null || propertySchema === void 0 ? void 0 : propertySchema.restricted) {\n            restricted.push(key);\n          }\n          if (!((_b = options.exclude) === null || _b === void 0 ? void 0 : _b.includes(key)) /* Check exclude */ && (((_c = options.include) === null || _c === void 0 ? void 0 : _c.includes(key) /* Check include */) || (scope === undefined || options.scopes === undefined || options.scopes.includes(scope) /* Check scopes */) && !(options.skipRestricted && (propertySchema === null || propertySchema === void 0 ? void 0 : propertySchema.restricted)))) /* Check restricted */{\n              raw[key] = properties[key];\n            } else {\n            hasExcludedProperties = true;\n          }\n        }\n      }\n      return {\n        raw: raw,\n        restricted: restricted,\n        hasExcludedProperties: hasExcludedProperties\n      };\n    }\n  }, {\n    key: \"toOverrides\",\n    value: function toOverrides(raw, conflictReporter) {\n      var overrides = [];\n      for (var _i3 = 0, _Object$keys2 = Object.keys(raw); _i3 < _Object$keys2.length; _i3++) {\n        var key = _Object$keys2[_i3];\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n          var overrideRaw = {};\n          for (var keyInOverrideRaw in raw[key]) {\n            overrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];\n          }\n          overrides.push({\n            identifiers: overrideIdentifiersFromKey(key),\n            keys: Object.keys(overrideRaw),\n            contents: toValuesTree(overrideRaw, conflictReporter)\n          });\n        }\n      }\n      return overrides;\n    }\n  }]);\n}();\nvar ConfigurationInspectValue = /*#__PURE__*/function () {\n  function ConfigurationInspectValue(key, overrides, _value, overrideIdentifiers, defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, localUserConfiguration, remoteUserConfiguration, workspaceConfiguration, folderConfigurationModel, memoryConfigurationModel) {\n    _classCallCheck(this, ConfigurationInspectValue);\n    this.key = key;\n    this.overrides = overrides;\n    this._value = _value;\n    this.overrideIdentifiers = overrideIdentifiers;\n    this.defaultConfiguration = defaultConfiguration;\n    this.policyConfiguration = policyConfiguration;\n    this.applicationConfiguration = applicationConfiguration;\n    this.userConfiguration = userConfiguration;\n    this.localUserConfiguration = localUserConfiguration;\n    this.remoteUserConfiguration = remoteUserConfiguration;\n    this.workspaceConfiguration = workspaceConfiguration;\n    this.folderConfigurationModel = folderConfigurationModel;\n    this.memoryConfigurationModel = memoryConfigurationModel;\n  }\n  return _createClass(ConfigurationInspectValue, [{\n    key: \"toInspectValue\",\n    value: function toInspectValue(inspectValue) {\n      return (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.value) !== undefined || (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.override) !== undefined || (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.overrides) !== undefined ? inspectValue : undefined;\n    }\n  }, {\n    key: \"userInspectValue\",\n    get: function get() {\n      if (!this._userInspectValue) {\n        this._userInspectValue = this.userConfiguration.inspect(this.key, this.overrides.overrideIdentifier);\n      }\n      return this._userInspectValue;\n    }\n  }, {\n    key: \"user\",\n    get: function get() {\n      return this.toInspectValue(this.userInspectValue);\n    }\n  }]);\n}();\nexport var Configuration = /*#__PURE__*/function () {\n  function Configuration(_defaultConfiguration, _policyConfiguration, _applicationConfiguration, _localUserConfiguration) {\n    var _remoteUserConfiguration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new ConfigurationModel();\n    var _workspaceConfiguration = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new ConfigurationModel();\n    var _folderConfigurations = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ResourceMap();\n    var _memoryConfiguration = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : new ConfigurationModel();\n    var _memoryConfigurationByResource = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : new ResourceMap();\n    _classCallCheck(this, Configuration);\n    this._defaultConfiguration = _defaultConfiguration;\n    this._policyConfiguration = _policyConfiguration;\n    this._applicationConfiguration = _applicationConfiguration;\n    this._localUserConfiguration = _localUserConfiguration;\n    this._remoteUserConfiguration = _remoteUserConfiguration;\n    this._workspaceConfiguration = _workspaceConfiguration;\n    this._folderConfigurations = _folderConfigurations;\n    this._memoryConfiguration = _memoryConfiguration;\n    this._memoryConfigurationByResource = _memoryConfigurationByResource;\n    this._workspaceConsolidatedConfiguration = null;\n    this._foldersConsolidatedConfigurations = new ResourceMap();\n    this._userConfiguration = null;\n  }\n  return _createClass(Configuration, [{\n    key: \"getValue\",\n    value: function getValue(section, overrides, workspace) {\n      var consolidateConfigurationModel = this.getConsolidatedConfigurationModel(section, overrides, workspace);\n      return consolidateConfigurationModel.getValue(section);\n    }\n  }, {\n    key: \"updateValue\",\n    value: function updateValue(key, value) {\n      var overrides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var memoryConfiguration;\n      if (overrides.resource) {\n        memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n        if (!memoryConfiguration) {\n          memoryConfiguration = new ConfigurationModel();\n          this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n        }\n      } else {\n        memoryConfiguration = this._memoryConfiguration;\n      }\n      if (value === undefined) {\n        memoryConfiguration.removeValue(key);\n      } else {\n        memoryConfiguration.setValue(key, value);\n      }\n      if (!overrides.resource) {\n        this._workspaceConsolidatedConfiguration = null;\n      }\n    }\n  }, {\n    key: \"inspect\",\n    value: function inspect(key, overrides, workspace) {\n      var consolidateConfigurationModel = this.getConsolidatedConfigurationModel(key, overrides, workspace);\n      var folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n      var memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n      var overrideIdentifiers = new Set();\n      var _iterator6 = _createForOfIteratorHelper(consolidateConfigurationModel.overrides),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var override = _step6.value;\n          var _iterator7 = _createForOfIteratorHelper(override.identifiers),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var overrideIdentifier = _step7.value;\n              if (consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined) {\n                overrideIdentifiers.add(overrideIdentifier);\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return new ConfigurationInspectValue(key, overrides, consolidateConfigurationModel.getValue(key), overrideIdentifiers.size ? _toConsumableArray(overrideIdentifiers) : undefined, this._defaultConfiguration, this._policyConfiguration.isEmpty() ? undefined : this._policyConfiguration, this.applicationConfiguration.isEmpty() ? undefined : this.applicationConfiguration, this.userConfiguration, this.localUserConfiguration, this.remoteUserConfiguration, workspace ? this._workspaceConfiguration : undefined, folderConfigurationModel ? folderConfigurationModel : undefined, memoryConfigurationModel);\n    }\n  }, {\n    key: \"applicationConfiguration\",\n    get: function get() {\n      return this._applicationConfiguration;\n    }\n  }, {\n    key: \"userConfiguration\",\n    get: function get() {\n      if (!this._userConfiguration) {\n        this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n      }\n      return this._userConfiguration;\n    }\n  }, {\n    key: \"localUserConfiguration\",\n    get: function get() {\n      return this._localUserConfiguration;\n    }\n  }, {\n    key: \"remoteUserConfiguration\",\n    get: function get() {\n      return this._remoteUserConfiguration;\n    }\n  }, {\n    key: \"getConsolidatedConfigurationModel\",\n    value: function getConsolidatedConfigurationModel(section, overrides, workspace) {\n      var configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n      if (overrides.overrideIdentifier) {\n        configurationModel = configurationModel.override(overrides.overrideIdentifier);\n      }\n      if (!this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(section) !== undefined) {\n        configurationModel = configurationModel.merge(this._policyConfiguration);\n      }\n      return configurationModel;\n    }\n  }, {\n    key: \"getConsolidatedConfigurationModelForResource\",\n    value: function getConsolidatedConfigurationModelForResource(_ref, workspace) {\n      var resource = _ref.resource;\n      var consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n      if (workspace && resource) {\n        var root = workspace.getFolder(resource);\n        if (root) {\n          consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n        }\n        var memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n        if (memoryConfigurationForResource) {\n          consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n        }\n      }\n      return consolidateConfiguration;\n    }\n  }, {\n    key: \"getWorkspaceConsolidatedConfiguration\",\n    value: function getWorkspaceConsolidatedConfiguration() {\n      if (!this._workspaceConsolidatedConfiguration) {\n        this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n      }\n      return this._workspaceConsolidatedConfiguration;\n    }\n  }, {\n    key: \"getFolderConsolidatedConfiguration\",\n    value: function getFolderConsolidatedConfiguration(folder) {\n      var folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n      if (!folderConsolidatedConfiguration) {\n        var workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n        var folderConfiguration = this._folderConfigurations.get(folder);\n        if (folderConfiguration) {\n          folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n          this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n        } else {\n          folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n        }\n      }\n      return folderConsolidatedConfiguration;\n    }\n  }, {\n    key: \"getFolderConfigurationModelForResource\",\n    value: function getFolderConfigurationModelForResource(resource, workspace) {\n      if (workspace && resource) {\n        var root = workspace.getFolder(resource);\n        if (root) {\n          return this._folderConfigurations.get(root.uri);\n        }\n      }\n      return undefined;\n    }\n  }, {\n    key: \"toData\",\n    value: function toData() {\n      var _this4 = this;\n      return {\n        defaults: {\n          contents: this._defaultConfiguration.contents,\n          overrides: this._defaultConfiguration.overrides,\n          keys: this._defaultConfiguration.keys\n        },\n        policy: {\n          contents: this._policyConfiguration.contents,\n          overrides: this._policyConfiguration.overrides,\n          keys: this._policyConfiguration.keys\n        },\n        application: {\n          contents: this.applicationConfiguration.contents,\n          overrides: this.applicationConfiguration.overrides,\n          keys: this.applicationConfiguration.keys\n        },\n        user: {\n          contents: this.userConfiguration.contents,\n          overrides: this.userConfiguration.overrides,\n          keys: this.userConfiguration.keys\n        },\n        workspace: {\n          contents: this._workspaceConfiguration.contents,\n          overrides: this._workspaceConfiguration.overrides,\n          keys: this._workspaceConfiguration.keys\n        },\n        folders: _toConsumableArray(this._folderConfigurations.keys()).reduce(function (result, folder) {\n          var _this4$_folderConfigu = _this4._folderConfigurations.get(folder),\n            contents = _this4$_folderConfigu.contents,\n            overrides = _this4$_folderConfigu.overrides,\n            keys = _this4$_folderConfigu.keys;\n          result.push([folder, {\n            contents: contents,\n            overrides: overrides,\n            keys: keys\n          }]);\n          return result;\n        }, [])\n      };\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(data) {\n      var _this5 = this;\n      var defaultConfiguration = this.parseConfigurationModel(data.defaults);\n      var policyConfiguration = this.parseConfigurationModel(data.policy);\n      var applicationConfiguration = this.parseConfigurationModel(data.application);\n      var userConfiguration = this.parseConfigurationModel(data.user);\n      var workspaceConfiguration = this.parseConfigurationModel(data.workspace);\n      var folders = data.folders.reduce(function (result, value) {\n        result.set(URI.revive(value[0]), _this5.parseConfigurationModel(value[1]));\n        return result;\n      }, new ResourceMap());\n      return new Configuration(defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap());\n    }\n  }, {\n    key: \"parseConfigurationModel\",\n    value: function parseConfigurationModel(model) {\n      return new ConfigurationModel(model.contents, model.keys, model.overrides);\n    }\n  }]);\n}();\nexport var ConfigurationChangeEvent = /*#__PURE__*/function () {\n  function ConfigurationChangeEvent(change, previous, currentConfiguraiton, currentWorkspace) {\n    _classCallCheck(this, ConfigurationChangeEvent);\n    this.change = change;\n    this.previous = previous;\n    this.currentConfiguraiton = currentConfiguraiton;\n    this.currentWorkspace = currentWorkspace;\n    this._marker = '\\n';\n    this._markerCode1 = this._marker.charCodeAt(0);\n    this._markerCode2 = '.'.charCodeAt(0);\n    this.affectedKeys = new Set();\n    this._previousConfiguration = undefined;\n    var _iterator8 = _createForOfIteratorHelper(change.keys),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var key = _step8.value;\n        this.affectedKeys.add(key);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    var _iterator9 = _createForOfIteratorHelper(change.overrides),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _step9$value = _slicedToArray(_step9.value, 2),\n          keys = _step9$value[1];\n        var _iterator11 = _createForOfIteratorHelper(keys),\n          _step11;\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var _key2 = _step11.value;\n            this.affectedKeys.add(_key2);\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      }\n      // Example: '\\nfoo.bar\\nabc.def\\n'\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    this._affectsConfigStr = this._marker;\n    var _iterator10 = _createForOfIteratorHelper(this.affectedKeys),\n      _step10;\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        var _key3 = _step10.value;\n        this._affectsConfigStr += _key3 + this._marker;\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n  }\n  return _createClass(ConfigurationChangeEvent, [{\n    key: \"previousConfiguration\",\n    get: function get() {\n      if (!this._previousConfiguration && this.previous) {\n        this._previousConfiguration = Configuration.parse(this.previous.data);\n      }\n      return this._previousConfiguration;\n    }\n  }, {\n    key: \"affectsConfiguration\",\n    value: function affectsConfiguration(section, overrides) {\n      var _a;\n      // we have one large string with all keys that have changed. we pad (marker) the section\n      // and check that either find it padded or before a segment character\n      var needle = this._marker + section;\n      var idx = this._affectsConfigStr.indexOf(needle);\n      if (idx < 0) {\n        // NOT: (marker + section)\n        return false;\n      }\n      var pos = idx + needle.length;\n      if (pos >= this._affectsConfigStr.length) {\n        return false;\n      }\n      var code = this._affectsConfigStr.charCodeAt(pos);\n      if (code !== this._markerCode1 && code !== this._markerCode2) {\n        // NOT: section + (marker | segment)\n        return false;\n      }\n      if (overrides) {\n        var value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n        var value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n        return !objects.equals(value1, value2);\n      }\n      return true;\n    }\n  }]);\n}();","map":{"version":3,"names":["arrays","ResourceMap","objects","types","URI","addToValueTree","getConfigurationValue","removeFromValueTree","toValuesTree","Extensions","overrideIdentifiersFromKey","OVERRIDE_PROPERTY_REGEX","Registry","freeze","data","Object","isFrozen","deepFreeze","ConfigurationModel","_contents","arguments","length","undefined","_keys","_overrides","raw","_classCallCheck","overrideConfigurations","Map","_createClass","key","get","_a","_rawConfiguration","rawConfigurationModels","map","parser","ConfigurationModelParser","parseRaw","configurationModel","reduce","previous","current","merge","value","isEmpty","keys","getValue","section","contents","inspect","overrideIdentifier","that","rawConfiguration","override","getOverrideValue","merged","overrides","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","identifiers","push","err","e","f","overrideContents","getContentsForOverrideIdentifer","identifier","overrideConfigurationModel","createOverrideConfigurationModel","set","_this","_b","deepClone","_toConsumableArray","raws","_len","others","Array","_key","_i","_others","other","apply","mergeContents","_iterator2","_step2","_loop","otherOverride","_overrides$filter","filter","o","equals","_overrides$filter2","_slicedToArray","_override$keys","distinct","_iterator3","_step3","indexOf","every","_typeof","_iterator4","concat","_step4","contentsForKey","overrideContentsForKey","source","target","_i2","_Object$keys","isObject","_this2","contentsForIdentifierOnly","contentsToMerge","_iterator5","_step5","includes","toJSON","addValue","updateValue","setValue","removeValue","index","splice","test","findIndex","add","console","error","message","_name","_raw","_configurationModel","_restrictedConfigurations","options","_this$doParseRaw","doParseRaw","restricted","hasExcludedProperties","_this3","configurationProperties","as","Configuration","getConfigurationProperties","filtered","toOverrides","properties","filterOverriddenProperties","_c","scopes","skipRestricted","exclude","result","propertySchema","scope","include","conflictReporter","_i3","_Object$keys2","overrideRaw","keyInOverrideRaw","ConfigurationInspectValue","_value","overrideIdentifiers","defaultConfiguration","policyConfiguration","applicationConfiguration","userConfiguration","localUserConfiguration","remoteUserConfiguration","workspaceConfiguration","folderConfigurationModel","memoryConfigurationModel","toInspectValue","inspectValue","_userInspectValue","userInspectValue","_defaultConfiguration","_policyConfiguration","_applicationConfiguration","_localUserConfiguration","_remoteUserConfiguration","_workspaceConfiguration","_folderConfigurations","_memoryConfiguration","_memoryConfigurationByResource","_workspaceConsolidatedConfiguration","_foldersConsolidatedConfigurations","_userConfiguration","workspace","consolidateConfigurationModel","getConsolidatedConfigurationModel","memoryConfiguration","resource","getFolderConfigurationModelForResource","Set","_iterator6","_step6","_iterator7","_step7","size","getConsolidatedConfigurationModelForResource","_ref","consolidateConfiguration","getWorkspaceConsolidatedConfiguration","root","getFolder","getFolderConsolidatedConfiguration","uri","memoryConfigurationForResource","folder","folderConsolidatedConfiguration","workspaceConsolidateConfiguration","folderConfiguration","toData","_this4","defaults","policy","application","user","folders","_this4$_folderConfigu","parse","_this5","parseConfigurationModel","revive","model","ConfigurationChangeEvent","change","currentConfiguraiton","currentWorkspace","_marker","_markerCode1","charCodeAt","_markerCode2","affectedKeys","_previousConfiguration","_iterator8","_step8","_iterator9","_step9","_step9$value","_iterator11","_step11","_affectsConfigStr","_iterator10","_step10","affectsConfiguration","needle","idx","pos","code","value1","previousConfiguration","value2"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationModels.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as arrays from '../../../base/common/arrays.js';\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as types from '../../../base/common/types.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { addToValueTree, getConfigurationValue, removeFromValueTree, toValuesTree } from './configuration.js';\nimport { Extensions, overrideIdentifiersFromKey, OVERRIDE_PROPERTY_REGEX } from './configurationRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nfunction freeze(data) {\n    return Object.isFrozen(data) ? data : objects.deepFreeze(data);\n}\nexport class ConfigurationModel {\n    constructor(_contents = {}, _keys = [], _overrides = [], raw) {\n        this._contents = _contents;\n        this._keys = _keys;\n        this._overrides = _overrides;\n        this.raw = raw;\n        this.overrideConfigurations = new Map();\n    }\n    get rawConfiguration() {\n        var _a;\n        if (!this._rawConfiguration) {\n            if ((_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) {\n                const rawConfigurationModels = this.raw.map(raw => {\n                    if (raw instanceof ConfigurationModel) {\n                        return raw;\n                    }\n                    const parser = new ConfigurationModelParser('');\n                    parser.parseRaw(raw);\n                    return parser.configurationModel;\n                });\n                this._rawConfiguration = rawConfigurationModels.reduce((previous, current) => current === previous ? current : previous.merge(current), rawConfigurationModels[0]);\n            }\n            else {\n                // raw is same as current\n                this._rawConfiguration = this;\n            }\n        }\n        return this._rawConfiguration;\n    }\n    get contents() {\n        return this._contents;\n    }\n    get overrides() {\n        return this._overrides;\n    }\n    get keys() {\n        return this._keys;\n    }\n    isEmpty() {\n        return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n    }\n    getValue(section) {\n        return section ? getConfigurationValue(this.contents, section) : this.contents;\n    }\n    inspect(section, overrideIdentifier) {\n        const that = this;\n        return {\n            get value() {\n                return freeze(that.rawConfiguration.getValue(section));\n            },\n            get override() {\n                return overrideIdentifier ? freeze(that.rawConfiguration.getOverrideValue(section, overrideIdentifier)) : undefined;\n            },\n            get merged() {\n                return freeze(overrideIdentifier ? that.rawConfiguration.override(overrideIdentifier).getValue(section) : that.rawConfiguration.getValue(section));\n            },\n            get overrides() {\n                const overrides = [];\n                for (const { contents, identifiers, keys } of that.rawConfiguration.overrides) {\n                    const value = new ConfigurationModel(contents, keys).getValue(section);\n                    if (value !== undefined) {\n                        overrides.push({ identifiers, value });\n                    }\n                }\n                return overrides.length ? freeze(overrides) : undefined;\n            }\n        };\n    }\n    getOverrideValue(section, overrideIdentifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);\n        return overrideContents\n            ? section ? getConfigurationValue(overrideContents, section) : overrideContents\n            : undefined;\n    }\n    override(identifier) {\n        let overrideConfigurationModel = this.overrideConfigurations.get(identifier);\n        if (!overrideConfigurationModel) {\n            overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);\n            this.overrideConfigurations.set(identifier, overrideConfigurationModel);\n        }\n        return overrideConfigurationModel;\n    }\n    merge(...others) {\n        var _a, _b;\n        const contents = objects.deepClone(this.contents);\n        const overrides = objects.deepClone(this.overrides);\n        const keys = [...this.keys];\n        const raws = ((_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) ? [...this.raw] : [this];\n        for (const other of others) {\n            raws.push(...(((_b = other.raw) === null || _b === void 0 ? void 0 : _b.length) ? other.raw : [other]));\n            if (other.isEmpty()) {\n                continue;\n            }\n            this.mergeContents(contents, other.contents);\n            for (const otherOverride of other.overrides) {\n                const [override] = overrides.filter(o => arrays.equals(o.identifiers, otherOverride.identifiers));\n                if (override) {\n                    this.mergeContents(override.contents, otherOverride.contents);\n                    override.keys.push(...otherOverride.keys);\n                    override.keys = arrays.distinct(override.keys);\n                }\n                else {\n                    overrides.push(objects.deepClone(otherOverride));\n                }\n            }\n            for (const key of other.keys) {\n                if (keys.indexOf(key) === -1) {\n                    keys.push(key);\n                }\n            }\n        }\n        return new ConfigurationModel(contents, keys, overrides, raws.every(raw => raw instanceof ConfigurationModel) ? undefined : raws);\n    }\n    createOverrideConfigurationModel(identifier) {\n        const overrideContents = this.getContentsForOverrideIdentifer(identifier);\n        if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n            // If there are no valid overrides, return self\n            return this;\n        }\n        const contents = {};\n        for (const key of arrays.distinct([...Object.keys(this.contents), ...Object.keys(overrideContents)])) {\n            let contentsForKey = this.contents[key];\n            const overrideContentsForKey = overrideContents[key];\n            // If there are override contents for the key, clone and merge otherwise use base contents\n            if (overrideContentsForKey) {\n                // Clone and merge only if base contents and override contents are of type object otherwise just override\n                if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n                    contentsForKey = objects.deepClone(contentsForKey);\n                    this.mergeContents(contentsForKey, overrideContentsForKey);\n                }\n                else {\n                    contentsForKey = overrideContentsForKey;\n                }\n            }\n            contents[key] = contentsForKey;\n        }\n        return new ConfigurationModel(contents, this.keys, this.overrides);\n    }\n    mergeContents(source, target) {\n        for (const key of Object.keys(target)) {\n            if (key in source) {\n                if (types.isObject(source[key]) && types.isObject(target[key])) {\n                    this.mergeContents(source[key], target[key]);\n                    continue;\n                }\n            }\n            source[key] = objects.deepClone(target[key]);\n        }\n    }\n    getContentsForOverrideIdentifer(identifier) {\n        let contentsForIdentifierOnly = null;\n        let contents = null;\n        const mergeContents = (contentsToMerge) => {\n            if (contentsToMerge) {\n                if (contents) {\n                    this.mergeContents(contents, contentsToMerge);\n                }\n                else {\n                    contents = objects.deepClone(contentsToMerge);\n                }\n            }\n        };\n        for (const override of this.overrides) {\n            if (override.identifiers.length === 1 && override.identifiers[0] === identifier) {\n                contentsForIdentifierOnly = override.contents;\n            }\n            else if (override.identifiers.includes(identifier)) {\n                mergeContents(override.contents);\n            }\n        }\n        // Merge contents of the identifier only at the end to take precedence.\n        mergeContents(contentsForIdentifierOnly);\n        return contents;\n    }\n    toJSON() {\n        return {\n            contents: this.contents,\n            overrides: this.overrides,\n            keys: this.keys\n        };\n    }\n    // Update methods\n    addValue(key, value) {\n        this.updateValue(key, value, true);\n    }\n    setValue(key, value) {\n        this.updateValue(key, value, false);\n    }\n    removeValue(key) {\n        const index = this.keys.indexOf(key);\n        if (index === -1) {\n            return;\n        }\n        this.keys.splice(index, 1);\n        removeFromValueTree(this.contents, key);\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n            this.overrides.splice(this.overrides.findIndex(o => arrays.equals(o.identifiers, overrideIdentifiersFromKey(key))), 1);\n        }\n    }\n    updateValue(key, value, add) {\n        addToValueTree(this.contents, key, value, e => console.error(e));\n        add = add || this.keys.indexOf(key) === -1;\n        if (add) {\n            this.keys.push(key);\n        }\n        if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n            this.overrides.push({\n                identifiers: overrideIdentifiersFromKey(key),\n                keys: Object.keys(this.contents[key]),\n                contents: toValuesTree(this.contents[key], message => console.error(message)),\n            });\n        }\n    }\n}\nexport class ConfigurationModelParser {\n    constructor(_name) {\n        this._name = _name;\n        this._raw = null;\n        this._configurationModel = null;\n        this._restrictedConfigurations = [];\n    }\n    get configurationModel() {\n        return this._configurationModel || new ConfigurationModel();\n    }\n    parseRaw(raw, options) {\n        this._raw = raw;\n        const { contents, keys, overrides, restricted, hasExcludedProperties } = this.doParseRaw(raw, options);\n        this._configurationModel = new ConfigurationModel(contents, keys, overrides, hasExcludedProperties ? [raw] : undefined /* raw has not changed */);\n        this._restrictedConfigurations = restricted || [];\n    }\n    doParseRaw(raw, options) {\n        const configurationProperties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n        const filtered = this.filter(raw, configurationProperties, true, options);\n        raw = filtered.raw;\n        const contents = toValuesTree(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n        const keys = Object.keys(raw);\n        const overrides = this.toOverrides(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n        return { contents, keys, overrides, restricted: filtered.restricted, hasExcludedProperties: filtered.hasExcludedProperties };\n    }\n    filter(properties, configurationProperties, filterOverriddenProperties, options) {\n        var _a, _b, _c;\n        let hasExcludedProperties = false;\n        if (!(options === null || options === void 0 ? void 0 : options.scopes) && !(options === null || options === void 0 ? void 0 : options.skipRestricted) && !((_a = options === null || options === void 0 ? void 0 : options.exclude) === null || _a === void 0 ? void 0 : _a.length)) {\n            return { raw: properties, restricted: [], hasExcludedProperties };\n        }\n        const raw = {};\n        const restricted = [];\n        for (const key in properties) {\n            if (OVERRIDE_PROPERTY_REGEX.test(key) && filterOverriddenProperties) {\n                const result = this.filter(properties[key], configurationProperties, false, options);\n                raw[key] = result.raw;\n                hasExcludedProperties = hasExcludedProperties || result.hasExcludedProperties;\n                restricted.push(...result.restricted);\n            }\n            else {\n                const propertySchema = configurationProperties[key];\n                const scope = propertySchema ? typeof propertySchema.scope !== 'undefined' ? propertySchema.scope : 3 /* ConfigurationScope.WINDOW */ : undefined;\n                if (propertySchema === null || propertySchema === void 0 ? void 0 : propertySchema.restricted) {\n                    restricted.push(key);\n                }\n                if (!((_b = options.exclude) === null || _b === void 0 ? void 0 : _b.includes(key)) /* Check exclude */\n                    && (((_c = options.include) === null || _c === void 0 ? void 0 : _c.includes(key) /* Check include */)\n                        || ((scope === undefined || options.scopes === undefined || options.scopes.includes(scope)) /* Check scopes */\n                            && !(options.skipRestricted && (propertySchema === null || propertySchema === void 0 ? void 0 : propertySchema.restricted))))) /* Check restricted */ {\n                    raw[key] = properties[key];\n                }\n                else {\n                    hasExcludedProperties = true;\n                }\n            }\n        }\n        return { raw, restricted, hasExcludedProperties };\n    }\n    toOverrides(raw, conflictReporter) {\n        const overrides = [];\n        for (const key of Object.keys(raw)) {\n            if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                const overrideRaw = {};\n                for (const keyInOverrideRaw in raw[key]) {\n                    overrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];\n                }\n                overrides.push({\n                    identifiers: overrideIdentifiersFromKey(key),\n                    keys: Object.keys(overrideRaw),\n                    contents: toValuesTree(overrideRaw, conflictReporter)\n                });\n            }\n        }\n        return overrides;\n    }\n}\nclass ConfigurationInspectValue {\n    constructor(key, overrides, _value, overrideIdentifiers, defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, localUserConfiguration, remoteUserConfiguration, workspaceConfiguration, folderConfigurationModel, memoryConfigurationModel) {\n        this.key = key;\n        this.overrides = overrides;\n        this._value = _value;\n        this.overrideIdentifiers = overrideIdentifiers;\n        this.defaultConfiguration = defaultConfiguration;\n        this.policyConfiguration = policyConfiguration;\n        this.applicationConfiguration = applicationConfiguration;\n        this.userConfiguration = userConfiguration;\n        this.localUserConfiguration = localUserConfiguration;\n        this.remoteUserConfiguration = remoteUserConfiguration;\n        this.workspaceConfiguration = workspaceConfiguration;\n        this.folderConfigurationModel = folderConfigurationModel;\n        this.memoryConfigurationModel = memoryConfigurationModel;\n    }\n    toInspectValue(inspectValue) {\n        return (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.value) !== undefined || (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.override) !== undefined || (inspectValue === null || inspectValue === void 0 ? void 0 : inspectValue.overrides) !== undefined ? inspectValue : undefined;\n    }\n    get userInspectValue() {\n        if (!this._userInspectValue) {\n            this._userInspectValue = this.userConfiguration.inspect(this.key, this.overrides.overrideIdentifier);\n        }\n        return this._userInspectValue;\n    }\n    get user() {\n        return this.toInspectValue(this.userInspectValue);\n    }\n}\nexport class Configuration {\n    constructor(_defaultConfiguration, _policyConfiguration, _applicationConfiguration, _localUserConfiguration, _remoteUserConfiguration = new ConfigurationModel(), _workspaceConfiguration = new ConfigurationModel(), _folderConfigurations = new ResourceMap(), _memoryConfiguration = new ConfigurationModel(), _memoryConfigurationByResource = new ResourceMap()) {\n        this._defaultConfiguration = _defaultConfiguration;\n        this._policyConfiguration = _policyConfiguration;\n        this._applicationConfiguration = _applicationConfiguration;\n        this._localUserConfiguration = _localUserConfiguration;\n        this._remoteUserConfiguration = _remoteUserConfiguration;\n        this._workspaceConfiguration = _workspaceConfiguration;\n        this._folderConfigurations = _folderConfigurations;\n        this._memoryConfiguration = _memoryConfiguration;\n        this._memoryConfigurationByResource = _memoryConfigurationByResource;\n        this._workspaceConsolidatedConfiguration = null;\n        this._foldersConsolidatedConfigurations = new ResourceMap();\n        this._userConfiguration = null;\n    }\n    getValue(section, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(section, overrides, workspace);\n        return consolidateConfigurationModel.getValue(section);\n    }\n    updateValue(key, value, overrides = {}) {\n        let memoryConfiguration;\n        if (overrides.resource) {\n            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n            if (!memoryConfiguration) {\n                memoryConfiguration = new ConfigurationModel();\n                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n            }\n        }\n        else {\n            memoryConfiguration = this._memoryConfiguration;\n        }\n        if (value === undefined) {\n            memoryConfiguration.removeValue(key);\n        }\n        else {\n            memoryConfiguration.setValue(key, value);\n        }\n        if (!overrides.resource) {\n            this._workspaceConsolidatedConfiguration = null;\n        }\n    }\n    inspect(key, overrides, workspace) {\n        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(key, overrides, workspace);\n        const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n        const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n        const overrideIdentifiers = new Set();\n        for (const override of consolidateConfigurationModel.overrides) {\n            for (const overrideIdentifier of override.identifiers) {\n                if (consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined) {\n                    overrideIdentifiers.add(overrideIdentifier);\n                }\n            }\n        }\n        return new ConfigurationInspectValue(key, overrides, consolidateConfigurationModel.getValue(key), overrideIdentifiers.size ? [...overrideIdentifiers] : undefined, this._defaultConfiguration, this._policyConfiguration.isEmpty() ? undefined : this._policyConfiguration, this.applicationConfiguration.isEmpty() ? undefined : this.applicationConfiguration, this.userConfiguration, this.localUserConfiguration, this.remoteUserConfiguration, workspace ? this._workspaceConfiguration : undefined, folderConfigurationModel ? folderConfigurationModel : undefined, memoryConfigurationModel);\n    }\n    get applicationConfiguration() {\n        return this._applicationConfiguration;\n    }\n    get userConfiguration() {\n        if (!this._userConfiguration) {\n            this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n        }\n        return this._userConfiguration;\n    }\n    get localUserConfiguration() {\n        return this._localUserConfiguration;\n    }\n    get remoteUserConfiguration() {\n        return this._remoteUserConfiguration;\n    }\n    getConsolidatedConfigurationModel(section, overrides, workspace) {\n        let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n        if (overrides.overrideIdentifier) {\n            configurationModel = configurationModel.override(overrides.overrideIdentifier);\n        }\n        if (!this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(section) !== undefined) {\n            configurationModel = configurationModel.merge(this._policyConfiguration);\n        }\n        return configurationModel;\n    }\n    getConsolidatedConfigurationModelForResource({ resource }, workspace) {\n        let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n            }\n            const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n            if (memoryConfigurationForResource) {\n                consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n            }\n        }\n        return consolidateConfiguration;\n    }\n    getWorkspaceConsolidatedConfiguration() {\n        if (!this._workspaceConsolidatedConfiguration) {\n            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n        }\n        return this._workspaceConsolidatedConfiguration;\n    }\n    getFolderConsolidatedConfiguration(folder) {\n        let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n        if (!folderConsolidatedConfiguration) {\n            const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n            const folderConfiguration = this._folderConfigurations.get(folder);\n            if (folderConfiguration) {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n                this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n            }\n            else {\n                folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n            }\n        }\n        return folderConsolidatedConfiguration;\n    }\n    getFolderConfigurationModelForResource(resource, workspace) {\n        if (workspace && resource) {\n            const root = workspace.getFolder(resource);\n            if (root) {\n                return this._folderConfigurations.get(root.uri);\n            }\n        }\n        return undefined;\n    }\n    toData() {\n        return {\n            defaults: {\n                contents: this._defaultConfiguration.contents,\n                overrides: this._defaultConfiguration.overrides,\n                keys: this._defaultConfiguration.keys\n            },\n            policy: {\n                contents: this._policyConfiguration.contents,\n                overrides: this._policyConfiguration.overrides,\n                keys: this._policyConfiguration.keys\n            },\n            application: {\n                contents: this.applicationConfiguration.contents,\n                overrides: this.applicationConfiguration.overrides,\n                keys: this.applicationConfiguration.keys\n            },\n            user: {\n                contents: this.userConfiguration.contents,\n                overrides: this.userConfiguration.overrides,\n                keys: this.userConfiguration.keys\n            },\n            workspace: {\n                contents: this._workspaceConfiguration.contents,\n                overrides: this._workspaceConfiguration.overrides,\n                keys: this._workspaceConfiguration.keys\n            },\n            folders: [...this._folderConfigurations.keys()].reduce((result, folder) => {\n                const { contents, overrides, keys } = this._folderConfigurations.get(folder);\n                result.push([folder, { contents, overrides, keys }]);\n                return result;\n            }, [])\n        };\n    }\n    static parse(data) {\n        const defaultConfiguration = this.parseConfigurationModel(data.defaults);\n        const policyConfiguration = this.parseConfigurationModel(data.policy);\n        const applicationConfiguration = this.parseConfigurationModel(data.application);\n        const userConfiguration = this.parseConfigurationModel(data.user);\n        const workspaceConfiguration = this.parseConfigurationModel(data.workspace);\n        const folders = data.folders.reduce((result, value) => {\n            result.set(URI.revive(value[0]), this.parseConfigurationModel(value[1]));\n            return result;\n        }, new ResourceMap());\n        return new Configuration(defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, new ConfigurationModel(), workspaceConfiguration, folders, new ConfigurationModel(), new ResourceMap());\n    }\n    static parseConfigurationModel(model) {\n        return new ConfigurationModel(model.contents, model.keys, model.overrides);\n    }\n}\nexport class ConfigurationChangeEvent {\n    constructor(change, previous, currentConfiguraiton, currentWorkspace) {\n        this.change = change;\n        this.previous = previous;\n        this.currentConfiguraiton = currentConfiguraiton;\n        this.currentWorkspace = currentWorkspace;\n        this._marker = '\\n';\n        this._markerCode1 = this._marker.charCodeAt(0);\n        this._markerCode2 = '.'.charCodeAt(0);\n        this.affectedKeys = new Set();\n        this._previousConfiguration = undefined;\n        for (const key of change.keys) {\n            this.affectedKeys.add(key);\n        }\n        for (const [, keys] of change.overrides) {\n            for (const key of keys) {\n                this.affectedKeys.add(key);\n            }\n        }\n        // Example: '\\nfoo.bar\\nabc.def\\n'\n        this._affectsConfigStr = this._marker;\n        for (const key of this.affectedKeys) {\n            this._affectsConfigStr += key + this._marker;\n        }\n    }\n    get previousConfiguration() {\n        if (!this._previousConfiguration && this.previous) {\n            this._previousConfiguration = Configuration.parse(this.previous.data);\n        }\n        return this._previousConfiguration;\n    }\n    affectsConfiguration(section, overrides) {\n        var _a;\n        // we have one large string with all keys that have changed. we pad (marker) the section\n        // and check that either find it padded or before a segment character\n        const needle = this._marker + section;\n        const idx = this._affectsConfigStr.indexOf(needle);\n        if (idx < 0) {\n            // NOT: (marker + section)\n            return false;\n        }\n        const pos = idx + needle.length;\n        if (pos >= this._affectsConfigStr.length) {\n            return false;\n        }\n        const code = this._affectsConfigStr.charCodeAt(pos);\n        if (code !== this._markerCode1 && code !== this._markerCode2) {\n            // NOT: section + (marker | segment)\n            return false;\n        }\n        if (overrides) {\n            const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, (_a = this.previous) === null || _a === void 0 ? void 0 : _a.workspace) : undefined;\n            const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);\n            return !objects.equals(value1, value2);\n        }\n        return true;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}