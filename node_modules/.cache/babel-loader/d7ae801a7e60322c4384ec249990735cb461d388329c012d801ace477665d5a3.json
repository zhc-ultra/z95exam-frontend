{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(groupAdjacentBy);\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * Returns the last element of an array.\n * @param array The array.\n * @param n Which element from the end (default is zero).\n */\nexport function tail(array) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return array[array.length - (1 + n)];\n}\nexport function tail2(arr) {\n  if (arr.length === 0) {\n    throw new Error('Invalid tail call');\n  }\n  return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\nexport function equals(one, other) {\n  var itemEquals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (a, b) {\n    return a === b;\n  };\n  if (one === other) {\n    return true;\n  }\n  if (!one || !other) {\n    return false;\n  }\n  if (one.length !== other.length) {\n    return false;\n  }\n  for (var i = 0, len = one.length; i < len; i++) {\n    if (!itemEquals(one[i], other[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Remove the element at `index` by replacing it with the last element. This is faster than `splice`\n * but changes the order of the array\n */\nexport function removeFastWithoutKeepingOrder(array, index) {\n  var last = array.length - 1;\n  if (index < last) {\n    array[index] = array[last];\n  }\n  array.pop();\n}\n/**\n * Performs a binary search algorithm over a sorted array.\n *\n * @param array The array being searched.\n * @param key The value we search for.\n * @param comparator A function that takes two array elements and returns zero\n *   if they are equal, a negative number if the first element precedes the\n *   second one in the sorting order, or a positive number if the second element\n *   precedes the first one.\n * @return See {@link binarySearch2}\n */\nexport function binarySearch(array, key, comparator) {\n  return binarySearch2(array.length, function (i) {\n    return comparator(array[i], key);\n  });\n}\n/**\n * Performs a binary search algorithm over a sorted collection. Useful for cases\n * when we need to perform a binary search over something that isn't actually an\n * array, and converting data to an array would defeat the use of binary search\n * in the first place.\n *\n * @param length The collection length.\n * @param compareToKey A function that takes an index of an element in the\n *   collection and returns zero if the value at this index is equal to the\n *   search key, a negative number if the value precedes the search key in the\n *   sorting order, or a positive number if the search key precedes the value.\n * @return A non-negative index of an element, if found. If not found, the\n *   result is -(n+1) (or ~n, using bitwise notation), where n is the index\n *   where the key should be inserted to maintain the sorting order.\n */\nexport function binarySearch2(length, compareToKey) {\n  var low = 0,\n    high = length - 1;\n  while (low <= high) {\n    var mid = (low + high) / 2 | 0;\n    var comp = compareToKey(mid);\n    if (comp < 0) {\n      low = mid + 1;\n    } else if (comp > 0) {\n      high = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -(low + 1);\n}\nexport function quickSelect(nth, data, compare) {\n  nth = nth | 0;\n  if (nth >= data.length) {\n    throw new TypeError('invalid index');\n  }\n  var pivotValue = data[Math.floor(data.length * Math.random())];\n  var lower = [];\n  var higher = [];\n  var pivots = [];\n  var _iterator = _createForOfIteratorHelper(data),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      var val = compare(value, pivotValue);\n      if (val < 0) {\n        lower.push(value);\n      } else if (val > 0) {\n        higher.push(value);\n      } else {\n        pivots.push(value);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (nth < lower.length) {\n    return quickSelect(nth, lower, compare);\n  } else if (nth < lower.length + pivots.length) {\n    return pivots[0];\n  } else {\n    return quickSelect(nth - (lower.length + pivots.length), higher, compare);\n  }\n}\nexport function groupBy(data, compare) {\n  var result = [];\n  var currentGroup = undefined;\n  var _iterator2 = _createForOfIteratorHelper(data.slice(0).sort(compare)),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var element = _step2.value;\n      if (!currentGroup || compare(currentGroup[0], element) !== 0) {\n        currentGroup = [element];\n        result.push(currentGroup);\n      } else {\n        currentGroup.push(element);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return result;\n}\n/**\n * Splits the given items into a list of (non-empty) groups.\n * `shouldBeGrouped` is used to decide if two consecutive items should be in the same group.\n * The order of the items is preserved.\n */\nexport function groupAdjacentBy(items, shouldBeGrouped) {\n  var currentGroup, last, _iterator3, _step3, item;\n  return _regeneratorRuntime().wrap(function groupAdjacentBy$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _iterator3 = _createForOfIteratorHelper(items);\n        _context.prev = 1;\n        _iterator3.s();\n      case 3:\n        if ((_step3 = _iterator3.n()).done) {\n          _context.next = 16;\n          break;\n        }\n        item = _step3.value;\n        if (!(last !== undefined && shouldBeGrouped(last, item))) {\n          _context.next = 9;\n          break;\n        }\n        currentGroup.push(item);\n        _context.next = 13;\n        break;\n      case 9:\n        if (!currentGroup) {\n          _context.next = 12;\n          break;\n        }\n        _context.next = 12;\n        return currentGroup;\n      case 12:\n        currentGroup = [item];\n      case 13:\n        last = item;\n      case 14:\n        _context.next = 3;\n        break;\n      case 16:\n        _context.next = 21;\n        break;\n      case 18:\n        _context.prev = 18;\n        _context.t0 = _context[\"catch\"](1);\n        _iterator3.e(_context.t0);\n      case 21:\n        _context.prev = 21;\n        _iterator3.f();\n        return _context.finish(21);\n      case 24:\n        if (!currentGroup) {\n          _context.next = 27;\n          break;\n        }\n        _context.next = 27;\n        return currentGroup;\n      case 27:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked, null, [[1, 18, 21, 24]]);\n}\nexport function forEachAdjacent(arr, f) {\n  for (var i = 0; i <= arr.length; i++) {\n    f(i === 0 ? undefined : arr[i - 1], i === arr.length ? undefined : arr[i]);\n  }\n}\nexport function forEachWithNeighbors(arr, f) {\n  for (var i = 0; i < arr.length; i++) {\n    f(i === 0 ? undefined : arr[i - 1], arr[i], i + 1 === arr.length ? undefined : arr[i + 1]);\n  }\n}\n/**\n * @returns New array with all falsy values removed. The original array IS NOT modified.\n */\nexport function coalesce(array) {\n  return array.filter(function (e) {\n    return !!e;\n  });\n}\n/**\n * Remove all falsy values from `array`. The original array IS modified.\n */\nexport function coalesceInPlace(array) {\n  var to = 0;\n  for (var i = 0; i < array.length; i++) {\n    if (!!array[i]) {\n      array[to] = array[i];\n      to += 1;\n    }\n  }\n  array.length = to;\n}\n/**\n * @returns false if the provided object is an array and not empty.\n */\nexport function isFalsyOrEmpty(obj) {\n  return !Array.isArray(obj) || obj.length === 0;\n}\nexport function isNonEmptyArray(obj) {\n  return Array.isArray(obj) && obj.length > 0;\n}\n/**\n * Removes duplicates from the given array. The optional keyFn allows to specify\n * how elements are checked for equality by returning an alternate value for each.\n */\nexport function distinct(array) {\n  var keyFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (value) {\n    return value;\n  };\n  var seen = new Set();\n  return array.filter(function (element) {\n    var key = keyFn(element);\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n}\nexport function firstOrDefault(array, notFoundValue) {\n  return array.length > 0 ? array[0] : notFoundValue;\n}\nexport function range(arg, to) {\n  var from = typeof to === 'number' ? arg : 0;\n  if (typeof to === 'number') {\n    from = arg;\n  } else {\n    from = 0;\n    to = arg;\n  }\n  var result = [];\n  if (from <= to) {\n    for (var i = from; i < to; i++) {\n      result.push(i);\n    }\n  } else {\n    for (var _i = from; _i > to; _i--) {\n      result.push(_i);\n    }\n  }\n  return result;\n}\n/**\n * Insert `insertArr` inside `target` at `insertIndex`.\n * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array\n */\nexport function arrayInsert(target, insertIndex, insertArr) {\n  var before = target.slice(0, insertIndex);\n  var after = target.slice(insertIndex);\n  return before.concat(insertArr, after);\n}\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart(arr, value) {\n  var index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n    arr.unshift(value);\n  }\n}\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd(arr, value) {\n  var index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n    arr.push(value);\n  }\n}\nexport function pushMany(arr, items) {\n  var _iterator4 = _createForOfIteratorHelper(items),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var item = _step4.value;\n      arr.push(item);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n}\nexport function asArray(x) {\n  return Array.isArray(x) ? x : [x];\n}\n/**\n * Insert the new items in the array.\n * @param array The original array.\n * @param start The zero-based location in the array from which to start inserting elements.\n * @param newItems The items to be inserted\n */\nexport function insertInto(array, start, newItems) {\n  var startIdx = getActualStartIndex(array, start);\n  var originalLength = array.length;\n  var newItemsLength = newItems.length;\n  array.length = originalLength + newItemsLength;\n  // Move the items after the start index, start from the end so that we don't overwrite any value.\n  for (var i = originalLength - 1; i >= startIdx; i--) {\n    array[i + newItemsLength] = array[i];\n  }\n  for (var _i2 = 0; _i2 < newItemsLength; _i2++) {\n    array[_i2 + startIdx] = newItems[_i2];\n  }\n}\n/**\n * Removes elements from an array and inserts new elements in their place, returning the deleted elements. Alternative to the native Array.splice method, it\n * can only support limited number of items due to the maximum call stack size limit.\n * @param array The original array.\n * @param start The zero-based location in the array from which to start removing elements.\n * @param deleteCount The number of elements to remove.\n * @returns An array containing the elements that were deleted.\n */\nexport function splice(array, start, deleteCount, newItems) {\n  var index = getActualStartIndex(array, start);\n  var result = array.splice(index, deleteCount);\n  if (result === undefined) {\n    // see https://bugs.webkit.org/show_bug.cgi?id=261140\n    result = [];\n  }\n  insertInto(array, index, newItems);\n  return result;\n}\n/**\n * Determine the actual start index (same logic as the native splice() or slice())\n * If greater than the length of the array, start will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.\n * If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.) If array.length + start is less than 0, it will begin from index 0.\n * @param array The target array.\n * @param start The operation index.\n */\nfunction getActualStartIndex(array, start) {\n  return start < 0 ? Math.max(start + array.length, 0) : Math.min(start, array.length);\n}\nexport var CompareResult;\n(function (CompareResult) {\n  function isLessThan(result) {\n    return result < 0;\n  }\n  CompareResult.isLessThan = isLessThan;\n  function isLessThanOrEqual(result) {\n    return result <= 0;\n  }\n  CompareResult.isLessThanOrEqual = isLessThanOrEqual;\n  function isGreaterThan(result) {\n    return result > 0;\n  }\n  CompareResult.isGreaterThan = isGreaterThan;\n  function isNeitherLessOrGreaterThan(result) {\n    return result === 0;\n  }\n  CompareResult.isNeitherLessOrGreaterThan = isNeitherLessOrGreaterThan;\n  CompareResult.greaterThan = 1;\n  CompareResult.lessThan = -1;\n  CompareResult.neitherLessOrGreaterThan = 0;\n})(CompareResult || (CompareResult = {}));\nexport function compareBy(selector, comparator) {\n  return function (a, b) {\n    return comparator(selector(a), selector(b));\n  };\n}\nexport function tieBreakComparators() {\n  for (var _len = arguments.length, comparators = new Array(_len), _key = 0; _key < _len; _key++) {\n    comparators[_key] = arguments[_key];\n  }\n  return function (item1, item2) {\n    for (var _i3 = 0, _comparators = comparators; _i3 < _comparators.length; _i3++) {\n      var comparator = _comparators[_i3];\n      var result = comparator(item1, item2);\n      if (!CompareResult.isNeitherLessOrGreaterThan(result)) {\n        return result;\n      }\n    }\n    return CompareResult.neitherLessOrGreaterThan;\n  };\n}\n/**\n * The natural order on numbers.\n*/\nexport var numberComparator = function numberComparator(a, b) {\n  return a - b;\n};\nexport var booleanComparator = function booleanComparator(a, b) {\n  return numberComparator(a ? 1 : 0, b ? 1 : 0);\n};\nexport function reverseOrder(comparator) {\n  return function (a, b) {\n    return -comparator(a, b);\n  };\n}\nexport var ArrayQueue = /*#__PURE__*/function () {\n  /**\n   * Constructs a queue that is backed by the given array. Runtime is O(1).\n  */\n  function ArrayQueue(items) {\n    _classCallCheck(this, ArrayQueue);\n    this.items = items;\n    this.firstIdx = 0;\n    this.lastIdx = this.items.length - 1;\n  }\n  return _createClass(ArrayQueue, [{\n    key: \"length\",\n    get: function get() {\n      return this.lastIdx - this.firstIdx + 1;\n    }\n    /**\n     * Consumes elements from the beginning of the queue as long as the predicate returns true.\n     * If no elements were consumed, `null` is returned. Has a runtime of O(result.length).\n    */\n  }, {\n    key: \"takeWhile\",\n    value: function takeWhile(predicate) {\n      // P(k) := k <= this.lastIdx && predicate(this.items[k])\n      // Find s := min { k | k >= this.firstIdx && !P(k) } and return this.data[this.firstIdx...s)\n      var startIdx = this.firstIdx;\n      while (startIdx < this.items.length && predicate(this.items[startIdx])) {\n        startIdx++;\n      }\n      var result = startIdx === this.firstIdx ? null : this.items.slice(this.firstIdx, startIdx);\n      this.firstIdx = startIdx;\n      return result;\n    }\n    /**\n     * Consumes elements from the end of the queue as long as the predicate returns true.\n     * If no elements were consumed, `null` is returned.\n     * The result has the same order as the underlying array!\n    */\n  }, {\n    key: \"takeFromEndWhile\",\n    value: function takeFromEndWhile(predicate) {\n      // P(k) := this.firstIdx >= k && predicate(this.items[k])\n      // Find s := max { k | k <= this.lastIdx && !P(k) } and return this.data(s...this.lastIdx]\n      var endIdx = this.lastIdx;\n      while (endIdx >= 0 && predicate(this.items[endIdx])) {\n        endIdx--;\n      }\n      var result = endIdx === this.lastIdx ? null : this.items.slice(endIdx + 1, this.lastIdx + 1);\n      this.lastIdx = endIdx;\n      return result;\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      if (this.length === 0) {\n        return undefined;\n      }\n      return this.items[this.firstIdx];\n    }\n  }, {\n    key: \"dequeue\",\n    value: function dequeue() {\n      var result = this.items[this.firstIdx];\n      this.firstIdx++;\n      return result;\n    }\n  }, {\n    key: \"takeCount\",\n    value: function takeCount(count) {\n      var result = this.items.slice(this.firstIdx, this.firstIdx + count);\n      this.firstIdx += count;\n      return result;\n    }\n  }]);\n}();\n/**\n * This class is faster than an iterator and array for lazy computed data.\n*/\nexport var CallbackIterable = /*#__PURE__*/function () {\n  function CallbackIterable(\n  /**\n   * Calls the callback for every item.\n   * Stops when the callback returns false.\n  */\n  iterate) {\n    _classCallCheck(this, CallbackIterable);\n    this.iterate = iterate;\n  }\n  return _createClass(CallbackIterable, [{\n    key: \"toArray\",\n    value: function toArray() {\n      var result = [];\n      this.iterate(function (item) {\n        result.push(item);\n        return true;\n      });\n      return result;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(predicate) {\n      var _this = this;\n      return new CallbackIterable(function (cb) {\n        return _this.iterate(function (item) {\n          return predicate(item) ? cb(item) : true;\n        });\n      });\n    }\n  }, {\n    key: \"map\",\n    value: function map(mapFn) {\n      var _this2 = this;\n      return new CallbackIterable(function (cb) {\n        return _this2.iterate(function (item) {\n          return cb(mapFn(item));\n        });\n      });\n    }\n  }, {\n    key: \"findLast\",\n    value: function findLast(predicate) {\n      var result;\n      this.iterate(function (item) {\n        if (predicate(item)) {\n          result = item;\n        }\n        return true;\n      });\n      return result;\n    }\n  }, {\n    key: \"findLastMaxBy\",\n    value: function findLastMaxBy(comparator) {\n      var result;\n      var first = true;\n      this.iterate(function (item) {\n        if (first || CompareResult.isGreaterThan(comparator(item, result))) {\n          first = false;\n          result = item;\n        }\n        return true;\n      });\n      return result;\n    }\n  }]);\n}();\nCallbackIterable.empty = new CallbackIterable(function (_callback) {});\n/**\n * Represents a re-arrangement of items in an array.\n */\nexport var Permutation = /*#__PURE__*/function () {\n  function Permutation(_indexMap) {\n    _classCallCheck(this, Permutation);\n    this._indexMap = _indexMap;\n  }\n  /**\n   * Returns a permutation that sorts the given array according to the given compare function.\n   */\n  return _createClass(Permutation, [{\n    key: \"apply\",\n    value:\n    /**\n     * Returns a new array with the elements of the given array re-arranged according to this permutation.\n     */\n    function apply(arr) {\n      var _this3 = this;\n      return arr.map(function (_, index) {\n        return arr[_this3._indexMap[index]];\n      });\n    }\n    /**\n     * Returns a new permutation that undoes the re-arrangement of this permutation.\n    */\n  }, {\n    key: \"inverse\",\n    value: function inverse() {\n      var inverseIndexMap = this._indexMap.slice();\n      for (var i = 0; i < this._indexMap.length; i++) {\n        inverseIndexMap[this._indexMap[i]] = i;\n      }\n      return new Permutation(inverseIndexMap);\n    }\n  }], [{\n    key: \"createSortPermutation\",\n    value: function createSortPermutation(arr, compareFn) {\n      var sortIndices = Array.from(arr.keys()).sort(function (index1, index2) {\n        return compareFn(arr[index1], arr[index2]);\n      });\n      return new Permutation(sortIndices);\n    }\n  }]);\n}();","map":{"version":3,"names":["groupAdjacentBy","tail","array","n","arguments","length","undefined","tail2","arr","Error","slice","equals","one","other","itemEquals","a","b","i","len","removeFastWithoutKeepingOrder","index","last","pop","binarySearch","key","comparator","binarySearch2","compareToKey","low","high","mid","comp","quickSelect","nth","data","compare","TypeError","pivotValue","Math","floor","random","lower","higher","pivots","_iterator","_createForOfIteratorHelper","_step","s","done","value","val","push","err","e","f","groupBy","result","currentGroup","_iterator2","sort","_step2","element","items","shouldBeGrouped","_iterator3","_step3","item","_regeneratorRuntime","wrap","groupAdjacentBy$","_context","prev","next","t0","finish","stop","_marked","forEachAdjacent","forEachWithNeighbors","coalesce","filter","coalesceInPlace","to","isFalsyOrEmpty","obj","Array","isArray","isNonEmptyArray","distinct","keyFn","seen","Set","has","add","firstOrDefault","notFoundValue","range","arg","from","arrayInsert","target","insertIndex","insertArr","before","after","concat","pushToStart","indexOf","splice","unshift","pushToEnd","pushMany","_iterator4","_step4","asArray","x","insertInto","start","newItems","startIdx","getActualStartIndex","originalLength","newItemsLength","deleteCount","max","min","CompareResult","isLessThan","isLessThanOrEqual","isGreaterThan","isNeitherLessOrGreaterThan","greaterThan","lessThan","neitherLessOrGreaterThan","compareBy","selector","tieBreakComparators","_len","comparators","_key","item1","item2","_i3","_comparators","numberComparator","booleanComparator","reverseOrder","ArrayQueue","_classCallCheck","firstIdx","lastIdx","_createClass","get","takeWhile","predicate","takeFromEndWhile","endIdx","peek","dequeue","takeCount","count","CallbackIterable","iterate","toArray","_this","cb","map","mapFn","_this2","findLast","findLastMaxBy","first","empty","_callback","Permutation","_indexMap","apply","_this3","_","inverse","inverseIndexMap","createSortPermutation","compareFn","sortIndices","keys","index1","index2"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/base/common/arrays.js"],"sourcesContent":["/**\n * Returns the last element of an array.\n * @param array The array.\n * @param n Which element from the end (default is zero).\n */\nexport function tail(array, n = 0) {\n    return array[array.length - (1 + n)];\n}\nexport function tail2(arr) {\n    if (arr.length === 0) {\n        throw new Error('Invalid tail call');\n    }\n    return [arr.slice(0, arr.length - 1), arr[arr.length - 1]];\n}\nexport function equals(one, other, itemEquals = (a, b) => a === b) {\n    if (one === other) {\n        return true;\n    }\n    if (!one || !other) {\n        return false;\n    }\n    if (one.length !== other.length) {\n        return false;\n    }\n    for (let i = 0, len = one.length; i < len; i++) {\n        if (!itemEquals(one[i], other[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Remove the element at `index` by replacing it with the last element. This is faster than `splice`\n * but changes the order of the array\n */\nexport function removeFastWithoutKeepingOrder(array, index) {\n    const last = array.length - 1;\n    if (index < last) {\n        array[index] = array[last];\n    }\n    array.pop();\n}\n/**\n * Performs a binary search algorithm over a sorted array.\n *\n * @param array The array being searched.\n * @param key The value we search for.\n * @param comparator A function that takes two array elements and returns zero\n *   if they are equal, a negative number if the first element precedes the\n *   second one in the sorting order, or a positive number if the second element\n *   precedes the first one.\n * @return See {@link binarySearch2}\n */\nexport function binarySearch(array, key, comparator) {\n    return binarySearch2(array.length, i => comparator(array[i], key));\n}\n/**\n * Performs a binary search algorithm over a sorted collection. Useful for cases\n * when we need to perform a binary search over something that isn't actually an\n * array, and converting data to an array would defeat the use of binary search\n * in the first place.\n *\n * @param length The collection length.\n * @param compareToKey A function that takes an index of an element in the\n *   collection and returns zero if the value at this index is equal to the\n *   search key, a negative number if the value precedes the search key in the\n *   sorting order, or a positive number if the search key precedes the value.\n * @return A non-negative index of an element, if found. If not found, the\n *   result is -(n+1) (or ~n, using bitwise notation), where n is the index\n *   where the key should be inserted to maintain the sorting order.\n */\nexport function binarySearch2(length, compareToKey) {\n    let low = 0, high = length - 1;\n    while (low <= high) {\n        const mid = ((low + high) / 2) | 0;\n        const comp = compareToKey(mid);\n        if (comp < 0) {\n            low = mid + 1;\n        }\n        else if (comp > 0) {\n            high = mid - 1;\n        }\n        else {\n            return mid;\n        }\n    }\n    return -(low + 1);\n}\nexport function quickSelect(nth, data, compare) {\n    nth = nth | 0;\n    if (nth >= data.length) {\n        throw new TypeError('invalid index');\n    }\n    const pivotValue = data[Math.floor(data.length * Math.random())];\n    const lower = [];\n    const higher = [];\n    const pivots = [];\n    for (const value of data) {\n        const val = compare(value, pivotValue);\n        if (val < 0) {\n            lower.push(value);\n        }\n        else if (val > 0) {\n            higher.push(value);\n        }\n        else {\n            pivots.push(value);\n        }\n    }\n    if (nth < lower.length) {\n        return quickSelect(nth, lower, compare);\n    }\n    else if (nth < lower.length + pivots.length) {\n        return pivots[0];\n    }\n    else {\n        return quickSelect(nth - (lower.length + pivots.length), higher, compare);\n    }\n}\nexport function groupBy(data, compare) {\n    const result = [];\n    let currentGroup = undefined;\n    for (const element of data.slice(0).sort(compare)) {\n        if (!currentGroup || compare(currentGroup[0], element) !== 0) {\n            currentGroup = [element];\n            result.push(currentGroup);\n        }\n        else {\n            currentGroup.push(element);\n        }\n    }\n    return result;\n}\n/**\n * Splits the given items into a list of (non-empty) groups.\n * `shouldBeGrouped` is used to decide if two consecutive items should be in the same group.\n * The order of the items is preserved.\n */\nexport function* groupAdjacentBy(items, shouldBeGrouped) {\n    let currentGroup;\n    let last;\n    for (const item of items) {\n        if (last !== undefined && shouldBeGrouped(last, item)) {\n            currentGroup.push(item);\n        }\n        else {\n            if (currentGroup) {\n                yield currentGroup;\n            }\n            currentGroup = [item];\n        }\n        last = item;\n    }\n    if (currentGroup) {\n        yield currentGroup;\n    }\n}\nexport function forEachAdjacent(arr, f) {\n    for (let i = 0; i <= arr.length; i++) {\n        f(i === 0 ? undefined : arr[i - 1], i === arr.length ? undefined : arr[i]);\n    }\n}\nexport function forEachWithNeighbors(arr, f) {\n    for (let i = 0; i < arr.length; i++) {\n        f(i === 0 ? undefined : arr[i - 1], arr[i], i + 1 === arr.length ? undefined : arr[i + 1]);\n    }\n}\n/**\n * @returns New array with all falsy values removed. The original array IS NOT modified.\n */\nexport function coalesce(array) {\n    return array.filter(e => !!e);\n}\n/**\n * Remove all falsy values from `array`. The original array IS modified.\n */\nexport function coalesceInPlace(array) {\n    let to = 0;\n    for (let i = 0; i < array.length; i++) {\n        if (!!array[i]) {\n            array[to] = array[i];\n            to += 1;\n        }\n    }\n    array.length = to;\n}\n/**\n * @returns false if the provided object is an array and not empty.\n */\nexport function isFalsyOrEmpty(obj) {\n    return !Array.isArray(obj) || obj.length === 0;\n}\nexport function isNonEmptyArray(obj) {\n    return Array.isArray(obj) && obj.length > 0;\n}\n/**\n * Removes duplicates from the given array. The optional keyFn allows to specify\n * how elements are checked for equality by returning an alternate value for each.\n */\nexport function distinct(array, keyFn = value => value) {\n    const seen = new Set();\n    return array.filter(element => {\n        const key = keyFn(element);\n        if (seen.has(key)) {\n            return false;\n        }\n        seen.add(key);\n        return true;\n    });\n}\nexport function firstOrDefault(array, notFoundValue) {\n    return array.length > 0 ? array[0] : notFoundValue;\n}\nexport function range(arg, to) {\n    let from = typeof to === 'number' ? arg : 0;\n    if (typeof to === 'number') {\n        from = arg;\n    }\n    else {\n        from = 0;\n        to = arg;\n    }\n    const result = [];\n    if (from <= to) {\n        for (let i = from; i < to; i++) {\n            result.push(i);\n        }\n    }\n    else {\n        for (let i = from; i > to; i--) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n/**\n * Insert `insertArr` inside `target` at `insertIndex`.\n * Please don't touch unless you understand https://jsperf.com/inserting-an-array-within-an-array\n */\nexport function arrayInsert(target, insertIndex, insertArr) {\n    const before = target.slice(0, insertIndex);\n    const after = target.slice(insertIndex);\n    return before.concat(insertArr, after);\n}\n/**\n * Pushes an element to the start of the array, if found.\n */\nexport function pushToStart(arr, value) {\n    const index = arr.indexOf(value);\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.unshift(value);\n    }\n}\n/**\n * Pushes an element to the end of the array, if found.\n */\nexport function pushToEnd(arr, value) {\n    const index = arr.indexOf(value);\n    if (index > -1) {\n        arr.splice(index, 1);\n        arr.push(value);\n    }\n}\nexport function pushMany(arr, items) {\n    for (const item of items) {\n        arr.push(item);\n    }\n}\nexport function asArray(x) {\n    return Array.isArray(x) ? x : [x];\n}\n/**\n * Insert the new items in the array.\n * @param array The original array.\n * @param start The zero-based location in the array from which to start inserting elements.\n * @param newItems The items to be inserted\n */\nexport function insertInto(array, start, newItems) {\n    const startIdx = getActualStartIndex(array, start);\n    const originalLength = array.length;\n    const newItemsLength = newItems.length;\n    array.length = originalLength + newItemsLength;\n    // Move the items after the start index, start from the end so that we don't overwrite any value.\n    for (let i = originalLength - 1; i >= startIdx; i--) {\n        array[i + newItemsLength] = array[i];\n    }\n    for (let i = 0; i < newItemsLength; i++) {\n        array[i + startIdx] = newItems[i];\n    }\n}\n/**\n * Removes elements from an array and inserts new elements in their place, returning the deleted elements. Alternative to the native Array.splice method, it\n * can only support limited number of items due to the maximum call stack size limit.\n * @param array The original array.\n * @param start The zero-based location in the array from which to start removing elements.\n * @param deleteCount The number of elements to remove.\n * @returns An array containing the elements that were deleted.\n */\nexport function splice(array, start, deleteCount, newItems) {\n    const index = getActualStartIndex(array, start);\n    let result = array.splice(index, deleteCount);\n    if (result === undefined) {\n        // see https://bugs.webkit.org/show_bug.cgi?id=261140\n        result = [];\n    }\n    insertInto(array, index, newItems);\n    return result;\n}\n/**\n * Determine the actual start index (same logic as the native splice() or slice())\n * If greater than the length of the array, start will be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.\n * If negative, it will begin that many elements from the end of the array. (In this case, the origin -1, meaning -n is the index of the nth last element, and is therefore equivalent to the index of array.length - n.) If array.length + start is less than 0, it will begin from index 0.\n * @param array The target array.\n * @param start The operation index.\n */\nfunction getActualStartIndex(array, start) {\n    return start < 0 ? Math.max(start + array.length, 0) : Math.min(start, array.length);\n}\nexport var CompareResult;\n(function (CompareResult) {\n    function isLessThan(result) {\n        return result < 0;\n    }\n    CompareResult.isLessThan = isLessThan;\n    function isLessThanOrEqual(result) {\n        return result <= 0;\n    }\n    CompareResult.isLessThanOrEqual = isLessThanOrEqual;\n    function isGreaterThan(result) {\n        return result > 0;\n    }\n    CompareResult.isGreaterThan = isGreaterThan;\n    function isNeitherLessOrGreaterThan(result) {\n        return result === 0;\n    }\n    CompareResult.isNeitherLessOrGreaterThan = isNeitherLessOrGreaterThan;\n    CompareResult.greaterThan = 1;\n    CompareResult.lessThan = -1;\n    CompareResult.neitherLessOrGreaterThan = 0;\n})(CompareResult || (CompareResult = {}));\nexport function compareBy(selector, comparator) {\n    return (a, b) => comparator(selector(a), selector(b));\n}\nexport function tieBreakComparators(...comparators) {\n    return (item1, item2) => {\n        for (const comparator of comparators) {\n            const result = comparator(item1, item2);\n            if (!CompareResult.isNeitherLessOrGreaterThan(result)) {\n                return result;\n            }\n        }\n        return CompareResult.neitherLessOrGreaterThan;\n    };\n}\n/**\n * The natural order on numbers.\n*/\nexport const numberComparator = (a, b) => a - b;\nexport const booleanComparator = (a, b) => numberComparator(a ? 1 : 0, b ? 1 : 0);\nexport function reverseOrder(comparator) {\n    return (a, b) => -comparator(a, b);\n}\nexport class ArrayQueue {\n    /**\n     * Constructs a queue that is backed by the given array. Runtime is O(1).\n    */\n    constructor(items) {\n        this.items = items;\n        this.firstIdx = 0;\n        this.lastIdx = this.items.length - 1;\n    }\n    get length() {\n        return this.lastIdx - this.firstIdx + 1;\n    }\n    /**\n     * Consumes elements from the beginning of the queue as long as the predicate returns true.\n     * If no elements were consumed, `null` is returned. Has a runtime of O(result.length).\n    */\n    takeWhile(predicate) {\n        // P(k) := k <= this.lastIdx && predicate(this.items[k])\n        // Find s := min { k | k >= this.firstIdx && !P(k) } and return this.data[this.firstIdx...s)\n        let startIdx = this.firstIdx;\n        while (startIdx < this.items.length && predicate(this.items[startIdx])) {\n            startIdx++;\n        }\n        const result = startIdx === this.firstIdx ? null : this.items.slice(this.firstIdx, startIdx);\n        this.firstIdx = startIdx;\n        return result;\n    }\n    /**\n     * Consumes elements from the end of the queue as long as the predicate returns true.\n     * If no elements were consumed, `null` is returned.\n     * The result has the same order as the underlying array!\n    */\n    takeFromEndWhile(predicate) {\n        // P(k) := this.firstIdx >= k && predicate(this.items[k])\n        // Find s := max { k | k <= this.lastIdx && !P(k) } and return this.data(s...this.lastIdx]\n        let endIdx = this.lastIdx;\n        while (endIdx >= 0 && predicate(this.items[endIdx])) {\n            endIdx--;\n        }\n        const result = endIdx === this.lastIdx ? null : this.items.slice(endIdx + 1, this.lastIdx + 1);\n        this.lastIdx = endIdx;\n        return result;\n    }\n    peek() {\n        if (this.length === 0) {\n            return undefined;\n        }\n        return this.items[this.firstIdx];\n    }\n    dequeue() {\n        const result = this.items[this.firstIdx];\n        this.firstIdx++;\n        return result;\n    }\n    takeCount(count) {\n        const result = this.items.slice(this.firstIdx, this.firstIdx + count);\n        this.firstIdx += count;\n        return result;\n    }\n}\n/**\n * This class is faster than an iterator and array for lazy computed data.\n*/\nexport class CallbackIterable {\n    constructor(\n    /**\n     * Calls the callback for every item.\n     * Stops when the callback returns false.\n    */\n    iterate) {\n        this.iterate = iterate;\n    }\n    toArray() {\n        const result = [];\n        this.iterate(item => { result.push(item); return true; });\n        return result;\n    }\n    filter(predicate) {\n        return new CallbackIterable(cb => this.iterate(item => predicate(item) ? cb(item) : true));\n    }\n    map(mapFn) {\n        return new CallbackIterable(cb => this.iterate(item => cb(mapFn(item))));\n    }\n    findLast(predicate) {\n        let result;\n        this.iterate(item => {\n            if (predicate(item)) {\n                result = item;\n            }\n            return true;\n        });\n        return result;\n    }\n    findLastMaxBy(comparator) {\n        let result;\n        let first = true;\n        this.iterate(item => {\n            if (first || CompareResult.isGreaterThan(comparator(item, result))) {\n                first = false;\n                result = item;\n            }\n            return true;\n        });\n        return result;\n    }\n}\nCallbackIterable.empty = new CallbackIterable(_callback => { });\n/**\n * Represents a re-arrangement of items in an array.\n */\nexport class Permutation {\n    constructor(_indexMap) {\n        this._indexMap = _indexMap;\n    }\n    /**\n     * Returns a permutation that sorts the given array according to the given compare function.\n     */\n    static createSortPermutation(arr, compareFn) {\n        const sortIndices = Array.from(arr.keys()).sort((index1, index2) => compareFn(arr[index1], arr[index2]));\n        return new Permutation(sortIndices);\n    }\n    /**\n     * Returns a new array with the elements of the given array re-arranged according to this permutation.\n     */\n    apply(arr) {\n        return arr.map((_, index) => arr[this._indexMap[index]]);\n    }\n    /**\n     * Returns a new permutation that undoes the re-arrangement of this permutation.\n    */\n    inverse() {\n        const inverseIndexMap = this._indexMap.slice();\n        for (let i = 0; i < this._indexMap.length; i++) {\n            inverseIndexMap[this._indexMap[i]] = i;\n        }\n        return new Permutation(inverseIndexMap);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}