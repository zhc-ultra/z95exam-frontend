{"ast":null,"code":"import \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.replace.js\";\n/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n// An opening or closing tag start, followed by a case-insensitive specific tag name,\n// followed by HTML whitespace, a greater than, or a slash.\nvar reFlow = /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi;\n\n// As HTML (text) parses tags separately (and very strictly), we don’t need to be\n// global.\nvar reText = new RegExp('^' + reFlow.source, 'i');\n\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions`, to\n * support GitHub’s weird and useless tagfilter when serializing to HTML.\n *\n * @type {HtmlExtension}\n */\nexport var gfmTagfilterHtml = {\n  exit: {\n    htmlFlowData: function htmlFlowData(token) {\n      exitHtmlData.call(this, token, reFlow);\n    },\n    htmlTextData: function htmlTextData(token) {\n      exitHtmlData.call(this, token, reText);\n    }\n  }\n};\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n */\nfunction exitHtmlData(token, filter) {\n  var value = this.sliceSerialize(token);\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2');\n  }\n  this.raw(this.encode(value));\n}","map":{"version":3,"names":["reFlow","reText","RegExp","source","gfmTagfilterHtml","exit","htmlFlowData","token","exitHtmlData","call","htmlTextData","filter","value","sliceSerialize","options","allowDangerousHtml","replace","raw","encode"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/micromark-extension-gfm-tagfilter/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n// An opening or closing tag start, followed by a case-insensitive specific tag name,\n// followed by HTML whitespace, a greater than, or a slash.\nconst reFlow =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n// As HTML (text) parses tags separately (and very strictly), we don’t need to be\n// global.\nconst reText = new RegExp('^' + reFlow.source, 'i')\n\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions`, to\n * support GitHub’s weird and useless tagfilter when serializing to HTML.\n *\n * @type {HtmlExtension}\n */\nexport const gfmTagfilterHtml = {\n  exit: {\n    htmlFlowData(token) {\n      exitHtmlData.call(this, token, reFlow)\n    },\n    htmlTextData(token) {\n      exitHtmlData.call(this, token, reText)\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAMA,MAAM,GACV,8FAA8F;;AAEhG;AACA;AACA,IAAMC,MAAM,GAAG,IAAIC,MAAM,CAAC,GAAG,GAAGF,MAAM,CAACG,MAAM,EAAE,GAAG,CAAC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,gBAAgB,GAAG;EAC9BC,IAAI,EAAE;IACJC,YAAY,WAAAA,aAACC,KAAK,EAAE;MAClBC,YAAY,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,EAAEP,MAAM,CAAC;IACxC,CAAC;IACDU,YAAY,WAAAA,aAACH,KAAK,EAAE;MAClBC,YAAY,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,EAAEN,MAAM,CAAC;IACxC;EACF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASO,YAAYA,CAACD,KAAK,EAAEI,MAAM,EAAE;EACnC,IAAIC,KAAK,GAAG,IAAI,CAACC,cAAc,CAACN,KAAK,CAAC;EAEtC,IAAI,IAAI,CAACO,OAAO,CAACC,kBAAkB,EAAE;IACnCH,KAAK,GAAGA,KAAK,CAACI,OAAO,CAACL,MAAM,EAAE,UAAU,CAAC;EAC3C;EAEA,IAAI,CAACM,GAAG,CAAC,IAAI,CAACC,MAAM,CAACN,KAAK,CAAC,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}