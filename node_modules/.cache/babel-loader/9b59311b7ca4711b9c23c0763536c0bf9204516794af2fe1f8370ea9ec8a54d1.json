{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/web.timers.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { show } from '../../dom.js';\nimport { RunOnceScheduler } from '../../../common/async.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport './progressbar.css';\nvar CSS_DONE = 'done';\nvar CSS_ACTIVE = 'active';\nvar CSS_INFINITE = 'infinite';\nvar CSS_INFINITE_LONG_RUNNING = 'infinite-long-running';\nvar CSS_DISCRETE = 'discrete';\n/**\n * A progress bar with support for infinite or discrete progress.\n */\nexport var ProgressBar = /*#__PURE__*/function (_Disposable) {\n  function ProgressBar(container, options) {\n    var _this;\n    _classCallCheck(this, ProgressBar);\n    _this = _callSuper(this, ProgressBar);\n    _this.workedVal = 0;\n    _this.showDelayedScheduler = _this._register(new RunOnceScheduler(function () {\n      return show(_this.element);\n    }, 0));\n    _this.longRunningScheduler = _this._register(new RunOnceScheduler(function () {\n      return _this.infiniteLongRunning();\n    }, ProgressBar.LONG_RUNNING_INFINITE_THRESHOLD));\n    _this.create(container, options);\n    return _this;\n  }\n  _inherits(ProgressBar, _Disposable);\n  return _createClass(ProgressBar, [{\n    key: \"create\",\n    value: function create(container, options) {\n      this.element = document.createElement('div');\n      this.element.classList.add('monaco-progress-container');\n      this.element.setAttribute('role', 'progressbar');\n      this.element.setAttribute('aria-valuemin', '0');\n      container.appendChild(this.element);\n      this.bit = document.createElement('div');\n      this.bit.classList.add('progress-bit');\n      this.bit.style.backgroundColor = (options === null || options === void 0 ? void 0 : options.progressBarBackground) || '#0E70C0';\n      this.element.appendChild(this.bit);\n    }\n  }, {\n    key: \"off\",\n    value: function off() {\n      this.bit.style.width = 'inherit';\n      this.bit.style.opacity = '1';\n      this.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_INFINITE_LONG_RUNNING, CSS_DISCRETE);\n      this.workedVal = 0;\n      this.totalWork = undefined;\n      this.longRunningScheduler.cancel();\n    }\n    /**\n     * Stops the progressbar from showing any progress instantly without fading out.\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      return this.doDone(false);\n    }\n  }, {\n    key: \"doDone\",\n    value: function doDone(delayed) {\n      var _this2 = this;\n      this.element.classList.add(CSS_DONE);\n      // discrete: let it grow to 100% width and hide afterwards\n      if (!this.element.classList.contains(CSS_INFINITE)) {\n        this.bit.style.width = 'inherit';\n        if (delayed) {\n          setTimeout(function () {\n            return _this2.off();\n          }, 200);\n        } else {\n          this.off();\n        }\n      }\n      // infinite: let it fade out and hide afterwards\n      else {\n        this.bit.style.opacity = '0';\n        if (delayed) {\n          setTimeout(function () {\n            return _this2.off();\n          }, 200);\n        } else {\n          this.off();\n        }\n      }\n      return this;\n    }\n    /**\n     * Use this mode to indicate progress that has no total number of work units.\n     */\n  }, {\n    key: \"infinite\",\n    value: function infinite() {\n      this.bit.style.width = '2%';\n      this.bit.style.opacity = '1';\n      this.element.classList.remove(CSS_DISCRETE, CSS_DONE, CSS_INFINITE_LONG_RUNNING);\n      this.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\n      this.longRunningScheduler.schedule();\n      return this;\n    }\n  }, {\n    key: \"infiniteLongRunning\",\n    value: function infiniteLongRunning() {\n      this.element.classList.add(CSS_INFINITE_LONG_RUNNING);\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.element;\n    }\n  }]);\n}(Disposable);\n/**\n * After a certain time of showing the progress bar, switch\n * to long-running mode and throttle animations to reduce\n * the pressure on the GPU process.\n *\n * https://github.com/microsoft/vscode/issues/97900\n * https://github.com/microsoft/vscode/issues/138396\n */\nProgressBar.LONG_RUNNING_INFINITE_THRESHOLD = 10000;","map":{"version":3,"names":["show","RunOnceScheduler","Disposable","CSS_DONE","CSS_ACTIVE","CSS_INFINITE","CSS_INFINITE_LONG_RUNNING","CSS_DISCRETE","ProgressBar","_Disposable","container","options","_this","_classCallCheck","_callSuper","workedVal","showDelayedScheduler","_register","element","longRunningScheduler","infiniteLongRunning","LONG_RUNNING_INFINITE_THRESHOLD","create","_inherits","_createClass","key","value","document","createElement","classList","add","setAttribute","appendChild","bit","style","backgroundColor","progressBarBackground","off","width","opacity","remove","totalWork","undefined","cancel","stop","doDone","delayed","_this2","contains","setTimeout","infinite","schedule","getContainer"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/base/browser/ui/progressbar/progressbar.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { show } from '../../dom.js';\nimport { RunOnceScheduler } from '../../../common/async.js';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport './progressbar.css';\nconst CSS_DONE = 'done';\nconst CSS_ACTIVE = 'active';\nconst CSS_INFINITE = 'infinite';\nconst CSS_INFINITE_LONG_RUNNING = 'infinite-long-running';\nconst CSS_DISCRETE = 'discrete';\n/**\n * A progress bar with support for infinite or discrete progress.\n */\nexport class ProgressBar extends Disposable {\n    constructor(container, options) {\n        super();\n        this.workedVal = 0;\n        this.showDelayedScheduler = this._register(new RunOnceScheduler(() => show(this.element), 0));\n        this.longRunningScheduler = this._register(new RunOnceScheduler(() => this.infiniteLongRunning(), ProgressBar.LONG_RUNNING_INFINITE_THRESHOLD));\n        this.create(container, options);\n    }\n    create(container, options) {\n        this.element = document.createElement('div');\n        this.element.classList.add('monaco-progress-container');\n        this.element.setAttribute('role', 'progressbar');\n        this.element.setAttribute('aria-valuemin', '0');\n        container.appendChild(this.element);\n        this.bit = document.createElement('div');\n        this.bit.classList.add('progress-bit');\n        this.bit.style.backgroundColor = (options === null || options === void 0 ? void 0 : options.progressBarBackground) || '#0E70C0';\n        this.element.appendChild(this.bit);\n    }\n    off() {\n        this.bit.style.width = 'inherit';\n        this.bit.style.opacity = '1';\n        this.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_INFINITE_LONG_RUNNING, CSS_DISCRETE);\n        this.workedVal = 0;\n        this.totalWork = undefined;\n        this.longRunningScheduler.cancel();\n    }\n    /**\n     * Stops the progressbar from showing any progress instantly without fading out.\n     */\n    stop() {\n        return this.doDone(false);\n    }\n    doDone(delayed) {\n        this.element.classList.add(CSS_DONE);\n        // discrete: let it grow to 100% width and hide afterwards\n        if (!this.element.classList.contains(CSS_INFINITE)) {\n            this.bit.style.width = 'inherit';\n            if (delayed) {\n                setTimeout(() => this.off(), 200);\n            }\n            else {\n                this.off();\n            }\n        }\n        // infinite: let it fade out and hide afterwards\n        else {\n            this.bit.style.opacity = '0';\n            if (delayed) {\n                setTimeout(() => this.off(), 200);\n            }\n            else {\n                this.off();\n            }\n        }\n        return this;\n    }\n    /**\n     * Use this mode to indicate progress that has no total number of work units.\n     */\n    infinite() {\n        this.bit.style.width = '2%';\n        this.bit.style.opacity = '1';\n        this.element.classList.remove(CSS_DISCRETE, CSS_DONE, CSS_INFINITE_LONG_RUNNING);\n        this.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\n        this.longRunningScheduler.schedule();\n        return this;\n    }\n    infiniteLongRunning() {\n        this.element.classList.add(CSS_INFINITE_LONG_RUNNING);\n    }\n    getContainer() {\n        return this.element;\n    }\n}\n/**\n * After a certain time of showing the progress bar, switch\n * to long-running mode and throttle animations to reduce\n * the pressure on the GPU process.\n *\n * https://github.com/microsoft/vscode/issues/97900\n * https://github.com/microsoft/vscode/issues/138396\n */\nProgressBar.LONG_RUNNING_INFINITE_THRESHOLD = 10000;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,IAAI,QAAQ,cAAc;AACnC,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,UAAU,QAAQ,8BAA8B;AACzD,OAAO,mBAAmB;AAC1B,IAAMC,QAAQ,GAAG,MAAM;AACvB,IAAMC,UAAU,GAAG,QAAQ;AAC3B,IAAMC,YAAY,GAAG,UAAU;AAC/B,IAAMC,yBAAyB,GAAG,uBAAuB;AACzD,IAAMC,YAAY,GAAG,UAAU;AAC/B;AACA;AACA;AACA,WAAaC,WAAW,0BAAAC,WAAA;EACpB,SAAAD,YAAYE,SAAS,EAAEC,OAAO,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAL,WAAA;IAC5BI,KAAA,GAAAE,UAAA,OAAAN,WAAA;IACAI,KAAA,CAAKG,SAAS,GAAG,CAAC;IAClBH,KAAA,CAAKI,oBAAoB,GAAGJ,KAAA,CAAKK,SAAS,CAAC,IAAIhB,gBAAgB,CAAC;MAAA,OAAMD,IAAI,CAACY,KAAA,CAAKM,OAAO,CAAC;IAAA,GAAE,CAAC,CAAC,CAAC;IAC7FN,KAAA,CAAKO,oBAAoB,GAAGP,KAAA,CAAKK,SAAS,CAAC,IAAIhB,gBAAgB,CAAC;MAAA,OAAMW,KAAA,CAAKQ,mBAAmB,CAAC,CAAC;IAAA,GAAEZ,WAAW,CAACa,+BAA+B,CAAC,CAAC;IAC/IT,KAAA,CAAKU,MAAM,CAACZ,SAAS,EAAEC,OAAO,CAAC;IAAC,OAAAC,KAAA;EACpC;EAACW,SAAA,CAAAf,WAAA,EAAAC,WAAA;EAAA,OAAAe,YAAA,CAAAhB,WAAA;IAAAiB,GAAA;IAAAC,KAAA,EACD,SAAAJ,OAAOZ,SAAS,EAAEC,OAAO,EAAE;MACvB,IAAI,CAACO,OAAO,GAAGS,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAC5C,IAAI,CAACV,OAAO,CAACW,SAAS,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACvD,IAAI,CAACZ,OAAO,CAACa,YAAY,CAAC,MAAM,EAAE,aAAa,CAAC;MAChD,IAAI,CAACb,OAAO,CAACa,YAAY,CAAC,eAAe,EAAE,GAAG,CAAC;MAC/CrB,SAAS,CAACsB,WAAW,CAAC,IAAI,CAACd,OAAO,CAAC;MACnC,IAAI,CAACe,GAAG,GAAGN,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACxC,IAAI,CAACK,GAAG,CAACJ,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC;MACtC,IAAI,CAACG,GAAG,CAACC,KAAK,CAACC,eAAe,GAAG,CAACxB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACyB,qBAAqB,KAAK,SAAS;MAC/H,IAAI,CAAClB,OAAO,CAACc,WAAW,CAAC,IAAI,CAACC,GAAG,CAAC;IACtC;EAAC;IAAAR,GAAA;IAAAC,KAAA,EACD,SAAAW,IAAA,EAAM;MACF,IAAI,CAACJ,GAAG,CAACC,KAAK,CAACI,KAAK,GAAG,SAAS;MAChC,IAAI,CAACL,GAAG,CAACC,KAAK,CAACK,OAAO,GAAG,GAAG;MAC5B,IAAI,CAACrB,OAAO,CAACW,SAAS,CAACW,MAAM,CAACpC,UAAU,EAAEC,YAAY,EAAEC,yBAAyB,EAAEC,YAAY,CAAC;MAChG,IAAI,CAACQ,SAAS,GAAG,CAAC;MAClB,IAAI,CAAC0B,SAAS,GAAGC,SAAS;MAC1B,IAAI,CAACvB,oBAAoB,CAACwB,MAAM,CAAC,CAAC;IACtC;IACA;AACJ;AACA;EAFI;IAAAlB,GAAA;IAAAC,KAAA,EAGA,SAAAkB,KAAA,EAAO;MACH,OAAO,IAAI,CAACC,MAAM,CAAC,KAAK,CAAC;IAC7B;EAAC;IAAApB,GAAA;IAAAC,KAAA,EACD,SAAAmB,OAAOC,OAAO,EAAE;MAAA,IAAAC,MAAA;MACZ,IAAI,CAAC7B,OAAO,CAACW,SAAS,CAACC,GAAG,CAAC3B,QAAQ,CAAC;MACpC;MACA,IAAI,CAAC,IAAI,CAACe,OAAO,CAACW,SAAS,CAACmB,QAAQ,CAAC3C,YAAY,CAAC,EAAE;QAChD,IAAI,CAAC4B,GAAG,CAACC,KAAK,CAACI,KAAK,GAAG,SAAS;QAChC,IAAIQ,OAAO,EAAE;UACTG,UAAU,CAAC;YAAA,OAAMF,MAAI,CAACV,GAAG,CAAC,CAAC;UAAA,GAAE,GAAG,CAAC;QACrC,CAAC,MACI;UACD,IAAI,CAACA,GAAG,CAAC,CAAC;QACd;MACJ;MACA;MAAA,KACK;QACD,IAAI,CAACJ,GAAG,CAACC,KAAK,CAACK,OAAO,GAAG,GAAG;QAC5B,IAAIO,OAAO,EAAE;UACTG,UAAU,CAAC;YAAA,OAAMF,MAAI,CAACV,GAAG,CAAC,CAAC;UAAA,GAAE,GAAG,CAAC;QACrC,CAAC,MACI;UACD,IAAI,CAACA,GAAG,CAAC,CAAC;QACd;MACJ;MACA,OAAO,IAAI;IACf;IACA;AACJ;AACA;EAFI;IAAAZ,GAAA;IAAAC,KAAA,EAGA,SAAAwB,SAAA,EAAW;MACP,IAAI,CAACjB,GAAG,CAACC,KAAK,CAACI,KAAK,GAAG,IAAI;MAC3B,IAAI,CAACL,GAAG,CAACC,KAAK,CAACK,OAAO,GAAG,GAAG;MAC5B,IAAI,CAACrB,OAAO,CAACW,SAAS,CAACW,MAAM,CAACjC,YAAY,EAAEJ,QAAQ,EAAEG,yBAAyB,CAAC;MAChF,IAAI,CAACY,OAAO,CAACW,SAAS,CAACC,GAAG,CAAC1B,UAAU,EAAEC,YAAY,CAAC;MACpD,IAAI,CAACc,oBAAoB,CAACgC,QAAQ,CAAC,CAAC;MACpC,OAAO,IAAI;IACf;EAAC;IAAA1B,GAAA;IAAAC,KAAA,EACD,SAAAN,oBAAA,EAAsB;MAClB,IAAI,CAACF,OAAO,CAACW,SAAS,CAACC,GAAG,CAACxB,yBAAyB,CAAC;IACzD;EAAC;IAAAmB,GAAA;IAAAC,KAAA,EACD,SAAA0B,aAAA,EAAe;MACX,OAAO,IAAI,CAAClC,OAAO;IACvB;EAAC;AAAA,EAzE4BhB,UAAU;AA2E3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAM,WAAW,CAACa,+BAA+B,GAAG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}