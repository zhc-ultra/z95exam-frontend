{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _typeof from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, observableSignal, observableSignalFromEvent, observableValue, transaction, waitForState } from '../../../../base/common/observable.js';\nimport { IDiffProviderFactoryService } from './diffProviderFactoryService.js';\nimport { filterWithPrevious, readHotReloadableExport } from './utils.js';\nimport { LineRange, LineRangeSet } from '../../../common/core/lineRange.js';\nimport { DefaultLinesDiffComputer } from '../../../common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js';\nimport { DetailedLineRangeMapping, LineRangeMapping, RangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { TextEditInfo } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js';\nimport { combineTextEditInfos } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos.js';\nimport { optimizeSequenceDiffs } from '../../../common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { groupAdjacentBy } from '../../../../base/common/arrays.js';\nimport { softAssert } from '../../../../base/common/assert.js';\nvar DiffEditorViewModel = /*#__PURE__*/function (_Disposable) {\n  function DiffEditorViewModel(model, _options, _diffProviderFactoryService) {\n    var _this;\n    _classCallCheck(this, DiffEditorViewModel);\n    _this = _callSuper(this, DiffEditorViewModel);\n    _this.model = model;\n    _this._options = _options;\n    _this._diffProviderFactoryService = _diffProviderFactoryService;\n    _this._isDiffUpToDate = observableValue(_this, false);\n    _this.isDiffUpToDate = _this._isDiffUpToDate;\n    _this._diff = observableValue(_this, undefined);\n    _this.diff = _this._diff;\n    _this._unchangedRegions = observableValue(_this, undefined);\n    _this.unchangedRegions = derived(_this, function (r) {\n      var _a, _b;\n      if (_this._options.hideUnchangedRegions.read(r)) {\n        return (_b = (_a = _this._unchangedRegions.read(r)) === null || _a === void 0 ? void 0 : _a.regions) !== null && _b !== void 0 ? _b : [];\n      } else {\n        // Reset state\n        transaction(function (tx) {\n          var _a;\n          var _iterator = _createForOfIteratorHelper(((_a = _this._unchangedRegions.get()) === null || _a === void 0 ? void 0 : _a.regions) || []),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _r = _step.value;\n              _r.collapseAll(tx);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n        return [];\n      }\n    });\n    _this.movedTextToCompare = observableValue(_this, undefined);\n    _this._activeMovedText = observableValue(_this, undefined);\n    _this._hoveredMovedText = observableValue(_this, undefined);\n    _this.activeMovedText = derived(_this, function (r) {\n      var _a, _b;\n      return (_b = (_a = _this.movedTextToCompare.read(r)) !== null && _a !== void 0 ? _a : _this._hoveredMovedText.read(r)) !== null && _b !== void 0 ? _b : _this._activeMovedText.read(r);\n    });\n    _this._cancellationTokenSource = new CancellationTokenSource();\n    _this._diffProvider = derived(_this, function (reader) {\n      var diffProvider = _this._diffProviderFactoryService.createDiffProvider({\n        diffAlgorithm: _this._options.diffAlgorithm.read(reader)\n      });\n      var onChangeSignal = observableSignalFromEvent('onDidChange', diffProvider.onDidChange);\n      return {\n        diffProvider: diffProvider,\n        onChangeSignal: onChangeSignal\n      };\n    });\n    _this._register(toDisposable(function () {\n      return _this._cancellationTokenSource.cancel();\n    }));\n    var contentChangedSignal = observableSignal('contentChangedSignal');\n    var debouncer = _this._register(new RunOnceScheduler(function () {\n      return contentChangedSignal.trigger(undefined);\n    }, 200));\n    _this._register(autorun(function (reader) {\n      /** @description collapse touching unchanged ranges */\n      var lastUnchangedRegions = _this._unchangedRegions.read(reader);\n      if (!lastUnchangedRegions || lastUnchangedRegions.regions.some(function (r) {\n        return r.isDragged.read(reader);\n      })) {\n        return;\n      }\n      var lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds.map(function (id) {\n        return model.original.getDecorationRange(id);\n      }).map(function (r) {\n        return r ? LineRange.fromRangeInclusive(r) : undefined;\n      });\n      var lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds.map(function (id) {\n        return model.modified.getDecorationRange(id);\n      }).map(function (r) {\n        return r ? LineRange.fromRangeInclusive(r) : undefined;\n      });\n      var updatedLastUnchangedRegions = lastUnchangedRegions.regions.map(function (r, idx) {\n        return !lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx] ? undefined : new UnchangedRegion(lastUnchangedRegionsOrigRanges[idx].startLineNumber, lastUnchangedRegionsModRanges[idx].startLineNumber, lastUnchangedRegionsOrigRanges[idx].length, r.visibleLineCountTop.read(reader), r.visibleLineCountBottom.read(reader));\n      }).filter(isDefined);\n      var newRanges = [];\n      var didChange = false;\n      var _iterator2 = _createForOfIteratorHelper(groupAdjacentBy(updatedLastUnchangedRegions, function (a, b) {\n          return a.getHiddenModifiedRange(reader).endLineNumberExclusive === b.getHiddenModifiedRange(reader).startLineNumber;\n        })),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var touching = _step2.value;\n          if (touching.length > 1) {\n            didChange = true;\n            var sumLineCount = touching.reduce(function (sum, r) {\n              return sum + r.lineCount;\n            }, 0);\n            var r = new UnchangedRegion(touching[0].originalLineNumber, touching[0].modifiedLineNumber, sumLineCount, touching[0].visibleLineCountTop.get(), touching[touching.length - 1].visibleLineCountBottom.get());\n            newRanges.push(r);\n          } else {\n            newRanges.push(touching[0]);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (didChange) {\n        var originalDecorationIds = model.original.deltaDecorations(lastUnchangedRegions.originalDecorationIds, newRanges.map(function (r) {\n          return {\n            range: r.originalUnchangedRange.toInclusiveRange(),\n            options: {\n              description: 'unchanged'\n            }\n          };\n        }));\n        var modifiedDecorationIds = model.modified.deltaDecorations(lastUnchangedRegions.modifiedDecorationIds, newRanges.map(function (r) {\n          return {\n            range: r.modifiedUnchangedRange.toInclusiveRange(),\n            options: {\n              description: 'unchanged'\n            }\n          };\n        }));\n        transaction(function (tx) {\n          _this._unchangedRegions.set({\n            regions: newRanges,\n            originalDecorationIds: originalDecorationIds,\n            modifiedDecorationIds: modifiedDecorationIds\n          }, tx);\n        });\n      }\n    }));\n    var updateUnchangedRegions = function updateUnchangedRegions(result, tx, reader) {\n      var newUnchangedRegions = UnchangedRegion.fromDiffs(result.changes, model.original.getLineCount(), model.modified.getLineCount(), _this._options.hideUnchangedRegionsMinimumLineCount.read(reader), _this._options.hideUnchangedRegionsContextLineCount.read(reader));\n      // Transfer state from cur state\n      var visibleRegions = undefined;\n      var lastUnchangedRegions = _this._unchangedRegions.get();\n      if (lastUnchangedRegions) {\n        var lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds.map(function (id) {\n          return model.original.getDecorationRange(id);\n        }).map(function (r) {\n          return r ? LineRange.fromRangeInclusive(r) : undefined;\n        });\n        var lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds.map(function (id) {\n          return model.modified.getDecorationRange(id);\n        }).map(function (r) {\n          return r ? LineRange.fromRangeInclusive(r) : undefined;\n        });\n        var updatedLastUnchangedRegions = filterWithPrevious(lastUnchangedRegions.regions.map(function (r, idx) {\n          if (!lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx]) {\n            return undefined;\n          }\n          var length = lastUnchangedRegionsOrigRanges[idx].length;\n          return new UnchangedRegion(lastUnchangedRegionsOrigRanges[idx].startLineNumber, lastUnchangedRegionsModRanges[idx].startLineNumber, length,\n          // The visible area can shrink by edits -> we have to account for this\n          Math.min(r.visibleLineCountTop.get(), length), Math.min(r.visibleLineCountBottom.get(), length - r.visibleLineCountTop.get()));\n        }).filter(isDefined), function (cur, prev) {\n          return !prev || cur.modifiedLineNumber >= prev.modifiedLineNumber + prev.lineCount && cur.originalLineNumber >= prev.originalLineNumber + prev.lineCount;\n        });\n        var hiddenRegions = updatedLastUnchangedRegions.map(function (r) {\n          return new LineRangeMapping(r.getHiddenOriginalRange(reader), r.getHiddenModifiedRange(reader));\n        });\n        hiddenRegions = LineRangeMapping.clip(hiddenRegions, LineRange.ofLength(1, model.original.getLineCount()), LineRange.ofLength(1, model.modified.getLineCount()));\n        visibleRegions = LineRangeMapping.inverse(hiddenRegions, model.original.getLineCount(), model.modified.getLineCount());\n      }\n      var newUnchangedRegions2 = [];\n      if (visibleRegions) {\n        var _iterator3 = _createForOfIteratorHelper(newUnchangedRegions),\n          _step3;\n        try {\n          var _loop = function _loop() {\n            var r = _step3.value;\n            var intersecting = visibleRegions.filter(function (f) {\n              return f.original.intersectsStrict(r.originalUnchangedRange) && f.modified.intersectsStrict(r.modifiedUnchangedRange);\n            });\n            newUnchangedRegions2.push.apply(newUnchangedRegions2, _toConsumableArray(r.setVisibleRanges(intersecting, tx)));\n          };\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            _loop();\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else {\n        newUnchangedRegions2.push.apply(newUnchangedRegions2, _toConsumableArray(newUnchangedRegions));\n      }\n      var originalDecorationIds = model.original.deltaDecorations((lastUnchangedRegions === null || lastUnchangedRegions === void 0 ? void 0 : lastUnchangedRegions.originalDecorationIds) || [], newUnchangedRegions2.map(function (r) {\n        return {\n          range: r.originalUnchangedRange.toInclusiveRange(),\n          options: {\n            description: 'unchanged'\n          }\n        };\n      }));\n      var modifiedDecorationIds = model.modified.deltaDecorations((lastUnchangedRegions === null || lastUnchangedRegions === void 0 ? void 0 : lastUnchangedRegions.modifiedDecorationIds) || [], newUnchangedRegions2.map(function (r) {\n        return {\n          range: r.modifiedUnchangedRange.toInclusiveRange(),\n          options: {\n            description: 'unchanged'\n          }\n        };\n      }));\n      _this._unchangedRegions.set({\n        regions: newUnchangedRegions2,\n        originalDecorationIds: originalDecorationIds,\n        modifiedDecorationIds: modifiedDecorationIds\n      }, tx);\n    };\n    _this._register(model.modified.onDidChangeContent(function (e) {\n      var diff = _this._diff.get();\n      if (diff) {\n        var textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n        var result = applyModifiedEdits(_this._lastDiff, textEdits, model.original, model.modified);\n        if (result) {\n          _this._lastDiff = result;\n          transaction(function (tx) {\n            _this._diff.set(DiffState.fromDiffResult(_this._lastDiff), tx);\n            updateUnchangedRegions(result, tx);\n            var currentSyncedMovedText = _this.movedTextToCompare.get();\n            _this.movedTextToCompare.set(currentSyncedMovedText ? _this._lastDiff.moves.find(function (m) {\n              return m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified);\n            }) : undefined, tx);\n          });\n        }\n      }\n      _this._isDiffUpToDate.set(false, undefined);\n      debouncer.schedule();\n    }));\n    _this._register(model.original.onDidChangeContent(function (e) {\n      var diff = _this._diff.get();\n      if (diff) {\n        var textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n        var result = applyOriginalEdits(_this._lastDiff, textEdits, model.original, model.modified);\n        if (result) {\n          _this._lastDiff = result;\n          transaction(function (tx) {\n            _this._diff.set(DiffState.fromDiffResult(_this._lastDiff), tx);\n            updateUnchangedRegions(result, tx);\n            var currentSyncedMovedText = _this.movedTextToCompare.get();\n            _this.movedTextToCompare.set(currentSyncedMovedText ? _this._lastDiff.moves.find(function (m) {\n              return m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified);\n            }) : undefined, tx);\n          });\n        }\n      }\n      _this._isDiffUpToDate.set(false, undefined);\n      debouncer.schedule();\n    }));\n    _this._register(autorunWithStore( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(reader, store) {\n        var _a, _b, documentDiffProvider, originalTextEditInfos, modifiedTextEditInfos, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              /** @description compute diff */\n\n              // So that they get recomputed when these settings change\n              _this._options.hideUnchangedRegionsMinimumLineCount.read(reader);\n              _this._options.hideUnchangedRegionsContextLineCount.read(reader);\n              debouncer.cancel();\n              contentChangedSignal.read(reader);\n              documentDiffProvider = _this._diffProvider.read(reader);\n              documentDiffProvider.onChangeSignal.read(reader);\n              readHotReloadableExport(DefaultLinesDiffComputer, reader);\n              readHotReloadableExport(optimizeSequenceDiffs, reader);\n              _this._isDiffUpToDate.set(false, undefined);\n              originalTextEditInfos = [];\n              store.add(model.original.onDidChangeContent(function (e) {\n                var edits = TextEditInfo.fromModelContentChanges(e.changes);\n                originalTextEditInfos = combineTextEditInfos(originalTextEditInfos, edits);\n              }));\n              modifiedTextEditInfos = [];\n              store.add(model.modified.onDidChangeContent(function (e) {\n                var edits = TextEditInfo.fromModelContentChanges(e.changes);\n                modifiedTextEditInfos = combineTextEditInfos(modifiedTextEditInfos, edits);\n              }));\n              _context.next = 15;\n              return documentDiffProvider.diffProvider.computeDiff(model.original, model.modified, {\n                ignoreTrimWhitespace: _this._options.ignoreTrimWhitespace.read(reader),\n                maxComputationTimeMs: _this._options.maxComputationTimeMs.read(reader),\n                computeMoves: _this._options.showMoves.read(reader)\n              }, _this._cancellationTokenSource.token);\n            case 15:\n              result = _context.sent;\n              if (!_this._cancellationTokenSource.token.isCancellationRequested) {\n                _context.next = 18;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 18:\n              result = normalizeDocumentDiff(result, model.original, model.modified);\n              result = (_a = applyOriginalEdits(result, originalTextEditInfos, model.original, model.modified)) !== null && _a !== void 0 ? _a : result;\n              result = (_b = applyModifiedEdits(result, modifiedTextEditInfos, model.original, model.modified)) !== null && _b !== void 0 ? _b : result;\n              transaction(function (tx) {\n                /** @description write diff result */\n                updateUnchangedRegions(result, tx);\n                _this._lastDiff = result;\n                var state = DiffState.fromDiffResult(result);\n                _this._diff.set(state, tx);\n                _this._isDiffUpToDate.set(true, tx);\n                var currentSyncedMovedText = _this.movedTextToCompare.get();\n                _this.movedTextToCompare.set(currentSyncedMovedText ? _this._lastDiff.moves.find(function (m) {\n                  return m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified);\n                }) : undefined, tx);\n              });\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()));\n    return _this;\n  }\n  _inherits(DiffEditorViewModel, _Disposable);\n  return _createClass(DiffEditorViewModel, [{\n    key: \"setActiveMovedText\",\n    value: function setActiveMovedText(movedText) {\n      this._activeMovedText.set(movedText, undefined);\n    }\n  }, {\n    key: \"ensureModifiedLineIsVisible\",\n    value: function ensureModifiedLineIsVisible(lineNumber, preference, tx) {\n      var _a, _b;\n      if (((_a = this.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings.length) === 0) {\n        return;\n      }\n      var unchangedRegions = ((_b = this._unchangedRegions.get()) === null || _b === void 0 ? void 0 : _b.regions) || [];\n      var _iterator4 = _createForOfIteratorHelper(unchangedRegions),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var r = _step4.value;\n          if (r.getHiddenModifiedRange(undefined).contains(lineNumber)) {\n            r.showModifiedLine(lineNumber, preference, tx);\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"ensureOriginalLineIsVisible\",\n    value: function ensureOriginalLineIsVisible(lineNumber, preference, tx) {\n      var _a, _b;\n      if (((_a = this.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings.length) === 0) {\n        return;\n      }\n      var unchangedRegions = ((_b = this._unchangedRegions.get()) === null || _b === void 0 ? void 0 : _b.regions) || [];\n      var _iterator5 = _createForOfIteratorHelper(unchangedRegions),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var r = _step5.value;\n          if (r.getHiddenOriginalRange(undefined).contains(lineNumber)) {\n            r.showOriginalLine(lineNumber, preference, tx);\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"waitForDiff\",\n    value: function () {\n      var _waitForDiff = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return waitForState(this.isDiffUpToDate, function (s) {\n                return s;\n              });\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function waitForDiff() {\n        return _waitForDiff.apply(this, arguments);\n      }\n      return waitForDiff;\n    }()\n  }, {\n    key: \"serializeState\",\n    value: function serializeState() {\n      var regions = this._unchangedRegions.get();\n      return {\n        collapsedRegions: regions === null || regions === void 0 ? void 0 : regions.regions.map(function (r) {\n          return {\n            range: r.getHiddenModifiedRange(undefined).serialize()\n          };\n        })\n      };\n    }\n  }, {\n    key: \"restoreSerializedState\",\n    value: function restoreSerializedState(state) {\n      var _a;\n      var ranges = (_a = state.collapsedRegions) === null || _a === void 0 ? void 0 : _a.map(function (r) {\n        return LineRange.deserialize(r.range);\n      });\n      var regions = this._unchangedRegions.get();\n      if (!regions || !ranges) {\n        return;\n      }\n      transaction(function (tx) {\n        var _iterator6 = _createForOfIteratorHelper(regions.regions),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var r = _step6.value;\n            var _iterator7 = _createForOfIteratorHelper(ranges),\n              _step7;\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var range = _step7.value;\n                if (r.modifiedUnchangedRange.intersect(range)) {\n                  r.setHiddenModifiedRange(range, tx);\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      });\n    }\n  }]);\n}(Disposable);\nDiffEditorViewModel = __decorate([__param(2, IDiffProviderFactoryService)], DiffEditorViewModel);\nexport { DiffEditorViewModel };\nfunction normalizeDocumentDiff(diff, original, modified) {\n  return {\n    changes: diff.changes.map(function (c) {\n      return new DetailedLineRangeMapping(c.original, c.modified, c.innerChanges ? c.innerChanges.map(function (i) {\n        return normalizeRangeMapping(i, original, modified);\n      }) : undefined);\n    }),\n    moves: diff.moves,\n    identical: diff.identical,\n    quitEarly: diff.quitEarly\n  };\n}\nfunction normalizeRangeMapping(rangeMapping, original, modified) {\n  var originalRange = rangeMapping.originalRange;\n  var modifiedRange = rangeMapping.modifiedRange;\n  if ((originalRange.endColumn !== 1 || modifiedRange.endColumn !== 1) && originalRange.endColumn === original.getLineMaxColumn(originalRange.endLineNumber) && modifiedRange.endColumn === modified.getLineMaxColumn(modifiedRange.endLineNumber) && originalRange.endLineNumber < original.getLineCount() && modifiedRange.endLineNumber < modified.getLineCount()) {\n    originalRange = originalRange.setEndPosition(originalRange.endLineNumber + 1, 1);\n    modifiedRange = modifiedRange.setEndPosition(modifiedRange.endLineNumber + 1, 1);\n  }\n  return new RangeMapping(originalRange, modifiedRange);\n}\nexport var DiffState = /*#__PURE__*/function () {\n  function DiffState(mappings, movedTexts, identical, quitEarly) {\n    _classCallCheck(this, DiffState);\n    this.mappings = mappings;\n    this.movedTexts = movedTexts;\n    this.identical = identical;\n    this.quitEarly = quitEarly;\n  }\n  return _createClass(DiffState, null, [{\n    key: \"fromDiffResult\",\n    value: function fromDiffResult(result) {\n      return new DiffState(result.changes.map(function (c) {\n        return new DiffMapping(c);\n      }), result.moves || [], result.identical, result.quitEarly);\n    }\n  }]);\n}();\nexport var DiffMapping = /*#__PURE__*/_createClass(function DiffMapping(lineRangeMapping) {\n  _classCallCheck(this, DiffMapping);\n  this.lineRangeMapping = lineRangeMapping;\n  /*\n  readonly movedTo: MovedText | undefined,\n  readonly movedFrom: MovedText | undefined,\n   if (movedTo) {\n      assertFn(() =>\n          movedTo.lineRangeMapping.modifiedRange.equals(lineRangeMapping.modifiedRange)\n          && lineRangeMapping.originalRange.isEmpty\n          && !movedFrom\n      );\n  } else if (movedFrom) {\n      assertFn(() =>\n          movedFrom.lineRangeMapping.originalRange.equals(lineRangeMapping.originalRange)\n          && lineRangeMapping.modifiedRange.isEmpty\n          && !movedTo\n      );\n  }\n  */\n});\nexport var UnchangedRegion = /*#__PURE__*/function () {\n  function UnchangedRegion(originalLineNumber, modifiedLineNumber, lineCount, visibleLineCountTop, visibleLineCountBottom) {\n    var _this2 = this;\n    _classCallCheck(this, UnchangedRegion);\n    this.originalLineNumber = originalLineNumber;\n    this.modifiedLineNumber = modifiedLineNumber;\n    this.lineCount = lineCount;\n    this._visibleLineCountTop = observableValue(this, 0);\n    this.visibleLineCountTop = this._visibleLineCountTop;\n    this._visibleLineCountBottom = observableValue(this, 0);\n    this.visibleLineCountBottom = this._visibleLineCountBottom;\n    this._shouldHideControls = derived(this, function (reader) {\n      return /** @description isVisible */_this2.visibleLineCountTop.read(reader) + _this2.visibleLineCountBottom.read(reader) === _this2.lineCount && !_this2.isDragged.read(reader);\n    });\n    this.isDragged = observableValue(this, undefined);\n    var visibleLineCountTop2 = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n    var visibleLineCountBottom2 = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n    softAssert(visibleLineCountTop === visibleLineCountTop2);\n    softAssert(visibleLineCountBottom === visibleLineCountBottom2);\n    this._visibleLineCountTop.set(visibleLineCountTop2, undefined);\n    this._visibleLineCountBottom.set(visibleLineCountBottom2, undefined);\n  }\n  return _createClass(UnchangedRegion, [{\n    key: \"originalUnchangedRange\",\n    get: function get() {\n      return LineRange.ofLength(this.originalLineNumber, this.lineCount);\n    }\n  }, {\n    key: \"modifiedUnchangedRange\",\n    get: function get() {\n      return LineRange.ofLength(this.modifiedLineNumber, this.lineCount);\n    }\n  }, {\n    key: \"setVisibleRanges\",\n    value: function setVisibleRanges(visibleRanges, tx) {\n      var result = [];\n      var hiddenModified = new LineRangeSet(visibleRanges.map(function (r) {\n        return r.modified;\n      })).subtractFrom(this.modifiedUnchangedRange);\n      var originalStartLineNumber = this.originalLineNumber;\n      var modifiedStartLineNumber = this.modifiedLineNumber;\n      var modifiedEndLineNumberEx = this.modifiedLineNumber + this.lineCount;\n      if (hiddenModified.ranges.length === 0) {\n        this.showAll(tx);\n        result.push(this);\n      } else {\n        var i = 0;\n        var _iterator8 = _createForOfIteratorHelper(hiddenModified.ranges),\n          _step8;\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var r = _step8.value;\n            var isLast = i === hiddenModified.ranges.length - 1;\n            i++;\n            var length = (isLast ? modifiedEndLineNumberEx : r.endLineNumberExclusive) - modifiedStartLineNumber;\n            var newR = new UnchangedRegion(originalStartLineNumber, modifiedStartLineNumber, length, 0, 0);\n            newR.setHiddenModifiedRange(r, tx);\n            result.push(newR);\n            originalStartLineNumber = newR.originalUnchangedRange.endLineNumberExclusive;\n            modifiedStartLineNumber = newR.modifiedUnchangedRange.endLineNumberExclusive;\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"shouldHideControls\",\n    value: function shouldHideControls(reader) {\n      return this._shouldHideControls.read(reader);\n    }\n  }, {\n    key: \"getHiddenOriginalRange\",\n    value: function getHiddenOriginalRange(reader) {\n      return LineRange.ofLength(this.originalLineNumber + this._visibleLineCountTop.read(reader), this.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader));\n    }\n  }, {\n    key: \"getHiddenModifiedRange\",\n    value: function getHiddenModifiedRange(reader) {\n      return LineRange.ofLength(this.modifiedLineNumber + this._visibleLineCountTop.read(reader), this.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader));\n    }\n  }, {\n    key: \"setHiddenModifiedRange\",\n    value: function setHiddenModifiedRange(range, tx) {\n      var visibleLineCountTop = range.startLineNumber - this.modifiedLineNumber;\n      var visibleLineCountBottom = this.modifiedLineNumber + this.lineCount - range.endLineNumberExclusive;\n      this.setState(visibleLineCountTop, visibleLineCountBottom, tx);\n    }\n  }, {\n    key: \"getMaxVisibleLineCountTop\",\n    value: function getMaxVisibleLineCountTop() {\n      return this.lineCount - this._visibleLineCountBottom.get();\n    }\n  }, {\n    key: \"getMaxVisibleLineCountBottom\",\n    value: function getMaxVisibleLineCountBottom() {\n      return this.lineCount - this._visibleLineCountTop.get();\n    }\n  }, {\n    key: \"showMoreAbove\",\n    value: function showMoreAbove() {\n      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      var tx = arguments.length > 1 ? arguments[1] : undefined;\n      var maxVisibleLineCountTop = this.getMaxVisibleLineCountTop();\n      this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + count, maxVisibleLineCountTop), tx);\n    }\n  }, {\n    key: \"showMoreBelow\",\n    value: function showMoreBelow() {\n      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n      var tx = arguments.length > 1 ? arguments[1] : undefined;\n      var maxVisibleLineCountBottom = this.lineCount - this._visibleLineCountTop.get();\n      this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + count, maxVisibleLineCountBottom), tx);\n    }\n  }, {\n    key: \"showAll\",\n    value: function showAll(tx) {\n      this._visibleLineCountBottom.set(this.lineCount - this._visibleLineCountTop.get(), tx);\n    }\n  }, {\n    key: \"showModifiedLine\",\n    value: function showModifiedLine(lineNumber, preference, tx) {\n      var top = lineNumber + 1 - (this.modifiedLineNumber + this._visibleLineCountTop.get());\n      var bottom = this.modifiedLineNumber - this._visibleLineCountBottom.get() + this.lineCount - lineNumber;\n      if (preference === 0 /* RevealPreference.FromCloserSide */ && top < bottom || preference === 1 /* RevealPreference.FromTop */) {\n        this._visibleLineCountTop.set(this._visibleLineCountTop.get() + top, tx);\n      } else {\n        this._visibleLineCountBottom.set(this._visibleLineCountBottom.get() + bottom, tx);\n      }\n    }\n  }, {\n    key: \"showOriginalLine\",\n    value: function showOriginalLine(lineNumber, preference, tx) {\n      var top = lineNumber - this.originalLineNumber;\n      var bottom = this.originalLineNumber + this.lineCount - lineNumber;\n      if (preference === 0 /* RevealPreference.FromCloserSide */ && top < bottom || preference === 1 /* RevealPreference.FromTop */) {\n        this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + bottom - top, this.getMaxVisibleLineCountTop()), tx);\n      } else {\n        this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + top - bottom, this.getMaxVisibleLineCountBottom()), tx);\n      }\n    }\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll(tx) {\n      this._visibleLineCountTop.set(0, tx);\n      this._visibleLineCountBottom.set(0, tx);\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(visibleLineCountTop, visibleLineCountBottom, tx) {\n      visibleLineCountTop = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n      visibleLineCountBottom = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n      this._visibleLineCountTop.set(visibleLineCountTop, tx);\n      this._visibleLineCountBottom.set(visibleLineCountBottom, tx);\n    }\n  }], [{\n    key: \"fromDiffs\",\n    value: function fromDiffs(changes, originalLineCount, modifiedLineCount, minHiddenLineCount, minContext) {\n      var inversedMappings = DetailedLineRangeMapping.inverse(changes, originalLineCount, modifiedLineCount);\n      var result = [];\n      var _iterator9 = _createForOfIteratorHelper(inversedMappings),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var mapping = _step9.value;\n          var origStart = mapping.original.startLineNumber;\n          var modStart = mapping.modified.startLineNumber;\n          var length = mapping.original.length;\n          var atStart = origStart === 1 && modStart === 1;\n          var atEnd = origStart + length === originalLineCount + 1 && modStart + length === modifiedLineCount + 1;\n          if ((atStart || atEnd) && length >= minContext + minHiddenLineCount) {\n            if (atStart && !atEnd) {\n              length -= minContext;\n            }\n            if (atEnd && !atStart) {\n              origStart += minContext;\n              modStart += minContext;\n              length -= minContext;\n            }\n            result.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n          } else if (length >= minContext * 2 + minHiddenLineCount) {\n            origStart += minContext;\n            modStart += minContext;\n            length -= minContext * 2;\n            result.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return result;\n    }\n  }]);\n}();\nfunction applyOriginalEdits(diff, textEdits, originalTextModel, modifiedTextModel) {\n  return undefined;\n  /*\n  TODO@hediet\n  if (textEdits.length === 0) {\n      return diff;\n  }\n   const diff2 = flip(diff);\n  const diff3 = applyModifiedEdits(diff2, textEdits, modifiedTextModel, originalTextModel);\n  if (!diff3) {\n      return undefined;\n  }\n  return flip(diff3);*/\n}\n/*\nfunction flip(diff: IDocumentDiff): IDocumentDiff {\n    return {\n        changes: diff.changes.map(c => c.flip()),\n        moves: diff.moves.map(m => m.flip()),\n        identical: diff.identical,\n        quitEarly: diff.quitEarly,\n    };\n}\n*/\nfunction applyModifiedEdits(diff, textEdits, originalTextModel, modifiedTextModel) {\n  return undefined;\n  /*\n  TODO@hediet\n  if (textEdits.length === 0) {\n      return diff;\n  }\n  if (diff.changes.some(c => !c.innerChanges) || diff.moves.length > 0) {\n      // TODO support these cases\n      return undefined;\n  }\n   const changes = applyModifiedEditsToLineRangeMappings(diff.changes, textEdits, originalTextModel, modifiedTextModel);\n   const moves = diff.moves.map(m => {\n      const newModifiedRange = applyEditToLineRange(m.lineRangeMapping.modified, textEdits);\n      return newModifiedRange ? new MovedText(\n          new SimpleLineRangeMapping(m.lineRangeMapping.original, newModifiedRange),\n          applyModifiedEditsToLineRangeMappings(m.changes, textEdits, originalTextModel, modifiedTextModel),\n      ) : undefined;\n  }).filter(isDefined);\n   return {\n      identical: false,\n      quitEarly: false,\n      changes,\n      moves,\n  };*/\n}\n/*\nfunction applyEditToLineRange(range: LineRange, textEdits: TextEditInfo[]): LineRange | undefined {\n    let rangeStartLineNumber = range.startLineNumber;\n    let rangeEndLineNumberEx = range.endLineNumberExclusive;\n\n    for (let i = textEdits.length - 1; i >= 0; i--) {\n        const textEdit = textEdits[i];\n        const textEditStartLineNumber = lengthGetLineCount(textEdit.startOffset) + 1;\n        const textEditEndLineNumber = lengthGetLineCount(textEdit.endOffset) + 1;\n        const newLengthLineCount = lengthGetLineCount(textEdit.newLength);\n        const delta = newLengthLineCount - (textEditEndLineNumber - textEditStartLineNumber);\n\n        if (textEditEndLineNumber < rangeStartLineNumber) {\n            // the text edit is before us\n            rangeStartLineNumber += delta;\n            rangeEndLineNumberEx += delta;\n        } else if (textEditStartLineNumber > rangeEndLineNumberEx) {\n            // the text edit is after us\n            // NOOP\n        } else if (textEditStartLineNumber < rangeStartLineNumber && rangeEndLineNumberEx < textEditEndLineNumber) {\n            // the range is fully contained in the text edit\n            return undefined;\n        } else if (textEditStartLineNumber < rangeStartLineNumber && textEditEndLineNumber <= rangeEndLineNumberEx) {\n            // the text edit ends inside our range\n            rangeStartLineNumber = textEditEndLineNumber + 1;\n            rangeStartLineNumber += delta;\n            rangeEndLineNumberEx += delta;\n        } else if (rangeStartLineNumber <= textEditStartLineNumber && textEditEndLineNumber < rangeStartLineNumber) {\n            // the text edit starts inside our range\n            rangeEndLineNumberEx = textEditStartLineNumber;\n        } else {\n            rangeEndLineNumberEx += delta;\n        }\n    }\n\n    return new LineRange(rangeStartLineNumber, rangeEndLineNumberEx);\n}\n\nfunction applyModifiedEditsToLineRangeMappings(changes: readonly LineRangeMapping[], textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): LineRangeMapping[] {\n    const diffTextEdits = changes.flatMap(c => c.innerChanges!.map(c => new TextEditInfo(\n        positionToLength(c.originalRange.getStartPosition()),\n        positionToLength(c.originalRange.getEndPosition()),\n        lengthOfRange(c.modifiedRange).toLength(),\n    )));\n\n    const combined = combineTextEditInfos(diffTextEdits, textEdits);\n\n    let lastOriginalEndOffset = lengthZero;\n    let lastModifiedEndOffset = lengthZero;\n    const rangeMappings = combined.map(c => {\n        const modifiedStartOffset = lengthAdd(lastModifiedEndOffset, lengthDiffNonNegative(lastOriginalEndOffset, c.startOffset));\n        lastOriginalEndOffset = c.endOffset;\n        lastModifiedEndOffset = lengthAdd(modifiedStartOffset, c.newLength);\n\n        return new RangeMapping(\n            Range.fromPositions(lengthToPosition(c.startOffset), lengthToPosition(c.endOffset)),\n            Range.fromPositions(lengthToPosition(modifiedStartOffset), lengthToPosition(lastModifiedEndOffset)),\n        );\n    });\n\n    const newChanges = lineRangeMappingFromRangeMappings(\n        rangeMappings,\n        originalTextModel.getLinesContent(),\n        modifiedTextModel.getLinesContent(),\n    );\n    return newChanges;\n}\n*/","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","_typeof","decorate","i","defineProperty","__param","paramIndex","decorator","RunOnceScheduler","CancellationTokenSource","Disposable","toDisposable","autorun","autorunWithStore","derived","observableSignal","observableSignalFromEvent","observableValue","transaction","waitForState","IDiffProviderFactoryService","filterWithPrevious","readHotReloadableExport","LineRange","LineRangeSet","DefaultLinesDiffComputer","DetailedLineRangeMapping","LineRangeMapping","RangeMapping","TextEditInfo","combineTextEditInfos","optimizeSequenceDiffs","isDefined","groupAdjacentBy","softAssert","DiffEditorViewModel","_Disposable","model","_options","_diffProviderFactoryService","_this","_classCallCheck","_callSuper","_isDiffUpToDate","isDiffUpToDate","_diff","undefined","diff","_unchangedRegions","unchangedRegions","_a","_b","hideUnchangedRegions","read","regions","tx","_iterator","_createForOfIteratorHelper","get","_step","s","n","done","value","collapseAll","err","e","f","movedTextToCompare","_activeMovedText","_hoveredMovedText","activeMovedText","_cancellationTokenSource","_diffProvider","reader","diffProvider","createDiffProvider","diffAlgorithm","onChangeSignal","onDidChange","_register","cancel","contentChangedSignal","debouncer","trigger","lastUnchangedRegions","some","isDragged","lastUnchangedRegionsOrigRanges","originalDecorationIds","map","id","original","getDecorationRange","fromRangeInclusive","lastUnchangedRegionsModRanges","modifiedDecorationIds","modified","updatedLastUnchangedRegions","idx","UnchangedRegion","startLineNumber","visibleLineCountTop","visibleLineCountBottom","filter","newRanges","didChange","_iterator2","a","b","getHiddenModifiedRange","endLineNumberExclusive","_step2","touching","sumLineCount","reduce","sum","lineCount","originalLineNumber","modifiedLineNumber","push","deltaDecorations","range","originalUnchangedRange","toInclusiveRange","options","description","modifiedUnchangedRange","set","updateUnchangedRegions","result","newUnchangedRegions","fromDiffs","changes","getLineCount","hideUnchangedRegionsMinimumLineCount","hideUnchangedRegionsContextLineCount","visibleRegions","Math","min","cur","prev","hiddenRegions","getHiddenOriginalRange","clip","ofLength","inverse","newUnchangedRegions2","_iterator3","_step3","_loop","intersecting","intersectsStrict","apply","_toConsumableArray","setVisibleRanges","onDidChangeContent","textEdits","fromModelContentChanges","applyModifiedEdits","_lastDiff","DiffState","fromDiffResult","currentSyncedMovedText","moves","find","m","lineRangeMapping","intersect","schedule","applyOriginalEdits","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","store","documentDiffProvider","originalTextEditInfos","modifiedTextEditInfos","wrap","_callee$","_context","next","add","edits","computeDiff","ignoreTrimWhitespace","maxComputationTimeMs","computeMoves","showMoves","token","sent","isCancellationRequested","abrupt","normalizeDocumentDiff","state","stop","_x","_x2","_inherits","_createClass","setActiveMovedText","movedText","ensureModifiedLineIsVisible","lineNumber","preference","mappings","_iterator4","_step4","contains","showModifiedLine","ensureOriginalLineIsVisible","_iterator5","_step5","showOriginalLine","_waitForDiff","_callee2","_callee2$","_context2","waitForDiff","serializeState","collapsedRegions","serialize","restoreSerializedState","ranges","deserialize","_iterator6","_step6","_iterator7","_step7","setHiddenModifiedRange","innerChanges","normalizeRangeMapping","identical","quitEarly","rangeMapping","originalRange","modifiedRange","endColumn","getLineMaxColumn","endLineNumber","setEndPosition","movedTexts","DiffMapping","_this2","_visibleLineCountTop","_visibleLineCountBottom","_shouldHideControls","visibleLineCountTop2","max","visibleLineCountBottom2","visibleRanges","hiddenModified","subtractFrom","originalStartLineNumber","modifiedStartLineNumber","modifiedEndLineNumberEx","showAll","_iterator8","_step8","isLast","newR","shouldHideControls","setState","getMaxVisibleLineCountTop","getMaxVisibleLineCountBottom","showMoreAbove","count","maxVisibleLineCountTop","showMoreBelow","maxVisibleLineCountBottom","top","bottom","originalLineCount","modifiedLineCount","minHiddenLineCount","minContext","inversedMappings","_iterator9","_step9","mapping","origStart","modStart","atStart","atEnd","originalTextModel","modifiedTextModel"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/browser/widget/diffEditor/diffEditorViewModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { Disposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, autorunWithStore, derived, observableSignal, observableSignalFromEvent, observableValue, transaction, waitForState } from '../../../../base/common/observable.js';\nimport { IDiffProviderFactoryService } from './diffProviderFactoryService.js';\nimport { filterWithPrevious, readHotReloadableExport } from './utils.js';\nimport { LineRange, LineRangeSet } from '../../../common/core/lineRange.js';\nimport { DefaultLinesDiffComputer } from '../../../common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.js';\nimport { DetailedLineRangeMapping, LineRangeMapping, RangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { TextEditInfo } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.js';\nimport { combineTextEditInfos } from '../../../common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos.js';\nimport { optimizeSequenceDiffs } from '../../../common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations.js';\nimport { isDefined } from '../../../../base/common/types.js';\nimport { groupAdjacentBy } from '../../../../base/common/arrays.js';\nimport { softAssert } from '../../../../base/common/assert.js';\nlet DiffEditorViewModel = class DiffEditorViewModel extends Disposable {\n    setActiveMovedText(movedText) {\n        this._activeMovedText.set(movedText, undefined);\n    }\n    constructor(model, _options, _diffProviderFactoryService) {\n        super();\n        this.model = model;\n        this._options = _options;\n        this._diffProviderFactoryService = _diffProviderFactoryService;\n        this._isDiffUpToDate = observableValue(this, false);\n        this.isDiffUpToDate = this._isDiffUpToDate;\n        this._diff = observableValue(this, undefined);\n        this.diff = this._diff;\n        this._unchangedRegions = observableValue(this, undefined);\n        this.unchangedRegions = derived(this, r => {\n            var _a, _b;\n            if (this._options.hideUnchangedRegions.read(r)) {\n                return (_b = (_a = this._unchangedRegions.read(r)) === null || _a === void 0 ? void 0 : _a.regions) !== null && _b !== void 0 ? _b : [];\n            }\n            else {\n                // Reset state\n                transaction(tx => {\n                    var _a;\n                    for (const r of ((_a = this._unchangedRegions.get()) === null || _a === void 0 ? void 0 : _a.regions) || []) {\n                        r.collapseAll(tx);\n                    }\n                });\n                return [];\n            }\n        });\n        this.movedTextToCompare = observableValue(this, undefined);\n        this._activeMovedText = observableValue(this, undefined);\n        this._hoveredMovedText = observableValue(this, undefined);\n        this.activeMovedText = derived(this, r => { var _a, _b; return (_b = (_a = this.movedTextToCompare.read(r)) !== null && _a !== void 0 ? _a : this._hoveredMovedText.read(r)) !== null && _b !== void 0 ? _b : this._activeMovedText.read(r); });\n        this._cancellationTokenSource = new CancellationTokenSource();\n        this._diffProvider = derived(this, reader => {\n            const diffProvider = this._diffProviderFactoryService.createDiffProvider({\n                diffAlgorithm: this._options.diffAlgorithm.read(reader)\n            });\n            const onChangeSignal = observableSignalFromEvent('onDidChange', diffProvider.onDidChange);\n            return {\n                diffProvider,\n                onChangeSignal,\n            };\n        });\n        this._register(toDisposable(() => this._cancellationTokenSource.cancel()));\n        const contentChangedSignal = observableSignal('contentChangedSignal');\n        const debouncer = this._register(new RunOnceScheduler(() => contentChangedSignal.trigger(undefined), 200));\n        this._register(autorun(reader => {\n            /** @description collapse touching unchanged ranges */\n            const lastUnchangedRegions = this._unchangedRegions.read(reader);\n            if (!lastUnchangedRegions || lastUnchangedRegions.regions.some(r => r.isDragged.read(reader))) {\n                return;\n            }\n            const lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds\n                .map(id => model.original.getDecorationRange(id))\n                .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n            const lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds\n                .map(id => model.modified.getDecorationRange(id))\n                .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n            const updatedLastUnchangedRegions = lastUnchangedRegions.regions.map((r, idx) => (!lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx]) ? undefined :\n                new UnchangedRegion(lastUnchangedRegionsOrigRanges[idx].startLineNumber, lastUnchangedRegionsModRanges[idx].startLineNumber, lastUnchangedRegionsOrigRanges[idx].length, r.visibleLineCountTop.read(reader), r.visibleLineCountBottom.read(reader))).filter(isDefined);\n            const newRanges = [];\n            let didChange = false;\n            for (const touching of groupAdjacentBy(updatedLastUnchangedRegions, (a, b) => a.getHiddenModifiedRange(reader).endLineNumberExclusive === b.getHiddenModifiedRange(reader).startLineNumber)) {\n                if (touching.length > 1) {\n                    didChange = true;\n                    const sumLineCount = touching.reduce((sum, r) => sum + r.lineCount, 0);\n                    const r = new UnchangedRegion(touching[0].originalLineNumber, touching[0].modifiedLineNumber, sumLineCount, touching[0].visibleLineCountTop.get(), touching[touching.length - 1].visibleLineCountBottom.get());\n                    newRanges.push(r);\n                }\n                else {\n                    newRanges.push(touching[0]);\n                }\n            }\n            if (didChange) {\n                const originalDecorationIds = model.original.deltaDecorations(lastUnchangedRegions.originalDecorationIds, newRanges.map(r => ({ range: r.originalUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n                const modifiedDecorationIds = model.modified.deltaDecorations(lastUnchangedRegions.modifiedDecorationIds, newRanges.map(r => ({ range: r.modifiedUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n                transaction(tx => {\n                    this._unchangedRegions.set({\n                        regions: newRanges,\n                        originalDecorationIds,\n                        modifiedDecorationIds\n                    }, tx);\n                });\n            }\n        }));\n        const updateUnchangedRegions = (result, tx, reader) => {\n            const newUnchangedRegions = UnchangedRegion.fromDiffs(result.changes, model.original.getLineCount(), model.modified.getLineCount(), this._options.hideUnchangedRegionsMinimumLineCount.read(reader), this._options.hideUnchangedRegionsContextLineCount.read(reader));\n            // Transfer state from cur state\n            let visibleRegions = undefined;\n            const lastUnchangedRegions = this._unchangedRegions.get();\n            if (lastUnchangedRegions) {\n                const lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds\n                    .map(id => model.original.getDecorationRange(id))\n                    .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n                const lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds\n                    .map(id => model.modified.getDecorationRange(id))\n                    .map(r => r ? LineRange.fromRangeInclusive(r) : undefined);\n                const updatedLastUnchangedRegions = filterWithPrevious(lastUnchangedRegions.regions\n                    .map((r, idx) => {\n                    if (!lastUnchangedRegionsOrigRanges[idx] || !lastUnchangedRegionsModRanges[idx]) {\n                        return undefined;\n                    }\n                    const length = lastUnchangedRegionsOrigRanges[idx].length;\n                    return new UnchangedRegion(lastUnchangedRegionsOrigRanges[idx].startLineNumber, lastUnchangedRegionsModRanges[idx].startLineNumber, length, \n                    // The visible area can shrink by edits -> we have to account for this\n                    Math.min(r.visibleLineCountTop.get(), length), Math.min(r.visibleLineCountBottom.get(), length - r.visibleLineCountTop.get()));\n                }).filter(isDefined), (cur, prev) => !prev || (cur.modifiedLineNumber >= prev.modifiedLineNumber + prev.lineCount && cur.originalLineNumber >= prev.originalLineNumber + prev.lineCount));\n                let hiddenRegions = updatedLastUnchangedRegions.map(r => new LineRangeMapping(r.getHiddenOriginalRange(reader), r.getHiddenModifiedRange(reader)));\n                hiddenRegions = LineRangeMapping.clip(hiddenRegions, LineRange.ofLength(1, model.original.getLineCount()), LineRange.ofLength(1, model.modified.getLineCount()));\n                visibleRegions = LineRangeMapping.inverse(hiddenRegions, model.original.getLineCount(), model.modified.getLineCount());\n            }\n            const newUnchangedRegions2 = [];\n            if (visibleRegions) {\n                for (const r of newUnchangedRegions) {\n                    const intersecting = visibleRegions.filter(f => f.original.intersectsStrict(r.originalUnchangedRange) && f.modified.intersectsStrict(r.modifiedUnchangedRange));\n                    newUnchangedRegions2.push(...r.setVisibleRanges(intersecting, tx));\n                }\n            }\n            else {\n                newUnchangedRegions2.push(...newUnchangedRegions);\n            }\n            const originalDecorationIds = model.original.deltaDecorations((lastUnchangedRegions === null || lastUnchangedRegions === void 0 ? void 0 : lastUnchangedRegions.originalDecorationIds) || [], newUnchangedRegions2.map(r => ({ range: r.originalUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n            const modifiedDecorationIds = model.modified.deltaDecorations((lastUnchangedRegions === null || lastUnchangedRegions === void 0 ? void 0 : lastUnchangedRegions.modifiedDecorationIds) || [], newUnchangedRegions2.map(r => ({ range: r.modifiedUnchangedRange.toInclusiveRange(), options: { description: 'unchanged' } })));\n            this._unchangedRegions.set({\n                regions: newUnchangedRegions2,\n                originalDecorationIds,\n                modifiedDecorationIds\n            }, tx);\n        };\n        this._register(model.modified.onDidChangeContent((e) => {\n            const diff = this._diff.get();\n            if (diff) {\n                const textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n                const result = applyModifiedEdits(this._lastDiff, textEdits, model.original, model.modified);\n                if (result) {\n                    this._lastDiff = result;\n                    transaction(tx => {\n                        this._diff.set(DiffState.fromDiffResult(this._lastDiff), tx);\n                        updateUnchangedRegions(result, tx);\n                        const currentSyncedMovedText = this.movedTextToCompare.get();\n                        this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n                    });\n                }\n            }\n            this._isDiffUpToDate.set(false, undefined);\n            debouncer.schedule();\n        }));\n        this._register(model.original.onDidChangeContent((e) => {\n            const diff = this._diff.get();\n            if (diff) {\n                const textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n                const result = applyOriginalEdits(this._lastDiff, textEdits, model.original, model.modified);\n                if (result) {\n                    this._lastDiff = result;\n                    transaction(tx => {\n                        this._diff.set(DiffState.fromDiffResult(this._lastDiff), tx);\n                        updateUnchangedRegions(result, tx);\n                        const currentSyncedMovedText = this.movedTextToCompare.get();\n                        this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n                    });\n                }\n            }\n            this._isDiffUpToDate.set(false, undefined);\n            debouncer.schedule();\n        }));\n        this._register(autorunWithStore(async (reader, store) => {\n            /** @description compute diff */\n            var _a, _b;\n            // So that they get recomputed when these settings change\n            this._options.hideUnchangedRegionsMinimumLineCount.read(reader);\n            this._options.hideUnchangedRegionsContextLineCount.read(reader);\n            debouncer.cancel();\n            contentChangedSignal.read(reader);\n            const documentDiffProvider = this._diffProvider.read(reader);\n            documentDiffProvider.onChangeSignal.read(reader);\n            readHotReloadableExport(DefaultLinesDiffComputer, reader);\n            readHotReloadableExport(optimizeSequenceDiffs, reader);\n            this._isDiffUpToDate.set(false, undefined);\n            let originalTextEditInfos = [];\n            store.add(model.original.onDidChangeContent((e) => {\n                const edits = TextEditInfo.fromModelContentChanges(e.changes);\n                originalTextEditInfos = combineTextEditInfos(originalTextEditInfos, edits);\n            }));\n            let modifiedTextEditInfos = [];\n            store.add(model.modified.onDidChangeContent((e) => {\n                const edits = TextEditInfo.fromModelContentChanges(e.changes);\n                modifiedTextEditInfos = combineTextEditInfos(modifiedTextEditInfos, edits);\n            }));\n            let result = await documentDiffProvider.diffProvider.computeDiff(model.original, model.modified, {\n                ignoreTrimWhitespace: this._options.ignoreTrimWhitespace.read(reader),\n                maxComputationTimeMs: this._options.maxComputationTimeMs.read(reader),\n                computeMoves: this._options.showMoves.read(reader),\n            }, this._cancellationTokenSource.token);\n            if (this._cancellationTokenSource.token.isCancellationRequested) {\n                return;\n            }\n            result = normalizeDocumentDiff(result, model.original, model.modified);\n            result = (_a = applyOriginalEdits(result, originalTextEditInfos, model.original, model.modified)) !== null && _a !== void 0 ? _a : result;\n            result = (_b = applyModifiedEdits(result, modifiedTextEditInfos, model.original, model.modified)) !== null && _b !== void 0 ? _b : result;\n            transaction(tx => {\n                /** @description write diff result */\n                updateUnchangedRegions(result, tx);\n                this._lastDiff = result;\n                const state = DiffState.fromDiffResult(result);\n                this._diff.set(state, tx);\n                this._isDiffUpToDate.set(true, tx);\n                const currentSyncedMovedText = this.movedTextToCompare.get();\n                this.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n            });\n        }));\n    }\n    ensureModifiedLineIsVisible(lineNumber, preference, tx) {\n        var _a, _b;\n        if (((_a = this.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings.length) === 0) {\n            return;\n        }\n        const unchangedRegions = ((_b = this._unchangedRegions.get()) === null || _b === void 0 ? void 0 : _b.regions) || [];\n        for (const r of unchangedRegions) {\n            if (r.getHiddenModifiedRange(undefined).contains(lineNumber)) {\n                r.showModifiedLine(lineNumber, preference, tx);\n                return;\n            }\n        }\n    }\n    ensureOriginalLineIsVisible(lineNumber, preference, tx) {\n        var _a, _b;\n        if (((_a = this.diff.get()) === null || _a === void 0 ? void 0 : _a.mappings.length) === 0) {\n            return;\n        }\n        const unchangedRegions = ((_b = this._unchangedRegions.get()) === null || _b === void 0 ? void 0 : _b.regions) || [];\n        for (const r of unchangedRegions) {\n            if (r.getHiddenOriginalRange(undefined).contains(lineNumber)) {\n                r.showOriginalLine(lineNumber, preference, tx);\n                return;\n            }\n        }\n    }\n    async waitForDiff() {\n        await waitForState(this.isDiffUpToDate, s => s);\n    }\n    serializeState() {\n        const regions = this._unchangedRegions.get();\n        return {\n            collapsedRegions: regions === null || regions === void 0 ? void 0 : regions.regions.map(r => ({ range: r.getHiddenModifiedRange(undefined).serialize() }))\n        };\n    }\n    restoreSerializedState(state) {\n        var _a;\n        const ranges = (_a = state.collapsedRegions) === null || _a === void 0 ? void 0 : _a.map(r => LineRange.deserialize(r.range));\n        const regions = this._unchangedRegions.get();\n        if (!regions || !ranges) {\n            return;\n        }\n        transaction(tx => {\n            for (const r of regions.regions) {\n                for (const range of ranges) {\n                    if (r.modifiedUnchangedRange.intersect(range)) {\n                        r.setHiddenModifiedRange(range, tx);\n                        break;\n                    }\n                }\n            }\n        });\n    }\n};\nDiffEditorViewModel = __decorate([\n    __param(2, IDiffProviderFactoryService)\n], DiffEditorViewModel);\nexport { DiffEditorViewModel };\nfunction normalizeDocumentDiff(diff, original, modified) {\n    return {\n        changes: diff.changes.map(c => new DetailedLineRangeMapping(c.original, c.modified, c.innerChanges ? c.innerChanges.map(i => normalizeRangeMapping(i, original, modified)) : undefined)),\n        moves: diff.moves,\n        identical: diff.identical,\n        quitEarly: diff.quitEarly,\n    };\n}\nfunction normalizeRangeMapping(rangeMapping, original, modified) {\n    let originalRange = rangeMapping.originalRange;\n    let modifiedRange = rangeMapping.modifiedRange;\n    if ((originalRange.endColumn !== 1 || modifiedRange.endColumn !== 1) &&\n        originalRange.endColumn === original.getLineMaxColumn(originalRange.endLineNumber)\n        && modifiedRange.endColumn === modified.getLineMaxColumn(modifiedRange.endLineNumber)\n        && originalRange.endLineNumber < original.getLineCount()\n        && modifiedRange.endLineNumber < modified.getLineCount()) {\n        originalRange = originalRange.setEndPosition(originalRange.endLineNumber + 1, 1);\n        modifiedRange = modifiedRange.setEndPosition(modifiedRange.endLineNumber + 1, 1);\n    }\n    return new RangeMapping(originalRange, modifiedRange);\n}\nexport class DiffState {\n    static fromDiffResult(result) {\n        return new DiffState(result.changes.map(c => new DiffMapping(c)), result.moves || [], result.identical, result.quitEarly);\n    }\n    constructor(mappings, movedTexts, identical, quitEarly) {\n        this.mappings = mappings;\n        this.movedTexts = movedTexts;\n        this.identical = identical;\n        this.quitEarly = quitEarly;\n    }\n}\nexport class DiffMapping {\n    constructor(lineRangeMapping) {\n        this.lineRangeMapping = lineRangeMapping;\n        /*\n        readonly movedTo: MovedText | undefined,\n        readonly movedFrom: MovedText | undefined,\n\n        if (movedTo) {\n            assertFn(() =>\n                movedTo.lineRangeMapping.modifiedRange.equals(lineRangeMapping.modifiedRange)\n                && lineRangeMapping.originalRange.isEmpty\n                && !movedFrom\n            );\n        } else if (movedFrom) {\n            assertFn(() =>\n                movedFrom.lineRangeMapping.originalRange.equals(lineRangeMapping.originalRange)\n                && lineRangeMapping.modifiedRange.isEmpty\n                && !movedTo\n            );\n        }\n        */\n    }\n}\nexport class UnchangedRegion {\n    static fromDiffs(changes, originalLineCount, modifiedLineCount, minHiddenLineCount, minContext) {\n        const inversedMappings = DetailedLineRangeMapping.inverse(changes, originalLineCount, modifiedLineCount);\n        const result = [];\n        for (const mapping of inversedMappings) {\n            let origStart = mapping.original.startLineNumber;\n            let modStart = mapping.modified.startLineNumber;\n            let length = mapping.original.length;\n            const atStart = origStart === 1 && modStart === 1;\n            const atEnd = origStart + length === originalLineCount + 1 && modStart + length === modifiedLineCount + 1;\n            if ((atStart || atEnd) && length >= minContext + minHiddenLineCount) {\n                if (atStart && !atEnd) {\n                    length -= minContext;\n                }\n                if (atEnd && !atStart) {\n                    origStart += minContext;\n                    modStart += minContext;\n                    length -= minContext;\n                }\n                result.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n            }\n            else if (length >= minContext * 2 + minHiddenLineCount) {\n                origStart += minContext;\n                modStart += minContext;\n                length -= minContext * 2;\n                result.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n            }\n        }\n        return result;\n    }\n    get originalUnchangedRange() {\n        return LineRange.ofLength(this.originalLineNumber, this.lineCount);\n    }\n    get modifiedUnchangedRange() {\n        return LineRange.ofLength(this.modifiedLineNumber, this.lineCount);\n    }\n    constructor(originalLineNumber, modifiedLineNumber, lineCount, visibleLineCountTop, visibleLineCountBottom) {\n        this.originalLineNumber = originalLineNumber;\n        this.modifiedLineNumber = modifiedLineNumber;\n        this.lineCount = lineCount;\n        this._visibleLineCountTop = observableValue(this, 0);\n        this.visibleLineCountTop = this._visibleLineCountTop;\n        this._visibleLineCountBottom = observableValue(this, 0);\n        this.visibleLineCountBottom = this._visibleLineCountBottom;\n        this._shouldHideControls = derived(this, reader => /** @description isVisible */ this.visibleLineCountTop.read(reader) + this.visibleLineCountBottom.read(reader) === this.lineCount && !this.isDragged.read(reader));\n        this.isDragged = observableValue(this, undefined);\n        const visibleLineCountTop2 = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n        const visibleLineCountBottom2 = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n        softAssert(visibleLineCountTop === visibleLineCountTop2);\n        softAssert(visibleLineCountBottom === visibleLineCountBottom2);\n        this._visibleLineCountTop.set(visibleLineCountTop2, undefined);\n        this._visibleLineCountBottom.set(visibleLineCountBottom2, undefined);\n    }\n    setVisibleRanges(visibleRanges, tx) {\n        const result = [];\n        const hiddenModified = new LineRangeSet(visibleRanges.map(r => r.modified)).subtractFrom(this.modifiedUnchangedRange);\n        let originalStartLineNumber = this.originalLineNumber;\n        let modifiedStartLineNumber = this.modifiedLineNumber;\n        const modifiedEndLineNumberEx = this.modifiedLineNumber + this.lineCount;\n        if (hiddenModified.ranges.length === 0) {\n            this.showAll(tx);\n            result.push(this);\n        }\n        else {\n            let i = 0;\n            for (const r of hiddenModified.ranges) {\n                const isLast = i === hiddenModified.ranges.length - 1;\n                i++;\n                const length = (isLast ? modifiedEndLineNumberEx : r.endLineNumberExclusive) - modifiedStartLineNumber;\n                const newR = new UnchangedRegion(originalStartLineNumber, modifiedStartLineNumber, length, 0, 0);\n                newR.setHiddenModifiedRange(r, tx);\n                result.push(newR);\n                originalStartLineNumber = newR.originalUnchangedRange.endLineNumberExclusive;\n                modifiedStartLineNumber = newR.modifiedUnchangedRange.endLineNumberExclusive;\n            }\n        }\n        return result;\n    }\n    shouldHideControls(reader) {\n        return this._shouldHideControls.read(reader);\n    }\n    getHiddenOriginalRange(reader) {\n        return LineRange.ofLength(this.originalLineNumber + this._visibleLineCountTop.read(reader), this.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader));\n    }\n    getHiddenModifiedRange(reader) {\n        return LineRange.ofLength(this.modifiedLineNumber + this._visibleLineCountTop.read(reader), this.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader));\n    }\n    setHiddenModifiedRange(range, tx) {\n        const visibleLineCountTop = range.startLineNumber - this.modifiedLineNumber;\n        const visibleLineCountBottom = (this.modifiedLineNumber + this.lineCount) - range.endLineNumberExclusive;\n        this.setState(visibleLineCountTop, visibleLineCountBottom, tx);\n    }\n    getMaxVisibleLineCountTop() {\n        return this.lineCount - this._visibleLineCountBottom.get();\n    }\n    getMaxVisibleLineCountBottom() {\n        return this.lineCount - this._visibleLineCountTop.get();\n    }\n    showMoreAbove(count = 10, tx) {\n        const maxVisibleLineCountTop = this.getMaxVisibleLineCountTop();\n        this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + count, maxVisibleLineCountTop), tx);\n    }\n    showMoreBelow(count = 10, tx) {\n        const maxVisibleLineCountBottom = this.lineCount - this._visibleLineCountTop.get();\n        this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + count, maxVisibleLineCountBottom), tx);\n    }\n    showAll(tx) {\n        this._visibleLineCountBottom.set(this.lineCount - this._visibleLineCountTop.get(), tx);\n    }\n    showModifiedLine(lineNumber, preference, tx) {\n        const top = lineNumber + 1 - (this.modifiedLineNumber + this._visibleLineCountTop.get());\n        const bottom = (this.modifiedLineNumber - this._visibleLineCountBottom.get() + this.lineCount) - lineNumber;\n        if (preference === 0 /* RevealPreference.FromCloserSide */ && top < bottom || preference === 1 /* RevealPreference.FromTop */) {\n            this._visibleLineCountTop.set(this._visibleLineCountTop.get() + top, tx);\n        }\n        else {\n            this._visibleLineCountBottom.set(this._visibleLineCountBottom.get() + bottom, tx);\n        }\n    }\n    showOriginalLine(lineNumber, preference, tx) {\n        const top = lineNumber - this.originalLineNumber;\n        const bottom = (this.originalLineNumber + this.lineCount) - lineNumber;\n        if (preference === 0 /* RevealPreference.FromCloserSide */ && top < bottom || preference === 1 /* RevealPreference.FromTop */) {\n            this._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + bottom - top, this.getMaxVisibleLineCountTop()), tx);\n        }\n        else {\n            this._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + top - bottom, this.getMaxVisibleLineCountBottom()), tx);\n        }\n    }\n    collapseAll(tx) {\n        this._visibleLineCountTop.set(0, tx);\n        this._visibleLineCountBottom.set(0, tx);\n    }\n    setState(visibleLineCountTop, visibleLineCountBottom, tx) {\n        visibleLineCountTop = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n        visibleLineCountBottom = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n        this._visibleLineCountTop.set(visibleLineCountTop, tx);\n        this._visibleLineCountBottom.set(visibleLineCountBottom, tx);\n    }\n}\nfunction applyOriginalEdits(diff, textEdits, originalTextModel, modifiedTextModel) {\n    return undefined;\n    /*\n    TODO@hediet\n    if (textEdits.length === 0) {\n        return diff;\n    }\n\n    const diff2 = flip(diff);\n    const diff3 = applyModifiedEdits(diff2, textEdits, modifiedTextModel, originalTextModel);\n    if (!diff3) {\n        return undefined;\n    }\n    return flip(diff3);*/\n}\n/*\nfunction flip(diff: IDocumentDiff): IDocumentDiff {\n    return {\n        changes: diff.changes.map(c => c.flip()),\n        moves: diff.moves.map(m => m.flip()),\n        identical: diff.identical,\n        quitEarly: diff.quitEarly,\n    };\n}\n*/\nfunction applyModifiedEdits(diff, textEdits, originalTextModel, modifiedTextModel) {\n    return undefined;\n    /*\n    TODO@hediet\n    if (textEdits.length === 0) {\n        return diff;\n    }\n    if (diff.changes.some(c => !c.innerChanges) || diff.moves.length > 0) {\n        // TODO support these cases\n        return undefined;\n    }\n\n    const changes = applyModifiedEditsToLineRangeMappings(diff.changes, textEdits, originalTextModel, modifiedTextModel);\n\n    const moves = diff.moves.map(m => {\n        const newModifiedRange = applyEditToLineRange(m.lineRangeMapping.modified, textEdits);\n        return newModifiedRange ? new MovedText(\n            new SimpleLineRangeMapping(m.lineRangeMapping.original, newModifiedRange),\n            applyModifiedEditsToLineRangeMappings(m.changes, textEdits, originalTextModel, modifiedTextModel),\n        ) : undefined;\n    }).filter(isDefined);\n\n    return {\n        identical: false,\n        quitEarly: false,\n        changes,\n        moves,\n    };*/\n}\n/*\nfunction applyEditToLineRange(range: LineRange, textEdits: TextEditInfo[]): LineRange | undefined {\n    let rangeStartLineNumber = range.startLineNumber;\n    let rangeEndLineNumberEx = range.endLineNumberExclusive;\n\n    for (let i = textEdits.length - 1; i >= 0; i--) {\n        const textEdit = textEdits[i];\n        const textEditStartLineNumber = lengthGetLineCount(textEdit.startOffset) + 1;\n        const textEditEndLineNumber = lengthGetLineCount(textEdit.endOffset) + 1;\n        const newLengthLineCount = lengthGetLineCount(textEdit.newLength);\n        const delta = newLengthLineCount - (textEditEndLineNumber - textEditStartLineNumber);\n\n        if (textEditEndLineNumber < rangeStartLineNumber) {\n            // the text edit is before us\n            rangeStartLineNumber += delta;\n            rangeEndLineNumberEx += delta;\n        } else if (textEditStartLineNumber > rangeEndLineNumberEx) {\n            // the text edit is after us\n            // NOOP\n        } else if (textEditStartLineNumber < rangeStartLineNumber && rangeEndLineNumberEx < textEditEndLineNumber) {\n            // the range is fully contained in the text edit\n            return undefined;\n        } else if (textEditStartLineNumber < rangeStartLineNumber && textEditEndLineNumber <= rangeEndLineNumberEx) {\n            // the text edit ends inside our range\n            rangeStartLineNumber = textEditEndLineNumber + 1;\n            rangeStartLineNumber += delta;\n            rangeEndLineNumberEx += delta;\n        } else if (rangeStartLineNumber <= textEditStartLineNumber && textEditEndLineNumber < rangeStartLineNumber) {\n            // the text edit starts inside our range\n            rangeEndLineNumberEx = textEditStartLineNumber;\n        } else {\n            rangeEndLineNumberEx += delta;\n        }\n    }\n\n    return new LineRange(rangeStartLineNumber, rangeEndLineNumberEx);\n}\n\nfunction applyModifiedEditsToLineRangeMappings(changes: readonly LineRangeMapping[], textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): LineRangeMapping[] {\n    const diffTextEdits = changes.flatMap(c => c.innerChanges!.map(c => new TextEditInfo(\n        positionToLength(c.originalRange.getStartPosition()),\n        positionToLength(c.originalRange.getEndPosition()),\n        lengthOfRange(c.modifiedRange).toLength(),\n    )));\n\n    const combined = combineTextEditInfos(diffTextEdits, textEdits);\n\n    let lastOriginalEndOffset = lengthZero;\n    let lastModifiedEndOffset = lengthZero;\n    const rangeMappings = combined.map(c => {\n        const modifiedStartOffset = lengthAdd(lastModifiedEndOffset, lengthDiffNonNegative(lastOriginalEndOffset, c.startOffset));\n        lastOriginalEndOffset = c.endOffset;\n        lastModifiedEndOffset = lengthAdd(modifiedStartOffset, c.newLength);\n\n        return new RangeMapping(\n            Range.fromPositions(lengthToPosition(c.startOffset), lengthToPosition(c.endOffset)),\n            Range.fromPositions(lengthToPosition(modifiedStartOffset), lengthToPosition(lastModifiedEndOffset)),\n        );\n    });\n\n    const newChanges = lineRangeMappingFromRangeMappings(\n        rangeMappings,\n        originalTextModel.getLinesContent(),\n        modifiedTextModel.getLinesContent(),\n    );\n    return newChanges;\n}\n*/\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGK,MAAM,CAACC,wBAAwB,CAACR,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEO,CAAC;EAC5H,IAAI,QAAOC,OAAO,iCAAAC,OAAA,CAAPD,OAAO,OAAK,QAAQ,IAAI,OAAOA,OAAO,CAACE,QAAQ,KAAK,UAAU,EAAEN,CAAC,GAAGI,OAAO,CAACE,QAAQ,CAACb,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIW,CAAC,GAAGd,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEQ,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIJ,CAAC,GAAGV,UAAU,CAACc,CAAC,CAAC,EAAEP,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACH,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGM,CAAC,CAACT,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGG,CAAC,CAACT,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIC,MAAM,CAACO,cAAc,CAACd,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;AACD,IAAIS,OAAO,GAAI,IAAI,IAAI,IAAI,CAACA,OAAO,IAAK,UAAUC,UAAU,EAAEC,SAAS,EAAE;EACrE,OAAO,UAAUjB,MAAM,EAAEC,GAAG,EAAE;IAAEgB,SAAS,CAACjB,MAAM,EAAEC,GAAG,EAAEe,UAAU,CAAC;EAAE,CAAC;AACzE,CAAC;AACD,SAASE,gBAAgB,QAAQ,kCAAkC;AACnE,SAASC,uBAAuB,QAAQ,yCAAyC;AACjF,SAASC,UAAU,EAAEC,YAAY,QAAQ,sCAAsC;AAC/E,SAASC,OAAO,EAAEC,gBAAgB,EAAEC,OAAO,EAAEC,gBAAgB,EAAEC,yBAAyB,EAAEC,eAAe,EAAEC,WAAW,EAAEC,YAAY,QAAQ,uCAAuC;AACnL,SAASC,2BAA2B,QAAQ,iCAAiC;AAC7E,SAASC,kBAAkB,EAAEC,uBAAuB,QAAQ,YAAY;AACxE,SAASC,SAAS,EAAEC,YAAY,QAAQ,mCAAmC;AAC3E,SAASC,wBAAwB,QAAQ,2EAA2E;AACpH,SAASC,wBAAwB,EAAEC,gBAAgB,EAAEC,YAAY,QAAQ,sCAAsC;AAC/G,SAASC,YAAY,QAAQ,8FAA8F;AAC3H,SAASC,oBAAoB,QAAQ,0FAA0F;AAC/H,SAASC,qBAAqB,QAAQ,iFAAiF;AACvH,SAASC,SAAS,QAAQ,kCAAkC;AAC5D,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAASC,UAAU,QAAQ,mCAAmC;AAC9D,IAAIC,mBAAmB,0BAAAC,WAAA;EAInB,SAAAD,oBAAYE,KAAK,EAAEC,QAAQ,EAAEC,2BAA2B,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAN,mBAAA;IACtDK,KAAA,GAAAE,UAAA,OAAAP,mBAAA;IACAK,KAAA,CAAKH,KAAK,GAAGA,KAAK;IAClBG,KAAA,CAAKF,QAAQ,GAAGA,QAAQ;IACxBE,KAAA,CAAKD,2BAA2B,GAAGA,2BAA2B;IAC9DC,KAAA,CAAKG,eAAe,GAAG1B,eAAe,CAAAuB,KAAA,EAAO,KAAK,CAAC;IACnDA,KAAA,CAAKI,cAAc,GAAGJ,KAAA,CAAKG,eAAe;IAC1CH,KAAA,CAAKK,KAAK,GAAG5B,eAAe,CAAAuB,KAAA,EAAOM,SAAS,CAAC;IAC7CN,KAAA,CAAKO,IAAI,GAAGP,KAAA,CAAKK,KAAK;IACtBL,KAAA,CAAKQ,iBAAiB,GAAG/B,eAAe,CAAAuB,KAAA,EAAOM,SAAS,CAAC;IACzDN,KAAA,CAAKS,gBAAgB,GAAGnC,OAAO,CAAA0B,KAAA,EAAO,UAAA5C,CAAC,EAAI;MACvC,IAAIsD,EAAE,EAAEC,EAAE;MACV,IAAIX,KAAA,CAAKF,QAAQ,CAACc,oBAAoB,CAACC,IAAI,CAACzD,CAAC,CAAC,EAAE;QAC5C,OAAO,CAACuD,EAAE,GAAG,CAACD,EAAE,GAAGV,KAAA,CAAKQ,iBAAiB,CAACK,IAAI,CAACzD,CAAC,CAAC,MAAM,IAAI,IAAIsD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,OAAO,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE;MAC3I,CAAC,MACI;QACD;QACAjC,WAAW,CAAC,UAAAqC,EAAE,EAAI;UACd,IAAIL,EAAE;UAAC,IAAAM,SAAA,GAAAC,0BAAA,CACS,CAAC,CAACP,EAAE,GAAGV,KAAA,CAAKQ,iBAAiB,CAACU,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,OAAO,KAAK,EAAE;YAAAK,KAAA;UAAA;YAA3G,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,GAA6G;cAAA,IAAlGlE,EAAC,GAAA+D,KAAA,CAAAI,KAAA;cACRnE,EAAC,CAACoE,WAAW,CAACT,EAAE,CAAC;YACrB;UAAC,SAAAU,GAAA;YAAAT,SAAA,CAAAU,CAAA,CAAAD,GAAA;UAAA;YAAAT,SAAA,CAAAW,CAAA;UAAA;QACL,CAAC,CAAC;QACF,OAAO,EAAE;MACb;IACJ,CAAC,CAAC;IACF3B,KAAA,CAAK4B,kBAAkB,GAAGnD,eAAe,CAAAuB,KAAA,EAAOM,SAAS,CAAC;IAC1DN,KAAA,CAAK6B,gBAAgB,GAAGpD,eAAe,CAAAuB,KAAA,EAAOM,SAAS,CAAC;IACxDN,KAAA,CAAK8B,iBAAiB,GAAGrD,eAAe,CAAAuB,KAAA,EAAOM,SAAS,CAAC;IACzDN,KAAA,CAAK+B,eAAe,GAAGzD,OAAO,CAAA0B,KAAA,EAAO,UAAA5C,CAAC,EAAI;MAAE,IAAIsD,EAAE,EAAEC,EAAE;MAAE,OAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAGV,KAAA,CAAK4B,kBAAkB,CAACf,IAAI,CAACzD,CAAC,CAAC,MAAM,IAAI,IAAIsD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGV,KAAA,CAAK8B,iBAAiB,CAACjB,IAAI,CAACzD,CAAC,CAAC,MAAM,IAAI,IAAIuD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGX,KAAA,CAAK6B,gBAAgB,CAAChB,IAAI,CAACzD,CAAC,CAAC;IAAE,CAAC,CAAC;IAC/O4C,KAAA,CAAKgC,wBAAwB,GAAG,IAAI/D,uBAAuB,CAAC,CAAC;IAC7D+B,KAAA,CAAKiC,aAAa,GAAG3D,OAAO,CAAA0B,KAAA,EAAO,UAAAkC,MAAM,EAAI;MACzC,IAAMC,YAAY,GAAGnC,KAAA,CAAKD,2BAA2B,CAACqC,kBAAkB,CAAC;QACrEC,aAAa,EAAErC,KAAA,CAAKF,QAAQ,CAACuC,aAAa,CAACxB,IAAI,CAACqB,MAAM;MAC1D,CAAC,CAAC;MACF,IAAMI,cAAc,GAAG9D,yBAAyB,CAAC,aAAa,EAAE2D,YAAY,CAACI,WAAW,CAAC;MACzF,OAAO;QACHJ,YAAY,EAAZA,YAAY;QACZG,cAAc,EAAdA;MACJ,CAAC;IACL,CAAC,CAAC;IACFtC,KAAA,CAAKwC,SAAS,CAACrE,YAAY,CAAC;MAAA,OAAM6B,KAAA,CAAKgC,wBAAwB,CAACS,MAAM,CAAC,CAAC;IAAA,EAAC,CAAC;IAC1E,IAAMC,oBAAoB,GAAGnE,gBAAgB,CAAC,sBAAsB,CAAC;IACrE,IAAMoE,SAAS,GAAG3C,KAAA,CAAKwC,SAAS,CAAC,IAAIxE,gBAAgB,CAAC;MAAA,OAAM0E,oBAAoB,CAACE,OAAO,CAACtC,SAAS,CAAC;IAAA,GAAE,GAAG,CAAC,CAAC;IAC1GN,KAAA,CAAKwC,SAAS,CAACpE,OAAO,CAAC,UAAA8D,MAAM,EAAI;MAC7B;MACA,IAAMW,oBAAoB,GAAG7C,KAAA,CAAKQ,iBAAiB,CAACK,IAAI,CAACqB,MAAM,CAAC;MAChE,IAAI,CAACW,oBAAoB,IAAIA,oBAAoB,CAAC/B,OAAO,CAACgC,IAAI,CAAC,UAAA1F,CAAC;QAAA,OAAIA,CAAC,CAAC2F,SAAS,CAAClC,IAAI,CAACqB,MAAM,CAAC;MAAA,EAAC,EAAE;QAC3F;MACJ;MACA,IAAMc,8BAA8B,GAAGH,oBAAoB,CAACI,qBAAqB,CAC5EC,GAAG,CAAC,UAAAC,EAAE;QAAA,OAAItD,KAAK,CAACuD,QAAQ,CAACC,kBAAkB,CAACF,EAAE,CAAC;MAAA,EAAC,CAChDD,GAAG,CAAC,UAAA9F,CAAC;QAAA,OAAIA,CAAC,GAAG2B,SAAS,CAACuE,kBAAkB,CAAClG,CAAC,CAAC,GAAGkD,SAAS;MAAA,EAAC;MAC9D,IAAMiD,6BAA6B,GAAGV,oBAAoB,CAACW,qBAAqB,CAC3EN,GAAG,CAAC,UAAAC,EAAE;QAAA,OAAItD,KAAK,CAAC4D,QAAQ,CAACJ,kBAAkB,CAACF,EAAE,CAAC;MAAA,EAAC,CAChDD,GAAG,CAAC,UAAA9F,CAAC;QAAA,OAAIA,CAAC,GAAG2B,SAAS,CAACuE,kBAAkB,CAAClG,CAAC,CAAC,GAAGkD,SAAS;MAAA,EAAC;MAC9D,IAAMoD,2BAA2B,GAAGb,oBAAoB,CAAC/B,OAAO,CAACoC,GAAG,CAAC,UAAC9F,CAAC,EAAEuG,GAAG;QAAA,OAAM,CAACX,8BAA8B,CAACW,GAAG,CAAC,IAAI,CAACJ,6BAA6B,CAACI,GAAG,CAAC,GAAIrD,SAAS,GACtK,IAAIsD,eAAe,CAACZ,8BAA8B,CAACW,GAAG,CAAC,CAACE,eAAe,EAAEN,6BAA6B,CAACI,GAAG,CAAC,CAACE,eAAe,EAAEb,8BAA8B,CAACW,GAAG,CAAC,CAACxG,MAAM,EAAEC,CAAC,CAAC0G,mBAAmB,CAACjD,IAAI,CAACqB,MAAM,CAAC,EAAE9E,CAAC,CAAC2G,sBAAsB,CAAClD,IAAI,CAACqB,MAAM,CAAC,CAAC;MAAA,EAAC,CAAC8B,MAAM,CAACxE,SAAS,CAAC;MAC1Q,IAAMyE,SAAS,GAAG,EAAE;MACpB,IAAIC,SAAS,GAAG,KAAK;MAAC,IAAAC,UAAA,GAAAlD,0BAAA,CACCxB,eAAe,CAACiE,2BAA2B,EAAE,UAACU,CAAC,EAAEC,CAAC;UAAA,OAAKD,CAAC,CAACE,sBAAsB,CAACpC,MAAM,CAAC,CAACqC,sBAAsB,KAAKF,CAAC,CAACC,sBAAsB,CAACpC,MAAM,CAAC,CAAC2B,eAAe;QAAA,EAAC;QAAAW,MAAA;MAAA;QAA3L,KAAAL,UAAA,CAAA/C,CAAA,MAAAoD,MAAA,GAAAL,UAAA,CAAA9C,CAAA,IAAAC,IAAA,GAA6L;UAAA,IAAlLmD,QAAQ,GAAAD,MAAA,CAAAjD,KAAA;UACf,IAAIkD,QAAQ,CAACtH,MAAM,GAAG,CAAC,EAAE;YACrB+G,SAAS,GAAG,IAAI;YAChB,IAAMQ,YAAY,GAAGD,QAAQ,CAACE,MAAM,CAAC,UAACC,GAAG,EAAExH,CAAC;cAAA,OAAKwH,GAAG,GAAGxH,CAAC,CAACyH,SAAS;YAAA,GAAE,CAAC,CAAC;YACtE,IAAMzH,CAAC,GAAG,IAAIwG,eAAe,CAACa,QAAQ,CAAC,CAAC,CAAC,CAACK,kBAAkB,EAAEL,QAAQ,CAAC,CAAC,CAAC,CAACM,kBAAkB,EAAEL,YAAY,EAAED,QAAQ,CAAC,CAAC,CAAC,CAACX,mBAAmB,CAAC5C,GAAG,CAAC,CAAC,EAAEuD,QAAQ,CAACA,QAAQ,CAACtH,MAAM,GAAG,CAAC,CAAC,CAAC4G,sBAAsB,CAAC7C,GAAG,CAAC,CAAC,CAAC;YAC9M+C,SAAS,CAACe,IAAI,CAAC5H,CAAC,CAAC;UACrB,CAAC,MACI;YACD6G,SAAS,CAACe,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC;UAC/B;QACJ;MAAC,SAAAhD,GAAA;QAAA0C,UAAA,CAAAzC,CAAA,CAAAD,GAAA;MAAA;QAAA0C,UAAA,CAAAxC,CAAA;MAAA;MACD,IAAIuC,SAAS,EAAE;QACX,IAAMjB,qBAAqB,GAAGpD,KAAK,CAACuD,QAAQ,CAAC6B,gBAAgB,CAACpC,oBAAoB,CAACI,qBAAqB,EAAEgB,SAAS,CAACf,GAAG,CAAC,UAAA9F,CAAC;UAAA,OAAK;YAAE8H,KAAK,EAAE9H,CAAC,CAAC+H,sBAAsB,CAACC,gBAAgB,CAAC,CAAC;YAAEC,OAAO,EAAE;cAAEC,WAAW,EAAE;YAAY;UAAE,CAAC;QAAA,CAAC,CAAC,CAAC;QAC9N,IAAM9B,qBAAqB,GAAG3D,KAAK,CAAC4D,QAAQ,CAACwB,gBAAgB,CAACpC,oBAAoB,CAACW,qBAAqB,EAAES,SAAS,CAACf,GAAG,CAAC,UAAA9F,CAAC;UAAA,OAAK;YAAE8H,KAAK,EAAE9H,CAAC,CAACmI,sBAAsB,CAACH,gBAAgB,CAAC,CAAC;YAAEC,OAAO,EAAE;cAAEC,WAAW,EAAE;YAAY;UAAE,CAAC;QAAA,CAAC,CAAC,CAAC;QAC9N5G,WAAW,CAAC,UAAAqC,EAAE,EAAI;UACdf,KAAA,CAAKQ,iBAAiB,CAACgF,GAAG,CAAC;YACvB1E,OAAO,EAAEmD,SAAS;YAClBhB,qBAAqB,EAArBA,qBAAqB;YACrBO,qBAAqB,EAArBA;UACJ,CAAC,EAAEzC,EAAE,CAAC;QACV,CAAC,CAAC;MACN;IACJ,CAAC,CAAC,CAAC;IACH,IAAM0E,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIC,MAAM,EAAE3E,EAAE,EAAEmB,MAAM,EAAK;MACnD,IAAMyD,mBAAmB,GAAG/B,eAAe,CAACgC,SAAS,CAACF,MAAM,CAACG,OAAO,EAAEhG,KAAK,CAACuD,QAAQ,CAAC0C,YAAY,CAAC,CAAC,EAAEjG,KAAK,CAAC4D,QAAQ,CAACqC,YAAY,CAAC,CAAC,EAAE9F,KAAA,CAAKF,QAAQ,CAACiG,oCAAoC,CAAClF,IAAI,CAACqB,MAAM,CAAC,EAAElC,KAAA,CAAKF,QAAQ,CAACkG,oCAAoC,CAACnF,IAAI,CAACqB,MAAM,CAAC,CAAC;MACrQ;MACA,IAAI+D,cAAc,GAAG3F,SAAS;MAC9B,IAAMuC,oBAAoB,GAAG7C,KAAA,CAAKQ,iBAAiB,CAACU,GAAG,CAAC,CAAC;MACzD,IAAI2B,oBAAoB,EAAE;QACtB,IAAMG,8BAA8B,GAAGH,oBAAoB,CAACI,qBAAqB,CAC5EC,GAAG,CAAC,UAAAC,EAAE;UAAA,OAAItD,KAAK,CAACuD,QAAQ,CAACC,kBAAkB,CAACF,EAAE,CAAC;QAAA,EAAC,CAChDD,GAAG,CAAC,UAAA9F,CAAC;UAAA,OAAIA,CAAC,GAAG2B,SAAS,CAACuE,kBAAkB,CAAClG,CAAC,CAAC,GAAGkD,SAAS;QAAA,EAAC;QAC9D,IAAMiD,6BAA6B,GAAGV,oBAAoB,CAACW,qBAAqB,CAC3EN,GAAG,CAAC,UAAAC,EAAE;UAAA,OAAItD,KAAK,CAAC4D,QAAQ,CAACJ,kBAAkB,CAACF,EAAE,CAAC;QAAA,EAAC,CAChDD,GAAG,CAAC,UAAA9F,CAAC;UAAA,OAAIA,CAAC,GAAG2B,SAAS,CAACuE,kBAAkB,CAAClG,CAAC,CAAC,GAAGkD,SAAS;QAAA,EAAC;QAC9D,IAAMoD,2BAA2B,GAAG7E,kBAAkB,CAACgE,oBAAoB,CAAC/B,OAAO,CAC9EoC,GAAG,CAAC,UAAC9F,CAAC,EAAEuG,GAAG,EAAK;UACjB,IAAI,CAACX,8BAA8B,CAACW,GAAG,CAAC,IAAI,CAACJ,6BAA6B,CAACI,GAAG,CAAC,EAAE;YAC7E,OAAOrD,SAAS;UACpB;UACA,IAAMnD,MAAM,GAAG6F,8BAA8B,CAACW,GAAG,CAAC,CAACxG,MAAM;UACzD,OAAO,IAAIyG,eAAe,CAACZ,8BAA8B,CAACW,GAAG,CAAC,CAACE,eAAe,EAAEN,6BAA6B,CAACI,GAAG,CAAC,CAACE,eAAe,EAAE1G,MAAM;UAC1I;UACA+I,IAAI,CAACC,GAAG,CAAC/I,CAAC,CAAC0G,mBAAmB,CAAC5C,GAAG,CAAC,CAAC,EAAE/D,MAAM,CAAC,EAAE+I,IAAI,CAACC,GAAG,CAAC/I,CAAC,CAAC2G,sBAAsB,CAAC7C,GAAG,CAAC,CAAC,EAAE/D,MAAM,GAAGC,CAAC,CAAC0G,mBAAmB,CAAC5C,GAAG,CAAC,CAAC,CAAC,CAAC;QAClI,CAAC,CAAC,CAAC8C,MAAM,CAACxE,SAAS,CAAC,EAAE,UAAC4G,GAAG,EAAEC,IAAI;UAAA,OAAK,CAACA,IAAI,IAAKD,GAAG,CAACrB,kBAAkB,IAAIsB,IAAI,CAACtB,kBAAkB,GAAGsB,IAAI,CAACxB,SAAS,IAAIuB,GAAG,CAACtB,kBAAkB,IAAIuB,IAAI,CAACvB,kBAAkB,GAAGuB,IAAI,CAACxB,SAAU;QAAA,EAAC;QACzL,IAAIyB,aAAa,GAAG5C,2BAA2B,CAACR,GAAG,CAAC,UAAA9F,CAAC;UAAA,OAAI,IAAI+B,gBAAgB,CAAC/B,CAAC,CAACmJ,sBAAsB,CAACrE,MAAM,CAAC,EAAE9E,CAAC,CAACkH,sBAAsB,CAACpC,MAAM,CAAC,CAAC;QAAA,EAAC;QAClJoE,aAAa,GAAGnH,gBAAgB,CAACqH,IAAI,CAACF,aAAa,EAAEvH,SAAS,CAAC0H,QAAQ,CAAC,CAAC,EAAE5G,KAAK,CAACuD,QAAQ,CAAC0C,YAAY,CAAC,CAAC,CAAC,EAAE/G,SAAS,CAAC0H,QAAQ,CAAC,CAAC,EAAE5G,KAAK,CAAC4D,QAAQ,CAACqC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChKG,cAAc,GAAG9G,gBAAgB,CAACuH,OAAO,CAACJ,aAAa,EAAEzG,KAAK,CAACuD,QAAQ,CAAC0C,YAAY,CAAC,CAAC,EAAEjG,KAAK,CAAC4D,QAAQ,CAACqC,YAAY,CAAC,CAAC,CAAC;MAC1H;MACA,IAAMa,oBAAoB,GAAG,EAAE;MAC/B,IAAIV,cAAc,EAAE;QAAA,IAAAW,UAAA,GAAA3F,0BAAA,CACA0E,mBAAmB;UAAAkB,MAAA;QAAA;UAAA,IAAAC,KAAA,YAAAA,MAAA,EAAE;YAAA,IAA1B1J,CAAC,GAAAyJ,MAAA,CAAAtF,KAAA;YACR,IAAMwF,YAAY,GAAGd,cAAc,CAACjC,MAAM,CAAC,UAAArC,CAAC;cAAA,OAAIA,CAAC,CAACyB,QAAQ,CAAC4D,gBAAgB,CAAC5J,CAAC,CAAC+H,sBAAsB,CAAC,IAAIxD,CAAC,CAAC8B,QAAQ,CAACuD,gBAAgB,CAAC5J,CAAC,CAACmI,sBAAsB,CAAC;YAAA,EAAC;YAC/JoB,oBAAoB,CAAC3B,IAAI,CAAAiC,KAAA,CAAzBN,oBAAoB,EAAAO,kBAAA,CAAS9J,CAAC,CAAC+J,gBAAgB,CAACJ,YAAY,EAAEhG,EAAE,CAAC,EAAC;UACtE,CAAC;UAHD,KAAA6F,UAAA,CAAAxF,CAAA,MAAAyF,MAAA,GAAAD,UAAA,CAAAvF,CAAA,IAAAC,IAAA;YAAAwF,KAAA;UAAA;QAGC,SAAArF,GAAA;UAAAmF,UAAA,CAAAlF,CAAA,CAAAD,GAAA;QAAA;UAAAmF,UAAA,CAAAjF,CAAA;QAAA;MACL,CAAC,MACI;QACDgF,oBAAoB,CAAC3B,IAAI,CAAAiC,KAAA,CAAzBN,oBAAoB,EAAAO,kBAAA,CAASvB,mBAAmB,EAAC;MACrD;MACA,IAAM1C,qBAAqB,GAAGpD,KAAK,CAACuD,QAAQ,CAAC6B,gBAAgB,CAAC,CAACpC,oBAAoB,KAAK,IAAI,IAAIA,oBAAoB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,oBAAoB,CAACI,qBAAqB,KAAK,EAAE,EAAE0D,oBAAoB,CAACzD,GAAG,CAAC,UAAA9F,CAAC;QAAA,OAAK;UAAE8H,KAAK,EAAE9H,CAAC,CAAC+H,sBAAsB,CAACC,gBAAgB,CAAC,CAAC;UAAEC,OAAO,EAAE;YAAEC,WAAW,EAAE;UAAY;QAAE,CAAC;MAAA,CAAC,CAAC,CAAC;MAC7T,IAAM9B,qBAAqB,GAAG3D,KAAK,CAAC4D,QAAQ,CAACwB,gBAAgB,CAAC,CAACpC,oBAAoB,KAAK,IAAI,IAAIA,oBAAoB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,oBAAoB,CAACW,qBAAqB,KAAK,EAAE,EAAEmD,oBAAoB,CAACzD,GAAG,CAAC,UAAA9F,CAAC;QAAA,OAAK;UAAE8H,KAAK,EAAE9H,CAAC,CAACmI,sBAAsB,CAACH,gBAAgB,CAAC,CAAC;UAAEC,OAAO,EAAE;YAAEC,WAAW,EAAE;UAAY;QAAE,CAAC;MAAA,CAAC,CAAC,CAAC;MAC7TtF,KAAA,CAAKQ,iBAAiB,CAACgF,GAAG,CAAC;QACvB1E,OAAO,EAAE6F,oBAAoB;QAC7B1D,qBAAqB,EAArBA,qBAAqB;QACrBO,qBAAqB,EAArBA;MACJ,CAAC,EAAEzC,EAAE,CAAC;IACV,CAAC;IACDf,KAAA,CAAKwC,SAAS,CAAC3C,KAAK,CAAC4D,QAAQ,CAAC2D,kBAAkB,CAAC,UAAC1F,CAAC,EAAK;MACpD,IAAMnB,IAAI,GAAGP,KAAA,CAAKK,KAAK,CAACa,GAAG,CAAC,CAAC;MAC7B,IAAIX,IAAI,EAAE;QACN,IAAM8G,SAAS,GAAGhI,YAAY,CAACiI,uBAAuB,CAAC5F,CAAC,CAACmE,OAAO,CAAC;QACjE,IAAMH,MAAM,GAAG6B,kBAAkB,CAACvH,KAAA,CAAKwH,SAAS,EAAEH,SAAS,EAAExH,KAAK,CAACuD,QAAQ,EAAEvD,KAAK,CAAC4D,QAAQ,CAAC;QAC5F,IAAIiC,MAAM,EAAE;UACR1F,KAAA,CAAKwH,SAAS,GAAG9B,MAAM;UACvBhH,WAAW,CAAC,UAAAqC,EAAE,EAAI;YACdf,KAAA,CAAKK,KAAK,CAACmF,GAAG,CAACiC,SAAS,CAACC,cAAc,CAAC1H,KAAA,CAAKwH,SAAS,CAAC,EAAEzG,EAAE,CAAC;YAC5D0E,sBAAsB,CAACC,MAAM,EAAE3E,EAAE,CAAC;YAClC,IAAM4G,sBAAsB,GAAG3H,KAAA,CAAK4B,kBAAkB,CAACV,GAAG,CAAC,CAAC;YAC5DlB,KAAA,CAAK4B,kBAAkB,CAAC4D,GAAG,CAACmC,sBAAsB,GAAG3H,KAAA,CAAKwH,SAAS,CAACI,KAAK,CAACC,IAAI,CAAC,UAAAC,CAAC;cAAA,OAAIA,CAAC,CAACC,gBAAgB,CAACtE,QAAQ,CAACuE,SAAS,CAACL,sBAAsB,CAACI,gBAAgB,CAACtE,QAAQ,CAAC;YAAA,EAAC,GAAGnD,SAAS,EAAES,EAAE,CAAC;UACjM,CAAC,CAAC;QACN;MACJ;MACAf,KAAA,CAAKG,eAAe,CAACqF,GAAG,CAAC,KAAK,EAAElF,SAAS,CAAC;MAC1CqC,SAAS,CAACsF,QAAQ,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IACHjI,KAAA,CAAKwC,SAAS,CAAC3C,KAAK,CAACuD,QAAQ,CAACgE,kBAAkB,CAAC,UAAC1F,CAAC,EAAK;MACpD,IAAMnB,IAAI,GAAGP,KAAA,CAAKK,KAAK,CAACa,GAAG,CAAC,CAAC;MAC7B,IAAIX,IAAI,EAAE;QACN,IAAM8G,SAAS,GAAGhI,YAAY,CAACiI,uBAAuB,CAAC5F,CAAC,CAACmE,OAAO,CAAC;QACjE,IAAMH,MAAM,GAAGwC,kBAAkB,CAAClI,KAAA,CAAKwH,SAAS,EAAEH,SAAS,EAAExH,KAAK,CAACuD,QAAQ,EAAEvD,KAAK,CAAC4D,QAAQ,CAAC;QAC5F,IAAIiC,MAAM,EAAE;UACR1F,KAAA,CAAKwH,SAAS,GAAG9B,MAAM;UACvBhH,WAAW,CAAC,UAAAqC,EAAE,EAAI;YACdf,KAAA,CAAKK,KAAK,CAACmF,GAAG,CAACiC,SAAS,CAACC,cAAc,CAAC1H,KAAA,CAAKwH,SAAS,CAAC,EAAEzG,EAAE,CAAC;YAC5D0E,sBAAsB,CAACC,MAAM,EAAE3E,EAAE,CAAC;YAClC,IAAM4G,sBAAsB,GAAG3H,KAAA,CAAK4B,kBAAkB,CAACV,GAAG,CAAC,CAAC;YAC5DlB,KAAA,CAAK4B,kBAAkB,CAAC4D,GAAG,CAACmC,sBAAsB,GAAG3H,KAAA,CAAKwH,SAAS,CAACI,KAAK,CAACC,IAAI,CAAC,UAAAC,CAAC;cAAA,OAAIA,CAAC,CAACC,gBAAgB,CAACtE,QAAQ,CAACuE,SAAS,CAACL,sBAAsB,CAACI,gBAAgB,CAACtE,QAAQ,CAAC;YAAA,EAAC,GAAGnD,SAAS,EAAES,EAAE,CAAC;UACjM,CAAC,CAAC;QACN;MACJ;MACAf,KAAA,CAAKG,eAAe,CAACqF,GAAG,CAAC,KAAK,EAAElF,SAAS,CAAC;MAC1CqC,SAAS,CAACsF,QAAQ,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IACHjI,KAAA,CAAKwC,SAAS,CAACnE,gBAAgB;MAAA,IAAA8J,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAC,QAAOrG,MAAM,EAAEsG,KAAK;QAAA,IAAA9H,EAAA,EAAAC,EAAA,EAAA8H,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAjD,MAAA;QAAA,OAAA2C,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAzC,IAAA,GAAAyC,QAAA,CAAAC,IAAA;YAAA;cAChD;;cAEA;cACA/I,KAAA,CAAKF,QAAQ,CAACiG,oCAAoC,CAAClF,IAAI,CAACqB,MAAM,CAAC;cAC/DlC,KAAA,CAAKF,QAAQ,CAACkG,oCAAoC,CAACnF,IAAI,CAACqB,MAAM,CAAC;cAC/DS,SAAS,CAACF,MAAM,CAAC,CAAC;cAClBC,oBAAoB,CAAC7B,IAAI,CAACqB,MAAM,CAAC;cAC3BuG,oBAAoB,GAAGzI,KAAA,CAAKiC,aAAa,CAACpB,IAAI,CAACqB,MAAM,CAAC;cAC5DuG,oBAAoB,CAACnG,cAAc,CAACzB,IAAI,CAACqB,MAAM,CAAC;cAChDpD,uBAAuB,CAACG,wBAAwB,EAAEiD,MAAM,CAAC;cACzDpD,uBAAuB,CAACS,qBAAqB,EAAE2C,MAAM,CAAC;cACtDlC,KAAA,CAAKG,eAAe,CAACqF,GAAG,CAAC,KAAK,EAAElF,SAAS,CAAC;cACtCoI,qBAAqB,GAAG,EAAE;cAC9BF,KAAK,CAACQ,GAAG,CAACnJ,KAAK,CAACuD,QAAQ,CAACgE,kBAAkB,CAAC,UAAC1F,CAAC,EAAK;gBAC/C,IAAMuH,KAAK,GAAG5J,YAAY,CAACiI,uBAAuB,CAAC5F,CAAC,CAACmE,OAAO,CAAC;gBAC7D6C,qBAAqB,GAAGpJ,oBAAoB,CAACoJ,qBAAqB,EAAEO,KAAK,CAAC;cAC9E,CAAC,CAAC,CAAC;cACCN,qBAAqB,GAAG,EAAE;cAC9BH,KAAK,CAACQ,GAAG,CAACnJ,KAAK,CAAC4D,QAAQ,CAAC2D,kBAAkB,CAAC,UAAC1F,CAAC,EAAK;gBAC/C,IAAMuH,KAAK,GAAG5J,YAAY,CAACiI,uBAAuB,CAAC5F,CAAC,CAACmE,OAAO,CAAC;gBAC7D8C,qBAAqB,GAAGrJ,oBAAoB,CAACqJ,qBAAqB,EAAEM,KAAK,CAAC;cAC9E,CAAC,CAAC,CAAC;cAACH,QAAA,CAAAC,IAAA;cAAA,OACeN,oBAAoB,CAACtG,YAAY,CAAC+G,WAAW,CAACrJ,KAAK,CAACuD,QAAQ,EAAEvD,KAAK,CAAC4D,QAAQ,EAAE;gBAC7F0F,oBAAoB,EAAEnJ,KAAA,CAAKF,QAAQ,CAACqJ,oBAAoB,CAACtI,IAAI,CAACqB,MAAM,CAAC;gBACrEkH,oBAAoB,EAAEpJ,KAAA,CAAKF,QAAQ,CAACsJ,oBAAoB,CAACvI,IAAI,CAACqB,MAAM,CAAC;gBACrEmH,YAAY,EAAErJ,KAAA,CAAKF,QAAQ,CAACwJ,SAAS,CAACzI,IAAI,CAACqB,MAAM;cACrD,CAAC,EAAElC,KAAA,CAAKgC,wBAAwB,CAACuH,KAAK,CAAC;YAAA;cAJnC7D,MAAM,GAAAoD,QAAA,CAAAU,IAAA;cAAA,KAKNxJ,KAAA,CAAKgC,wBAAwB,CAACuH,KAAK,CAACE,uBAAuB;gBAAAX,QAAA,CAAAC,IAAA;gBAAA;cAAA;cAAA,OAAAD,QAAA,CAAAY,MAAA;YAAA;cAG/DhE,MAAM,GAAGiE,qBAAqB,CAACjE,MAAM,EAAE7F,KAAK,CAACuD,QAAQ,EAAEvD,KAAK,CAAC4D,QAAQ,CAAC;cACtEiC,MAAM,GAAG,CAAChF,EAAE,GAAGwH,kBAAkB,CAACxC,MAAM,EAAEgD,qBAAqB,EAAE7I,KAAK,CAACuD,QAAQ,EAAEvD,KAAK,CAAC4D,QAAQ,CAAC,MAAM,IAAI,IAAI/C,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGgF,MAAM;cACzIA,MAAM,GAAG,CAAC/E,EAAE,GAAG4G,kBAAkB,CAAC7B,MAAM,EAAEiD,qBAAqB,EAAE9I,KAAK,CAACuD,QAAQ,EAAEvD,KAAK,CAAC4D,QAAQ,CAAC,MAAM,IAAI,IAAI9C,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG+E,MAAM;cACzIhH,WAAW,CAAC,UAAAqC,EAAE,EAAI;gBACd;gBACA0E,sBAAsB,CAACC,MAAM,EAAE3E,EAAE,CAAC;gBAClCf,KAAA,CAAKwH,SAAS,GAAG9B,MAAM;gBACvB,IAAMkE,KAAK,GAAGnC,SAAS,CAACC,cAAc,CAAChC,MAAM,CAAC;gBAC9C1F,KAAA,CAAKK,KAAK,CAACmF,GAAG,CAACoE,KAAK,EAAE7I,EAAE,CAAC;gBACzBf,KAAA,CAAKG,eAAe,CAACqF,GAAG,CAAC,IAAI,EAAEzE,EAAE,CAAC;gBAClC,IAAM4G,sBAAsB,GAAG3H,KAAA,CAAK4B,kBAAkB,CAACV,GAAG,CAAC,CAAC;gBAC5DlB,KAAA,CAAK4B,kBAAkB,CAAC4D,GAAG,CAACmC,sBAAsB,GAAG3H,KAAA,CAAKwH,SAAS,CAACI,KAAK,CAACC,IAAI,CAAC,UAAAC,CAAC;kBAAA,OAAIA,CAAC,CAACC,gBAAgB,CAACtE,QAAQ,CAACuE,SAAS,CAACL,sBAAsB,CAACI,gBAAgB,CAACtE,QAAQ,CAAC;gBAAA,EAAC,GAAGnD,SAAS,EAAES,EAAE,CAAC;cACjM,CAAC,CAAC;YAAC;YAAA;cAAA,OAAA+H,QAAA,CAAAe,IAAA;UAAA;QAAA,GAAAtB,OAAA;MAAA,CACN;MAAA,iBAAAuB,EAAA,EAAAC,GAAA;QAAA,OAAA5B,IAAA,CAAAlB,KAAA,OAAA/J,SAAA;MAAA;IAAA,IAAC,CAAC;IAAC,OAAA8C,KAAA;EACR;EAACgK,SAAA,CAAArK,mBAAA,EAAAC,WAAA;EAAA,OAAAqK,YAAA,CAAAtK,mBAAA;IAAA5C,GAAA;IAAAwE,KAAA,EAnND,SAAA2I,mBAAmBC,SAAS,EAAE;MAC1B,IAAI,CAACtI,gBAAgB,CAAC2D,GAAG,CAAC2E,SAAS,EAAE7J,SAAS,CAAC;IACnD;EAAC;IAAAvD,GAAA;IAAAwE,KAAA,EAkND,SAAA6I,4BAA4BC,UAAU,EAAEC,UAAU,EAAEvJ,EAAE,EAAE;MACpD,IAAIL,EAAE,EAAEC,EAAE;MACV,IAAI,CAAC,CAACD,EAAE,GAAG,IAAI,CAACH,IAAI,CAACW,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC6J,QAAQ,CAACpN,MAAM,MAAM,CAAC,EAAE;QACxF;MACJ;MACA,IAAMsD,gBAAgB,GAAG,CAAC,CAACE,EAAE,GAAG,IAAI,CAACH,iBAAiB,CAACU,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACG,OAAO,KAAK,EAAE;MAAC,IAAA0J,UAAA,GAAAvJ,0BAAA,CACrGR,gBAAgB;QAAAgK,MAAA;MAAA;QAAhC,KAAAD,UAAA,CAAApJ,CAAA,MAAAqJ,MAAA,GAAAD,UAAA,CAAAnJ,CAAA,IAAAC,IAAA,GAAkC;UAAA,IAAvBlE,CAAC,GAAAqN,MAAA,CAAAlJ,KAAA;UACR,IAAInE,CAAC,CAACkH,sBAAsB,CAAChE,SAAS,CAAC,CAACoK,QAAQ,CAACL,UAAU,CAAC,EAAE;YAC1DjN,CAAC,CAACuN,gBAAgB,CAACN,UAAU,EAAEC,UAAU,EAAEvJ,EAAE,CAAC;YAC9C;UACJ;QACJ;MAAC,SAAAU,GAAA;QAAA+I,UAAA,CAAA9I,CAAA,CAAAD,GAAA;MAAA;QAAA+I,UAAA,CAAA7I,CAAA;MAAA;IACL;EAAC;IAAA5E,GAAA;IAAAwE,KAAA,EACD,SAAAqJ,4BAA4BP,UAAU,EAAEC,UAAU,EAAEvJ,EAAE,EAAE;MACpD,IAAIL,EAAE,EAAEC,EAAE;MACV,IAAI,CAAC,CAACD,EAAE,GAAG,IAAI,CAACH,IAAI,CAACW,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC6J,QAAQ,CAACpN,MAAM,MAAM,CAAC,EAAE;QACxF;MACJ;MACA,IAAMsD,gBAAgB,GAAG,CAAC,CAACE,EAAE,GAAG,IAAI,CAACH,iBAAiB,CAACU,GAAG,CAAC,CAAC,MAAM,IAAI,IAAIP,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACG,OAAO,KAAK,EAAE;MAAC,IAAA+J,UAAA,GAAA5J,0BAAA,CACrGR,gBAAgB;QAAAqK,MAAA;MAAA;QAAhC,KAAAD,UAAA,CAAAzJ,CAAA,MAAA0J,MAAA,GAAAD,UAAA,CAAAxJ,CAAA,IAAAC,IAAA,GAAkC;UAAA,IAAvBlE,CAAC,GAAA0N,MAAA,CAAAvJ,KAAA;UACR,IAAInE,CAAC,CAACmJ,sBAAsB,CAACjG,SAAS,CAAC,CAACoK,QAAQ,CAACL,UAAU,CAAC,EAAE;YAC1DjN,CAAC,CAAC2N,gBAAgB,CAACV,UAAU,EAAEC,UAAU,EAAEvJ,EAAE,CAAC;YAC9C;UACJ;QACJ;MAAC,SAAAU,GAAA;QAAAoJ,UAAA,CAAAnJ,CAAA,CAAAD,GAAA;MAAA;QAAAoJ,UAAA,CAAAlJ,CAAA;MAAA;IACL;EAAC;IAAA5E,GAAA;IAAAwE,KAAA;MAAA,IAAAyJ,YAAA,GAAA5C,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CACD,SAAA2C,SAAA;QAAA,OAAA5C,mBAAA,GAAAO,IAAA,UAAAsC,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA9E,IAAA,GAAA8E,SAAA,CAAApC,IAAA;YAAA;cAAAoC,SAAA,CAAApC,IAAA;cAAA,OACUpK,YAAY,CAAC,IAAI,CAACyB,cAAc,EAAE,UAAAgB,CAAC;gBAAA,OAAIA,CAAC;cAAA,EAAC;YAAA;YAAA;cAAA,OAAA+J,SAAA,CAAAtB,IAAA;UAAA;QAAA,GAAAoB,QAAA;MAAA,CAClD;MAAA,SAAAG,YAAA;QAAA,OAAAJ,YAAA,CAAA/D,KAAA,OAAA/J,SAAA;MAAA;MAAA,OAAAkO,WAAA;IAAA;EAAA;IAAArO,GAAA;IAAAwE,KAAA,EACD,SAAA8J,eAAA,EAAiB;MACb,IAAMvK,OAAO,GAAG,IAAI,CAACN,iBAAiB,CAACU,GAAG,CAAC,CAAC;MAC5C,OAAO;QACHoK,gBAAgB,EAAExK,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACA,OAAO,CAACoC,GAAG,CAAC,UAAA9F,CAAC;UAAA,OAAK;YAAE8H,KAAK,EAAE9H,CAAC,CAACkH,sBAAsB,CAAChE,SAAS,CAAC,CAACiL,SAAS,CAAC;UAAE,CAAC;QAAA,CAAC;MAC7J,CAAC;IACL;EAAC;IAAAxO,GAAA;IAAAwE,KAAA,EACD,SAAAiK,uBAAuB5B,KAAK,EAAE;MAC1B,IAAIlJ,EAAE;MACN,IAAM+K,MAAM,GAAG,CAAC/K,EAAE,GAAGkJ,KAAK,CAAC0B,gBAAgB,MAAM,IAAI,IAAI5K,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACwC,GAAG,CAAC,UAAA9F,CAAC;QAAA,OAAI2B,SAAS,CAAC2M,WAAW,CAACtO,CAAC,CAAC8H,KAAK,CAAC;MAAA,EAAC;MAC7H,IAAMpE,OAAO,GAAG,IAAI,CAACN,iBAAiB,CAACU,GAAG,CAAC,CAAC;MAC5C,IAAI,CAACJ,OAAO,IAAI,CAAC2K,MAAM,EAAE;QACrB;MACJ;MACA/M,WAAW,CAAC,UAAAqC,EAAE,EAAI;QAAA,IAAA4K,UAAA,GAAA1K,0BAAA,CACEH,OAAO,CAACA,OAAO;UAAA8K,MAAA;QAAA;UAA/B,KAAAD,UAAA,CAAAvK,CAAA,MAAAwK,MAAA,GAAAD,UAAA,CAAAtK,CAAA,IAAAC,IAAA,GAAiC;YAAA,IAAtBlE,CAAC,GAAAwO,MAAA,CAAArK,KAAA;YAAA,IAAAsK,UAAA,GAAA5K,0BAAA,CACYwK,MAAM;cAAAK,MAAA;YAAA;cAA1B,KAAAD,UAAA,CAAAzK,CAAA,MAAA0K,MAAA,GAAAD,UAAA,CAAAxK,CAAA,IAAAC,IAAA,GAA4B;gBAAA,IAAjB4D,KAAK,GAAA4G,MAAA,CAAAvK,KAAA;gBACZ,IAAInE,CAAC,CAACmI,sBAAsB,CAACyC,SAAS,CAAC9C,KAAK,CAAC,EAAE;kBAC3C9H,CAAC,CAAC2O,sBAAsB,CAAC7G,KAAK,EAAEnE,EAAE,CAAC;kBACnC;gBACJ;cACJ;YAAC,SAAAU,GAAA;cAAAoK,UAAA,CAAAnK,CAAA,CAAAD,GAAA;YAAA;cAAAoK,UAAA,CAAAlK,CAAA;YAAA;UACL;QAAC,SAAAF,GAAA;UAAAkK,UAAA,CAAAjK,CAAA,CAAAD,GAAA;QAAA;UAAAkK,UAAA,CAAAhK,CAAA;QAAA;MACL,CAAC,CAAC;IACN;EAAC;AAAA,EAzQuDzD,UAAU,CA0QrE;AACDyB,mBAAmB,GAAG/C,UAAU,CAAC,CAC7BiB,OAAO,CAAC,CAAC,EAAEe,2BAA2B,CAAC,CAC1C,EAAEe,mBAAmB,CAAC;AACvB,SAASA,mBAAmB;AAC5B,SAASgK,qBAAqBA,CAACpJ,IAAI,EAAE6C,QAAQ,EAAEK,QAAQ,EAAE;EACrD,OAAO;IACHoC,OAAO,EAAEtF,IAAI,CAACsF,OAAO,CAAC3C,GAAG,CAAC,UAAAjG,CAAC;MAAA,OAAI,IAAIiC,wBAAwB,CAACjC,CAAC,CAACmG,QAAQ,EAAEnG,CAAC,CAACwG,QAAQ,EAAExG,CAAC,CAAC+O,YAAY,GAAG/O,CAAC,CAAC+O,YAAY,CAAC9I,GAAG,CAAC,UAAAvF,CAAC;QAAA,OAAIsO,qBAAqB,CAACtO,CAAC,EAAEyF,QAAQ,EAAEK,QAAQ,CAAC;MAAA,EAAC,GAAGnD,SAAS,CAAC;IAAA,EAAC;IACxLsH,KAAK,EAAErH,IAAI,CAACqH,KAAK;IACjBsE,SAAS,EAAE3L,IAAI,CAAC2L,SAAS;IACzBC,SAAS,EAAE5L,IAAI,CAAC4L;EACpB,CAAC;AACL;AACA,SAASF,qBAAqBA,CAACG,YAAY,EAAEhJ,QAAQ,EAAEK,QAAQ,EAAE;EAC7D,IAAI4I,aAAa,GAAGD,YAAY,CAACC,aAAa;EAC9C,IAAIC,aAAa,GAAGF,YAAY,CAACE,aAAa;EAC9C,IAAI,CAACD,aAAa,CAACE,SAAS,KAAK,CAAC,IAAID,aAAa,CAACC,SAAS,KAAK,CAAC,KAC/DF,aAAa,CAACE,SAAS,KAAKnJ,QAAQ,CAACoJ,gBAAgB,CAACH,aAAa,CAACI,aAAa,CAAC,IAC/EH,aAAa,CAACC,SAAS,KAAK9I,QAAQ,CAAC+I,gBAAgB,CAACF,aAAa,CAACG,aAAa,CAAC,IAClFJ,aAAa,CAACI,aAAa,GAAGrJ,QAAQ,CAAC0C,YAAY,CAAC,CAAC,IACrDwG,aAAa,CAACG,aAAa,GAAGhJ,QAAQ,CAACqC,YAAY,CAAC,CAAC,EAAE;IAC1DuG,aAAa,GAAGA,aAAa,CAACK,cAAc,CAACL,aAAa,CAACI,aAAa,GAAG,CAAC,EAAE,CAAC,CAAC;IAChFH,aAAa,GAAGA,aAAa,CAACI,cAAc,CAACJ,aAAa,CAACG,aAAa,GAAG,CAAC,EAAE,CAAC,CAAC;EACpF;EACA,OAAO,IAAIrN,YAAY,CAACiN,aAAa,EAAEC,aAAa,CAAC;AACzD;AACA,WAAa7E,SAAS;EAIlB,SAAAA,UAAY8C,QAAQ,EAAEoC,UAAU,EAAET,SAAS,EAAEC,SAAS,EAAE;IAAAlM,eAAA,OAAAwH,SAAA;IACpD,IAAI,CAAC8C,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACoC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACT,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC9B;EAAC,OAAAlC,YAAA,CAAAxC,SAAA;IAAA1K,GAAA;IAAAwE,KAAA,EARD,SAAAmG,eAAsBhC,MAAM,EAAE;MAC1B,OAAO,IAAI+B,SAAS,CAAC/B,MAAM,CAACG,OAAO,CAAC3C,GAAG,CAAC,UAAAjG,CAAC;QAAA,OAAI,IAAI2P,WAAW,CAAC3P,CAAC,CAAC;MAAA,EAAC,EAAEyI,MAAM,CAACkC,KAAK,IAAI,EAAE,EAAElC,MAAM,CAACwG,SAAS,EAAExG,MAAM,CAACyG,SAAS,CAAC;IAC7H;EAAC;AAAA;AAQL,WAAaS,WAAW,gBAAA3C,YAAA,CACpB,SAAA2C,YAAY7E,gBAAgB,EAAE;EAAA9H,eAAA,OAAA2M,WAAA;EAC1B,IAAI,CAAC7E,gBAAgB,GAAGA,gBAAgB;EACxC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI,CAAC;AAEL,WAAanE,eAAe;EAoCxB,SAAAA,gBAAYkB,kBAAkB,EAAEC,kBAAkB,EAAEF,SAAS,EAAEf,mBAAmB,EAAEC,sBAAsB,EAAE;IAAA,IAAA8I,MAAA;IAAA5M,eAAA,OAAA2D,eAAA;IACxG,IAAI,CAACkB,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACF,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACiI,oBAAoB,GAAGrO,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;IACpD,IAAI,CAACqF,mBAAmB,GAAG,IAAI,CAACgJ,oBAAoB;IACpD,IAAI,CAACC,uBAAuB,GAAGtO,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;IACvD,IAAI,CAACsF,sBAAsB,GAAG,IAAI,CAACgJ,uBAAuB;IAC1D,IAAI,CAACC,mBAAmB,GAAG1O,OAAO,CAAC,IAAI,EAAE,UAAA4D,MAAM;MAAA,OAAI,6BAA8B2K,MAAI,CAAC/I,mBAAmB,CAACjD,IAAI,CAACqB,MAAM,CAAC,GAAG2K,MAAI,CAAC9I,sBAAsB,CAAClD,IAAI,CAACqB,MAAM,CAAC,KAAK2K,MAAI,CAAChI,SAAS,IAAI,CAACgI,MAAI,CAAC9J,SAAS,CAAClC,IAAI,CAACqB,MAAM,CAAC;IAAA,EAAC;IACrN,IAAI,CAACa,SAAS,GAAGtE,eAAe,CAAC,IAAI,EAAE6B,SAAS,CAAC;IACjD,IAAM2M,oBAAoB,GAAG/G,IAAI,CAACgH,GAAG,CAAChH,IAAI,CAACC,GAAG,CAACrC,mBAAmB,EAAE,IAAI,CAACe,SAAS,CAAC,EAAE,CAAC,CAAC;IACvF,IAAMsI,uBAAuB,GAAGjH,IAAI,CAACgH,GAAG,CAAChH,IAAI,CAACC,GAAG,CAACpC,sBAAsB,EAAE,IAAI,CAACc,SAAS,GAAGf,mBAAmB,CAAC,EAAE,CAAC,CAAC;IACnHpE,UAAU,CAACoE,mBAAmB,KAAKmJ,oBAAoB,CAAC;IACxDvN,UAAU,CAACqE,sBAAsB,KAAKoJ,uBAAuB,CAAC;IAC9D,IAAI,CAACL,oBAAoB,CAACtH,GAAG,CAACyH,oBAAoB,EAAE3M,SAAS,CAAC;IAC9D,IAAI,CAACyM,uBAAuB,CAACvH,GAAG,CAAC2H,uBAAuB,EAAE7M,SAAS,CAAC;EACxE;EAAC,OAAA2J,YAAA,CAAArG,eAAA;IAAA7G,GAAA;IAAAmE,GAAA,EAtBD,SAAAA,IAAA,EAA6B;MACzB,OAAOnC,SAAS,CAAC0H,QAAQ,CAAC,IAAI,CAAC3B,kBAAkB,EAAE,IAAI,CAACD,SAAS,CAAC;IACtE;EAAC;IAAA9H,GAAA;IAAAmE,GAAA,EACD,SAAAA,IAAA,EAA6B;MACzB,OAAOnC,SAAS,CAAC0H,QAAQ,CAAC,IAAI,CAAC1B,kBAAkB,EAAE,IAAI,CAACF,SAAS,CAAC;IACtE;EAAC;IAAA9H,GAAA;IAAAwE,KAAA,EAkBD,SAAA4F,iBAAiBiG,aAAa,EAAErM,EAAE,EAAE;MAChC,IAAM2E,MAAM,GAAG,EAAE;MACjB,IAAM2H,cAAc,GAAG,IAAIrO,YAAY,CAACoO,aAAa,CAAClK,GAAG,CAAC,UAAA9F,CAAC;QAAA,OAAIA,CAAC,CAACqG,QAAQ;MAAA,EAAC,CAAC,CAAC6J,YAAY,CAAC,IAAI,CAAC/H,sBAAsB,CAAC;MACrH,IAAIgI,uBAAuB,GAAG,IAAI,CAACzI,kBAAkB;MACrD,IAAI0I,uBAAuB,GAAG,IAAI,CAACzI,kBAAkB;MACrD,IAAM0I,uBAAuB,GAAG,IAAI,CAAC1I,kBAAkB,GAAG,IAAI,CAACF,SAAS;MACxE,IAAIwI,cAAc,CAAC5B,MAAM,CAACtO,MAAM,KAAK,CAAC,EAAE;QACpC,IAAI,CAACuQ,OAAO,CAAC3M,EAAE,CAAC;QAChB2E,MAAM,CAACV,IAAI,CAAC,IAAI,CAAC;MACrB,CAAC,MACI;QACD,IAAIrH,CAAC,GAAG,CAAC;QAAC,IAAAgQ,UAAA,GAAA1M,0BAAA,CACMoM,cAAc,CAAC5B,MAAM;UAAAmC,MAAA;QAAA;UAArC,KAAAD,UAAA,CAAAvM,CAAA,MAAAwM,MAAA,GAAAD,UAAA,CAAAtM,CAAA,IAAAC,IAAA,GAAuC;YAAA,IAA5BlE,CAAC,GAAAwQ,MAAA,CAAArM,KAAA;YACR,IAAMsM,MAAM,GAAGlQ,CAAC,KAAK0P,cAAc,CAAC5B,MAAM,CAACtO,MAAM,GAAG,CAAC;YACrDQ,CAAC,EAAE;YACH,IAAMR,MAAM,GAAG,CAAC0Q,MAAM,GAAGJ,uBAAuB,GAAGrQ,CAAC,CAACmH,sBAAsB,IAAIiJ,uBAAuB;YACtG,IAAMM,IAAI,GAAG,IAAIlK,eAAe,CAAC2J,uBAAuB,EAAEC,uBAAuB,EAAErQ,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;YAChG2Q,IAAI,CAAC/B,sBAAsB,CAAC3O,CAAC,EAAE2D,EAAE,CAAC;YAClC2E,MAAM,CAACV,IAAI,CAAC8I,IAAI,CAAC;YACjBP,uBAAuB,GAAGO,IAAI,CAAC3I,sBAAsB,CAACZ,sBAAsB;YAC5EiJ,uBAAuB,GAAGM,IAAI,CAACvI,sBAAsB,CAAChB,sBAAsB;UAChF;QAAC,SAAA9C,GAAA;UAAAkM,UAAA,CAAAjM,CAAA,CAAAD,GAAA;QAAA;UAAAkM,UAAA,CAAAhM,CAAA;QAAA;MACL;MACA,OAAO+D,MAAM;IACjB;EAAC;IAAA3I,GAAA;IAAAwE,KAAA,EACD,SAAAwM,mBAAmB7L,MAAM,EAAE;MACvB,OAAO,IAAI,CAAC8K,mBAAmB,CAACnM,IAAI,CAACqB,MAAM,CAAC;IAChD;EAAC;IAAAnF,GAAA;IAAAwE,KAAA,EACD,SAAAgF,uBAAuBrE,MAAM,EAAE;MAC3B,OAAOnD,SAAS,CAAC0H,QAAQ,CAAC,IAAI,CAAC3B,kBAAkB,GAAG,IAAI,CAACgI,oBAAoB,CAACjM,IAAI,CAACqB,MAAM,CAAC,EAAE,IAAI,CAAC2C,SAAS,GAAG,IAAI,CAACiI,oBAAoB,CAACjM,IAAI,CAACqB,MAAM,CAAC,GAAG,IAAI,CAAC6K,uBAAuB,CAAClM,IAAI,CAACqB,MAAM,CAAC,CAAC;IACpM;EAAC;IAAAnF,GAAA;IAAAwE,KAAA,EACD,SAAA+C,uBAAuBpC,MAAM,EAAE;MAC3B,OAAOnD,SAAS,CAAC0H,QAAQ,CAAC,IAAI,CAAC1B,kBAAkB,GAAG,IAAI,CAAC+H,oBAAoB,CAACjM,IAAI,CAACqB,MAAM,CAAC,EAAE,IAAI,CAAC2C,SAAS,GAAG,IAAI,CAACiI,oBAAoB,CAACjM,IAAI,CAACqB,MAAM,CAAC,GAAG,IAAI,CAAC6K,uBAAuB,CAAClM,IAAI,CAACqB,MAAM,CAAC,CAAC;IACpM;EAAC;IAAAnF,GAAA;IAAAwE,KAAA,EACD,SAAAwK,uBAAuB7G,KAAK,EAAEnE,EAAE,EAAE;MAC9B,IAAM+C,mBAAmB,GAAGoB,KAAK,CAACrB,eAAe,GAAG,IAAI,CAACkB,kBAAkB;MAC3E,IAAMhB,sBAAsB,GAAI,IAAI,CAACgB,kBAAkB,GAAG,IAAI,CAACF,SAAS,GAAIK,KAAK,CAACX,sBAAsB;MACxG,IAAI,CAACyJ,QAAQ,CAAClK,mBAAmB,EAAEC,sBAAsB,EAAEhD,EAAE,CAAC;IAClE;EAAC;IAAAhE,GAAA;IAAAwE,KAAA,EACD,SAAA0M,0BAAA,EAA4B;MACxB,OAAO,IAAI,CAACpJ,SAAS,GAAG,IAAI,CAACkI,uBAAuB,CAAC7L,GAAG,CAAC,CAAC;IAC9D;EAAC;IAAAnE,GAAA;IAAAwE,KAAA,EACD,SAAA2M,6BAAA,EAA+B;MAC3B,OAAO,IAAI,CAACrJ,SAAS,GAAG,IAAI,CAACiI,oBAAoB,CAAC5L,GAAG,CAAC,CAAC;IAC3D;EAAC;IAAAnE,GAAA;IAAAwE,KAAA,EACD,SAAA4M,cAAA,EAA8B;MAAA,IAAhBC,KAAK,GAAAlR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAoD,SAAA,GAAApD,SAAA,MAAG,EAAE;MAAA,IAAE6D,EAAE,GAAA7D,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAoD,SAAA;MACxB,IAAM+N,sBAAsB,GAAG,IAAI,CAACJ,yBAAyB,CAAC,CAAC;MAC/D,IAAI,CAACnB,oBAAoB,CAACtH,GAAG,CAACU,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC2G,oBAAoB,CAAC5L,GAAG,CAAC,CAAC,GAAGkN,KAAK,EAAEC,sBAAsB,CAAC,EAAEtN,EAAE,CAAC;IAChH;EAAC;IAAAhE,GAAA;IAAAwE,KAAA,EACD,SAAA+M,cAAA,EAA8B;MAAA,IAAhBF,KAAK,GAAAlR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAoD,SAAA,GAAApD,SAAA,MAAG,EAAE;MAAA,IAAE6D,EAAE,GAAA7D,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAoD,SAAA;MACxB,IAAMiO,yBAAyB,GAAG,IAAI,CAAC1J,SAAS,GAAG,IAAI,CAACiI,oBAAoB,CAAC5L,GAAG,CAAC,CAAC;MAClF,IAAI,CAAC6L,uBAAuB,CAACvH,GAAG,CAACU,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC4G,uBAAuB,CAAC7L,GAAG,CAAC,CAAC,GAAGkN,KAAK,EAAEG,yBAAyB,CAAC,EAAExN,EAAE,CAAC;IACzH;EAAC;IAAAhE,GAAA;IAAAwE,KAAA,EACD,SAAAmM,QAAQ3M,EAAE,EAAE;MACR,IAAI,CAACgM,uBAAuB,CAACvH,GAAG,CAAC,IAAI,CAACX,SAAS,GAAG,IAAI,CAACiI,oBAAoB,CAAC5L,GAAG,CAAC,CAAC,EAAEH,EAAE,CAAC;IAC1F;EAAC;IAAAhE,GAAA;IAAAwE,KAAA,EACD,SAAAoJ,iBAAiBN,UAAU,EAAEC,UAAU,EAAEvJ,EAAE,EAAE;MACzC,IAAMyN,GAAG,GAAGnE,UAAU,GAAG,CAAC,IAAI,IAAI,CAACtF,kBAAkB,GAAG,IAAI,CAAC+H,oBAAoB,CAAC5L,GAAG,CAAC,CAAC,CAAC;MACxF,IAAMuN,MAAM,GAAI,IAAI,CAAC1J,kBAAkB,GAAG,IAAI,CAACgI,uBAAuB,CAAC7L,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC2D,SAAS,GAAIwF,UAAU;MAC3G,IAAIC,UAAU,KAAK,CAAC,CAAC,yCAAyCkE,GAAG,GAAGC,MAAM,IAAInE,UAAU,KAAK,CAAC,CAAC,gCAAgC;QAC3H,IAAI,CAACwC,oBAAoB,CAACtH,GAAG,CAAC,IAAI,CAACsH,oBAAoB,CAAC5L,GAAG,CAAC,CAAC,GAAGsN,GAAG,EAAEzN,EAAE,CAAC;MAC5E,CAAC,MACI;QACD,IAAI,CAACgM,uBAAuB,CAACvH,GAAG,CAAC,IAAI,CAACuH,uBAAuB,CAAC7L,GAAG,CAAC,CAAC,GAAGuN,MAAM,EAAE1N,EAAE,CAAC;MACrF;IACJ;EAAC;IAAAhE,GAAA;IAAAwE,KAAA,EACD,SAAAwJ,iBAAiBV,UAAU,EAAEC,UAAU,EAAEvJ,EAAE,EAAE;MACzC,IAAMyN,GAAG,GAAGnE,UAAU,GAAG,IAAI,CAACvF,kBAAkB;MAChD,IAAM2J,MAAM,GAAI,IAAI,CAAC3J,kBAAkB,GAAG,IAAI,CAACD,SAAS,GAAIwF,UAAU;MACtE,IAAIC,UAAU,KAAK,CAAC,CAAC,yCAAyCkE,GAAG,GAAGC,MAAM,IAAInE,UAAU,KAAK,CAAC,CAAC,gCAAgC;QAC3H,IAAI,CAACwC,oBAAoB,CAACtH,GAAG,CAACU,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC2G,oBAAoB,CAAC5L,GAAG,CAAC,CAAC,GAAGuN,MAAM,GAAGD,GAAG,EAAE,IAAI,CAACP,yBAAyB,CAAC,CAAC,CAAC,EAAElN,EAAE,CAAC;MACjI,CAAC,MACI;QACD,IAAI,CAACgM,uBAAuB,CAACvH,GAAG,CAACU,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC4G,uBAAuB,CAAC7L,GAAG,CAAC,CAAC,GAAGsN,GAAG,GAAGC,MAAM,EAAE,IAAI,CAACP,4BAA4B,CAAC,CAAC,CAAC,EAAEnN,EAAE,CAAC;MAC1I;IACJ;EAAC;IAAAhE,GAAA;IAAAwE,KAAA,EACD,SAAAC,YAAYT,EAAE,EAAE;MACZ,IAAI,CAAC+L,oBAAoB,CAACtH,GAAG,CAAC,CAAC,EAAEzE,EAAE,CAAC;MACpC,IAAI,CAACgM,uBAAuB,CAACvH,GAAG,CAAC,CAAC,EAAEzE,EAAE,CAAC;IAC3C;EAAC;IAAAhE,GAAA;IAAAwE,KAAA,EACD,SAAAyM,SAASlK,mBAAmB,EAAEC,sBAAsB,EAAEhD,EAAE,EAAE;MACtD+C,mBAAmB,GAAGoC,IAAI,CAACgH,GAAG,CAAChH,IAAI,CAACC,GAAG,CAACrC,mBAAmB,EAAE,IAAI,CAACe,SAAS,CAAC,EAAE,CAAC,CAAC;MAChFd,sBAAsB,GAAGmC,IAAI,CAACgH,GAAG,CAAChH,IAAI,CAACC,GAAG,CAACpC,sBAAsB,EAAE,IAAI,CAACc,SAAS,GAAGf,mBAAmB,CAAC,EAAE,CAAC,CAAC;MAC5G,IAAI,CAACgJ,oBAAoB,CAACtH,GAAG,CAAC1B,mBAAmB,EAAE/C,EAAE,CAAC;MACtD,IAAI,CAACgM,uBAAuB,CAACvH,GAAG,CAACzB,sBAAsB,EAAEhD,EAAE,CAAC;IAChE;EAAC;IAAAhE,GAAA;IAAAwE,KAAA,EAzID,SAAAqE,UAAiBC,OAAO,EAAE6I,iBAAiB,EAAEC,iBAAiB,EAAEC,kBAAkB,EAAEC,UAAU,EAAE;MAC5F,IAAMC,gBAAgB,GAAG5P,wBAAwB,CAACwH,OAAO,CAACb,OAAO,EAAE6I,iBAAiB,EAAEC,iBAAiB,CAAC;MACxG,IAAMjJ,MAAM,GAAG,EAAE;MAAC,IAAAqJ,UAAA,GAAA9N,0BAAA,CACI6N,gBAAgB;QAAAE,MAAA;MAAA;QAAtC,KAAAD,UAAA,CAAA3N,CAAA,MAAA4N,MAAA,GAAAD,UAAA,CAAA1N,CAAA,IAAAC,IAAA,GAAwC;UAAA,IAA7B2N,OAAO,GAAAD,MAAA,CAAAzN,KAAA;UACd,IAAI2N,SAAS,GAAGD,OAAO,CAAC7L,QAAQ,CAACS,eAAe;UAChD,IAAIsL,QAAQ,GAAGF,OAAO,CAACxL,QAAQ,CAACI,eAAe;UAC/C,IAAI1G,MAAM,GAAG8R,OAAO,CAAC7L,QAAQ,CAACjG,MAAM;UACpC,IAAMiS,OAAO,GAAGF,SAAS,KAAK,CAAC,IAAIC,QAAQ,KAAK,CAAC;UACjD,IAAME,KAAK,GAAGH,SAAS,GAAG/R,MAAM,KAAKuR,iBAAiB,GAAG,CAAC,IAAIS,QAAQ,GAAGhS,MAAM,KAAKwR,iBAAiB,GAAG,CAAC;UACzG,IAAI,CAACS,OAAO,IAAIC,KAAK,KAAKlS,MAAM,IAAI0R,UAAU,GAAGD,kBAAkB,EAAE;YACjE,IAAIQ,OAAO,IAAI,CAACC,KAAK,EAAE;cACnBlS,MAAM,IAAI0R,UAAU;YACxB;YACA,IAAIQ,KAAK,IAAI,CAACD,OAAO,EAAE;cACnBF,SAAS,IAAIL,UAAU;cACvBM,QAAQ,IAAIN,UAAU;cACtB1R,MAAM,IAAI0R,UAAU;YACxB;YACAnJ,MAAM,CAACV,IAAI,CAAC,IAAIpB,eAAe,CAACsL,SAAS,EAAEC,QAAQ,EAAEhS,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;UACvE,CAAC,MACI,IAAIA,MAAM,IAAI0R,UAAU,GAAG,CAAC,GAAGD,kBAAkB,EAAE;YACpDM,SAAS,IAAIL,UAAU;YACvBM,QAAQ,IAAIN,UAAU;YACtB1R,MAAM,IAAI0R,UAAU,GAAG,CAAC;YACxBnJ,MAAM,CAACV,IAAI,CAAC,IAAIpB,eAAe,CAACsL,SAAS,EAAEC,QAAQ,EAAEhS,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;UACvE;QACJ;MAAC,SAAAsE,GAAA;QAAAsN,UAAA,CAAArN,CAAA,CAAAD,GAAA;MAAA;QAAAsN,UAAA,CAAApN,CAAA;MAAA;MACD,OAAO+D,MAAM;IACjB;EAAC;AAAA;AA+GL,SAASwC,kBAAkBA,CAAC3H,IAAI,EAAE8G,SAAS,EAAEiI,iBAAiB,EAAEC,iBAAiB,EAAE;EAC/E,OAAOjP,SAAS;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiH,kBAAkBA,CAAChH,IAAI,EAAE8G,SAAS,EAAEiI,iBAAiB,EAAEC,iBAAiB,EAAE;EAC/E,OAAOjP,SAAS;EAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}