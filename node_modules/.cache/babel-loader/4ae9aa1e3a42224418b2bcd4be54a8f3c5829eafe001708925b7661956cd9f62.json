{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\n/**\n * A column in a position is the gap between two adjacent characters. The methods here\n * work with a concept called \"visible column\". A visible column is a very rough approximation\n * of the horizontal screen position of a column. For example, using a tab size of 4:\n * ```txt\n * |<TAB>|<TAB>|T|ext\n * |     |     | \\---- column = 4, visible column = 9\n * |     |     \\------ column = 3, visible column = 8\n * |     \\------------ column = 2, visible column = 4\n * \\------------------ column = 1, visible column = 0\n * ```\n *\n * **NOTE**: Visual columns do not work well for RTL text or variable-width fonts or characters.\n *\n * **NOTE**: These methods work and make sense both on the model and on the view model.\n */\nexport var CursorColumns = /*#__PURE__*/function () {\n  function CursorColumns() {\n    _classCallCheck(this, CursorColumns);\n  }\n  return _createClass(CursorColumns, null, [{\n    key: \"_nextVisibleColumn\",\n    value: function _nextVisibleColumn(codePoint, visibleColumn, tabSize) {\n      if (codePoint === 9 /* CharCode.Tab */) {\n        return CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n      }\n      if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n        return visibleColumn + 2;\n      }\n      return visibleColumn + 1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n  }, {\n    key: \"visibleColumnFromColumn\",\n    value: function visibleColumnFromColumn(lineContent, column, tabSize) {\n      var textLen = Math.min(column - 1, lineContent.length);\n      var text = lineContent.substring(0, textLen);\n      var iterator = new strings.GraphemeIterator(text);\n      var result = 0;\n      while (!iterator.eol()) {\n        var codePoint = strings.getNextCodePoint(text, textLen, iterator.offset);\n        iterator.nextGraphemeLength();\n        result = this._nextVisibleColumn(codePoint, result, tabSize);\n      }\n      return result;\n    }\n    /**\n     * Returns a column from a visible column.\n     * @see {@link CursorColumns}\n     */\n  }, {\n    key: \"columnFromVisibleColumn\",\n    value: function columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\n      if (visibleColumn <= 0) {\n        return 1;\n      }\n      var lineContentLength = lineContent.length;\n      var iterator = new strings.GraphemeIterator(lineContent);\n      var beforeVisibleColumn = 0;\n      var beforeColumn = 1;\n      while (!iterator.eol()) {\n        var codePoint = strings.getNextCodePoint(lineContent, lineContentLength, iterator.offset);\n        iterator.nextGraphemeLength();\n        var afterVisibleColumn = this._nextVisibleColumn(codePoint, beforeVisibleColumn, tabSize);\n        var afterColumn = iterator.offset + 1;\n        if (afterVisibleColumn >= visibleColumn) {\n          var beforeDelta = visibleColumn - beforeVisibleColumn;\n          var afterDelta = afterVisibleColumn - visibleColumn;\n          if (afterDelta < beforeDelta) {\n            return afterColumn;\n          } else {\n            return beforeColumn;\n          }\n        }\n        beforeVisibleColumn = afterVisibleColumn;\n        beforeColumn = afterColumn;\n      }\n      // walked the entire string\n      return lineContentLength + 1;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n  }, {\n    key: \"nextRenderTabStop\",\n    value: function nextRenderTabStop(visibleColumn, tabSize) {\n      return visibleColumn + tabSize - visibleColumn % tabSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n  }, {\n    key: \"nextIndentTabStop\",\n    value: function nextIndentTabStop(visibleColumn, indentSize) {\n      return visibleColumn + indentSize - visibleColumn % indentSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n  }, {\n    key: \"prevRenderTabStop\",\n    value: function prevRenderTabStop(column, tabSize) {\n      return Math.max(0, column - 1 - (column - 1) % tabSize);\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n  }, {\n    key: \"prevIndentTabStop\",\n    value: function prevIndentTabStop(column, indentSize) {\n      return Math.max(0, column - 1 - (column - 1) % indentSize);\n    }\n  }]);\n}();","map":{"version":3,"names":["strings","CursorColumns","_classCallCheck","_createClass","key","value","_nextVisibleColumn","codePoint","visibleColumn","tabSize","nextRenderTabStop","isFullWidthCharacter","isEmojiImprecise","visibleColumnFromColumn","lineContent","column","textLen","Math","min","length","text","substring","iterator","GraphemeIterator","result","eol","getNextCodePoint","offset","nextGraphemeLength","columnFromVisibleColumn","lineContentLength","beforeVisibleColumn","beforeColumn","afterVisibleColumn","afterColumn","beforeDelta","afterDelta","nextIndentTabStop","indentSize","prevRenderTabStop","max","prevIndentTabStop"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/core/cursorColumns.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\n/**\n * A column in a position is the gap between two adjacent characters. The methods here\n * work with a concept called \"visible column\". A visible column is a very rough approximation\n * of the horizontal screen position of a column. For example, using a tab size of 4:\n * ```txt\n * |<TAB>|<TAB>|T|ext\n * |     |     | \\---- column = 4, visible column = 9\n * |     |     \\------ column = 3, visible column = 8\n * |     \\------------ column = 2, visible column = 4\n * \\------------------ column = 1, visible column = 0\n * ```\n *\n * **NOTE**: Visual columns do not work well for RTL text or variable-width fonts or characters.\n *\n * **NOTE**: These methods work and make sense both on the model and on the view model.\n */\nexport class CursorColumns {\n    static _nextVisibleColumn(codePoint, visibleColumn, tabSize) {\n        if (codePoint === 9 /* CharCode.Tab */) {\n            return CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n        }\n        if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n            return visibleColumn + 2;\n        }\n        return visibleColumn + 1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    static visibleColumnFromColumn(lineContent, column, tabSize) {\n        const textLen = Math.min(column - 1, lineContent.length);\n        const text = lineContent.substring(0, textLen);\n        const iterator = new strings.GraphemeIterator(text);\n        let result = 0;\n        while (!iterator.eol()) {\n            const codePoint = strings.getNextCodePoint(text, textLen, iterator.offset);\n            iterator.nextGraphemeLength();\n            result = this._nextVisibleColumn(codePoint, result, tabSize);\n        }\n        return result;\n    }\n    /**\n     * Returns a column from a visible column.\n     * @see {@link CursorColumns}\n     */\n    static columnFromVisibleColumn(lineContent, visibleColumn, tabSize) {\n        if (visibleColumn <= 0) {\n            return 1;\n        }\n        const lineContentLength = lineContent.length;\n        const iterator = new strings.GraphemeIterator(lineContent);\n        let beforeVisibleColumn = 0;\n        let beforeColumn = 1;\n        while (!iterator.eol()) {\n            const codePoint = strings.getNextCodePoint(lineContent, lineContentLength, iterator.offset);\n            iterator.nextGraphemeLength();\n            const afterVisibleColumn = this._nextVisibleColumn(codePoint, beforeVisibleColumn, tabSize);\n            const afterColumn = iterator.offset + 1;\n            if (afterVisibleColumn >= visibleColumn) {\n                const beforeDelta = visibleColumn - beforeVisibleColumn;\n                const afterDelta = afterVisibleColumn - visibleColumn;\n                if (afterDelta < beforeDelta) {\n                    return afterColumn;\n                }\n                else {\n                    return beforeColumn;\n                }\n            }\n            beforeVisibleColumn = afterVisibleColumn;\n            beforeColumn = afterColumn;\n        }\n        // walked the entire string\n        return lineContentLength + 1;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static nextRenderTabStop(visibleColumn, tabSize) {\n        return visibleColumn + tabSize - visibleColumn % tabSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static nextIndentTabStop(visibleColumn, indentSize) {\n        return visibleColumn + indentSize - visibleColumn % indentSize;\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static prevRenderTabStop(column, tabSize) {\n        return Math.max(0, column - 1 - (column - 1) % tabSize);\n    }\n    /**\n     * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n     * @see {@link CursorColumns}\n     */\n    static prevIndentTabStop(column, indentSize) {\n        return Math.max(0, column - 1 - (column - 1) % indentSize);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}