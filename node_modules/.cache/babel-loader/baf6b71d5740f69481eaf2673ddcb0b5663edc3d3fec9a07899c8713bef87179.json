{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DisposableStore, toDisposable } from '../lifecycle.js';\nimport { BaseObservable, ConvenientObservable, _setKeepObserved, _setRecomputeInitiallyAndOnChange, subtransaction, transaction } from './base.js';\nimport { DebugNameData, getFunctionName } from './debugName.js';\nimport { derived, derivedOpts } from './derived.js';\nimport { getLogger } from './logging.js';\n/**\n * Represents an efficient observable whose value never changes.\n */\nexport function constObservable(value) {\n  return new ConstObservable(value);\n}\nvar ConstObservable = /*#__PURE__*/function (_ConvenientObservable) {\n  function ConstObservable(value) {\n    var _this;\n    _classCallCheck(this, ConstObservable);\n    _this = _callSuper(this, ConstObservable);\n    _this.value = value;\n    return _this;\n  }\n  _inherits(ConstObservable, _ConvenientObservable);\n  return _createClass(ConstObservable, [{\n    key: \"debugName\",\n    get: function get() {\n      return this.toString();\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this.value;\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      // NO OP\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      // NO OP\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Const: \".concat(this.value);\n    }\n  }]);\n}(ConvenientObservable);\nexport function observableFromEvent(event, getValue) {\n  return new FromEventObservable(event, getValue);\n}\nexport var FromEventObservable = /*#__PURE__*/function (_BaseObservable) {\n  function FromEventObservable(event, _getValue) {\n    var _this2;\n    _classCallCheck(this, FromEventObservable);\n    _this2 = _callSuper(this, FromEventObservable);\n    _this2.event = event;\n    _this2._getValue = _getValue;\n    _this2.hasValue = false;\n    _this2.handleEvent = function (args) {\n      var _a;\n      var newValue = _this2._getValue(args);\n      var oldValue = _this2.value;\n      var didChange = !_this2.hasValue || oldValue !== newValue;\n      var didRunTransaction = false;\n      if (didChange) {\n        _this2.value = newValue;\n        if (_this2.hasValue) {\n          didRunTransaction = true;\n          subtransaction(FromEventObservable.globalTransaction, function (tx) {\n            var _a;\n            (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleFromEventObservableTriggered(_this2, {\n              oldValue: oldValue,\n              newValue: newValue,\n              change: undefined,\n              didChange: didChange,\n              hadValue: _this2.hasValue\n            });\n            var _iterator = _createForOfIteratorHelper(_this2.observers),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var o = _step.value;\n                tx.updateObserver(o, _this2);\n                o.handleChange(_this2, undefined);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }, function () {\n            var name = _this2.getDebugName();\n            return 'Event fired' + (name ? \": \".concat(name) : '');\n          });\n        }\n        _this2.hasValue = true;\n      }\n      if (!didRunTransaction) {\n        (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleFromEventObservableTriggered(_this2, {\n          oldValue: oldValue,\n          newValue: newValue,\n          change: undefined,\n          didChange: didChange,\n          hadValue: _this2.hasValue\n        });\n      }\n    };\n    return _this2;\n  }\n  _inherits(FromEventObservable, _BaseObservable);\n  return _createClass(FromEventObservable, [{\n    key: \"getDebugName\",\n    value: function getDebugName() {\n      return getFunctionName(this._getValue);\n    }\n  }, {\n    key: \"debugName\",\n    get: function get() {\n      var name = this.getDebugName();\n      return 'From Event' + (name ? \": \".concat(name) : '');\n    }\n  }, {\n    key: \"onFirstObserverAdded\",\n    value: function onFirstObserverAdded() {\n      this.subscription = this.event(this.handleEvent);\n    }\n  }, {\n    key: \"onLastObserverRemoved\",\n    value: function onLastObserverRemoved() {\n      this.subscription.dispose();\n      this.subscription = undefined;\n      this.hasValue = false;\n      this.value = undefined;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      if (this.subscription) {\n        if (!this.hasValue) {\n          this.handleEvent(undefined);\n        }\n        return this.value;\n      } else {\n        // no cache, as there are no subscribers to keep it updated\n        return this._getValue(undefined);\n      }\n    }\n  }]);\n}(BaseObservable);\n(function (observableFromEvent) {\n  observableFromEvent.Observer = FromEventObservable;\n  function batchEventsGlobally(tx, fn) {\n    var didSet = false;\n    if (FromEventObservable.globalTransaction === undefined) {\n      FromEventObservable.globalTransaction = tx;\n      didSet = true;\n    }\n    try {\n      fn();\n    } finally {\n      if (didSet) {\n        FromEventObservable.globalTransaction = undefined;\n      }\n    }\n  }\n  observableFromEvent.batchEventsGlobally = batchEventsGlobally;\n})(observableFromEvent || (observableFromEvent = {}));\nexport function observableSignalFromEvent(debugName, event) {\n  return new FromEventObservableSignal(debugName, event);\n}\nvar FromEventObservableSignal = /*#__PURE__*/function (_BaseObservable2) {\n  function FromEventObservableSignal(debugName, event) {\n    var _this3;\n    _classCallCheck(this, FromEventObservableSignal);\n    _this3 = _callSuper(this, FromEventObservableSignal);\n    _this3.debugName = debugName;\n    _this3.event = event;\n    _this3.handleEvent = function () {\n      transaction(function (tx) {\n        var _iterator2 = _createForOfIteratorHelper(_this3.observers),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var o = _step2.value;\n            tx.updateObserver(o, _this3);\n            o.handleChange(_this3, undefined);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }, function () {\n        return _this3.debugName;\n      });\n    };\n    return _this3;\n  }\n  _inherits(FromEventObservableSignal, _BaseObservable2);\n  return _createClass(FromEventObservableSignal, [{\n    key: \"onFirstObserverAdded\",\n    value: function onFirstObserverAdded() {\n      this.subscription = this.event(this.handleEvent);\n    }\n  }, {\n    key: \"onLastObserverRemoved\",\n    value: function onLastObserverRemoved() {\n      this.subscription.dispose();\n      this.subscription = undefined;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      // NO OP\n    }\n  }]);\n}(BaseObservable);\nexport function observableSignal(debugNameOrOwner) {\n  if (typeof debugNameOrOwner === 'string') {\n    return new ObservableSignal(debugNameOrOwner);\n  } else {\n    return new ObservableSignal(undefined, debugNameOrOwner);\n  }\n}\nvar ObservableSignal = /*#__PURE__*/function (_BaseObservable3) {\n  function ObservableSignal(_debugName, _owner) {\n    var _this4;\n    _classCallCheck(this, ObservableSignal);\n    _this4 = _callSuper(this, ObservableSignal);\n    _this4._debugName = _debugName;\n    _this4._owner = _owner;\n    return _this4;\n  }\n  _inherits(ObservableSignal, _BaseObservable3);\n  return _createClass(ObservableSignal, [{\n    key: \"debugName\",\n    get: function get() {\n      var _a;\n      return (_a = new DebugNameData(this._owner, this._debugName, undefined).getDebugName(this)) !== null && _a !== void 0 ? _a : 'Observable Signal';\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(tx, change) {\n      var _this5 = this;\n      if (!tx) {\n        transaction(function (tx) {\n          _this5.trigger(tx, change);\n        }, function () {\n          return \"Trigger signal \".concat(_this5.debugName);\n        });\n        return;\n      }\n      var _iterator3 = _createForOfIteratorHelper(this.observers),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var o = _step3.value;\n          tx.updateObserver(o, this);\n          o.handleChange(this, change);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      // NO OP\n    }\n  }]);\n}(BaseObservable);\n/**\n * This makes sure the observable is being observed and keeps its cache alive.\n */\nexport function keepObserved(observable) {\n  var o = new KeepAliveObserver(false, undefined);\n  observable.addObserver(o);\n  return toDisposable(function () {\n    observable.removeObserver(o);\n  });\n}\n_setKeepObserved(keepObserved);\n/**\n * This converts the given observable into an autorun.\n */\nexport function recomputeInitiallyAndOnChange(observable, handleValue) {\n  var o = new KeepAliveObserver(true, handleValue);\n  observable.addObserver(o);\n  if (handleValue) {\n    handleValue(observable.get());\n  } else {\n    observable.reportChanges();\n  }\n  return toDisposable(function () {\n    observable.removeObserver(o);\n  });\n}\n_setRecomputeInitiallyAndOnChange(recomputeInitiallyAndOnChange);\nexport var KeepAliveObserver = /*#__PURE__*/function () {\n  function KeepAliveObserver(_forceRecompute, _handleValue) {\n    _classCallCheck(this, KeepAliveObserver);\n    this._forceRecompute = _forceRecompute;\n    this._handleValue = _handleValue;\n    this._counter = 0;\n  }\n  return _createClass(KeepAliveObserver, [{\n    key: \"beginUpdate\",\n    value: function beginUpdate(observable) {\n      this._counter++;\n    }\n  }, {\n    key: \"endUpdate\",\n    value: function endUpdate(observable) {\n      this._counter--;\n      if (this._counter === 0 && this._forceRecompute) {\n        if (this._handleValue) {\n          this._handleValue(observable.get());\n        } else {\n          observable.reportChanges();\n        }\n      }\n    }\n  }, {\n    key: \"handlePossibleChange\",\n    value: function handlePossibleChange(observable) {\n      // NO OP\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(observable, change) {\n      // NO OP\n    }\n  }]);\n}();\nexport function derivedObservableWithCache(computeFn) {\n  var lastValue = undefined;\n  var observable = derived(function (reader) {\n    lastValue = computeFn(reader, lastValue);\n    return lastValue;\n  });\n  return observable;\n}\n/**\n * When the items array changes, referential equal items are not mapped again.\n */\nexport function mapObservableArrayCached(owner, items, map, keySelector) {\n  var m = new ArrayMap(map, keySelector);\n  var self = derivedOpts({\n    debugReferenceFn: map,\n    owner: owner,\n    onLastObserverRemoved: function onLastObserverRemoved() {\n      m.dispose();\n      m = new ArrayMap(map);\n    }\n  }, function (reader) {\n    m.setItems(items.read(reader));\n    return m.getItems();\n  });\n  return self;\n}\nvar ArrayMap = /*#__PURE__*/function () {\n  function ArrayMap(_map, _keySelector) {\n    _classCallCheck(this, ArrayMap);\n    this._map = _map;\n    this._keySelector = _keySelector;\n    this._cache = new Map();\n    this._items = [];\n  }\n  return _createClass(ArrayMap, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._cache.forEach(function (entry) {\n        return entry.store.dispose();\n      });\n      this._cache.clear();\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(items) {\n      var newItems = [];\n      var itemsToRemove = new Set(this._cache.keys());\n      var _iterator4 = _createForOfIteratorHelper(items),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var item = _step4.value;\n          var key = this._keySelector ? this._keySelector(item) : item;\n          var entry = this._cache.get(key);\n          if (!entry) {\n            var store = new DisposableStore();\n            var out = this._map(item, store);\n            entry = {\n              out: out,\n              store: store\n            };\n            this._cache.set(key, entry);\n          } else {\n            itemsToRemove[\"delete\"](key);\n          }\n          newItems.push(entry.out);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var _iterator5 = _createForOfIteratorHelper(itemsToRemove),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _item = _step5.value;\n          var _entry = this._cache.get(_item);\n          _entry.store.dispose();\n          this._cache[\"delete\"](_item);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      this._items = newItems;\n    }\n  }, {\n    key: \"getItems\",\n    value: function getItems() {\n      return this._items;\n    }\n  }]);\n}();","map":{"version":3,"names":["DisposableStore","toDisposable","BaseObservable","ConvenientObservable","_setKeepObserved","_setRecomputeInitiallyAndOnChange","subtransaction","transaction","DebugNameData","getFunctionName","derived","derivedOpts","getLogger","constObservable","value","ConstObservable","_ConvenientObservable","_this","_classCallCheck","_callSuper","_inherits","_createClass","key","get","toString","addObserver","observer","removeObserver","concat","observableFromEvent","event","getValue","FromEventObservable","_BaseObservable","_getValue","_this2","hasValue","handleEvent","args","_a","newValue","oldValue","didChange","didRunTransaction","globalTransaction","tx","handleFromEventObservableTriggered","change","undefined","hadValue","_iterator","_createForOfIteratorHelper","observers","_step","s","n","done","o","updateObserver","handleChange","err","e","f","name","getDebugName","onFirstObserverAdded","subscription","onLastObserverRemoved","dispose","Observer","batchEventsGlobally","fn","didSet","observableSignalFromEvent","debugName","FromEventObservableSignal","_BaseObservable2","_this3","_iterator2","_step2","observableSignal","debugNameOrOwner","ObservableSignal","_BaseObservable3","_debugName","_owner","_this4","trigger","_this5","_iterator3","_step3","keepObserved","observable","KeepAliveObserver","recomputeInitiallyAndOnChange","handleValue","reportChanges","_forceRecompute","_handleValue","_counter","beginUpdate","endUpdate","handlePossibleChange","derivedObservableWithCache","computeFn","lastValue","reader","mapObservableArrayCached","owner","items","map","keySelector","m","ArrayMap","self","debugReferenceFn","setItems","read","getItems","_map","_keySelector","_cache","Map","_items","forEach","entry","store","clear","newItems","itemsToRemove","Set","keys","_iterator4","_step4","item","out","set","push","_iterator5","_step5"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/base/common/observableInternal/utils.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DisposableStore, toDisposable } from '../lifecycle.js';\nimport { BaseObservable, ConvenientObservable, _setKeepObserved, _setRecomputeInitiallyAndOnChange, subtransaction, transaction } from './base.js';\nimport { DebugNameData, getFunctionName } from './debugName.js';\nimport { derived, derivedOpts } from './derived.js';\nimport { getLogger } from './logging.js';\n/**\n * Represents an efficient observable whose value never changes.\n */\nexport function constObservable(value) {\n    return new ConstObservable(value);\n}\nclass ConstObservable extends ConvenientObservable {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    get debugName() {\n        return this.toString();\n    }\n    get() {\n        return this.value;\n    }\n    addObserver(observer) {\n        // NO OP\n    }\n    removeObserver(observer) {\n        // NO OP\n    }\n    toString() {\n        return `Const: ${this.value}`;\n    }\n}\nexport function observableFromEvent(event, getValue) {\n    return new FromEventObservable(event, getValue);\n}\nexport class FromEventObservable extends BaseObservable {\n    constructor(event, _getValue) {\n        super();\n        this.event = event;\n        this._getValue = _getValue;\n        this.hasValue = false;\n        this.handleEvent = (args) => {\n            var _a;\n            const newValue = this._getValue(args);\n            const oldValue = this.value;\n            const didChange = !this.hasValue || oldValue !== newValue;\n            let didRunTransaction = false;\n            if (didChange) {\n                this.value = newValue;\n                if (this.hasValue) {\n                    didRunTransaction = true;\n                    subtransaction(FromEventObservable.globalTransaction, (tx) => {\n                        var _a;\n                        (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleFromEventObservableTriggered(this, { oldValue, newValue, change: undefined, didChange, hadValue: this.hasValue });\n                        for (const o of this.observers) {\n                            tx.updateObserver(o, this);\n                            o.handleChange(this, undefined);\n                        }\n                    }, () => {\n                        const name = this.getDebugName();\n                        return 'Event fired' + (name ? `: ${name}` : '');\n                    });\n                }\n                this.hasValue = true;\n            }\n            if (!didRunTransaction) {\n                (_a = getLogger()) === null || _a === void 0 ? void 0 : _a.handleFromEventObservableTriggered(this, { oldValue, newValue, change: undefined, didChange, hadValue: this.hasValue });\n            }\n        };\n    }\n    getDebugName() {\n        return getFunctionName(this._getValue);\n    }\n    get debugName() {\n        const name = this.getDebugName();\n        return 'From Event' + (name ? `: ${name}` : '');\n    }\n    onFirstObserverAdded() {\n        this.subscription = this.event(this.handleEvent);\n    }\n    onLastObserverRemoved() {\n        this.subscription.dispose();\n        this.subscription = undefined;\n        this.hasValue = false;\n        this.value = undefined;\n    }\n    get() {\n        if (this.subscription) {\n            if (!this.hasValue) {\n                this.handleEvent(undefined);\n            }\n            return this.value;\n        }\n        else {\n            // no cache, as there are no subscribers to keep it updated\n            return this._getValue(undefined);\n        }\n    }\n}\n(function (observableFromEvent) {\n    observableFromEvent.Observer = FromEventObservable;\n    function batchEventsGlobally(tx, fn) {\n        let didSet = false;\n        if (FromEventObservable.globalTransaction === undefined) {\n            FromEventObservable.globalTransaction = tx;\n            didSet = true;\n        }\n        try {\n            fn();\n        }\n        finally {\n            if (didSet) {\n                FromEventObservable.globalTransaction = undefined;\n            }\n        }\n    }\n    observableFromEvent.batchEventsGlobally = batchEventsGlobally;\n})(observableFromEvent || (observableFromEvent = {}));\nexport function observableSignalFromEvent(debugName, event) {\n    return new FromEventObservableSignal(debugName, event);\n}\nclass FromEventObservableSignal extends BaseObservable {\n    constructor(debugName, event) {\n        super();\n        this.debugName = debugName;\n        this.event = event;\n        this.handleEvent = () => {\n            transaction((tx) => {\n                for (const o of this.observers) {\n                    tx.updateObserver(o, this);\n                    o.handleChange(this, undefined);\n                }\n            }, () => this.debugName);\n        };\n    }\n    onFirstObserverAdded() {\n        this.subscription = this.event(this.handleEvent);\n    }\n    onLastObserverRemoved() {\n        this.subscription.dispose();\n        this.subscription = undefined;\n    }\n    get() {\n        // NO OP\n    }\n}\nexport function observableSignal(debugNameOrOwner) {\n    if (typeof debugNameOrOwner === 'string') {\n        return new ObservableSignal(debugNameOrOwner);\n    }\n    else {\n        return new ObservableSignal(undefined, debugNameOrOwner);\n    }\n}\nclass ObservableSignal extends BaseObservable {\n    get debugName() {\n        var _a;\n        return (_a = new DebugNameData(this._owner, this._debugName, undefined).getDebugName(this)) !== null && _a !== void 0 ? _a : 'Observable Signal';\n    }\n    constructor(_debugName, _owner) {\n        super();\n        this._debugName = _debugName;\n        this._owner = _owner;\n    }\n    trigger(tx, change) {\n        if (!tx) {\n            transaction(tx => {\n                this.trigger(tx, change);\n            }, () => `Trigger signal ${this.debugName}`);\n            return;\n        }\n        for (const o of this.observers) {\n            tx.updateObserver(o, this);\n            o.handleChange(this, change);\n        }\n    }\n    get() {\n        // NO OP\n    }\n}\n/**\n * This makes sure the observable is being observed and keeps its cache alive.\n */\nexport function keepObserved(observable) {\n    const o = new KeepAliveObserver(false, undefined);\n    observable.addObserver(o);\n    return toDisposable(() => {\n        observable.removeObserver(o);\n    });\n}\n_setKeepObserved(keepObserved);\n/**\n * This converts the given observable into an autorun.\n */\nexport function recomputeInitiallyAndOnChange(observable, handleValue) {\n    const o = new KeepAliveObserver(true, handleValue);\n    observable.addObserver(o);\n    if (handleValue) {\n        handleValue(observable.get());\n    }\n    else {\n        observable.reportChanges();\n    }\n    return toDisposable(() => {\n        observable.removeObserver(o);\n    });\n}\n_setRecomputeInitiallyAndOnChange(recomputeInitiallyAndOnChange);\nexport class KeepAliveObserver {\n    constructor(_forceRecompute, _handleValue) {\n        this._forceRecompute = _forceRecompute;\n        this._handleValue = _handleValue;\n        this._counter = 0;\n    }\n    beginUpdate(observable) {\n        this._counter++;\n    }\n    endUpdate(observable) {\n        this._counter--;\n        if (this._counter === 0 && this._forceRecompute) {\n            if (this._handleValue) {\n                this._handleValue(observable.get());\n            }\n            else {\n                observable.reportChanges();\n            }\n        }\n    }\n    handlePossibleChange(observable) {\n        // NO OP\n    }\n    handleChange(observable, change) {\n        // NO OP\n    }\n}\nexport function derivedObservableWithCache(computeFn) {\n    let lastValue = undefined;\n    const observable = derived(reader => {\n        lastValue = computeFn(reader, lastValue);\n        return lastValue;\n    });\n    return observable;\n}\n/**\n * When the items array changes, referential equal items are not mapped again.\n */\nexport function mapObservableArrayCached(owner, items, map, keySelector) {\n    let m = new ArrayMap(map, keySelector);\n    const self = derivedOpts({\n        debugReferenceFn: map,\n        owner,\n        onLastObserverRemoved: () => {\n            m.dispose();\n            m = new ArrayMap(map);\n        }\n    }, (reader) => {\n        m.setItems(items.read(reader));\n        return m.getItems();\n    });\n    return self;\n}\nclass ArrayMap {\n    constructor(_map, _keySelector) {\n        this._map = _map;\n        this._keySelector = _keySelector;\n        this._cache = new Map();\n        this._items = [];\n    }\n    dispose() {\n        this._cache.forEach(entry => entry.store.dispose());\n        this._cache.clear();\n    }\n    setItems(items) {\n        const newItems = [];\n        const itemsToRemove = new Set(this._cache.keys());\n        for (const item of items) {\n            const key = this._keySelector ? this._keySelector(item) : item;\n            let entry = this._cache.get(key);\n            if (!entry) {\n                const store = new DisposableStore();\n                const out = this._map(item, store);\n                entry = { out, store };\n                this._cache.set(key, entry);\n            }\n            else {\n                itemsToRemove.delete(key);\n            }\n            newItems.push(entry.out);\n        }\n        for (const item of itemsToRemove) {\n            const entry = this._cache.get(item);\n            entry.store.dispose();\n            this._cache.delete(item);\n        }\n        this._items = newItems;\n    }\n    getItems() {\n        return this._items;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}