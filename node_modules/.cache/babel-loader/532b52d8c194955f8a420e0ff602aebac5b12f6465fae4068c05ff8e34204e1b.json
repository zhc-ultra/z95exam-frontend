{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.with.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.freeze.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.string.link.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as DOM from './dom.js';\nimport * as dompurify from './dompurify/dompurify.js';\nimport { DomEmitter } from './event.js';\nimport { createElement } from './formattedTextRenderer.js';\nimport { StandardKeyboardEvent } from './keyboardEvent.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { renderLabelWithIcons } from './ui/iconLabel/iconLabels.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { Event } from '../common/event.js';\nimport { escapeDoubleQuotes, parseHrefAndDimensions, removeMarkdownEscapes } from '../common/htmlContent.js';\nimport { markdownEscapeEscapedIcons } from '../common/iconLabels.js';\nimport { defaultGenerator } from '../common/idGenerator.js';\nimport { Lazy } from '../common/lazy.js';\nimport { DisposableStore } from '../common/lifecycle.js';\nimport { marked } from '../common/marked/marked.js';\nimport { parse } from '../common/marshalling.js';\nimport { FileAccess, Schemas } from '../common/network.js';\nimport { cloneAndChange } from '../common/objects.js';\nimport { dirname, resolvePath } from '../common/resources.js';\nimport { escape } from '../common/strings.js';\nimport { URI } from '../common/uri.js';\nvar defaultMarkedRenderers = Object.freeze({\n  image: function image(href, title, text) {\n    var dimensions = [];\n    var attributes = [];\n    if (href) {\n      var _parseHrefAndDimensio = parseHrefAndDimensions(href);\n      href = _parseHrefAndDimensio.href;\n      dimensions = _parseHrefAndDimensio.dimensions;\n      attributes.push(\"src=\\\"\".concat(escapeDoubleQuotes(href), \"\\\"\"));\n    }\n    if (text) {\n      attributes.push(\"alt=\\\"\".concat(escapeDoubleQuotes(text), \"\\\"\"));\n    }\n    if (title) {\n      attributes.push(\"title=\\\"\".concat(escapeDoubleQuotes(title), \"\\\"\"));\n    }\n    if (dimensions.length) {\n      attributes = attributes.concat(dimensions);\n    }\n    return '<img ' + attributes.join(' ') + '>';\n  },\n  paragraph: function paragraph(text) {\n    return \"<p>\".concat(text, \"</p>\");\n  },\n  link: function link(href, title, text) {\n    if (typeof href !== 'string') {\n      return '';\n    }\n    // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829\n    if (href === text) {\n      // raw link case\n      text = removeMarkdownEscapes(text);\n    }\n    title = typeof title === 'string' ? escapeDoubleQuotes(removeMarkdownEscapes(title)) : '';\n    href = removeMarkdownEscapes(href);\n    // HTML Encode href\n    href = href.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;');\n    return \"<a href=\\\"\".concat(href, \"\\\" title=\\\"\").concat(title || href, \"\\\" draggable=\\\"false\\\">\").concat(text, \"</a>\");\n  }\n});\n/**\n * Low-level way create a html element from a markdown string.\n *\n * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/contrib/markdownRenderer/browser/markdownRenderer.ts)\n * which comes with support for pretty code block rendering and which uses the default way of handling links.\n */\nexport function renderMarkdown(markdown) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var markedOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a, _b;\n  var disposables = new DisposableStore();\n  var isDisposed = false;\n  var element = createElement(options);\n  var _uriMassage = function _uriMassage(part) {\n    var data;\n    try {\n      data = parse(decodeURIComponent(part));\n    } catch (e) {\n      // ignore\n    }\n    if (!data) {\n      return part;\n    }\n    data = cloneAndChange(data, function (value) {\n      if (markdown.uris && markdown.uris[value]) {\n        return URI.revive(markdown.uris[value]);\n      } else {\n        return undefined;\n      }\n    });\n    return encodeURIComponent(JSON.stringify(data));\n  };\n  var _href = function _href(href, isDomUri) {\n    var data = markdown.uris && markdown.uris[href];\n    var uri = URI.revive(data);\n    if (isDomUri) {\n      if (href.startsWith(Schemas.data + ':')) {\n        return href;\n      }\n      if (!uri) {\n        uri = URI.parse(href);\n      }\n      // this URI will end up as \"src\"-attribute of a dom node\n      // and because of that special rewriting needs to be done\n      // so that the URI uses a protocol that's understood by\n      // browsers (like http or https)\n      return FileAccess.uriToBrowserUri(uri).toString(true);\n    }\n    if (!uri) {\n      return href;\n    }\n    if (URI.parse(href).toString() === uri.toString()) {\n      return href; // no transformation performed\n    }\n    if (uri.query) {\n      uri = uri[\"with\"]({\n        query: _uriMassage(uri.query)\n      });\n    }\n    return uri.toString();\n  };\n  var renderer = new marked.Renderer();\n  renderer.image = defaultMarkedRenderers.image;\n  renderer.link = defaultMarkedRenderers.link;\n  renderer.paragraph = defaultMarkedRenderers.paragraph;\n  // Will collect [id, renderedElement] tuples\n  var codeBlocks = [];\n  var syncCodeBlocks = [];\n  if (options.codeBlockRendererSync) {\n    renderer.code = function (code, lang) {\n      var id = defaultGenerator.nextId();\n      var value = options.codeBlockRendererSync(postProcessCodeBlockLanguageId(lang), code);\n      syncCodeBlocks.push([id, value]);\n      return \"<div class=\\\"code\\\" data-code=\\\"\".concat(id, \"\\\">\").concat(escape(code), \"</div>\");\n    };\n  } else if (options.codeBlockRenderer) {\n    renderer.code = function (code, lang) {\n      var id = defaultGenerator.nextId();\n      var value = options.codeBlockRenderer(postProcessCodeBlockLanguageId(lang), code);\n      codeBlocks.push(value.then(function (element) {\n        return [id, element];\n      }));\n      return \"<div class=\\\"code\\\" data-code=\\\"\".concat(id, \"\\\">\").concat(escape(code), \"</div>\");\n    };\n  }\n  if (options.actionHandler) {\n    var _activateLink = function _activateLink(event) {\n      var target = event.target;\n      if (target.tagName !== 'A') {\n        target = target.parentElement;\n        if (!target || target.tagName !== 'A') {\n          return;\n        }\n      }\n      try {\n        var href = target.dataset['href'];\n        if (href) {\n          if (markdown.baseUri) {\n            href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n          }\n          options.actionHandler.callback(href, event);\n        }\n      } catch (err) {\n        onUnexpectedError(err);\n      } finally {\n        event.preventDefault();\n      }\n    };\n    var onClick = options.actionHandler.disposables.add(new DomEmitter(element, 'click'));\n    var onAuxClick = options.actionHandler.disposables.add(new DomEmitter(element, 'auxclick'));\n    options.actionHandler.disposables.add(Event.any(onClick.event, onAuxClick.event)(function (e) {\n      var mouseEvent = new StandardMouseEvent(DOM.getWindow(element), e);\n      if (!mouseEvent.leftButton && !mouseEvent.middleButton) {\n        return;\n      }\n      _activateLink(mouseEvent);\n    }));\n    options.actionHandler.disposables.add(DOM.addDisposableListener(element, 'keydown', function (e) {\n      var keyboardEvent = new StandardKeyboardEvent(e);\n      if (!keyboardEvent.equals(10 /* KeyCode.Space */) && !keyboardEvent.equals(3 /* KeyCode.Enter */)) {\n        return;\n      }\n      _activateLink(keyboardEvent);\n    }));\n  }\n  if (!markdown.supportHtml) {\n    // TODO: Can we deprecated this in favor of 'supportHtml'?\n    // Use our own sanitizer so that we can let through only spans.\n    // Otherwise, we'd be letting all html be rendered.\n    // If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.\n    // We always pass the output through dompurify after this so that we don't rely on\n    // marked for sanitization.\n    markedOptions.sanitizer = function (html) {\n      var match = markdown.isTrusted ? html.match(/^(<span[^>]+>)|(<\\/\\s*span>)$/) : undefined;\n      return match ? html : '';\n    };\n    markedOptions.sanitize = true;\n    markedOptions.silent = true;\n  }\n  markedOptions.renderer = renderer;\n  // values that are too long will freeze the UI\n  var value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n  if (value.length > 100000) {\n    value = \"\".concat(value.substr(0, 100000), \"\\u2026\");\n  }\n  // escape theme icons\n  if (markdown.supportThemeIcons) {\n    value = markdownEscapeEscapedIcons(value);\n  }\n  var renderedMarkdown;\n  if (options.fillInIncompleteTokens) {\n    // The defaults are applied by parse but not lexer()/parser(), and they need to be present\n    var opts = _objectSpread(_objectSpread({}, marked.defaults), markedOptions);\n    var tokens = marked.lexer(value, opts);\n    var newTokens = fillInIncompleteTokens(tokens);\n    renderedMarkdown = marked.parser(newTokens, opts);\n  } else {\n    renderedMarkdown = marked.parse(value, markedOptions);\n  }\n  // Rewrite theme icons\n  if (markdown.supportThemeIcons) {\n    var elements = renderLabelWithIcons(renderedMarkdown);\n    renderedMarkdown = elements.map(function (e) {\n      return typeof e === 'string' ? e : e.outerHTML;\n    }).join('');\n  }\n  var htmlParser = new DOMParser();\n  var markdownHtmlDoc = htmlParser.parseFromString(sanitizeRenderedMarkdown(markdown, renderedMarkdown), 'text/html');\n  markdownHtmlDoc.body.querySelectorAll('img').forEach(function (img) {\n    var src = img.getAttribute('src'); // Get the raw 'src' attribute value as text, not the resolved 'src'\n    if (src) {\n      var href = src;\n      try {\n        if (markdown.baseUri) {\n          // absolute or relative local path, or file: uri\n          href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n        }\n      } catch (err) {}\n      img.src = _href(href, true);\n    }\n  });\n  markdownHtmlDoc.body.querySelectorAll('a').forEach(function (a) {\n    var href = a.getAttribute('href'); // Get the raw 'href' attribute value as text, not the resolved 'href'\n    a.setAttribute('href', ''); // Clear out href. We use the `data-href` for handling clicks instead\n    if (!href || /^data:|javascript:/i.test(href) || /^command:/i.test(href) && !markdown.isTrusted || /^command:(\\/\\/\\/)?_workbench\\.downloadResource/i.test(href)) {\n      // drop the link\n      a.replaceWith.apply(a, _toConsumableArray(a.childNodes));\n    } else {\n      var resolvedHref = _href(href, false);\n      if (markdown.baseUri) {\n        resolvedHref = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n      }\n      a.dataset.href = resolvedHref;\n    }\n  });\n  element.innerHTML = sanitizeRenderedMarkdown(markdown, markdownHtmlDoc.body.innerHTML);\n  if (codeBlocks.length > 0) {\n    Promise.all(codeBlocks).then(function (tuples) {\n      var _a, _b;\n      if (isDisposed) {\n        return;\n      }\n      var renderedElements = new Map(tuples);\n      var placeholderElements = element.querySelectorAll(\"div[data-code]\");\n      var _iterator = _createForOfIteratorHelper(placeholderElements),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var placeholderElement = _step.value;\n          var renderedElement = renderedElements.get((_a = placeholderElement.dataset['code']) !== null && _a !== void 0 ? _a : '');\n          if (renderedElement) {\n            DOM.reset(placeholderElement, renderedElement);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      (_b = options.asyncRenderCallback) === null || _b === void 0 ? void 0 : _b.call(options);\n    });\n  } else if (syncCodeBlocks.length > 0) {\n    var renderedElements = new Map(syncCodeBlocks);\n    var placeholderElements = element.querySelectorAll(\"div[data-code]\");\n    var _iterator2 = _createForOfIteratorHelper(placeholderElements),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var placeholderElement = _step2.value;\n        var renderedElement = renderedElements.get((_b = placeholderElement.dataset['code']) !== null && _b !== void 0 ? _b : '');\n        if (renderedElement) {\n          DOM.reset(placeholderElement, renderedElement);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  // signal size changes for image tags\n  if (options.asyncRenderCallback) {\n    var _iterator3 = _createForOfIteratorHelper(element.getElementsByTagName('img')),\n      _step3;\n    try {\n      var _loop = function _loop() {\n        var img = _step3.value;\n        var listener = disposables.add(DOM.addDisposableListener(img, 'load', function () {\n          listener.dispose();\n          options.asyncRenderCallback();\n        }));\n      };\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        _loop();\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  return {\n    element: element,\n    dispose: function dispose() {\n      isDisposed = true;\n      disposables.dispose();\n    }\n  };\n}\nfunction postProcessCodeBlockLanguageId(lang) {\n  if (!lang) {\n    return '';\n  }\n  var parts = lang.split(/[\\s+|:|,|\\{|\\?]/, 1);\n  if (parts.length) {\n    return parts[0];\n  }\n  return lang;\n}\nfunction resolveWithBaseUri(baseUri, href) {\n  var hasScheme = /^\\w[\\w\\d+.-]*:/.test(href);\n  if (hasScheme) {\n    return href;\n  }\n  if (baseUri.path.endsWith('/')) {\n    return resolvePath(baseUri, href).toString();\n  } else {\n    return resolvePath(dirname(baseUri), href).toString();\n  }\n}\nfunction sanitizeRenderedMarkdown(options, renderedMarkdown) {\n  var _getSanitizerOptions = getSanitizerOptions(options),\n    config = _getSanitizerOptions.config,\n    allowedSchemes = _getSanitizerOptions.allowedSchemes;\n  dompurify.addHook('uponSanitizeAttribute', function (element, e) {\n    var _a;\n    if (e.attrName === 'style' || e.attrName === 'class') {\n      if (element.tagName === 'SPAN') {\n        if (e.attrName === 'style') {\n          e.keepAttr = /^(color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?(background-color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?$/.test(e.attrValue);\n          return;\n        } else if (e.attrName === 'class') {\n          e.keepAttr = /^codicon codicon-[a-z\\-]+( codicon-modifier-[a-z\\-]+)?$/.test(e.attrValue);\n          return;\n        }\n      }\n      e.keepAttr = false;\n      return;\n    } else if (element.tagName === 'INPUT' && ((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n      if (e.attrName === 'type' && e.attrValue === 'checkbox' || e.attrName === 'disabled' || e.attrName === 'checked') {\n        e.keepAttr = true;\n        return;\n      }\n      e.keepAttr = false;\n    }\n  });\n  dompurify.addHook('uponSanitizeElement', function (element, e) {\n    var _a, _b;\n    if (e.tagName === 'input') {\n      if (((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n        element.setAttribute('disabled', '');\n      } else {\n        (_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(element);\n      }\n    }\n  });\n  var hook = DOM.hookDomPurifyHrefAndSrcSanitizer(allowedSchemes);\n  try {\n    return dompurify.sanitize(renderedMarkdown, _objectSpread(_objectSpread({}, config), {}, {\n      RETURN_TRUSTED_TYPE: true\n    }));\n  } finally {\n    dompurify.removeHook('uponSanitizeAttribute');\n    hook.dispose();\n  }\n}\nexport var allowedMarkdownAttr = ['align', 'autoplay', 'alt', 'checked', 'class', 'controls', 'data-code', 'data-href', 'disabled', 'draggable', 'height', 'href', 'loop', 'muted', 'playsinline', 'poster', 'src', 'style', 'target', 'title', 'type', 'width', 'start'];\nfunction getSanitizerOptions(options) {\n  var allowedSchemes = [Schemas.http, Schemas.https, Schemas.mailto, Schemas.data, Schemas.file, Schemas.vscodeFileResource, Schemas.vscodeRemote, Schemas.vscodeRemoteResource];\n  if (options.isTrusted) {\n    allowedSchemes.push(Schemas.command);\n  }\n  return {\n    config: {\n      // allowedTags should included everything that markdown renders to.\n      // Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.\n      // HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/\n      // HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-\n      ALLOWED_TAGS: _toConsumableArray(DOM.basicMarkupHtmlTags),\n      ALLOWED_ATTR: allowedMarkdownAttr,\n      ALLOW_UNKNOWN_PROTOCOLS: true\n    },\n    allowedSchemes: allowedSchemes\n  };\n}\n/**\n * Strips all markdown from `string`, if it's an IMarkdownString. For example\n * `# Header` would be output as `Header`. If it's not, the string is returned.\n */\nexport function renderStringAsPlaintext(string) {\n  return typeof string === 'string' ? string : renderMarkdownAsPlaintext(string);\n}\n/**\n * Strips all markdown from `markdown`. For example `# Header` would be output as `Header`.\n */\nexport function renderMarkdownAsPlaintext(markdown) {\n  var _a;\n  // values that are too long will freeze the UI\n  var value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n  if (value.length > 100000) {\n    value = \"\".concat(value.substr(0, 100000), \"\\u2026\");\n  }\n  var html = marked.parse(value, {\n    renderer: plainTextRenderer.value\n  }).replace(/&(#\\d+|[a-zA-Z]+);/g, function (m) {\n    var _a;\n    return (_a = unescapeInfo.get(m)) !== null && _a !== void 0 ? _a : m;\n  });\n  return sanitizeRenderedMarkdown({\n    isTrusted: false\n  }, html).toString();\n}\nvar unescapeInfo = new Map([['&quot;', '\"'], ['&nbsp;', ' '], ['&amp;', '&'], ['&#39;', '\\''], ['&lt;', '<'], ['&gt;', '>']]);\nvar plainTextRenderer = new Lazy(function () {\n  var renderer = new marked.Renderer();\n  renderer.code = function (code) {\n    return code;\n  };\n  renderer.blockquote = function (quote) {\n    return quote;\n  };\n  renderer.html = function (_html) {\n    return '';\n  };\n  renderer.heading = function (text, _level, _raw) {\n    return text + '\\n';\n  };\n  renderer.hr = function () {\n    return '';\n  };\n  renderer.list = function (body, _ordered) {\n    return body;\n  };\n  renderer.listitem = function (text) {\n    return text + '\\n';\n  };\n  renderer.paragraph = function (text) {\n    return text + '\\n';\n  };\n  renderer.table = function (header, body) {\n    return header + body + '\\n';\n  };\n  renderer.tablerow = function (content) {\n    return content;\n  };\n  renderer.tablecell = function (content, _flags) {\n    return content + ' ';\n  };\n  renderer.strong = function (text) {\n    return text;\n  };\n  renderer.em = function (text) {\n    return text;\n  };\n  renderer.codespan = function (code) {\n    return code;\n  };\n  renderer.br = function () {\n    return '\\n';\n  };\n  renderer.del = function (text) {\n    return text;\n  };\n  renderer.image = function (_href, _title, _text) {\n    return '';\n  };\n  renderer.text = function (text) {\n    return text;\n  };\n  renderer.link = function (_href, _title, text) {\n    return text;\n  };\n  return renderer;\n});\nfunction mergeRawTokenText(tokens) {\n  var mergedTokenText = '';\n  tokens.forEach(function (token) {\n    mergedTokenText += token.raw;\n  });\n  return mergedTokenText;\n}\nfunction completeSingleLinePattern(token) {\n  var _a, _b;\n  for (var i = 0; i < token.tokens.length; i++) {\n    var subtoken = token.tokens[i];\n    if (subtoken.type === 'text') {\n      var lines = subtoken.raw.split('\\n');\n      var lastLine = lines[lines.length - 1];\n      if (lastLine.includes('`')) {\n        return completeCodespan(token);\n      } else if (lastLine.includes('**')) {\n        return completeDoublestar(token);\n      } else if (lastLine.match(/\\*\\w/)) {\n        return completeStar(token);\n      } else if (lastLine.match(/(^|\\s)__\\w/)) {\n        return completeDoubleUnderscore(token);\n      } else if (lastLine.match(/(^|\\s)_\\w/)) {\n        return completeUnderscore(token);\n      } else if (lastLine.match(/(^|\\s)\\[.*\\]\\(\\w*/)) {\n        var nextTwoSubTokens = token.tokens.slice(i + 1);\n        if (((_a = nextTwoSubTokens[0]) === null || _a === void 0 ? void 0 : _a.type) === 'link' && ((_b = nextTwoSubTokens[1]) === null || _b === void 0 ? void 0 : _b.type) === 'text' && nextTwoSubTokens[1].raw.match(/^ *\"[^\"]*$/)) {\n          // A markdown link can look like\n          // [link text](https://microsoft.com \"more text\")\n          // Where \"more text\" is a title for the link or an argument to a vscode command link\n          return completeLinkTargetArg(token);\n        }\n        return completeLinkTarget(token);\n      } else if (hasStartOfLinkTarget(lastLine)) {\n        return completeLinkTarget(token);\n      } else if (lastLine.match(/(^|\\s)\\[\\w/) && !token.tokens.slice(i + 1).some(function (t) {\n        return hasStartOfLinkTarget(t.raw);\n      })) {\n        return completeLinkText(token);\n      }\n    }\n  }\n  return undefined;\n}\nfunction hasStartOfLinkTarget(str) {\n  return !!str.match(/^[^\\[]*\\]\\([^\\)]*$/);\n}\n// function completeListItemPattern(token: marked.Tokens.List): marked.Tokens.List | undefined {\n// \t// Patch up this one list item\n// \tconst lastItem = token.items[token.items.length - 1];\n// \tconst newList = completeSingleLinePattern(lastItem);\n// \tif (!newList || newList.type !== 'list') {\n// \t\t// Nothing to fix, or not a pattern we were expecting\n// \t\treturn;\n// \t}\n// \t// Re-parse the whole list with the last item replaced\n// \tconst completeList = marked.lexer(mergeRawTokenText(token.items.slice(0, token.items.length - 1)) + newList.items[0].raw);\n// \tif (completeList.length === 1 && completeList[0].type === 'list') {\n// \t\treturn completeList[0];\n// \t}\n// \t// Not a pattern we were expecting\n// \treturn undefined;\n// }\nexport function fillInIncompleteTokens(tokens) {\n  var i;\n  var newTokens;\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n    var codeblockStart = void 0;\n    if (token.type === 'paragraph' && (codeblockStart = token.raw.match(/(\\n|^)(````*)/))) {\n      var codeblockLead = codeblockStart[2];\n      // If the code block was complete, it would be in a type='code'\n      newTokens = completeCodeBlock(tokens.slice(i), codeblockLead);\n      break;\n    }\n    if (token.type === 'paragraph' && token.raw.match(/(\\n|^)\\|/)) {\n      newTokens = completeTable(tokens.slice(i));\n      break;\n    }\n    // if (i === tokens.length - 1 && token.type === 'list') {\n    // \tconst newListToken = completeListItemPattern(token);\n    // \tif (newListToken) {\n    // \t\tnewTokens = [newListToken];\n    // \t\tbreak;\n    // \t}\n    // }\n    if (i === tokens.length - 1 && token.type === 'paragraph') {\n      // Only operates on a single token, because any newline that follows this should break these patterns\n      var newToken = completeSingleLinePattern(token);\n      if (newToken) {\n        newTokens = [newToken];\n        break;\n      }\n    }\n  }\n  if (newTokens) {\n    var newTokensList = [].concat(_toConsumableArray(tokens.slice(0, i)), _toConsumableArray(newTokens));\n    newTokensList.links = tokens.links;\n    return newTokensList;\n  }\n  return tokens;\n}\nfunction completeCodeBlock(tokens, leader) {\n  var mergedRawText = mergeRawTokenText(tokens);\n  return marked.lexer(mergedRawText + \"\\n\".concat(leader));\n}\nfunction completeCodespan(token) {\n  return completeWithString(token, '`');\n}\nfunction completeStar(tokens) {\n  return completeWithString(tokens, '*');\n}\nfunction completeUnderscore(tokens) {\n  return completeWithString(tokens, '_');\n}\nfunction completeLinkTarget(tokens) {\n  return completeWithString(tokens, ')');\n}\nfunction completeLinkTargetArg(tokens) {\n  return completeWithString(tokens, '\")');\n}\nfunction completeLinkText(tokens) {\n  return completeWithString(tokens, '](about:blank)');\n}\nfunction completeDoublestar(tokens) {\n  return completeWithString(tokens, '**');\n}\nfunction completeDoubleUnderscore(tokens) {\n  return completeWithString(tokens, '__');\n}\nfunction completeWithString(tokens, closingString) {\n  var mergedRawText = mergeRawTokenText(Array.isArray(tokens) ? tokens : [tokens]);\n  // If it was completed correctly, this should be a single token.\n  // Expecting either a Paragraph or a List\n  return marked.lexer(mergedRawText + closingString)[0];\n}\nfunction completeTable(tokens) {\n  var mergedRawText = mergeRawTokenText(tokens);\n  var lines = mergedRawText.split('\\n');\n  var numCols; // The number of line1 col headers\n  var hasSeparatorRow = false;\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (typeof numCols === 'undefined' && line.match(/^\\s*\\|/)) {\n      var line1Matches = line.match(/(\\|[^\\|]+)(?=\\||$)/g);\n      if (line1Matches) {\n        numCols = line1Matches.length;\n      }\n    } else if (typeof numCols === 'number') {\n      if (line.match(/^\\s*\\|/)) {\n        if (i !== lines.length - 1) {\n          // We got the line1 header row, and the line2 separator row, but there are more lines, and it wasn't parsed as a table!\n          // That's strange and means that the table is probably malformed in the source, so I won't try to patch it up.\n          return undefined;\n        }\n        // Got a line2 separator row- partial or complete, doesn't matter, we'll replace it with a correct one\n        hasSeparatorRow = true;\n      } else {\n        // The line after the header row isn't a valid separator row, so the table is malformed, don't fix it up\n        return undefined;\n      }\n    }\n  }\n  if (typeof numCols === 'number' && numCols > 0) {\n    var prefixText = hasSeparatorRow ? lines.slice(0, -1).join('\\n') : mergedRawText;\n    var line1EndsInPipe = !!prefixText.match(/\\|\\s*$/);\n    var newRawText = prefixText + (line1EndsInPipe ? '' : '|') + \"\\n|\".concat(' --- |'.repeat(numCols));\n    return marked.lexer(newRawText);\n  }\n  return undefined;\n}","map":{"version":3,"names":["DOM","dompurify","DomEmitter","createElement","StandardKeyboardEvent","StandardMouseEvent","renderLabelWithIcons","onUnexpectedError","Event","escapeDoubleQuotes","parseHrefAndDimensions","removeMarkdownEscapes","markdownEscapeEscapedIcons","defaultGenerator","Lazy","DisposableStore","marked","parse","FileAccess","Schemas","cloneAndChange","dirname","resolvePath","escape","URI","defaultMarkedRenderers","Object","freeze","image","href","title","text","dimensions","attributes","_parseHrefAndDimensio","push","concat","length","join","paragraph","link","replace","renderMarkdown","markdown","options","arguments","undefined","markedOptions","_a","_b","disposables","isDisposed","element","_uriMassage","part","data","decodeURIComponent","e","value","uris","revive","encodeURIComponent","JSON","stringify","_href","isDomUri","uri","startsWith","uriToBrowserUri","toString","query","renderer","Renderer","codeBlocks","syncCodeBlocks","codeBlockRendererSync","code","lang","id","nextId","postProcessCodeBlockLanguageId","codeBlockRenderer","then","actionHandler","_activateLink","event","target","tagName","parentElement","dataset","baseUri","resolveWithBaseUri","from","callback","err","preventDefault","onClick","add","onAuxClick","any","mouseEvent","getWindow","leftButton","middleButton","addDisposableListener","keyboardEvent","equals","supportHtml","sanitizer","html","match","isTrusted","sanitize","silent","substr","supportThemeIcons","renderedMarkdown","fillInIncompleteTokens","opts","_objectSpread","defaults","tokens","lexer","newTokens","parser","elements","map","outerHTML","htmlParser","DOMParser","markdownHtmlDoc","parseFromString","sanitizeRenderedMarkdown","body","querySelectorAll","forEach","img","src","getAttribute","a","setAttribute","test","replaceWith","apply","_toConsumableArray","childNodes","resolvedHref","innerHTML","Promise","all","tuples","renderedElements","Map","placeholderElements","_iterator","_createForOfIteratorHelper","_step","s","n","done","placeholderElement","renderedElement","get","reset","f","asyncRenderCallback","call","_iterator2","_step2","_iterator3","getElementsByTagName","_step3","_loop","listener","dispose","parts","split","hasScheme","path","endsWith","_getSanitizerOptions","getSanitizerOptions","config","allowedSchemes","addHook","attrName","keepAttr","attrValue","getNamedItem","removeChild","hook","hookDomPurifyHrefAndSrcSanitizer","RETURN_TRUSTED_TYPE","removeHook","allowedMarkdownAttr","http","https","mailto","file","vscodeFileResource","vscodeRemote","vscodeRemoteResource","command","ALLOWED_TAGS","basicMarkupHtmlTags","ALLOWED_ATTR","ALLOW_UNKNOWN_PROTOCOLS","renderStringAsPlaintext","string","renderMarkdownAsPlaintext","plainTextRenderer","m","unescapeInfo","blockquote","quote","_html","heading","_level","_raw","hr","list","_ordered","listitem","table","header","tablerow","content","tablecell","_flags","strong","em","codespan","br","del","_title","_text","mergeRawTokenText","mergedTokenText","token","raw","completeSingleLinePattern","i","subtoken","type","lines","lastLine","includes","completeCodespan","completeDoublestar","completeStar","completeDoubleUnderscore","completeUnderscore","nextTwoSubTokens","slice","completeLinkTargetArg","completeLinkTarget","hasStartOfLinkTarget","some","t","completeLinkText","str","codeblockStart","codeblockLead","completeCodeBlock","completeTable","newToken","newTokensList","links","leader","mergedRawText","completeWithString","closingString","Array","isArray","numCols","hasSeparatorRow","line","trim","line1Matches","prefixText","line1EndsInPipe","newRawText","repeat"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/base/browser/markdownRenderer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as DOM from './dom.js';\nimport * as dompurify from './dompurify/dompurify.js';\nimport { DomEmitter } from './event.js';\nimport { createElement } from './formattedTextRenderer.js';\nimport { StandardKeyboardEvent } from './keyboardEvent.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { renderLabelWithIcons } from './ui/iconLabel/iconLabels.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { Event } from '../common/event.js';\nimport { escapeDoubleQuotes, parseHrefAndDimensions, removeMarkdownEscapes } from '../common/htmlContent.js';\nimport { markdownEscapeEscapedIcons } from '../common/iconLabels.js';\nimport { defaultGenerator } from '../common/idGenerator.js';\nimport { Lazy } from '../common/lazy.js';\nimport { DisposableStore } from '../common/lifecycle.js';\nimport { marked } from '../common/marked/marked.js';\nimport { parse } from '../common/marshalling.js';\nimport { FileAccess, Schemas } from '../common/network.js';\nimport { cloneAndChange } from '../common/objects.js';\nimport { dirname, resolvePath } from '../common/resources.js';\nimport { escape } from '../common/strings.js';\nimport { URI } from '../common/uri.js';\nconst defaultMarkedRenderers = Object.freeze({\n    image: (href, title, text) => {\n        let dimensions = [];\n        let attributes = [];\n        if (href) {\n            ({ href, dimensions } = parseHrefAndDimensions(href));\n            attributes.push(`src=\"${escapeDoubleQuotes(href)}\"`);\n        }\n        if (text) {\n            attributes.push(`alt=\"${escapeDoubleQuotes(text)}\"`);\n        }\n        if (title) {\n            attributes.push(`title=\"${escapeDoubleQuotes(title)}\"`);\n        }\n        if (dimensions.length) {\n            attributes = attributes.concat(dimensions);\n        }\n        return '<img ' + attributes.join(' ') + '>';\n    },\n    paragraph: (text) => {\n        return `<p>${text}</p>`;\n    },\n    link: (href, title, text) => {\n        if (typeof href !== 'string') {\n            return '';\n        }\n        // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829\n        if (href === text) { // raw link case\n            text = removeMarkdownEscapes(text);\n        }\n        title = typeof title === 'string' ? escapeDoubleQuotes(removeMarkdownEscapes(title)) : '';\n        href = removeMarkdownEscapes(href);\n        // HTML Encode href\n        href = href.replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;');\n        return `<a href=\"${href}\" title=\"${title || href}\" draggable=\"false\">${text}</a>`;\n    },\n});\n/**\n * Low-level way create a html element from a markdown string.\n *\n * **Note** that for most cases you should be using [`MarkdownRenderer`](./src/vs/editor/contrib/markdownRenderer/browser/markdownRenderer.ts)\n * which comes with support for pretty code block rendering and which uses the default way of handling links.\n */\nexport function renderMarkdown(markdown, options = {}, markedOptions = {}) {\n    var _a, _b;\n    const disposables = new DisposableStore();\n    let isDisposed = false;\n    const element = createElement(options);\n    const _uriMassage = function (part) {\n        let data;\n        try {\n            data = parse(decodeURIComponent(part));\n        }\n        catch (e) {\n            // ignore\n        }\n        if (!data) {\n            return part;\n        }\n        data = cloneAndChange(data, value => {\n            if (markdown.uris && markdown.uris[value]) {\n                return URI.revive(markdown.uris[value]);\n            }\n            else {\n                return undefined;\n            }\n        });\n        return encodeURIComponent(JSON.stringify(data));\n    };\n    const _href = function (href, isDomUri) {\n        const data = markdown.uris && markdown.uris[href];\n        let uri = URI.revive(data);\n        if (isDomUri) {\n            if (href.startsWith(Schemas.data + ':')) {\n                return href;\n            }\n            if (!uri) {\n                uri = URI.parse(href);\n            }\n            // this URI will end up as \"src\"-attribute of a dom node\n            // and because of that special rewriting needs to be done\n            // so that the URI uses a protocol that's understood by\n            // browsers (like http or https)\n            return FileAccess.uriToBrowserUri(uri).toString(true);\n        }\n        if (!uri) {\n            return href;\n        }\n        if (URI.parse(href).toString() === uri.toString()) {\n            return href; // no transformation performed\n        }\n        if (uri.query) {\n            uri = uri.with({ query: _uriMassage(uri.query) });\n        }\n        return uri.toString();\n    };\n    const renderer = new marked.Renderer();\n    renderer.image = defaultMarkedRenderers.image;\n    renderer.link = defaultMarkedRenderers.link;\n    renderer.paragraph = defaultMarkedRenderers.paragraph;\n    // Will collect [id, renderedElement] tuples\n    const codeBlocks = [];\n    const syncCodeBlocks = [];\n    if (options.codeBlockRendererSync) {\n        renderer.code = (code, lang) => {\n            const id = defaultGenerator.nextId();\n            const value = options.codeBlockRendererSync(postProcessCodeBlockLanguageId(lang), code);\n            syncCodeBlocks.push([id, value]);\n            return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n        };\n    }\n    else if (options.codeBlockRenderer) {\n        renderer.code = (code, lang) => {\n            const id = defaultGenerator.nextId();\n            const value = options.codeBlockRenderer(postProcessCodeBlockLanguageId(lang), code);\n            codeBlocks.push(value.then(element => [id, element]));\n            return `<div class=\"code\" data-code=\"${id}\">${escape(code)}</div>`;\n        };\n    }\n    if (options.actionHandler) {\n        const _activateLink = function (event) {\n            let target = event.target;\n            if (target.tagName !== 'A') {\n                target = target.parentElement;\n                if (!target || target.tagName !== 'A') {\n                    return;\n                }\n            }\n            try {\n                let href = target.dataset['href'];\n                if (href) {\n                    if (markdown.baseUri) {\n                        href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n                    }\n                    options.actionHandler.callback(href, event);\n                }\n            }\n            catch (err) {\n                onUnexpectedError(err);\n            }\n            finally {\n                event.preventDefault();\n            }\n        };\n        const onClick = options.actionHandler.disposables.add(new DomEmitter(element, 'click'));\n        const onAuxClick = options.actionHandler.disposables.add(new DomEmitter(element, 'auxclick'));\n        options.actionHandler.disposables.add(Event.any(onClick.event, onAuxClick.event)(e => {\n            const mouseEvent = new StandardMouseEvent(DOM.getWindow(element), e);\n            if (!mouseEvent.leftButton && !mouseEvent.middleButton) {\n                return;\n            }\n            _activateLink(mouseEvent);\n        }));\n        options.actionHandler.disposables.add(DOM.addDisposableListener(element, 'keydown', (e) => {\n            const keyboardEvent = new StandardKeyboardEvent(e);\n            if (!keyboardEvent.equals(10 /* KeyCode.Space */) && !keyboardEvent.equals(3 /* KeyCode.Enter */)) {\n                return;\n            }\n            _activateLink(keyboardEvent);\n        }));\n    }\n    if (!markdown.supportHtml) {\n        // TODO: Can we deprecated this in favor of 'supportHtml'?\n        // Use our own sanitizer so that we can let through only spans.\n        // Otherwise, we'd be letting all html be rendered.\n        // If we want to allow markdown permitted tags, then we can delete sanitizer and sanitize.\n        // We always pass the output through dompurify after this so that we don't rely on\n        // marked for sanitization.\n        markedOptions.sanitizer = (html) => {\n            const match = markdown.isTrusted ? html.match(/^(<span[^>]+>)|(<\\/\\s*span>)$/) : undefined;\n            return match ? html : '';\n        };\n        markedOptions.sanitize = true;\n        markedOptions.silent = true;\n    }\n    markedOptions.renderer = renderer;\n    // values that are too long will freeze the UI\n    let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n    if (value.length > 100000) {\n        value = `${value.substr(0, 100000)}…`;\n    }\n    // escape theme icons\n    if (markdown.supportThemeIcons) {\n        value = markdownEscapeEscapedIcons(value);\n    }\n    let renderedMarkdown;\n    if (options.fillInIncompleteTokens) {\n        // The defaults are applied by parse but not lexer()/parser(), and they need to be present\n        const opts = {\n            ...marked.defaults,\n            ...markedOptions\n        };\n        const tokens = marked.lexer(value, opts);\n        const newTokens = fillInIncompleteTokens(tokens);\n        renderedMarkdown = marked.parser(newTokens, opts);\n    }\n    else {\n        renderedMarkdown = marked.parse(value, markedOptions);\n    }\n    // Rewrite theme icons\n    if (markdown.supportThemeIcons) {\n        const elements = renderLabelWithIcons(renderedMarkdown);\n        renderedMarkdown = elements.map(e => typeof e === 'string' ? e : e.outerHTML).join('');\n    }\n    const htmlParser = new DOMParser();\n    const markdownHtmlDoc = htmlParser.parseFromString(sanitizeRenderedMarkdown(markdown, renderedMarkdown), 'text/html');\n    markdownHtmlDoc.body.querySelectorAll('img')\n        .forEach(img => {\n        const src = img.getAttribute('src'); // Get the raw 'src' attribute value as text, not the resolved 'src'\n        if (src) {\n            let href = src;\n            try {\n                if (markdown.baseUri) { // absolute or relative local path, or file: uri\n                    href = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n                }\n            }\n            catch (err) { }\n            img.src = _href(href, true);\n        }\n    });\n    markdownHtmlDoc.body.querySelectorAll('a')\n        .forEach(a => {\n        const href = a.getAttribute('href'); // Get the raw 'href' attribute value as text, not the resolved 'href'\n        a.setAttribute('href', ''); // Clear out href. We use the `data-href` for handling clicks instead\n        if (!href\n            || /^data:|javascript:/i.test(href)\n            || (/^command:/i.test(href) && !markdown.isTrusted)\n            || /^command:(\\/\\/\\/)?_workbench\\.downloadResource/i.test(href)) {\n            // drop the link\n            a.replaceWith(...a.childNodes);\n        }\n        else {\n            let resolvedHref = _href(href, false);\n            if (markdown.baseUri) {\n                resolvedHref = resolveWithBaseUri(URI.from(markdown.baseUri), href);\n            }\n            a.dataset.href = resolvedHref;\n        }\n    });\n    element.innerHTML = sanitizeRenderedMarkdown(markdown, markdownHtmlDoc.body.innerHTML);\n    if (codeBlocks.length > 0) {\n        Promise.all(codeBlocks).then((tuples) => {\n            var _a, _b;\n            if (isDisposed) {\n                return;\n            }\n            const renderedElements = new Map(tuples);\n            const placeholderElements = element.querySelectorAll(`div[data-code]`);\n            for (const placeholderElement of placeholderElements) {\n                const renderedElement = renderedElements.get((_a = placeholderElement.dataset['code']) !== null && _a !== void 0 ? _a : '');\n                if (renderedElement) {\n                    DOM.reset(placeholderElement, renderedElement);\n                }\n            }\n            (_b = options.asyncRenderCallback) === null || _b === void 0 ? void 0 : _b.call(options);\n        });\n    }\n    else if (syncCodeBlocks.length > 0) {\n        const renderedElements = new Map(syncCodeBlocks);\n        const placeholderElements = element.querySelectorAll(`div[data-code]`);\n        for (const placeholderElement of placeholderElements) {\n            const renderedElement = renderedElements.get((_b = placeholderElement.dataset['code']) !== null && _b !== void 0 ? _b : '');\n            if (renderedElement) {\n                DOM.reset(placeholderElement, renderedElement);\n            }\n        }\n    }\n    // signal size changes for image tags\n    if (options.asyncRenderCallback) {\n        for (const img of element.getElementsByTagName('img')) {\n            const listener = disposables.add(DOM.addDisposableListener(img, 'load', () => {\n                listener.dispose();\n                options.asyncRenderCallback();\n            }));\n        }\n    }\n    return {\n        element,\n        dispose: () => {\n            isDisposed = true;\n            disposables.dispose();\n        }\n    };\n}\nfunction postProcessCodeBlockLanguageId(lang) {\n    if (!lang) {\n        return '';\n    }\n    const parts = lang.split(/[\\s+|:|,|\\{|\\?]/, 1);\n    if (parts.length) {\n        return parts[0];\n    }\n    return lang;\n}\nfunction resolveWithBaseUri(baseUri, href) {\n    const hasScheme = /^\\w[\\w\\d+.-]*:/.test(href);\n    if (hasScheme) {\n        return href;\n    }\n    if (baseUri.path.endsWith('/')) {\n        return resolvePath(baseUri, href).toString();\n    }\n    else {\n        return resolvePath(dirname(baseUri), href).toString();\n    }\n}\nfunction sanitizeRenderedMarkdown(options, renderedMarkdown) {\n    const { config, allowedSchemes } = getSanitizerOptions(options);\n    dompurify.addHook('uponSanitizeAttribute', (element, e) => {\n        var _a;\n        if (e.attrName === 'style' || e.attrName === 'class') {\n            if (element.tagName === 'SPAN') {\n                if (e.attrName === 'style') {\n                    e.keepAttr = /^(color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?(background-color\\:(#[0-9a-fA-F]+|var\\(--vscode(-[a-zA-Z]+)+\\));)?$/.test(e.attrValue);\n                    return;\n                }\n                else if (e.attrName === 'class') {\n                    e.keepAttr = /^codicon codicon-[a-z\\-]+( codicon-modifier-[a-z\\-]+)?$/.test(e.attrValue);\n                    return;\n                }\n            }\n            e.keepAttr = false;\n            return;\n        }\n        else if (element.tagName === 'INPUT' && ((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n            if ((e.attrName === 'type' && e.attrValue === 'checkbox') || e.attrName === 'disabled' || e.attrName === 'checked') {\n                e.keepAttr = true;\n                return;\n            }\n            e.keepAttr = false;\n        }\n    });\n    dompurify.addHook('uponSanitizeElement', (element, e) => {\n        var _a, _b;\n        if (e.tagName === 'input') {\n            if (((_a = element.attributes.getNamedItem('type')) === null || _a === void 0 ? void 0 : _a.value) === 'checkbox') {\n                element.setAttribute('disabled', '');\n            }\n            else {\n                (_b = element.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(element);\n            }\n        }\n    });\n    const hook = DOM.hookDomPurifyHrefAndSrcSanitizer(allowedSchemes);\n    try {\n        return dompurify.sanitize(renderedMarkdown, { ...config, RETURN_TRUSTED_TYPE: true });\n    }\n    finally {\n        dompurify.removeHook('uponSanitizeAttribute');\n        hook.dispose();\n    }\n}\nexport const allowedMarkdownAttr = [\n    'align',\n    'autoplay',\n    'alt',\n    'checked',\n    'class',\n    'controls',\n    'data-code',\n    'data-href',\n    'disabled',\n    'draggable',\n    'height',\n    'href',\n    'loop',\n    'muted',\n    'playsinline',\n    'poster',\n    'src',\n    'style',\n    'target',\n    'title',\n    'type',\n    'width',\n    'start',\n];\nfunction getSanitizerOptions(options) {\n    const allowedSchemes = [\n        Schemas.http,\n        Schemas.https,\n        Schemas.mailto,\n        Schemas.data,\n        Schemas.file,\n        Schemas.vscodeFileResource,\n        Schemas.vscodeRemote,\n        Schemas.vscodeRemoteResource,\n    ];\n    if (options.isTrusted) {\n        allowedSchemes.push(Schemas.command);\n    }\n    return {\n        config: {\n            // allowedTags should included everything that markdown renders to.\n            // Since we have our own sanitize function for marked, it's possible we missed some tag so let dompurify make sure.\n            // HTML tags that can result from markdown are from reading https://spec.commonmark.org/0.29/\n            // HTML table tags that can result from markdown are from https://github.github.com/gfm/#tables-extension-\n            ALLOWED_TAGS: [...DOM.basicMarkupHtmlTags],\n            ALLOWED_ATTR: allowedMarkdownAttr,\n            ALLOW_UNKNOWN_PROTOCOLS: true,\n        },\n        allowedSchemes\n    };\n}\n/**\n * Strips all markdown from `string`, if it's an IMarkdownString. For example\n * `# Header` would be output as `Header`. If it's not, the string is returned.\n */\nexport function renderStringAsPlaintext(string) {\n    return typeof string === 'string' ? string : renderMarkdownAsPlaintext(string);\n}\n/**\n * Strips all markdown from `markdown`. For example `# Header` would be output as `Header`.\n */\nexport function renderMarkdownAsPlaintext(markdown) {\n    var _a;\n    // values that are too long will freeze the UI\n    let value = (_a = markdown.value) !== null && _a !== void 0 ? _a : '';\n    if (value.length > 100000) {\n        value = `${value.substr(0, 100000)}…`;\n    }\n    const html = marked.parse(value, { renderer: plainTextRenderer.value }).replace(/&(#\\d+|[a-zA-Z]+);/g, m => { var _a; return (_a = unescapeInfo.get(m)) !== null && _a !== void 0 ? _a : m; });\n    return sanitizeRenderedMarkdown({ isTrusted: false }, html).toString();\n}\nconst unescapeInfo = new Map([\n    ['&quot;', '\"'],\n    ['&nbsp;', ' '],\n    ['&amp;', '&'],\n    ['&#39;', '\\''],\n    ['&lt;', '<'],\n    ['&gt;', '>'],\n]);\nconst plainTextRenderer = new Lazy(() => {\n    const renderer = new marked.Renderer();\n    renderer.code = (code) => {\n        return code;\n    };\n    renderer.blockquote = (quote) => {\n        return quote;\n    };\n    renderer.html = (_html) => {\n        return '';\n    };\n    renderer.heading = (text, _level, _raw) => {\n        return text + '\\n';\n    };\n    renderer.hr = () => {\n        return '';\n    };\n    renderer.list = (body, _ordered) => {\n        return body;\n    };\n    renderer.listitem = (text) => {\n        return text + '\\n';\n    };\n    renderer.paragraph = (text) => {\n        return text + '\\n';\n    };\n    renderer.table = (header, body) => {\n        return header + body + '\\n';\n    };\n    renderer.tablerow = (content) => {\n        return content;\n    };\n    renderer.tablecell = (content, _flags) => {\n        return content + ' ';\n    };\n    renderer.strong = (text) => {\n        return text;\n    };\n    renderer.em = (text) => {\n        return text;\n    };\n    renderer.codespan = (code) => {\n        return code;\n    };\n    renderer.br = () => {\n        return '\\n';\n    };\n    renderer.del = (text) => {\n        return text;\n    };\n    renderer.image = (_href, _title, _text) => {\n        return '';\n    };\n    renderer.text = (text) => {\n        return text;\n    };\n    renderer.link = (_href, _title, text) => {\n        return text;\n    };\n    return renderer;\n});\nfunction mergeRawTokenText(tokens) {\n    let mergedTokenText = '';\n    tokens.forEach(token => {\n        mergedTokenText += token.raw;\n    });\n    return mergedTokenText;\n}\nfunction completeSingleLinePattern(token) {\n    var _a, _b;\n    for (let i = 0; i < token.tokens.length; i++) {\n        const subtoken = token.tokens[i];\n        if (subtoken.type === 'text') {\n            const lines = subtoken.raw.split('\\n');\n            const lastLine = lines[lines.length - 1];\n            if (lastLine.includes('`')) {\n                return completeCodespan(token);\n            }\n            else if (lastLine.includes('**')) {\n                return completeDoublestar(token);\n            }\n            else if (lastLine.match(/\\*\\w/)) {\n                return completeStar(token);\n            }\n            else if (lastLine.match(/(^|\\s)__\\w/)) {\n                return completeDoubleUnderscore(token);\n            }\n            else if (lastLine.match(/(^|\\s)_\\w/)) {\n                return completeUnderscore(token);\n            }\n            else if (lastLine.match(/(^|\\s)\\[.*\\]\\(\\w*/)) {\n                const nextTwoSubTokens = token.tokens.slice(i + 1);\n                if (((_a = nextTwoSubTokens[0]) === null || _a === void 0 ? void 0 : _a.type) === 'link' && ((_b = nextTwoSubTokens[1]) === null || _b === void 0 ? void 0 : _b.type) === 'text' && nextTwoSubTokens[1].raw.match(/^ *\"[^\"]*$/)) {\n                    // A markdown link can look like\n                    // [link text](https://microsoft.com \"more text\")\n                    // Where \"more text\" is a title for the link or an argument to a vscode command link\n                    return completeLinkTargetArg(token);\n                }\n                return completeLinkTarget(token);\n            }\n            else if (hasStartOfLinkTarget(lastLine)) {\n                return completeLinkTarget(token);\n            }\n            else if (lastLine.match(/(^|\\s)\\[\\w/) && !token.tokens.slice(i + 1).some(t => hasStartOfLinkTarget(t.raw))) {\n                return completeLinkText(token);\n            }\n        }\n    }\n    return undefined;\n}\nfunction hasStartOfLinkTarget(str) {\n    return !!str.match(/^[^\\[]*\\]\\([^\\)]*$/);\n}\n// function completeListItemPattern(token: marked.Tokens.List): marked.Tokens.List | undefined {\n// \t// Patch up this one list item\n// \tconst lastItem = token.items[token.items.length - 1];\n// \tconst newList = completeSingleLinePattern(lastItem);\n// \tif (!newList || newList.type !== 'list') {\n// \t\t// Nothing to fix, or not a pattern we were expecting\n// \t\treturn;\n// \t}\n// \t// Re-parse the whole list with the last item replaced\n// \tconst completeList = marked.lexer(mergeRawTokenText(token.items.slice(0, token.items.length - 1)) + newList.items[0].raw);\n// \tif (completeList.length === 1 && completeList[0].type === 'list') {\n// \t\treturn completeList[0];\n// \t}\n// \t// Not a pattern we were expecting\n// \treturn undefined;\n// }\nexport function fillInIncompleteTokens(tokens) {\n    let i;\n    let newTokens;\n    for (i = 0; i < tokens.length; i++) {\n        const token = tokens[i];\n        let codeblockStart;\n        if (token.type === 'paragraph' && (codeblockStart = token.raw.match(/(\\n|^)(````*)/))) {\n            const codeblockLead = codeblockStart[2];\n            // If the code block was complete, it would be in a type='code'\n            newTokens = completeCodeBlock(tokens.slice(i), codeblockLead);\n            break;\n        }\n        if (token.type === 'paragraph' && token.raw.match(/(\\n|^)\\|/)) {\n            newTokens = completeTable(tokens.slice(i));\n            break;\n        }\n        // if (i === tokens.length - 1 && token.type === 'list') {\n        // \tconst newListToken = completeListItemPattern(token);\n        // \tif (newListToken) {\n        // \t\tnewTokens = [newListToken];\n        // \t\tbreak;\n        // \t}\n        // }\n        if (i === tokens.length - 1 && token.type === 'paragraph') {\n            // Only operates on a single token, because any newline that follows this should break these patterns\n            const newToken = completeSingleLinePattern(token);\n            if (newToken) {\n                newTokens = [newToken];\n                break;\n            }\n        }\n    }\n    if (newTokens) {\n        const newTokensList = [\n            ...tokens.slice(0, i),\n            ...newTokens\n        ];\n        newTokensList.links = tokens.links;\n        return newTokensList;\n    }\n    return tokens;\n}\nfunction completeCodeBlock(tokens, leader) {\n    const mergedRawText = mergeRawTokenText(tokens);\n    return marked.lexer(mergedRawText + `\\n${leader}`);\n}\nfunction completeCodespan(token) {\n    return completeWithString(token, '`');\n}\nfunction completeStar(tokens) {\n    return completeWithString(tokens, '*');\n}\nfunction completeUnderscore(tokens) {\n    return completeWithString(tokens, '_');\n}\nfunction completeLinkTarget(tokens) {\n    return completeWithString(tokens, ')');\n}\nfunction completeLinkTargetArg(tokens) {\n    return completeWithString(tokens, '\")');\n}\nfunction completeLinkText(tokens) {\n    return completeWithString(tokens, '](about:blank)');\n}\nfunction completeDoublestar(tokens) {\n    return completeWithString(tokens, '**');\n}\nfunction completeDoubleUnderscore(tokens) {\n    return completeWithString(tokens, '__');\n}\nfunction completeWithString(tokens, closingString) {\n    const mergedRawText = mergeRawTokenText(Array.isArray(tokens) ? tokens : [tokens]);\n    // If it was completed correctly, this should be a single token.\n    // Expecting either a Paragraph or a List\n    return marked.lexer(mergedRawText + closingString)[0];\n}\nfunction completeTable(tokens) {\n    const mergedRawText = mergeRawTokenText(tokens);\n    const lines = mergedRawText.split('\\n');\n    let numCols; // The number of line1 col headers\n    let hasSeparatorRow = false;\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        if (typeof numCols === 'undefined' && line.match(/^\\s*\\|/)) {\n            const line1Matches = line.match(/(\\|[^\\|]+)(?=\\||$)/g);\n            if (line1Matches) {\n                numCols = line1Matches.length;\n            }\n        }\n        else if (typeof numCols === 'number') {\n            if (line.match(/^\\s*\\|/)) {\n                if (i !== lines.length - 1) {\n                    // We got the line1 header row, and the line2 separator row, but there are more lines, and it wasn't parsed as a table!\n                    // That's strange and means that the table is probably malformed in the source, so I won't try to patch it up.\n                    return undefined;\n                }\n                // Got a line2 separator row- partial or complete, doesn't matter, we'll replace it with a correct one\n                hasSeparatorRow = true;\n            }\n            else {\n                // The line after the header row isn't a valid separator row, so the table is malformed, don't fix it up\n                return undefined;\n            }\n        }\n    }\n    if (typeof numCols === 'number' && numCols > 0) {\n        const prefixText = hasSeparatorRow ? lines.slice(0, -1).join('\\n') : mergedRawText;\n        const line1EndsInPipe = !!prefixText.match(/\\|\\s*$/);\n        const newRawText = prefixText + (line1EndsInPipe ? '' : '|') + `\\n|${' --- |'.repeat(numCols)}`;\n        return marked.lexer(newRawText);\n    }\n    return undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}