{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _get from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './whitespace.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorWhitespaces } from '../../../common/core/editorColorRegistry.js';\nexport var WhitespaceOverlay = /*#__PURE__*/function (_DynamicViewOverlay) {\n  function WhitespaceOverlay(context) {\n    var _this;\n    _classCallCheck(this, WhitespaceOverlay);\n    _this = _callSuper(this, WhitespaceOverlay);\n    _this._context = context;\n    _this._options = new WhitespaceOptions(_this._context.configuration);\n    _this._selection = [];\n    _this._renderResult = null;\n    _this._context.addEventHandler(_this);\n    return _this;\n  }\n  _inherits(WhitespaceOverlay, _DynamicViewOverlay);\n  return _createClass(WhitespaceOverlay, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._context.removeEventHandler(this);\n      this._renderResult = null;\n      _get(_getPrototypeOf(WhitespaceOverlay.prototype), \"dispose\", this).call(this);\n    }\n    // --- begin event handlers\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var newOptions = new WhitespaceOptions(this._context.configuration);\n      if (this._options.equals(newOptions)) {\n        return e.hasChanged(145 /* EditorOption.layoutInfo */);\n      }\n      this._options = newOptions;\n      return true;\n    }\n  }, {\n    key: \"onCursorStateChanged\",\n    value: function onCursorStateChanged(e) {\n      this._selection = e.selections;\n      if (this._options.renderWhitespace === 'selection') {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollTopChanged;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    }\n    // --- end event handlers\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      if (this._options.renderWhitespace === 'none') {\n        this._renderResult = null;\n        return;\n      }\n      var startLineNumber = ctx.visibleRange.startLineNumber;\n      var endLineNumber = ctx.visibleRange.endLineNumber;\n      var lineCount = endLineNumber - startLineNumber + 1;\n      var needed = new Array(lineCount);\n      for (var i = 0; i < lineCount; i++) {\n        needed[i] = true;\n      }\n      var viewportData = this._context.viewModel.getMinimapLinesRenderingData(ctx.viewportData.startLineNumber, ctx.viewportData.endLineNumber, needed);\n      this._renderResult = [];\n      for (var lineNumber = ctx.viewportData.startLineNumber; lineNumber <= ctx.viewportData.endLineNumber; lineNumber++) {\n        var lineIndex = lineNumber - ctx.viewportData.startLineNumber;\n        var lineData = viewportData.data[lineIndex];\n        var selectionsOnLine = null;\n        if (this._options.renderWhitespace === 'selection') {\n          var selections = this._selection;\n          var _iterator = _createForOfIteratorHelper(selections),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var selection = _step.value;\n              if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                // Selection does not intersect line\n                continue;\n              }\n              var startColumn = selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn;\n              var endColumn = selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn;\n              if (startColumn < endColumn) {\n                if (!selectionsOnLine) {\n                  selectionsOnLine = [];\n                }\n                selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n        this._renderResult[lineIndex] = this._applyRenderWhitespace(ctx, lineNumber, selectionsOnLine, lineData);\n      }\n    }\n  }, {\n    key: \"_applyRenderWhitespace\",\n    value: function _applyRenderWhitespace(ctx, lineNumber, selections, lineData) {\n      if (this._options.renderWhitespace === 'selection' && !selections) {\n        return '';\n      }\n      if (this._options.renderWhitespace === 'trailing' && lineData.continuesWithWrappedLine) {\n        return '';\n      }\n      var color = this._context.theme.getColor(editorWhitespaces);\n      var USE_SVG = this._options.renderWithSVG;\n      var lineContent = lineData.content;\n      var len = this._options.stopRenderingLineAfter === -1 ? lineContent.length : Math.min(this._options.stopRenderingLineAfter, lineContent.length);\n      var continuesWithWrappedLine = lineData.continuesWithWrappedLine;\n      var fauxIndentLength = lineData.minColumn - 1;\n      var onlyBoundary = this._options.renderWhitespace === 'boundary';\n      var onlyTrailing = this._options.renderWhitespace === 'trailing';\n      var lineHeight = this._options.lineHeight;\n      var middotWidth = this._options.middotWidth;\n      var wsmiddotWidth = this._options.wsmiddotWidth;\n      var spaceWidth = this._options.spaceWidth;\n      var wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n      var middotDiff = Math.abs(middotWidth - spaceWidth);\n      // U+2E31 - WORD SEPARATOR MIDDLE DOT\n      // U+00B7 - MIDDLE DOT\n      var renderSpaceCharCode = wsmiddotDiff < middotDiff ? 0x2E31 : 0xB7;\n      var canUseHalfwidthRightwardsArrow = this._options.canUseHalfwidthRightwardsArrow;\n      var result = '';\n      var lineIsEmptyOrWhitespace = false;\n      var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n      var lastNonWhitespaceIndex;\n      if (firstNonWhitespaceIndex === -1) {\n        lineIsEmptyOrWhitespace = true;\n        firstNonWhitespaceIndex = len;\n        lastNonWhitespaceIndex = len;\n      } else {\n        lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n      }\n      var currentSelectionIndex = 0;\n      var currentSelection = selections && selections[currentSelectionIndex];\n      var maxLeft = 0;\n      for (var charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n        var chCode = lineContent.charCodeAt(charIndex);\n        if (currentSelection && charIndex >= currentSelection.endOffset) {\n          currentSelectionIndex++;\n          currentSelection = selections && selections[currentSelectionIndex];\n        }\n        if (chCode !== 9 /* CharCode.Tab */ && chCode !== 32 /* CharCode.Space */) {\n          continue;\n        }\n        if (onlyTrailing && !lineIsEmptyOrWhitespace && charIndex <= lastNonWhitespaceIndex) {\n          // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n          continue;\n        }\n        if (onlyBoundary && charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex && chCode === 32 /* CharCode.Space */) {\n          // rendering only boundary whitespace\n          var prevChCode = charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */;\n          var nextChCode = charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */;\n          if (prevChCode !== 32 /* CharCode.Space */ && nextChCode !== 32 /* CharCode.Space */) {\n            continue;\n          }\n        }\n        if (onlyBoundary && continuesWithWrappedLine && charIndex === len - 1) {\n          var prevCharCode = charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */;\n          var isSingleTrailingSpace = chCode === 32 /* CharCode.Space */ && prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */;\n          if (isSingleTrailingSpace) {\n            continue;\n          }\n        }\n        if (selections && (!currentSelection || currentSelection.startOffset > charIndex || currentSelection.endOffset <= charIndex)) {\n          // If rendering whitespace on selection, check that the charIndex falls within a selection\n          continue;\n        }\n        var visibleRange = ctx.visibleRangeForPosition(new Position(lineNumber, charIndex + 1));\n        if (!visibleRange) {\n          continue;\n        }\n        if (USE_SVG) {\n          maxLeft = Math.max(maxLeft, visibleRange.left);\n          if (chCode === 9 /* CharCode.Tab */) {\n            result += this._renderArrow(lineHeight, spaceWidth, visibleRange.left);\n          } else {\n            result += \"<circle cx=\\\"\".concat((visibleRange.left + spaceWidth / 2).toFixed(2), \"\\\" cy=\\\"\").concat((lineHeight / 2).toFixed(2), \"\\\" r=\\\"\").concat((spaceWidth / 7).toFixed(2), \"\\\" />\");\n          }\n        } else {\n          if (chCode === 9 /* CharCode.Tab */) {\n            result += \"<div class=\\\"mwh\\\" style=\\\"left:\".concat(visibleRange.left, \"px;height:\").concat(lineHeight, \"px;\\\">\").concat(canUseHalfwidthRightwardsArrow ? String.fromCharCode(0xFFEB) : String.fromCharCode(0x2192), \"</div>\");\n          } else {\n            result += \"<div class=\\\"mwh\\\" style=\\\"left:\".concat(visibleRange.left, \"px;height:\").concat(lineHeight, \"px;\\\">\").concat(String.fromCharCode(renderSpaceCharCode), \"</div>\");\n          }\n        }\n      }\n      if (USE_SVG) {\n        maxLeft = Math.round(maxLeft + spaceWidth);\n        return \"<svg style=\\\"bottom:0;position:absolute;width:\".concat(maxLeft, \"px;height:\").concat(lineHeight, \"px\\\" viewBox=\\\"0 0 \").concat(maxLeft, \" \").concat(lineHeight, \"\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"\").concat(color, \"\\\">\") + result + \"</svg>\";\n      }\n      return result;\n    }\n  }, {\n    key: \"_renderArrow\",\n    value: function _renderArrow(lineHeight, spaceWidth, left) {\n      var strokeWidth = spaceWidth / 7;\n      var width = spaceWidth;\n      var dy = lineHeight / 2;\n      var dx = left;\n      var p1 = {\n        x: 0,\n        y: strokeWidth / 2\n      };\n      var p2 = {\n        x: 100 / 125 * width,\n        y: p1.y\n      };\n      var p3 = {\n        x: p2.x - 0.2 * p2.x,\n        y: p2.y + 0.2 * p2.x\n      };\n      var p4 = {\n        x: p3.x + 0.1 * p2.x,\n        y: p3.y + 0.1 * p2.x\n      };\n      var p5 = {\n        x: p4.x + 0.35 * p2.x,\n        y: p4.y - 0.35 * p2.x\n      };\n      var p6 = {\n        x: p5.x,\n        y: -p5.y\n      };\n      var p7 = {\n        x: p4.x,\n        y: -p4.y\n      };\n      var p8 = {\n        x: p3.x,\n        y: -p3.y\n      };\n      var p9 = {\n        x: p2.x,\n        y: -p2.y\n      };\n      var p10 = {\n        x: p1.x,\n        y: -p1.y\n      };\n      var p = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10];\n      var parts = p.map(function (p) {\n        return \"\".concat((dx + p.x).toFixed(2), \" \").concat((dy + p.y).toFixed(2));\n      }).join(' L ');\n      return \"<path d=\\\"M \".concat(parts, \"\\\" />\");\n    }\n  }, {\n    key: \"render\",\n    value: function render(startLineNumber, lineNumber) {\n      if (!this._renderResult) {\n        return '';\n      }\n      var lineIndex = lineNumber - startLineNumber;\n      if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n        return '';\n      }\n      return this._renderResult[lineIndex];\n    }\n  }]);\n}(DynamicViewOverlay);\nvar WhitespaceOptions = /*#__PURE__*/function () {\n  function WhitespaceOptions(config) {\n    _classCallCheck(this, WhitespaceOptions);\n    var options = config.options;\n    var fontInfo = options.get(50 /* EditorOption.fontInfo */);\n    var experimentalWhitespaceRendering = options.get(38 /* EditorOption.experimentalWhitespaceRendering */);\n    if (experimentalWhitespaceRendering === 'off') {\n      // whitespace is rendered in the view line\n      this.renderWhitespace = 'none';\n      this.renderWithSVG = false;\n    } else if (experimentalWhitespaceRendering === 'svg') {\n      this.renderWhitespace = options.get(99 /* EditorOption.renderWhitespace */);\n      this.renderWithSVG = true;\n    } else {\n      this.renderWhitespace = options.get(99 /* EditorOption.renderWhitespace */);\n      this.renderWithSVG = false;\n    }\n    this.spaceWidth = fontInfo.spaceWidth;\n    this.middotWidth = fontInfo.middotWidth;\n    this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n    this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n    this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n    this.stopRenderingLineAfter = options.get(117 /* EditorOption.stopRenderingLineAfter */);\n  }\n  return _createClass(WhitespaceOptions, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.renderWhitespace === other.renderWhitespace && this.renderWithSVG === other.renderWithSVG && this.spaceWidth === other.spaceWidth && this.middotWidth === other.middotWidth && this.wsmiddotWidth === other.wsmiddotWidth && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow && this.lineHeight === other.lineHeight && this.stopRenderingLineAfter === other.stopRenderingLineAfter;\n    }\n  }]);\n}();","map":{"version":3,"names":["DynamicViewOverlay","strings","LineRange","Position","editorWhitespaces","WhitespaceOverlay","_DynamicViewOverlay","context","_this","_classCallCheck","_callSuper","_context","_options","WhitespaceOptions","configuration","_selection","_renderResult","addEventHandler","_inherits","_createClass","key","value","dispose","removeEventHandler","_get","_getPrototypeOf","prototype","call","onConfigurationChanged","e","newOptions","equals","hasChanged","onCursorStateChanged","selections","renderWhitespace","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","prepareRender","ctx","startLineNumber","visibleRange","endLineNumber","lineCount","needed","Array","i","viewportData","viewModel","getMinimapLinesRenderingData","lineNumber","lineIndex","lineData","data","selectionsOnLine","_iterator","_createForOfIteratorHelper","_step","s","n","done","selection","startColumn","minColumn","endColumn","maxColumn","push","err","f","_applyRenderWhitespace","continuesWithWrappedLine","color","theme","getColor","USE_SVG","renderWithSVG","lineContent","content","len","stopRenderingLineAfter","length","Math","min","fauxIndentLength","onlyBoundary","onlyTrailing","lineHeight","middotWidth","wsmiddotWidth","spaceWidth","wsmiddotDiff","abs","middotDiff","renderSpaceCharCode","canUseHalfwidthRightwardsArrow","result","lineIsEmptyOrWhitespace","firstNonWhitespaceIndex","lastNonWhitespaceIndex","currentSelectionIndex","currentSelection","maxLeft","charIndex","chCode","charCodeAt","endOffset","prevChCode","nextChCode","prevCharCode","isSingleTrailingSpace","startOffset","visibleRangeForPosition","max","left","_renderArrow","concat","toFixed","String","fromCharCode","round","strokeWidth","width","dy","dx","p1","x","y","p2","p3","p4","p5","p6","p7","p8","p9","p10","p","parts","map","join","render","config","options","fontInfo","get","experimentalWhitespaceRendering","other"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/whitespace/whitespace.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './whitespace.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { LineRange } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorWhitespaces } from '../../../common/core/editorColorRegistry.js';\nexport class WhitespaceOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        this._options = new WhitespaceOptions(this._context.configuration);\n        this._selection = [];\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const newOptions = new WhitespaceOptions(this._context.configuration);\n        if (this._options.equals(newOptions)) {\n            return e.hasChanged(145 /* EditorOption.layoutInfo */);\n        }\n        this._options = newOptions;\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selection = e.selections;\n        if (this._options.renderWhitespace === 'selection') {\n            return true;\n        }\n        return false;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        if (this._options.renderWhitespace === 'none') {\n            this._renderResult = null;\n            return;\n        }\n        const startLineNumber = ctx.visibleRange.startLineNumber;\n        const endLineNumber = ctx.visibleRange.endLineNumber;\n        const lineCount = endLineNumber - startLineNumber + 1;\n        const needed = new Array(lineCount);\n        for (let i = 0; i < lineCount; i++) {\n            needed[i] = true;\n        }\n        const viewportData = this._context.viewModel.getMinimapLinesRenderingData(ctx.viewportData.startLineNumber, ctx.viewportData.endLineNumber, needed);\n        this._renderResult = [];\n        for (let lineNumber = ctx.viewportData.startLineNumber; lineNumber <= ctx.viewportData.endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - ctx.viewportData.startLineNumber;\n            const lineData = viewportData.data[lineIndex];\n            let selectionsOnLine = null;\n            if (this._options.renderWhitespace === 'selection') {\n                const selections = this._selection;\n                for (const selection of selections) {\n                    if (selection.endLineNumber < lineNumber || selection.startLineNumber > lineNumber) {\n                        // Selection does not intersect line\n                        continue;\n                    }\n                    const startColumn = (selection.startLineNumber === lineNumber ? selection.startColumn : lineData.minColumn);\n                    const endColumn = (selection.endLineNumber === lineNumber ? selection.endColumn : lineData.maxColumn);\n                    if (startColumn < endColumn) {\n                        if (!selectionsOnLine) {\n                            selectionsOnLine = [];\n                        }\n                        selectionsOnLine.push(new LineRange(startColumn - 1, endColumn - 1));\n                    }\n                }\n            }\n            this._renderResult[lineIndex] = this._applyRenderWhitespace(ctx, lineNumber, selectionsOnLine, lineData);\n        }\n    }\n    _applyRenderWhitespace(ctx, lineNumber, selections, lineData) {\n        if (this._options.renderWhitespace === 'selection' && !selections) {\n            return '';\n        }\n        if (this._options.renderWhitespace === 'trailing' && lineData.continuesWithWrappedLine) {\n            return '';\n        }\n        const color = this._context.theme.getColor(editorWhitespaces);\n        const USE_SVG = this._options.renderWithSVG;\n        const lineContent = lineData.content;\n        const len = (this._options.stopRenderingLineAfter === -1 ? lineContent.length : Math.min(this._options.stopRenderingLineAfter, lineContent.length));\n        const continuesWithWrappedLine = lineData.continuesWithWrappedLine;\n        const fauxIndentLength = lineData.minColumn - 1;\n        const onlyBoundary = (this._options.renderWhitespace === 'boundary');\n        const onlyTrailing = (this._options.renderWhitespace === 'trailing');\n        const lineHeight = this._options.lineHeight;\n        const middotWidth = this._options.middotWidth;\n        const wsmiddotWidth = this._options.wsmiddotWidth;\n        const spaceWidth = this._options.spaceWidth;\n        const wsmiddotDiff = Math.abs(wsmiddotWidth - spaceWidth);\n        const middotDiff = Math.abs(middotWidth - spaceWidth);\n        // U+2E31 - WORD SEPARATOR MIDDLE DOT\n        // U+00B7 - MIDDLE DOT\n        const renderSpaceCharCode = (wsmiddotDiff < middotDiff ? 0x2E31 : 0xB7);\n        const canUseHalfwidthRightwardsArrow = this._options.canUseHalfwidthRightwardsArrow;\n        let result = '';\n        let lineIsEmptyOrWhitespace = false;\n        let firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n        let lastNonWhitespaceIndex;\n        if (firstNonWhitespaceIndex === -1) {\n            lineIsEmptyOrWhitespace = true;\n            firstNonWhitespaceIndex = len;\n            lastNonWhitespaceIndex = len;\n        }\n        else {\n            lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n        }\n        let currentSelectionIndex = 0;\n        let currentSelection = selections && selections[currentSelectionIndex];\n        let maxLeft = 0;\n        for (let charIndex = fauxIndentLength; charIndex < len; charIndex++) {\n            const chCode = lineContent.charCodeAt(charIndex);\n            if (currentSelection && charIndex >= currentSelection.endOffset) {\n                currentSelectionIndex++;\n                currentSelection = selections && selections[currentSelectionIndex];\n            }\n            if (chCode !== 9 /* CharCode.Tab */ && chCode !== 32 /* CharCode.Space */) {\n                continue;\n            }\n            if (onlyTrailing && !lineIsEmptyOrWhitespace && charIndex <= lastNonWhitespaceIndex) {\n                // If rendering only trailing whitespace, check that the charIndex points to trailing whitespace.\n                continue;\n            }\n            if (onlyBoundary && charIndex >= firstNonWhitespaceIndex && charIndex <= lastNonWhitespaceIndex && chCode === 32 /* CharCode.Space */) {\n                // rendering only boundary whitespace\n                const prevChCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const nextChCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* CharCode.Null */);\n                if (prevChCode !== 32 /* CharCode.Space */ && nextChCode !== 32 /* CharCode.Space */) {\n                    continue;\n                }\n            }\n            if (onlyBoundary && continuesWithWrappedLine && charIndex === len - 1) {\n                const prevCharCode = (charIndex - 1 >= 0 ? lineContent.charCodeAt(charIndex - 1) : 0 /* CharCode.Null */);\n                const isSingleTrailingSpace = (chCode === 32 /* CharCode.Space */ && (prevCharCode !== 32 /* CharCode.Space */ && prevCharCode !== 9 /* CharCode.Tab */));\n                if (isSingleTrailingSpace) {\n                    continue;\n                }\n            }\n            if (selections && (!currentSelection || currentSelection.startOffset > charIndex || currentSelection.endOffset <= charIndex)) {\n                // If rendering whitespace on selection, check that the charIndex falls within a selection\n                continue;\n            }\n            const visibleRange = ctx.visibleRangeForPosition(new Position(lineNumber, charIndex + 1));\n            if (!visibleRange) {\n                continue;\n            }\n            if (USE_SVG) {\n                maxLeft = Math.max(maxLeft, visibleRange.left);\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += this._renderArrow(lineHeight, spaceWidth, visibleRange.left);\n                }\n                else {\n                    result += `<circle cx=\"${(visibleRange.left + spaceWidth / 2).toFixed(2)}\" cy=\"${(lineHeight / 2).toFixed(2)}\" r=\"${(spaceWidth / 7).toFixed(2)}\" />`;\n                }\n            }\n            else {\n                if (chCode === 9 /* CharCode.Tab */) {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${canUseHalfwidthRightwardsArrow ? String.fromCharCode(0xFFEB) : String.fromCharCode(0x2192)}</div>`;\n                }\n                else {\n                    result += `<div class=\"mwh\" style=\"left:${visibleRange.left}px;height:${lineHeight}px;\">${String.fromCharCode(renderSpaceCharCode)}</div>`;\n                }\n            }\n        }\n        if (USE_SVG) {\n            maxLeft = Math.round(maxLeft + spaceWidth);\n            return (`<svg style=\"bottom:0;position:absolute;width:${maxLeft}px;height:${lineHeight}px\" viewBox=\"0 0 ${maxLeft} ${lineHeight}\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"${color}\">`\n                + result\n                + `</svg>`);\n        }\n        return result;\n    }\n    _renderArrow(lineHeight, spaceWidth, left) {\n        const strokeWidth = spaceWidth / 7;\n        const width = spaceWidth;\n        const dy = lineHeight / 2;\n        const dx = left;\n        const p1 = { x: 0, y: strokeWidth / 2 };\n        const p2 = { x: 100 / 125 * width, y: p1.y };\n        const p3 = { x: p2.x - 0.2 * p2.x, y: p2.y + 0.2 * p2.x };\n        const p4 = { x: p3.x + 0.1 * p2.x, y: p3.y + 0.1 * p2.x };\n        const p5 = { x: p4.x + 0.35 * p2.x, y: p4.y - 0.35 * p2.x };\n        const p6 = { x: p5.x, y: -p5.y };\n        const p7 = { x: p4.x, y: -p4.y };\n        const p8 = { x: p3.x, y: -p3.y };\n        const p9 = { x: p2.x, y: -p2.y };\n        const p10 = { x: p1.x, y: -p1.y };\n        const p = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10];\n        const parts = p.map((p) => `${(dx + p.x).toFixed(2)} ${(dy + p.y).toFixed(2)}`).join(' L ');\n        return `<path d=\"M ${parts}\" />`;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\nclass WhitespaceOptions {\n    constructor(config) {\n        const options = config.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const experimentalWhitespaceRendering = options.get(38 /* EditorOption.experimentalWhitespaceRendering */);\n        if (experimentalWhitespaceRendering === 'off') {\n            // whitespace is rendered in the view line\n            this.renderWhitespace = 'none';\n            this.renderWithSVG = false;\n        }\n        else if (experimentalWhitespaceRendering === 'svg') {\n            this.renderWhitespace = options.get(99 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = true;\n        }\n        else {\n            this.renderWhitespace = options.get(99 /* EditorOption.renderWhitespace */);\n            this.renderWithSVG = false;\n        }\n        this.spaceWidth = fontInfo.spaceWidth;\n        this.middotWidth = fontInfo.middotWidth;\n        this.wsmiddotWidth = fontInfo.wsmiddotWidth;\n        this.canUseHalfwidthRightwardsArrow = fontInfo.canUseHalfwidthRightwardsArrow;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.stopRenderingLineAfter = options.get(117 /* EditorOption.stopRenderingLineAfter */);\n    }\n    equals(other) {\n        return (this.renderWhitespace === other.renderWhitespace\n            && this.renderWithSVG === other.renderWithSVG\n            && this.spaceWidth === other.spaceWidth\n            && this.middotWidth === other.middotWidth\n            && this.wsmiddotWidth === other.wsmiddotWidth\n            && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow\n            && this.lineHeight === other.lineHeight\n            && this.stopRenderingLineAfter === other.stopRenderingLineAfter);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}