{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _typeof from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.create.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar ModelService_1;\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { TextModel } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nfunction MODEL_ID(resource) {\n  return resource.toString();\n}\nvar ModelData = /*#__PURE__*/function () {\n  function ModelData(model, onWillDispose, onDidChangeLanguage) {\n    _classCallCheck(this, ModelData);\n    this.model = model;\n    this._modelEventListeners = new DisposableStore();\n    this.model = model;\n    this._modelEventListeners.add(model.onWillDispose(function () {\n      return onWillDispose(model);\n    }));\n    this._modelEventListeners.add(model.onDidChangeLanguage(function (e) {\n      return onDidChangeLanguage(model, e);\n    }));\n  }\n  return _createClass(ModelData, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._modelEventListeners.dispose();\n    }\n  }]);\n}();\nvar DEFAULT_EOL = platform.isLinux || platform.isMacintosh ? 1 /* DefaultEndOfLine.LF */ : 2 /* DefaultEndOfLine.CRLF */;\nvar DisposedModelInfo = /*#__PURE__*/_createClass(function DisposedModelInfo(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n  _classCallCheck(this, DisposedModelInfo);\n  this.uri = uri;\n  this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n  this.time = time;\n  this.sharesUndoRedoStack = sharesUndoRedoStack;\n  this.heapSize = heapSize;\n  this.sha1 = sha1;\n  this.versionId = versionId;\n  this.alternativeVersionId = alternativeVersionId;\n});\nvar ModelService = ModelService_1 = /*#__PURE__*/function (_Disposable) {\n  function ModelService(_configurationService, _resourcePropertiesService, _undoRedoService, _languageService, _languageConfigurationService) {\n    var _this;\n    _classCallCheck(this, ModelService);\n    _this = _callSuper(this, ModelService);\n    _this._configurationService = _configurationService;\n    _this._resourcePropertiesService = _resourcePropertiesService;\n    _this._undoRedoService = _undoRedoService;\n    _this._languageService = _languageService;\n    _this._languageConfigurationService = _languageConfigurationService;\n    _this._onModelAdded = _this._register(new Emitter());\n    _this.onModelAdded = _this._onModelAdded.event;\n    _this._onModelRemoved = _this._register(new Emitter());\n    _this.onModelRemoved = _this._onModelRemoved.event;\n    _this._onModelModeChanged = _this._register(new Emitter());\n    _this.onModelLanguageChanged = _this._onModelModeChanged.event;\n    _this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n    _this._models = {};\n    _this._disposedModels = new Map();\n    _this._disposedModelsHeapSize = 0;\n    _this._register(_this._configurationService.onDidChangeConfiguration(function (e) {\n      return _this._updateModelOptions(e);\n    }));\n    _this._updateModelOptions(undefined);\n    return _this;\n  }\n  _inherits(ModelService, _Disposable);\n  return _createClass(ModelService, [{\n    key: \"_getEOL\",\n    value: function _getEOL(resource, language) {\n      if (resource) {\n        return this._resourcePropertiesService.getEOL(resource, language);\n      }\n      var eol = this._configurationService.getValue('files.eol', {\n        overrideIdentifier: language\n      });\n      if (eol && typeof eol === 'string' && eol !== 'auto') {\n        return eol;\n      }\n      return platform.OS === 3 /* platform.OperatingSystem.Linux */ || platform.OS === 2 /* platform.OperatingSystem.Macintosh */ ? '\\n' : '\\r\\n';\n    }\n  }, {\n    key: \"_shouldRestoreUndoStack\",\n    value: function _shouldRestoreUndoStack() {\n      var result = this._configurationService.getValue('files.restoreUndoStack');\n      if (typeof result === 'boolean') {\n        return result;\n      }\n      return true;\n    }\n  }, {\n    key: \"getCreationOptions\",\n    value: function getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget) {\n      var language = typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId;\n      var creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n      if (!creationOptions) {\n        var editor = this._configurationService.getValue('editor', {\n          overrideIdentifier: language,\n          resource: resource\n        });\n        var eol = this._getEOL(resource, language);\n        creationOptions = ModelService_1._readModelOptions({\n          editor: editor,\n          eol: eol\n        }, isForSimpleWidget);\n        this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n      }\n      return creationOptions;\n    }\n  }, {\n    key: \"_updateModelOptions\",\n    value: function _updateModelOptions(e) {\n      var oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n      this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n      // Update options on all models\n      var keys = Object.keys(this._models);\n      for (var i = 0, len = keys.length; i < len; i++) {\n        var modelId = keys[i];\n        var modelData = this._models[modelId];\n        var language = modelData.model.getLanguageId();\n        var uri = modelData.model.uri;\n        if (e && !e.affectsConfiguration('editor', {\n          overrideIdentifier: language,\n          resource: uri\n        }) && !e.affectsConfiguration('files.eol', {\n          overrideIdentifier: language,\n          resource: uri\n        })) {\n          continue; // perf: skip if this model is not affected by configuration change\n        }\n        var oldOptions = oldOptionsByLanguageAndResource[language + uri];\n        var newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n        ModelService_1._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n      }\n    }\n  }, {\n    key: \"_insertDisposedModel\",\n    value:\n    // --- begin IModelService\n    function _insertDisposedModel(disposedModelData) {\n      this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n      this._disposedModelsHeapSize += disposedModelData.heapSize;\n    }\n  }, {\n    key: \"_removeDisposedModel\",\n    value: function _removeDisposedModel(resource) {\n      var disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n      if (disposedModelData) {\n        this._disposedModelsHeapSize -= disposedModelData.heapSize;\n      }\n      this._disposedModels[\"delete\"](MODEL_ID(resource));\n      return disposedModelData;\n    }\n  }, {\n    key: \"_ensureDisposedModelsHeapSize\",\n    value: function _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n      if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n        // we must remove some old undo stack elements to free up some memory\n        var disposedModels = [];\n        this._disposedModels.forEach(function (entry) {\n          if (!entry.sharesUndoRedoStack) {\n            disposedModels.push(entry);\n          }\n        });\n        disposedModels.sort(function (a, b) {\n          return a.time - b.time;\n        });\n        while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n          var disposedModel = disposedModels.shift();\n          this._removeDisposedModel(disposedModel.uri);\n          if (disposedModel.initialUndoRedoSnapshot !== null) {\n            this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_createModelData\",\n    value: function _createModelData(value, languageIdOrSelection, resource, isForSimpleWidget) {\n      var _this2 = this;\n      // create & save the model\n      var options = this.getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget);\n      var model = new TextModel(value, languageIdOrSelection, options, resource, this._undoRedoService, this._languageService, this._languageConfigurationService);\n      if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n        var disposedModelData = this._removeDisposedModel(resource);\n        var elements = this._undoRedoService.getElements(resource);\n        var sha1Computer = this._getSHA1Computer();\n        var sha1IsEqual = sha1Computer.canComputeSHA1(model) ? sha1Computer.computeSHA1(model) === disposedModelData.sha1 : false;\n        if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n          var _iterator = _createForOfIteratorHelper(elements.past),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var element = _step.value;\n              if (isEditStackElement(element) && element.matchesResource(resource)) {\n                element.setModel(model);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          var _iterator2 = _createForOfIteratorHelper(elements.future),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _element = _step2.value;\n              if (isEditStackElement(_element) && _element.matchesResource(resource)) {\n                _element.setModel(model);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          this._undoRedoService.setElementsValidFlag(resource, true, function (element) {\n            return isEditStackElement(element) && element.matchesResource(resource);\n          });\n          if (sha1IsEqual) {\n            model._overwriteVersionId(disposedModelData.versionId);\n            model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n            model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n          }\n        } else {\n          if (disposedModelData.initialUndoRedoSnapshot !== null) {\n            this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n          }\n        }\n      }\n      var modelId = MODEL_ID(model.uri);\n      if (this._models[modelId]) {\n        // There already exists a model with this id => this is a programmer error\n        throw new Error('ModelService: Cannot add model because it already exists!');\n      }\n      var modelData = new ModelData(model, function (model) {\n        return _this2._onWillDispose(model);\n      }, function (model, e) {\n        return _this2._onDidChangeLanguage(model, e);\n      });\n      this._models[modelId] = modelData;\n      return modelData;\n    }\n  }, {\n    key: \"createModel\",\n    value: function createModel(value, languageSelection, resource) {\n      var isForSimpleWidget = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var modelData;\n      if (languageSelection) {\n        modelData = this._createModelData(value, languageSelection, resource, isForSimpleWidget);\n      } else {\n        modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n      }\n      this._onModelAdded.fire(modelData.model);\n      return modelData.model;\n    }\n  }, {\n    key: \"getModels\",\n    value: function getModels() {\n      var ret = [];\n      var keys = Object.keys(this._models);\n      for (var i = 0, len = keys.length; i < len; i++) {\n        var modelId = keys[i];\n        ret.push(this._models[modelId].model);\n      }\n      return ret;\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel(resource) {\n      var modelId = MODEL_ID(resource);\n      var modelData = this._models[modelId];\n      if (!modelData) {\n        return null;\n      }\n      return modelData.model;\n    }\n    // --- end IModelService\n  }, {\n    key: \"_schemaShouldMaintainUndoRedoElements\",\n    value: function _schemaShouldMaintainUndoRedoElements(resource) {\n      return resource.scheme === Schemas.file || resource.scheme === Schemas.vscodeRemote || resource.scheme === Schemas.vscodeUserData || resource.scheme === Schemas.vscodeNotebookCell || resource.scheme === 'fake-fs' // for tests\n      ;\n    }\n  }, {\n    key: \"_onWillDispose\",\n    value: function _onWillDispose(model) {\n      var modelId = MODEL_ID(model.uri);\n      var modelData = this._models[modelId];\n      var sharesUndoRedoStack = this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString();\n      var maintainUndoRedoStack = false;\n      var heapSize = 0;\n      if (sharesUndoRedoStack || this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri)) {\n        var elements = this._undoRedoService.getElements(model.uri);\n        if (elements.past.length > 0 || elements.future.length > 0) {\n          var _iterator3 = _createForOfIteratorHelper(elements.past),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var element = _step3.value;\n              if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                maintainUndoRedoStack = true;\n                heapSize += element.heapSize(model.uri);\n                element.setModel(model.uri); // remove reference from text buffer instance\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          var _iterator4 = _createForOfIteratorHelper(elements.future),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var _element2 = _step4.value;\n              if (isEditStackElement(_element2) && _element2.matchesResource(model.uri)) {\n                maintainUndoRedoStack = true;\n                heapSize += _element2.heapSize(model.uri);\n                _element2.setModel(model.uri); // remove reference from text buffer instance\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      }\n      var maxMemory = ModelService_1.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n      var sha1Computer = this._getSHA1Computer();\n      if (!maintainUndoRedoStack) {\n        if (!sharesUndoRedoStack) {\n          var initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n          if (initialUndoRedoSnapshot !== null) {\n            this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n          }\n        }\n      } else if (!sharesUndoRedoStack && (heapSize > maxMemory || !sha1Computer.canComputeSHA1(model))) {\n        // the undo stack for this file would never fit in the configured memory or the file is very large, so don't bother with it.\n        var _initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n        if (_initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(_initialUndoRedoSnapshot);\n        }\n      } else {\n        this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n        // We only invalidate the elements, but they remain in the undo-redo service.\n        this._undoRedoService.setElementsValidFlag(model.uri, false, function (element) {\n          return isEditStackElement(element) && element.matchesResource(model.uri);\n        });\n        this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, sha1Computer.computeSHA1(model), model.getVersionId(), model.getAlternativeVersionId()));\n      }\n      delete this._models[modelId];\n      modelData.dispose();\n      // clean up cache\n      delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n      this._onModelRemoved.fire(model);\n    }\n  }, {\n    key: \"_onDidChangeLanguage\",\n    value: function _onDidChangeLanguage(model, e) {\n      var oldLanguageId = e.oldLanguage;\n      var newLanguageId = model.getLanguageId();\n      var oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n      var newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n      ModelService_1._setModelOptionsForModel(model, newOptions, oldOptions);\n      this._onModelModeChanged.fire({\n        model: model,\n        oldLanguageId: oldLanguageId\n      });\n    }\n  }, {\n    key: \"_getSHA1Computer\",\n    value: function _getSHA1Computer() {\n      return new DefaultModelSHA1Computer();\n    }\n  }], [{\n    key: \"_readModelOptions\",\n    value: function _readModelOptions(config, isForSimpleWidget) {\n      var _a;\n      var tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n      if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n        var parsedTabSize = parseInt(config.editor.tabSize, 10);\n        if (!isNaN(parsedTabSize)) {\n          tabSize = parsedTabSize;\n        }\n        if (tabSize < 1) {\n          tabSize = 1;\n        }\n      }\n      var indentSize = 'tabSize';\n      if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n        var parsedIndentSize = parseInt(config.editor.indentSize, 10);\n        if (!isNaN(parsedIndentSize)) {\n          indentSize = Math.max(parsedIndentSize, 1);\n        }\n      }\n      var insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n      if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n        insertSpaces = config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces);\n      }\n      var newDefaultEOL = DEFAULT_EOL;\n      var eol = config.eol;\n      if (eol === '\\r\\n') {\n        newDefaultEOL = 2 /* DefaultEndOfLine.CRLF */;\n      } else if (eol === '\\n') {\n        newDefaultEOL = 1 /* DefaultEndOfLine.LF */;\n      }\n      var trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n      if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n        trimAutoWhitespace = config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace);\n      }\n      var detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n      if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n        detectIndentation = config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation);\n      }\n      var largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n      if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n        largeFileOptimizations = config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations);\n      }\n      var bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n      if (((_a = config.editor) === null || _a === void 0 ? void 0 : _a.bracketPairColorization) && _typeof(config.editor.bracketPairColorization) === 'object') {\n        bracketPairColorizationOptions = {\n          enabled: !!config.editor.bracketPairColorization.enabled,\n          independentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n        };\n      }\n      return {\n        isForSimpleWidget: isForSimpleWidget,\n        tabSize: tabSize,\n        indentSize: indentSize,\n        insertSpaces: insertSpaces,\n        detectIndentation: detectIndentation,\n        defaultEOL: newDefaultEOL,\n        trimAutoWhitespace: trimAutoWhitespace,\n        largeFileOptimizations: largeFileOptimizations,\n        bracketPairColorizationOptions: bracketPairColorizationOptions\n      };\n    }\n  }, {\n    key: \"_setModelOptionsForModel\",\n    value: function _setModelOptionsForModel(model, newOptions, currentOptions) {\n      if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n        model.setEOL(newOptions.defaultEOL === 1 /* DefaultEndOfLine.LF */ ? 0 /* EndOfLineSequence.LF */ : 1 /* EndOfLineSequence.CRLF */);\n      }\n      if (currentOptions && currentOptions.detectIndentation === newOptions.detectIndentation && currentOptions.insertSpaces === newOptions.insertSpaces && currentOptions.tabSize === newOptions.tabSize && currentOptions.indentSize === newOptions.indentSize && currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace && equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)) {\n        // Same indent opts, no need to touch the model\n        return;\n      }\n      if (newOptions.detectIndentation) {\n        model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n        model.updateOptions({\n          trimAutoWhitespace: newOptions.trimAutoWhitespace,\n          bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n        });\n      } else {\n        model.updateOptions({\n          insertSpaces: newOptions.insertSpaces,\n          tabSize: newOptions.tabSize,\n          indentSize: newOptions.indentSize,\n          trimAutoWhitespace: newOptions.trimAutoWhitespace,\n          bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n        });\n      }\n    }\n  }]);\n}(Disposable);\nModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\nModelService = ModelService_1 = __decorate([__param(0, IConfigurationService), __param(1, ITextResourcePropertiesService), __param(2, IUndoRedoService), __param(3, ILanguageService), __param(4, ILanguageConfigurationService)], ModelService);\nexport { ModelService };\nexport var DefaultModelSHA1Computer = /*#__PURE__*/function () {\n  function DefaultModelSHA1Computer() {\n    _classCallCheck(this, DefaultModelSHA1Computer);\n  }\n  return _createClass(DefaultModelSHA1Computer, [{\n    key: \"canComputeSHA1\",\n    value: function canComputeSHA1(model) {\n      return model.getValueLength() <= DefaultModelSHA1Computer.MAX_MODEL_SIZE;\n    }\n  }, {\n    key: \"computeSHA1\",\n    value: function computeSHA1(model) {\n      // compute the sha1\n      var shaComputer = new StringSHA1();\n      var snapshot = model.createSnapshot();\n      var text;\n      while (text = snapshot.read()) {\n        shaComputer.update(text);\n      }\n      return shaComputer.digest();\n    }\n  }]);\n}();\nDefaultModelSHA1Computer.MAX_MODEL_SIZE = 10 * 1024 * 1024; // takes 200ms to compute a sha1 on a 10MB model on a new machine","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","_typeof","decorate","i","defineProperty","__param","paramIndex","decorator","ModelService_1","Emitter","Disposable","DisposableStore","platform","TextModel","EDITOR_MODEL_DEFAULTS","PLAINTEXT_LANGUAGE_ID","ILanguageService","ITextResourcePropertiesService","IConfigurationService","IUndoRedoService","StringSHA1","isEditStackElement","Schemas","equals","ILanguageConfigurationService","MODEL_ID","resource","toString","ModelData","model","onWillDispose","onDidChangeLanguage","_classCallCheck","_modelEventListeners","add","e","_createClass","value","dispose","DEFAULT_EOL","isLinux","isMacintosh","DisposedModelInfo","uri","initialUndoRedoSnapshot","time","sharesUndoRedoStack","heapSize","sha1","versionId","alternativeVersionId","ModelService","_Disposable","_configurationService","_resourcePropertiesService","_undoRedoService","_languageService","_languageConfigurationService","_this","_callSuper","_onModelAdded","_register","onModelAdded","event","_onModelRemoved","onModelRemoved","_onModelModeChanged","onModelLanguageChanged","_modelCreationOptionsByLanguageAndResource","create","_models","_disposedModels","Map","_disposedModelsHeapSize","onDidChangeConfiguration","_updateModelOptions","undefined","_inherits","_getEOL","language","getEOL","eol","getValue","overrideIdentifier","OS","_shouldRestoreUndoStack","result","getCreationOptions","languageIdOrSelection","isForSimpleWidget","languageId","creationOptions","editor","_readModelOptions","oldOptionsByLanguageAndResource","keys","len","modelId","modelData","getLanguageId","affectsConfiguration","oldOptions","newOptions","_setModelOptionsForModel","_insertDisposedModel","disposedModelData","set","_removeDisposedModel","get","_ensureDisposedModelsHeapSize","maxModelsHeapSize","disposedModels","forEach","entry","push","sort","a","b","disposedModel","shift","restoreSnapshot","_createModelData","_this2","options","has","elements","getElements","sha1Computer","_getSHA1Computer","sha1IsEqual","canComputeSHA1","computeSHA1","_iterator","_createForOfIteratorHelper","past","_step","s","n","done","element","matchesResource","setModel","err","f","_iterator2","future","_step2","setElementsValidFlag","_overwriteVersionId","_overwriteAlternativeVersionId","_overwriteInitialUndoRedoSnapshot","Error","_onWillDispose","_onDidChangeLanguage","createModel","languageSelection","fire","getModels","ret","getModel","_schemaShouldMaintainUndoRedoElements","scheme","file","vscodeRemote","vscodeUserData","vscodeNotebookCell","getUriComparisonKey","maintainUndoRedoStack","_iterator3","_step3","_iterator4","_step4","maxMemory","MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK","getInitialUndoRedoSnapshot","Date","now","getVersionId","getAlternativeVersionId","oldLanguageId","oldLanguage","newLanguageId","DefaultModelSHA1Computer","config","_a","tabSize","parsedTabSize","parseInt","isNaN","indentSize","parsedIndentSize","Math","max","insertSpaces","Boolean","newDefaultEOL","trimAutoWhitespace","detectIndentation","largeFileOptimizations","bracketPairColorizationOptions","bracketPairColorization","enabled","independentColorPoolPerBracketType","defaultEOL","currentOptions","getLineCount","setEOL","updateOptions","bracketColorizationOptions","getValueLength","MAX_MODEL_SIZE","shaComputer","snapshot","createSnapshot","text","read","update","digest"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar ModelService_1;\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { TextModel } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ILanguageService } from '../languages/language.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nfunction MODEL_ID(resource) {\n    return resource.toString();\n}\nclass ModelData {\n    constructor(model, onWillDispose, onDidChangeLanguage) {\n        this.model = model;\n        this._modelEventListeners = new DisposableStore();\n        this.model = model;\n        this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n        this._modelEventListeners.add(model.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)));\n    }\n    dispose() {\n        this._modelEventListeners.dispose();\n    }\n}\nconst DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? 1 /* DefaultEndOfLine.LF */ : 2 /* DefaultEndOfLine.CRLF */;\nclass DisposedModelInfo {\n    constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n        this.uri = uri;\n        this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n        this.time = time;\n        this.sharesUndoRedoStack = sharesUndoRedoStack;\n        this.heapSize = heapSize;\n        this.sha1 = sha1;\n        this.versionId = versionId;\n        this.alternativeVersionId = alternativeVersionId;\n    }\n}\nlet ModelService = ModelService_1 = class ModelService extends Disposable {\n    constructor(_configurationService, _resourcePropertiesService, _undoRedoService, _languageService, _languageConfigurationService) {\n        super();\n        this._configurationService = _configurationService;\n        this._resourcePropertiesService = _resourcePropertiesService;\n        this._undoRedoService = _undoRedoService;\n        this._languageService = _languageService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._onModelAdded = this._register(new Emitter());\n        this.onModelAdded = this._onModelAdded.event;\n        this._onModelRemoved = this._register(new Emitter());\n        this.onModelRemoved = this._onModelRemoved.event;\n        this._onModelModeChanged = this._register(new Emitter());\n        this.onModelLanguageChanged = this._onModelModeChanged.event;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        this._models = {};\n        this._disposedModels = new Map();\n        this._disposedModelsHeapSize = 0;\n        this._register(this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions(e)));\n        this._updateModelOptions(undefined);\n    }\n    static _readModelOptions(config, isForSimpleWidget) {\n        var _a;\n        let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n        if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n            const parsedTabSize = parseInt(config.editor.tabSize, 10);\n            if (!isNaN(parsedTabSize)) {\n                tabSize = parsedTabSize;\n            }\n            if (tabSize < 1) {\n                tabSize = 1;\n            }\n        }\n        let indentSize = 'tabSize';\n        if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n            const parsedIndentSize = parseInt(config.editor.indentSize, 10);\n            if (!isNaN(parsedIndentSize)) {\n                indentSize = Math.max(parsedIndentSize, 1);\n            }\n        }\n        let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n        if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n            insertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n        }\n        let newDefaultEOL = DEFAULT_EOL;\n        const eol = config.eol;\n        if (eol === '\\r\\n') {\n            newDefaultEOL = 2 /* DefaultEndOfLine.CRLF */;\n        }\n        else if (eol === '\\n') {\n            newDefaultEOL = 1 /* DefaultEndOfLine.LF */;\n        }\n        let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n        if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n            trimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n        }\n        let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n        if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n            detectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n        }\n        let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n        if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n            largeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\n        }\n        let bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n        if (((_a = config.editor) === null || _a === void 0 ? void 0 : _a.bracketPairColorization) && typeof config.editor.bracketPairColorization === 'object') {\n            bracketPairColorizationOptions = {\n                enabled: !!config.editor.bracketPairColorization.enabled,\n                independentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n            };\n        }\n        return {\n            isForSimpleWidget: isForSimpleWidget,\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            detectIndentation: detectIndentation,\n            defaultEOL: newDefaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            largeFileOptimizations: largeFileOptimizations,\n            bracketPairColorizationOptions\n        };\n    }\n    _getEOL(resource, language) {\n        if (resource) {\n            return this._resourcePropertiesService.getEOL(resource, language);\n        }\n        const eol = this._configurationService.getValue('files.eol', { overrideIdentifier: language });\n        if (eol && typeof eol === 'string' && eol !== 'auto') {\n            return eol;\n        }\n        return platform.OS === 3 /* platform.OperatingSystem.Linux */ || platform.OS === 2 /* platform.OperatingSystem.Macintosh */ ? '\\n' : '\\r\\n';\n    }\n    _shouldRestoreUndoStack() {\n        const result = this._configurationService.getValue('files.restoreUndoStack');\n        if (typeof result === 'boolean') {\n            return result;\n        }\n        return true;\n    }\n    getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget) {\n        const language = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n        let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n        if (!creationOptions) {\n            const editor = this._configurationService.getValue('editor', { overrideIdentifier: language, resource });\n            const eol = this._getEOL(resource, language);\n            creationOptions = ModelService_1._readModelOptions({ editor, eol }, isForSimpleWidget);\n            this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n        }\n        return creationOptions;\n    }\n    _updateModelOptions(e) {\n        const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        // Update options on all models\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            const modelData = this._models[modelId];\n            const language = modelData.model.getLanguageId();\n            const uri = modelData.model.uri;\n            if (e && !e.affectsConfiguration('editor', { overrideIdentifier: language, resource: uri }) && !e.affectsConfiguration('files.eol', { overrideIdentifier: language, resource: uri })) {\n                continue; // perf: skip if this model is not affected by configuration change\n            }\n            const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n            const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n            ModelService_1._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n        }\n    }\n    static _setModelOptionsForModel(model, newOptions, currentOptions) {\n        if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n            model.setEOL(newOptions.defaultEOL === 1 /* DefaultEndOfLine.LF */ ? 0 /* EndOfLineSequence.LF */ : 1 /* EndOfLineSequence.CRLF */);\n        }\n        if (currentOptions\n            && (currentOptions.detectIndentation === newOptions.detectIndentation)\n            && (currentOptions.insertSpaces === newOptions.insertSpaces)\n            && (currentOptions.tabSize === newOptions.tabSize)\n            && (currentOptions.indentSize === newOptions.indentSize)\n            && (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)\n            && equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)) {\n            // Same indent opts, no need to touch the model\n            return;\n        }\n        if (newOptions.detectIndentation) {\n            model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n            model.updateOptions({\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n        else {\n            model.updateOptions({\n                insertSpaces: newOptions.insertSpaces,\n                tabSize: newOptions.tabSize,\n                indentSize: newOptions.indentSize,\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n    }\n    // --- begin IModelService\n    _insertDisposedModel(disposedModelData) {\n        this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n        this._disposedModelsHeapSize += disposedModelData.heapSize;\n    }\n    _removeDisposedModel(resource) {\n        const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n        if (disposedModelData) {\n            this._disposedModelsHeapSize -= disposedModelData.heapSize;\n        }\n        this._disposedModels.delete(MODEL_ID(resource));\n        return disposedModelData;\n    }\n    _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n        if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n            // we must remove some old undo stack elements to free up some memory\n            const disposedModels = [];\n            this._disposedModels.forEach(entry => {\n                if (!entry.sharesUndoRedoStack) {\n                    disposedModels.push(entry);\n                }\n            });\n            disposedModels.sort((a, b) => a.time - b.time);\n            while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n                const disposedModel = disposedModels.shift();\n                this._removeDisposedModel(disposedModel.uri);\n                if (disposedModel.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n                }\n            }\n        }\n    }\n    _createModelData(value, languageIdOrSelection, resource, isForSimpleWidget) {\n        // create & save the model\n        const options = this.getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget);\n        const model = new TextModel(value, languageIdOrSelection, options, resource, this._undoRedoService, this._languageService, this._languageConfigurationService);\n        if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n            const disposedModelData = this._removeDisposedModel(resource);\n            const elements = this._undoRedoService.getElements(resource);\n            const sha1Computer = this._getSHA1Computer();\n            const sha1IsEqual = (sha1Computer.canComputeSHA1(model)\n                ? sha1Computer.computeSHA1(model) === disposedModelData.sha1\n                : false);\n            if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                this._undoRedoService.setElementsValidFlag(resource, true, (element) => (isEditStackElement(element) && element.matchesResource(resource)));\n                if (sha1IsEqual) {\n                    model._overwriteVersionId(disposedModelData.versionId);\n                    model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n                    model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n            else {\n                if (disposedModelData.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n        }\n        const modelId = MODEL_ID(model.uri);\n        if (this._models[modelId]) {\n            // There already exists a model with this id => this is a programmer error\n            throw new Error('ModelService: Cannot add model because it already exists!');\n        }\n        const modelData = new ModelData(model, (model) => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n        this._models[modelId] = modelData;\n        return modelData;\n    }\n    createModel(value, languageSelection, resource, isForSimpleWidget = false) {\n        let modelData;\n        if (languageSelection) {\n            modelData = this._createModelData(value, languageSelection, resource, isForSimpleWidget);\n        }\n        else {\n            modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n        }\n        this._onModelAdded.fire(modelData.model);\n        return modelData.model;\n    }\n    getModels() {\n        const ret = [];\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            ret.push(this._models[modelId].model);\n        }\n        return ret;\n    }\n    getModel(resource) {\n        const modelId = MODEL_ID(resource);\n        const modelData = this._models[modelId];\n        if (!modelData) {\n            return null;\n        }\n        return modelData.model;\n    }\n    // --- end IModelService\n    _schemaShouldMaintainUndoRedoElements(resource) {\n        return (resource.scheme === Schemas.file\n            || resource.scheme === Schemas.vscodeRemote\n            || resource.scheme === Schemas.vscodeUserData\n            || resource.scheme === Schemas.vscodeNotebookCell\n            || resource.scheme === 'fake-fs' // for tests\n        );\n    }\n    _onWillDispose(model) {\n        const modelId = MODEL_ID(model.uri);\n        const modelData = this._models[modelId];\n        const sharesUndoRedoStack = (this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString());\n        let maintainUndoRedoStack = false;\n        let heapSize = 0;\n        if (sharesUndoRedoStack || (this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri))) {\n            const elements = this._undoRedoService.getElements(model.uri);\n            if (elements.past.length > 0 || elements.future.length > 0) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n            }\n        }\n        const maxMemory = ModelService_1.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n        const sha1Computer = this._getSHA1Computer();\n        if (!maintainUndoRedoStack) {\n            if (!sharesUndoRedoStack) {\n                const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n                if (initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n                }\n            }\n        }\n        else if (!sharesUndoRedoStack && (heapSize > maxMemory || !sha1Computer.canComputeSHA1(model))) {\n            // the undo stack for this file would never fit in the configured memory or the file is very large, so don't bother with it.\n            const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n            if (initialUndoRedoSnapshot !== null) {\n                this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n            }\n        }\n        else {\n            this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n            // We only invalidate the elements, but they remain in the undo-redo service.\n            this._undoRedoService.setElementsValidFlag(model.uri, false, (element) => (isEditStackElement(element) && element.matchesResource(model.uri)));\n            this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, sha1Computer.computeSHA1(model), model.getVersionId(), model.getAlternativeVersionId()));\n        }\n        delete this._models[modelId];\n        modelData.dispose();\n        // clean up cache\n        delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n        this._onModelRemoved.fire(model);\n    }\n    _onDidChangeLanguage(model, e) {\n        const oldLanguageId = e.oldLanguage;\n        const newLanguageId = model.getLanguageId();\n        const oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n        const newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n        ModelService_1._setModelOptionsForModel(model, newOptions, oldOptions);\n        this._onModelModeChanged.fire({ model, oldLanguageId: oldLanguageId });\n    }\n    _getSHA1Computer() {\n        return new DefaultModelSHA1Computer();\n    }\n};\nModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024;\nModelService = ModelService_1 = __decorate([\n    __param(0, IConfigurationService),\n    __param(1, ITextResourcePropertiesService),\n    __param(2, IUndoRedoService),\n    __param(3, ILanguageService),\n    __param(4, ILanguageConfigurationService)\n], ModelService);\nexport { ModelService };\nexport class DefaultModelSHA1Computer {\n    canComputeSHA1(model) {\n        return (model.getValueLength() <= DefaultModelSHA1Computer.MAX_MODEL_SIZE);\n    }\n    computeSHA1(model) {\n        // compute the sha1\n        const shaComputer = new StringSHA1();\n        const snapshot = model.createSnapshot();\n        let text;\n        while ((text = snapshot.read())) {\n            shaComputer.update(text);\n        }\n        return shaComputer.digest();\n    }\n}\nDefaultModelSHA1Computer.MAX_MODEL_SIZE = 10 * 1024 * 1024; // takes 200ms to compute a sha1 on a 10MB model on a new machine\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}