{"ast":null,"code":"import _toConsumableArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.substr.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../../base/common/arrays.js';\nimport { splitLines } from '../../../../base/common/strings.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { SingleTextEdit, TextEdit } from '../../../common/core/textEdit.js';\nexport var GhostText = /*#__PURE__*/function () {\n  function GhostText(lineNumber, parts) {\n    _classCallCheck(this, GhostText);\n    this.lineNumber = lineNumber;\n    this.parts = parts;\n  }\n  return _createClass(GhostText, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.lineNumber === other.lineNumber && this.parts.length === other.parts.length && this.parts.every(function (part, index) {\n        return part.equals(other.parts[index]);\n      });\n    }\n  }, {\n    key: \"renderForScreenReader\",\n    value: function renderForScreenReader(lineText) {\n      if (this.parts.length === 0) {\n        return '';\n      }\n      var lastPart = this.parts[this.parts.length - 1];\n      var cappedLineText = lineText.substr(0, lastPart.column - 1);\n      var text = new TextEdit(_toConsumableArray(this.parts.map(function (p) {\n        return new SingleTextEdit(Range.fromPositions(new Position(1, p.column)), p.lines.join('\\n'));\n      }))).applyToString(cappedLineText);\n      return text.substring(this.parts[0].column - 1);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.parts.every(function (p) {\n        return p.lines.length === 0;\n      });\n    }\n  }, {\n    key: \"lineCount\",\n    get: function get() {\n      return 1 + this.parts.reduce(function (r, p) {\n        return r + p.lines.length - 1;\n      }, 0);\n    }\n  }]);\n}();\nexport var GhostTextPart = /*#__PURE__*/function () {\n  function GhostTextPart(column, text,\n  /**\n   * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.\n  */\n  preview) {\n    _classCallCheck(this, GhostTextPart);\n    this.column = column;\n    this.text = text;\n    this.preview = preview;\n    this.lines = splitLines(this.text);\n  }\n  return _createClass(GhostTextPart, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.column === other.column && this.lines.length === other.lines.length && this.lines.every(function (line, index) {\n        return line === other.lines[index];\n      });\n    }\n  }]);\n}();\nexport var GhostTextReplacement = /*#__PURE__*/function () {\n  function GhostTextReplacement(lineNumber, columnRange, text) {\n    var additionalReservedLineCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, GhostTextReplacement);\n    this.lineNumber = lineNumber;\n    this.columnRange = columnRange;\n    this.text = text;\n    this.additionalReservedLineCount = additionalReservedLineCount;\n    this.parts = [new GhostTextPart(this.columnRange.endColumnExclusive, this.text, false)];\n    this.newLines = splitLines(this.text);\n  }\n  return _createClass(GhostTextReplacement, [{\n    key: \"renderForScreenReader\",\n    value: function renderForScreenReader(_lineText) {\n      return this.newLines.join('\\n');\n    }\n  }, {\n    key: \"lineCount\",\n    get: function get() {\n      return this.newLines.length;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.parts.every(function (p) {\n        return p.lines.length === 0;\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.lineNumber === other.lineNumber && this.columnRange.equals(other.columnRange) && this.newLines.length === other.newLines.length && this.newLines.every(function (line, index) {\n        return line === other.newLines[index];\n      }) && this.additionalReservedLineCount === other.additionalReservedLineCount;\n    }\n  }]);\n}();\nexport function ghostTextsOrReplacementsEqual(a, b) {\n  return equals(a, b, ghostTextOrReplacementEquals);\n}\nexport function ghostTextOrReplacementEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  if (a instanceof GhostText && b instanceof GhostText) {\n    return a.equals(b);\n  }\n  if (a instanceof GhostTextReplacement && b instanceof GhostTextReplacement) {\n    return a.equals(b);\n  }\n  return false;\n}","map":{"version":3,"names":["equals","splitLines","Position","Range","SingleTextEdit","TextEdit","GhostText","lineNumber","parts","_classCallCheck","_createClass","key","value","other","length","every","part","index","renderForScreenReader","lineText","lastPart","cappedLineText","substr","column","text","_toConsumableArray","map","p","fromPositions","lines","join","applyToString","substring","isEmpty","get","reduce","r","GhostTextPart","preview","line","GhostTextReplacement","columnRange","additionalReservedLineCount","arguments","undefined","endColumnExclusive","newLines","_lineText","ghostTextsOrReplacementsEqual","a","b","ghostTextOrReplacementEquals"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/ghostText.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../../base/common/arrays.js';\nimport { splitLines } from '../../../../base/common/strings.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { SingleTextEdit, TextEdit } from '../../../common/core/textEdit.js';\nexport class GhostText {\n    constructor(lineNumber, parts) {\n        this.lineNumber = lineNumber;\n        this.parts = parts;\n    }\n    equals(other) {\n        return this.lineNumber === other.lineNumber &&\n            this.parts.length === other.parts.length &&\n            this.parts.every((part, index) => part.equals(other.parts[index]));\n    }\n    renderForScreenReader(lineText) {\n        if (this.parts.length === 0) {\n            return '';\n        }\n        const lastPart = this.parts[this.parts.length - 1];\n        const cappedLineText = lineText.substr(0, lastPart.column - 1);\n        const text = new TextEdit([\n            ...this.parts.map(p => new SingleTextEdit(Range.fromPositions(new Position(1, p.column)), p.lines.join('\\n'))),\n        ]).applyToString(cappedLineText);\n        return text.substring(this.parts[0].column - 1);\n    }\n    isEmpty() {\n        return this.parts.every(p => p.lines.length === 0);\n    }\n    get lineCount() {\n        return 1 + this.parts.reduce((r, p) => r + p.lines.length - 1, 0);\n    }\n}\nexport class GhostTextPart {\n    constructor(column, text, \n    /**\n     * Indicates if this part is a preview of an inline suggestion when a suggestion is previewed.\n    */\n    preview) {\n        this.column = column;\n        this.text = text;\n        this.preview = preview;\n        this.lines = splitLines(this.text);\n    }\n    ;\n    equals(other) {\n        return this.column === other.column &&\n            this.lines.length === other.lines.length &&\n            this.lines.every((line, index) => line === other.lines[index]);\n    }\n}\nexport class GhostTextReplacement {\n    constructor(lineNumber, columnRange, text, additionalReservedLineCount = 0) {\n        this.lineNumber = lineNumber;\n        this.columnRange = columnRange;\n        this.text = text;\n        this.additionalReservedLineCount = additionalReservedLineCount;\n        this.parts = [\n            new GhostTextPart(this.columnRange.endColumnExclusive, this.text, false),\n        ];\n        this.newLines = splitLines(this.text);\n    }\n    renderForScreenReader(_lineText) {\n        return this.newLines.join('\\n');\n    }\n    get lineCount() {\n        return this.newLines.length;\n    }\n    isEmpty() {\n        return this.parts.every(p => p.lines.length === 0);\n    }\n    equals(other) {\n        return this.lineNumber === other.lineNumber &&\n            this.columnRange.equals(other.columnRange) &&\n            this.newLines.length === other.newLines.length &&\n            this.newLines.every((line, index) => line === other.newLines[index]) &&\n            this.additionalReservedLineCount === other.additionalReservedLineCount;\n    }\n}\nexport function ghostTextsOrReplacementsEqual(a, b) {\n    return equals(a, b, ghostTextOrReplacementEquals);\n}\nexport function ghostTextOrReplacementEquals(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!a || !b) {\n        return false;\n    }\n    if (a instanceof GhostText && b instanceof GhostText) {\n        return a.equals(b);\n    }\n    if (a instanceof GhostTextReplacement && b instanceof GhostTextReplacement) {\n        return a.equals(b);\n    }\n    return false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}