{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport { EditorAction, EditorCommand } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { autoFixCommandId, codeActionCommandId, fixAllCommandId, organizeImportsCommandId, quickFixCommandId, refactorCommandId, sourceActionCommandId } from './codeAction.js';\nimport * as nls from '../../../../nls.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CodeActionCommandArgs, CodeActionKind, CodeActionTriggerSource } from '../common/types.js';\nimport { CodeActionController } from './codeActionController.js';\nimport { SUPPORTED_CODE_ACTIONS } from './codeActionModel.js';\nfunction contextKeyForSupportedActions(kind) {\n  return ContextKeyExpr.regex(SUPPORTED_CODE_ACTIONS.keys()[0], new RegExp('(\\\\s|^)' + escapeRegExpCharacters(kind.value) + '\\\\b'));\n}\nvar argsSchema = {\n  type: 'object',\n  defaultSnippets: [{\n    body: {\n      kind: ''\n    }\n  }],\n  properties: {\n    'kind': {\n      type: 'string',\n      description: nls.localize('args.schema.kind', \"Kind of the code action to run.\")\n    },\n    'apply': {\n      type: 'string',\n      description: nls.localize('args.schema.apply', \"Controls when the returned actions are applied.\"),\n      \"default\": \"ifSingle\" /* CodeActionAutoApply.IfSingle */,\n      \"enum\": [\"first\" /* CodeActionAutoApply.First */, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, \"never\" /* CodeActionAutoApply.Never */],\n      enumDescriptions: [nls.localize('args.schema.apply.first', \"Always apply the first returned code action.\"), nls.localize('args.schema.apply.ifSingle', \"Apply the first returned code action if it is the only one.\"), nls.localize('args.schema.apply.never', \"Do not apply the returned code actions.\")]\n    },\n    'preferred': {\n      type: 'boolean',\n      \"default\": false,\n      description: nls.localize('args.schema.preferred', \"Controls if only preferred code actions should be returned.\")\n    }\n  }\n};\nfunction triggerCodeActionsForEditorSelection(editor, notAvailableMessage, filter, autoApply) {\n  var triggerAction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : CodeActionTriggerSource.Default;\n  if (editor.hasModel()) {\n    var controller = CodeActionController.get(editor);\n    controller === null || controller === void 0 ? void 0 : controller.manualTriggerAtCurrentPosition(notAvailableMessage, triggerAction, filter, autoApply);\n  }\n}\nexport var QuickFixAction = /*#__PURE__*/function (_EditorAction) {\n  function QuickFixAction() {\n    _classCallCheck(this, QuickFixAction);\n    return _callSuper(this, QuickFixAction, [{\n      id: quickFixCommandId,\n      label: nls.localize('quickfix.trigger.label', \"Quick Fix...\"),\n      alias: 'Quick Fix...',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(QuickFixAction, _EditorAction);\n  return _createClass(QuickFixAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', \"No code actions available\"), undefined, undefined, CodeActionTriggerSource.QuickFix);\n    }\n  }]);\n}(EditorAction);\nexport var CodeActionCommand = /*#__PURE__*/function (_EditorCommand) {\n  function CodeActionCommand() {\n    _classCallCheck(this, CodeActionCommand);\n    return _callSuper(this, CodeActionCommand, [{\n      id: codeActionCommandId,\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n      metadata: {\n        description: 'Trigger a code action',\n        args: [{\n          name: 'args',\n          schema: argsSchema\n        }]\n      }\n    }]);\n  }\n  _inherits(CodeActionCommand, _EditorCommand);\n  return _createClass(CodeActionCommand, [{\n    key: \"runEditorCommand\",\n    value: function runEditorCommand(_accessor, editor, userArgs) {\n      var args = CodeActionCommandArgs.fromUser(userArgs, {\n        kind: HierarchicalKind.Empty,\n        apply: \"ifSingle\" /* CodeActionAutoApply.IfSingle */\n      });\n      return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string' ? args.preferred ? nls.localize('editor.action.codeAction.noneMessage.preferred.kind', \"No preferred code actions for '{0}' available\", userArgs.kind) : nls.localize('editor.action.codeAction.noneMessage.kind', \"No code actions for '{0}' available\", userArgs.kind) : args.preferred ? nls.localize('editor.action.codeAction.noneMessage.preferred', \"No preferred code actions available\") : nls.localize('editor.action.codeAction.noneMessage', \"No code actions available\"), {\n        include: args.kind,\n        includeSourceActions: true,\n        onlyIncludePreferredActions: args.preferred\n      }, args.apply);\n    }\n  }]);\n}(EditorCommand);\nexport var RefactorAction = /*#__PURE__*/function (_EditorAction2) {\n  function RefactorAction() {\n    _classCallCheck(this, RefactorAction);\n    return _callSuper(this, RefactorAction, [{\n      id: refactorCommandId,\n      label: nls.localize('refactor.label', \"Refactor...\"),\n      alias: 'Refactor...',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */,\n        mac: {\n          primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 2,\n        when: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.Refactor))\n      },\n      metadata: {\n        description: 'Refactor...',\n        args: [{\n          name: 'args',\n          schema: argsSchema\n        }]\n      }\n    }]);\n  }\n  _inherits(RefactorAction, _EditorAction2);\n  return _createClass(RefactorAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor, userArgs) {\n      var args = CodeActionCommandArgs.fromUser(userArgs, {\n        kind: CodeActionKind.Refactor,\n        apply: \"never\" /* CodeActionAutoApply.Never */\n      });\n      return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string' ? args.preferred ? nls.localize('editor.action.refactor.noneMessage.preferred.kind', \"No preferred refactorings for '{0}' available\", userArgs.kind) : nls.localize('editor.action.refactor.noneMessage.kind', \"No refactorings for '{0}' available\", userArgs.kind) : args.preferred ? nls.localize('editor.action.refactor.noneMessage.preferred', \"No preferred refactorings available\") : nls.localize('editor.action.refactor.noneMessage', \"No refactorings available\"), {\n        include: CodeActionKind.Refactor.contains(args.kind) ? args.kind : HierarchicalKind.None,\n        onlyIncludePreferredActions: args.preferred\n      }, args.apply, CodeActionTriggerSource.Refactor);\n    }\n  }]);\n}(EditorAction);\nexport var SourceAction = /*#__PURE__*/function (_EditorAction3) {\n  function SourceAction() {\n    _classCallCheck(this, SourceAction);\n    return _callSuper(this, SourceAction, [{\n      id: sourceActionCommandId,\n      label: nls.localize('source.label', \"Source Action...\"),\n      alias: 'Source Action...',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n      contextMenuOpts: {\n        group: '1_modification',\n        order: 2.1,\n        when: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.Source))\n      },\n      metadata: {\n        description: 'Source Action...',\n        args: [{\n          name: 'args',\n          schema: argsSchema\n        }]\n      }\n    }]);\n  }\n  _inherits(SourceAction, _EditorAction3);\n  return _createClass(SourceAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor, userArgs) {\n      var args = CodeActionCommandArgs.fromUser(userArgs, {\n        kind: CodeActionKind.Source,\n        apply: \"never\" /* CodeActionAutoApply.Never */\n      });\n      return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string' ? args.preferred ? nls.localize('editor.action.source.noneMessage.preferred.kind', \"No preferred source actions for '{0}' available\", userArgs.kind) : nls.localize('editor.action.source.noneMessage.kind', \"No source actions for '{0}' available\", userArgs.kind) : args.preferred ? nls.localize('editor.action.source.noneMessage.preferred', \"No preferred source actions available\") : nls.localize('editor.action.source.noneMessage', \"No source actions available\"), {\n        include: CodeActionKind.Source.contains(args.kind) ? args.kind : HierarchicalKind.None,\n        includeSourceActions: true,\n        onlyIncludePreferredActions: args.preferred\n      }, args.apply, CodeActionTriggerSource.SourceAction);\n    }\n  }]);\n}(EditorAction);\nexport var OrganizeImportsAction = /*#__PURE__*/function (_EditorAction4) {\n  function OrganizeImportsAction() {\n    _classCallCheck(this, OrganizeImportsAction);\n    return _callSuper(this, OrganizeImportsAction, [{\n      id: organizeImportsCommandId,\n      label: nls.localize('organizeImports.label', \"Organize Imports\"),\n      alias: 'Organize Imports',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.SourceOrganizeImports)),\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 45 /* KeyCode.KeyO */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(OrganizeImportsAction, _EditorAction4);\n  return _createClass(OrganizeImportsAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.organize.noneMessage', \"No organize imports action available\"), {\n        include: CodeActionKind.SourceOrganizeImports,\n        includeSourceActions: true\n      }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.OrganizeImports);\n    }\n  }]);\n}(EditorAction);\nexport var FixAllAction = /*#__PURE__*/function (_EditorAction5) {\n  function FixAllAction() {\n    _classCallCheck(this, FixAllAction);\n    return _callSuper(this, FixAllAction, [{\n      id: fixAllCommandId,\n      label: nls.localize('fixAll.label', \"Fix All\"),\n      alias: 'Fix All',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.SourceFixAll))\n    }]);\n  }\n  _inherits(FixAllAction, _EditorAction5);\n  return _createClass(FixAllAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      return triggerCodeActionsForEditorSelection(editor, nls.localize('fixAll.noneMessage', \"No fix all action available\"), {\n        include: CodeActionKind.SourceFixAll,\n        includeSourceActions: true\n      }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.FixAll);\n    }\n  }]);\n}(EditorAction);\nexport var AutoFixAction = /*#__PURE__*/function (_EditorAction6) {\n  function AutoFixAction() {\n    _classCallCheck(this, AutoFixAction);\n    return _callSuper(this, AutoFixAction, [{\n      id: autoFixCommandId,\n      label: nls.localize('autoFix.label', \"Auto Fix...\"),\n      alias: 'Auto Fix...',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.QuickFix)),\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 89 /* KeyCode.Period */,\n        mac: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 89 /* KeyCode.Period */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(AutoFixAction, _EditorAction6);\n  return _createClass(AutoFixAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.autoFix.noneMessage', \"No auto fixes available\"), {\n        include: CodeActionKind.QuickFix,\n        onlyIncludePreferredActions: true\n      }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.AutoFix);\n    }\n  }]);\n}(EditorAction);","map":{"version":3,"names":["HierarchicalKind","escapeRegExpCharacters","EditorAction","EditorCommand","EditorContextKeys","autoFixCommandId","codeActionCommandId","fixAllCommandId","organizeImportsCommandId","quickFixCommandId","refactorCommandId","sourceActionCommandId","nls","ContextKeyExpr","CodeActionCommandArgs","CodeActionKind","CodeActionTriggerSource","CodeActionController","SUPPORTED_CODE_ACTIONS","contextKeyForSupportedActions","kind","regex","keys","RegExp","value","argsSchema","type","defaultSnippets","body","properties","description","localize","enumDescriptions","triggerCodeActionsForEditorSelection","editor","notAvailableMessage","filter","autoApply","triggerAction","arguments","length","undefined","Default","hasModel","controller","get","manualTriggerAtCurrentPosition","QuickFixAction","_EditorAction","_classCallCheck","_callSuper","id","label","alias","precondition","and","writable","hasCodeActionsProvider","kbOpts","kbExpr","textInputFocus","primary","weight","_inherits","_createClass","key","run","_accessor","QuickFix","CodeActionCommand","_EditorCommand","metadata","args","name","schema","runEditorCommand","userArgs","fromUser","Empty","apply","preferred","include","includeSourceActions","onlyIncludePreferredActions","RefactorAction","_EditorAction2","mac","contextMenuOpts","group","order","when","Refactor","contains","None","SourceAction","_EditorAction3","Source","OrganizeImportsAction","_EditorAction4","SourceOrganizeImports","OrganizeImports","FixAllAction","_EditorAction5","SourceFixAll","FixAll","AutoFixAction","_EditorAction6","AutoFix"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/contrib/codeAction/browser/codeActionCommands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport { EditorAction, EditorCommand } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { autoFixCommandId, codeActionCommandId, fixAllCommandId, organizeImportsCommandId, quickFixCommandId, refactorCommandId, sourceActionCommandId } from './codeAction.js';\nimport * as nls from '../../../../nls.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { CodeActionCommandArgs, CodeActionKind, CodeActionTriggerSource } from '../common/types.js';\nimport { CodeActionController } from './codeActionController.js';\nimport { SUPPORTED_CODE_ACTIONS } from './codeActionModel.js';\nfunction contextKeyForSupportedActions(kind) {\n    return ContextKeyExpr.regex(SUPPORTED_CODE_ACTIONS.keys()[0], new RegExp('(\\\\s|^)' + escapeRegExpCharacters(kind.value) + '\\\\b'));\n}\nconst argsSchema = {\n    type: 'object',\n    defaultSnippets: [{ body: { kind: '' } }],\n    properties: {\n        'kind': {\n            type: 'string',\n            description: nls.localize('args.schema.kind', \"Kind of the code action to run.\"),\n        },\n        'apply': {\n            type: 'string',\n            description: nls.localize('args.schema.apply', \"Controls when the returned actions are applied.\"),\n            default: \"ifSingle\" /* CodeActionAutoApply.IfSingle */,\n            enum: [\"first\" /* CodeActionAutoApply.First */, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, \"never\" /* CodeActionAutoApply.Never */],\n            enumDescriptions: [\n                nls.localize('args.schema.apply.first', \"Always apply the first returned code action.\"),\n                nls.localize('args.schema.apply.ifSingle', \"Apply the first returned code action if it is the only one.\"),\n                nls.localize('args.schema.apply.never', \"Do not apply the returned code actions.\"),\n            ]\n        },\n        'preferred': {\n            type: 'boolean',\n            default: false,\n            description: nls.localize('args.schema.preferred', \"Controls if only preferred code actions should be returned.\"),\n        }\n    }\n};\nfunction triggerCodeActionsForEditorSelection(editor, notAvailableMessage, filter, autoApply, triggerAction = CodeActionTriggerSource.Default) {\n    if (editor.hasModel()) {\n        const controller = CodeActionController.get(editor);\n        controller === null || controller === void 0 ? void 0 : controller.manualTriggerAtCurrentPosition(notAvailableMessage, triggerAction, filter, autoApply);\n    }\n}\nexport class QuickFixAction extends EditorAction {\n    constructor() {\n        super({\n            id: quickFixCommandId,\n            label: nls.localize('quickfix.trigger.label', \"Quick Fix...\"),\n            alias: 'Quick Fix...',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', \"No code actions available\"), undefined, undefined, CodeActionTriggerSource.QuickFix);\n    }\n}\nexport class CodeActionCommand extends EditorCommand {\n    constructor() {\n        super({\n            id: codeActionCommandId,\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n            metadata: {\n                description: 'Trigger a code action',\n                args: [{ name: 'args', schema: argsSchema, }]\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor, userArgs) {\n        const args = CodeActionCommandArgs.fromUser(userArgs, {\n            kind: HierarchicalKind.Empty,\n            apply: \"ifSingle\" /* CodeActionAutoApply.IfSingle */,\n        });\n        return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string'\n            ? args.preferred\n                ? nls.localize('editor.action.codeAction.noneMessage.preferred.kind', \"No preferred code actions for '{0}' available\", userArgs.kind)\n                : nls.localize('editor.action.codeAction.noneMessage.kind', \"No code actions for '{0}' available\", userArgs.kind)\n            : args.preferred\n                ? nls.localize('editor.action.codeAction.noneMessage.preferred', \"No preferred code actions available\")\n                : nls.localize('editor.action.codeAction.noneMessage', \"No code actions available\"), {\n            include: args.kind,\n            includeSourceActions: true,\n            onlyIncludePreferredActions: args.preferred,\n        }, args.apply);\n    }\n}\nexport class RefactorAction extends EditorAction {\n    constructor() {\n        super({\n            id: refactorCommandId,\n            label: nls.localize('refactor.label', \"Refactor...\"),\n            alias: 'Refactor...',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */,\n                mac: {\n                    primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 48 /* KeyCode.KeyR */\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            contextMenuOpts: {\n                group: '1_modification',\n                order: 2,\n                when: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.Refactor)),\n            },\n            metadata: {\n                description: 'Refactor...',\n                args: [{ name: 'args', schema: argsSchema }]\n            }\n        });\n    }\n    run(_accessor, editor, userArgs) {\n        const args = CodeActionCommandArgs.fromUser(userArgs, {\n            kind: CodeActionKind.Refactor,\n            apply: \"never\" /* CodeActionAutoApply.Never */\n        });\n        return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string'\n            ? args.preferred\n                ? nls.localize('editor.action.refactor.noneMessage.preferred.kind', \"No preferred refactorings for '{0}' available\", userArgs.kind)\n                : nls.localize('editor.action.refactor.noneMessage.kind', \"No refactorings for '{0}' available\", userArgs.kind)\n            : args.preferred\n                ? nls.localize('editor.action.refactor.noneMessage.preferred', \"No preferred refactorings available\")\n                : nls.localize('editor.action.refactor.noneMessage', \"No refactorings available\"), {\n            include: CodeActionKind.Refactor.contains(args.kind) ? args.kind : HierarchicalKind.None,\n            onlyIncludePreferredActions: args.preferred\n        }, args.apply, CodeActionTriggerSource.Refactor);\n    }\n}\nexport class SourceAction extends EditorAction {\n    constructor() {\n        super({\n            id: sourceActionCommandId,\n            label: nls.localize('source.label', \"Source Action...\"),\n            alias: 'Source Action...',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n            contextMenuOpts: {\n                group: '1_modification',\n                order: 2.1,\n                when: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.Source)),\n            },\n            metadata: {\n                description: 'Source Action...',\n                args: [{ name: 'args', schema: argsSchema }]\n            }\n        });\n    }\n    run(_accessor, editor, userArgs) {\n        const args = CodeActionCommandArgs.fromUser(userArgs, {\n            kind: CodeActionKind.Source,\n            apply: \"never\" /* CodeActionAutoApply.Never */\n        });\n        return triggerCodeActionsForEditorSelection(editor, typeof (userArgs === null || userArgs === void 0 ? void 0 : userArgs.kind) === 'string'\n            ? args.preferred\n                ? nls.localize('editor.action.source.noneMessage.preferred.kind', \"No preferred source actions for '{0}' available\", userArgs.kind)\n                : nls.localize('editor.action.source.noneMessage.kind', \"No source actions for '{0}' available\", userArgs.kind)\n            : args.preferred\n                ? nls.localize('editor.action.source.noneMessage.preferred', \"No preferred source actions available\")\n                : nls.localize('editor.action.source.noneMessage', \"No source actions available\"), {\n            include: CodeActionKind.Source.contains(args.kind) ? args.kind : HierarchicalKind.None,\n            includeSourceActions: true,\n            onlyIncludePreferredActions: args.preferred,\n        }, args.apply, CodeActionTriggerSource.SourceAction);\n    }\n}\nexport class OrganizeImportsAction extends EditorAction {\n    constructor() {\n        super({\n            id: organizeImportsCommandId,\n            label: nls.localize('organizeImports.label', \"Organize Imports\"),\n            alias: 'Organize Imports',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.SourceOrganizeImports)),\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 45 /* KeyCode.KeyO */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n        });\n    }\n    run(_accessor, editor) {\n        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.organize.noneMessage', \"No organize imports action available\"), { include: CodeActionKind.SourceOrganizeImports, includeSourceActions: true }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.OrganizeImports);\n    }\n}\nexport class FixAllAction extends EditorAction {\n    constructor() {\n        super({\n            id: fixAllCommandId,\n            label: nls.localize('fixAll.label', \"Fix All\"),\n            alias: 'Fix All',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.SourceFixAll))\n        });\n    }\n    run(_accessor, editor) {\n        return triggerCodeActionsForEditorSelection(editor, nls.localize('fixAll.noneMessage', \"No fix all action available\"), { include: CodeActionKind.SourceFixAll, includeSourceActions: true }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.FixAll);\n    }\n}\nexport class AutoFixAction extends EditorAction {\n    constructor() {\n        super({\n            id: autoFixCommandId,\n            label: nls.localize('autoFix.label', \"Auto Fix...\"),\n            alias: 'Auto Fix...',\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, contextKeyForSupportedActions(CodeActionKind.QuickFix)),\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 89 /* KeyCode.Period */,\n                mac: {\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 89 /* KeyCode.Period */\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        return triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.autoFix.noneMessage', \"No auto fixes available\"), {\n            include: CodeActionKind.QuickFix,\n            onlyIncludePreferredActions: true\n        }, \"ifSingle\" /* CodeActionAutoApply.IfSingle */, CodeActionTriggerSource.AutoFix);\n    }\n}\n"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,6CAA6C;AAC9E,SAASC,sBAAsB,QAAQ,oCAAoC;AAC3E,SAASC,YAAY,EAAEC,aAAa,QAAQ,sCAAsC;AAClF,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,gBAAgB,EAAEC,mBAAmB,EAAEC,eAAe,EAAEC,wBAAwB,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,qBAAqB,QAAQ,iBAAiB;AAC/K,OAAO,KAAKC,GAAG,MAAM,oBAAoB;AACzC,SAASC,cAAc,QAAQ,sDAAsD;AACrF,SAASC,qBAAqB,EAAEC,cAAc,EAAEC,uBAAuB,QAAQ,oBAAoB;AACnG,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,sBAAsB,QAAQ,sBAAsB;AAC7D,SAASC,6BAA6BA,CAACC,IAAI,EAAE;EACzC,OAAOP,cAAc,CAACQ,KAAK,CAACH,sBAAsB,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAIC,MAAM,CAAC,SAAS,GAAGtB,sBAAsB,CAACmB,IAAI,CAACI,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AACrI;AACA,IAAMC,UAAU,GAAG;EACfC,IAAI,EAAE,QAAQ;EACdC,eAAe,EAAE,CAAC;IAAEC,IAAI,EAAE;MAAER,IAAI,EAAE;IAAG;EAAE,CAAC,CAAC;EACzCS,UAAU,EAAE;IACR,MAAM,EAAE;MACJH,IAAI,EAAE,QAAQ;MACdI,WAAW,EAAElB,GAAG,CAACmB,QAAQ,CAAC,kBAAkB,EAAE,iCAAiC;IACnF,CAAC;IACD,OAAO,EAAE;MACLL,IAAI,EAAE,QAAQ;MACdI,WAAW,EAAElB,GAAG,CAACmB,QAAQ,CAAC,mBAAmB,EAAE,iDAAiD,CAAC;MACjG,WAAS,UAAU,CAAC;MACpB,QAAM,CAAC,OAAO,CAAC,iCAAiC,UAAU,CAAC,oCAAoC,OAAO,CAAC,gCAAgC;MACvIC,gBAAgB,EAAE,CACdpB,GAAG,CAACmB,QAAQ,CAAC,yBAAyB,EAAE,8CAA8C,CAAC,EACvFnB,GAAG,CAACmB,QAAQ,CAAC,4BAA4B,EAAE,6DAA6D,CAAC,EACzGnB,GAAG,CAACmB,QAAQ,CAAC,yBAAyB,EAAE,yCAAyC,CAAC;IAE1F,CAAC;IACD,WAAW,EAAE;MACTL,IAAI,EAAE,SAAS;MACf,WAAS,KAAK;MACdI,WAAW,EAAElB,GAAG,CAACmB,QAAQ,CAAC,uBAAuB,EAAE,6DAA6D;IACpH;EACJ;AACJ,CAAC;AACD,SAASE,oCAAoCA,CAACC,MAAM,EAAEC,mBAAmB,EAAEC,MAAM,EAAEC,SAAS,EAAmD;EAAA,IAAjDC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGvB,uBAAuB,CAAC0B,OAAO;EACzI,IAAIR,MAAM,CAACS,QAAQ,CAAC,CAAC,EAAE;IACnB,IAAMC,UAAU,GAAG3B,oBAAoB,CAAC4B,GAAG,CAACX,MAAM,CAAC;IACnDU,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACE,8BAA8B,CAACX,mBAAmB,EAAEG,aAAa,EAAEF,MAAM,EAAEC,SAAS,CAAC;EAC5J;AACJ;AACA,WAAaU,cAAc,0BAAAC,aAAA;EACvB,SAAAD,eAAA,EAAc;IAAAE,eAAA,OAAAF,cAAA;IAAA,OAAAG,UAAA,OAAAH,cAAA,GACJ;MACFI,EAAE,EAAE1C,iBAAiB;MACrB2C,KAAK,EAAExC,GAAG,CAACmB,QAAQ,CAAC,wBAAwB,EAAE,cAAc,CAAC;MAC7DsB,KAAK,EAAE,cAAc;MACrBC,YAAY,EAAEzC,cAAc,CAAC0C,GAAG,CAACnD,iBAAiB,CAACoD,QAAQ,EAAEpD,iBAAiB,CAACqD,sBAAsB,CAAC;MACtGC,MAAM,EAAE;QACJC,MAAM,EAAEvD,iBAAiB,CAACwD,cAAc;QACxCC,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;QACxCC,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC;EACL;EAACC,SAAA,CAAAhB,cAAA,EAAAC,aAAA;EAAA,OAAAgB,YAAA,CAAAjB,cAAA;IAAAkB,GAAA;IAAAzC,KAAA,EACD,SAAA0C,IAAIC,SAAS,EAAEjC,MAAM,EAAE;MACnB,OAAOD,oCAAoC,CAACC,MAAM,EAAEtB,GAAG,CAACmB,QAAQ,CAAC,oCAAoC,EAAE,2BAA2B,CAAC,EAAEU,SAAS,EAAEA,SAAS,EAAEzB,uBAAuB,CAACoD,QAAQ,CAAC;IAChM;EAAC;AAAA,EAhB+BlE,YAAY;AAkBhD,WAAamE,iBAAiB,0BAAAC,cAAA;EAC1B,SAAAD,kBAAA,EAAc;IAAApB,eAAA,OAAAoB,iBAAA;IAAA,OAAAnB,UAAA,OAAAmB,iBAAA,GACJ;MACFlB,EAAE,EAAE7C,mBAAmB;MACvBgD,YAAY,EAAEzC,cAAc,CAAC0C,GAAG,CAACnD,iBAAiB,CAACoD,QAAQ,EAAEpD,iBAAiB,CAACqD,sBAAsB,CAAC;MACtGc,QAAQ,EAAE;QACNzC,WAAW,EAAE,uBAAuB;QACpC0C,IAAI,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,MAAM,EAAEjD;QAAY,CAAC;MAChD;IACJ,CAAC;EACL;EAACsC,SAAA,CAAAM,iBAAA,EAAAC,cAAA;EAAA,OAAAN,YAAA,CAAAK,iBAAA;IAAAJ,GAAA;IAAAzC,KAAA,EACD,SAAAmD,iBAAiBR,SAAS,EAAEjC,MAAM,EAAE0C,QAAQ,EAAE;MAC1C,IAAMJ,IAAI,GAAG1D,qBAAqB,CAAC+D,QAAQ,CAACD,QAAQ,EAAE;QAClDxD,IAAI,EAAEpB,gBAAgB,CAAC8E,KAAK;QAC5BC,KAAK,EAAE,UAAU,CAAC;MACtB,CAAC,CAAC;MACF,OAAO9C,oCAAoC,CAACC,MAAM,EAAE,QAAQ0C,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACxD,IAAI,CAAC,KAAK,QAAQ,GACrIoD,IAAI,CAACQ,SAAS,GACVpE,GAAG,CAACmB,QAAQ,CAAC,qDAAqD,EAAE,+CAA+C,EAAE6C,QAAQ,CAACxD,IAAI,CAAC,GACnIR,GAAG,CAACmB,QAAQ,CAAC,2CAA2C,EAAE,qCAAqC,EAAE6C,QAAQ,CAACxD,IAAI,CAAC,GACnHoD,IAAI,CAACQ,SAAS,GACVpE,GAAG,CAACmB,QAAQ,CAAC,gDAAgD,EAAE,qCAAqC,CAAC,GACrGnB,GAAG,CAACmB,QAAQ,CAAC,sCAAsC,EAAE,2BAA2B,CAAC,EAAE;QACzFkD,OAAO,EAAET,IAAI,CAACpD,IAAI;QAClB8D,oBAAoB,EAAE,IAAI;QAC1BC,2BAA2B,EAAEX,IAAI,CAACQ;MACtC,CAAC,EAAER,IAAI,CAACO,KAAK,CAAC;IAClB;EAAC;AAAA,EA3BkC5E,aAAa;AA6BpD,WAAaiF,cAAc,0BAAAC,cAAA;EACvB,SAAAD,eAAA,EAAc;IAAAnC,eAAA,OAAAmC,cAAA;IAAA,OAAAlC,UAAA,OAAAkC,cAAA,GACJ;MACFjC,EAAE,EAAEzC,iBAAiB;MACrB0C,KAAK,EAAExC,GAAG,CAACmB,QAAQ,CAAC,gBAAgB,EAAE,aAAa,CAAC;MACpDsB,KAAK,EAAE,aAAa;MACpBC,YAAY,EAAEzC,cAAc,CAAC0C,GAAG,CAACnD,iBAAiB,CAACoD,QAAQ,EAAEpD,iBAAiB,CAACqD,sBAAsB,CAAC;MACtGC,MAAM,EAAE;QACJC,MAAM,EAAEvD,iBAAiB,CAACwD,cAAc;QACxCC,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAClEyB,GAAG,EAAE;UACDzB,OAAO,EAAE,GAAG,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QACrE,CAAC;QACDC,MAAM,EAAE,GAAG,CAAC;MAChB,CAAC;MACDyB,eAAe,EAAE;QACbC,KAAK,EAAE,gBAAgB;QACvBC,KAAK,EAAE,CAAC;QACRC,IAAI,EAAE7E,cAAc,CAAC0C,GAAG,CAACnD,iBAAiB,CAACoD,QAAQ,EAAErC,6BAA6B,CAACJ,cAAc,CAAC4E,QAAQ,CAAC;MAC/G,CAAC;MACDpB,QAAQ,EAAE;QACNzC,WAAW,EAAE,aAAa;QAC1B0C,IAAI,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,MAAM,EAAEjD;QAAW,CAAC;MAC/C;IACJ,CAAC;EACL;EAACsC,SAAA,CAAAqB,cAAA,EAAAC,cAAA;EAAA,OAAArB,YAAA,CAAAoB,cAAA;IAAAnB,GAAA;IAAAzC,KAAA,EACD,SAAA0C,IAAIC,SAAS,EAAEjC,MAAM,EAAE0C,QAAQ,EAAE;MAC7B,IAAMJ,IAAI,GAAG1D,qBAAqB,CAAC+D,QAAQ,CAACD,QAAQ,EAAE;QAClDxD,IAAI,EAAEL,cAAc,CAAC4E,QAAQ;QAC7BZ,KAAK,EAAE,OAAO,CAAC;MACnB,CAAC,CAAC;MACF,OAAO9C,oCAAoC,CAACC,MAAM,EAAE,QAAQ0C,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACxD,IAAI,CAAC,KAAK,QAAQ,GACrIoD,IAAI,CAACQ,SAAS,GACVpE,GAAG,CAACmB,QAAQ,CAAC,mDAAmD,EAAE,+CAA+C,EAAE6C,QAAQ,CAACxD,IAAI,CAAC,GACjIR,GAAG,CAACmB,QAAQ,CAAC,yCAAyC,EAAE,qCAAqC,EAAE6C,QAAQ,CAACxD,IAAI,CAAC,GACjHoD,IAAI,CAACQ,SAAS,GACVpE,GAAG,CAACmB,QAAQ,CAAC,8CAA8C,EAAE,qCAAqC,CAAC,GACnGnB,GAAG,CAACmB,QAAQ,CAAC,oCAAoC,EAAE,2BAA2B,CAAC,EAAE;QACvFkD,OAAO,EAAElE,cAAc,CAAC4E,QAAQ,CAACC,QAAQ,CAACpB,IAAI,CAACpD,IAAI,CAAC,GAAGoD,IAAI,CAACpD,IAAI,GAAGpB,gBAAgB,CAAC6F,IAAI;QACxFV,2BAA2B,EAAEX,IAAI,CAACQ;MACtC,CAAC,EAAER,IAAI,CAACO,KAAK,EAAE/D,uBAAuB,CAAC2E,QAAQ,CAAC;IACpD;EAAC;AAAA,EAzC+BzF,YAAY;AA2ChD,WAAa4F,YAAY,0BAAAC,cAAA;EACrB,SAAAD,aAAA,EAAc;IAAA7C,eAAA,OAAA6C,YAAA;IAAA,OAAA5C,UAAA,OAAA4C,YAAA,GACJ;MACF3C,EAAE,EAAExC,qBAAqB;MACzByC,KAAK,EAAExC,GAAG,CAACmB,QAAQ,CAAC,cAAc,EAAE,kBAAkB,CAAC;MACvDsB,KAAK,EAAE,kBAAkB;MACzBC,YAAY,EAAEzC,cAAc,CAAC0C,GAAG,CAACnD,iBAAiB,CAACoD,QAAQ,EAAEpD,iBAAiB,CAACqD,sBAAsB,CAAC;MACtG8B,eAAe,EAAE;QACbC,KAAK,EAAE,gBAAgB;QACvBC,KAAK,EAAE,GAAG;QACVC,IAAI,EAAE7E,cAAc,CAAC0C,GAAG,CAACnD,iBAAiB,CAACoD,QAAQ,EAAErC,6BAA6B,CAACJ,cAAc,CAACiF,MAAM,CAAC;MAC7G,CAAC;MACDzB,QAAQ,EAAE;QACNzC,WAAW,EAAE,kBAAkB;QAC/B0C,IAAI,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,MAAM,EAAEjD;QAAW,CAAC;MAC/C;IACJ,CAAC;EACL;EAACsC,SAAA,CAAA+B,YAAA,EAAAC,cAAA;EAAA,OAAA/B,YAAA,CAAA8B,YAAA;IAAA7B,GAAA;IAAAzC,KAAA,EACD,SAAA0C,IAAIC,SAAS,EAAEjC,MAAM,EAAE0C,QAAQ,EAAE;MAC7B,IAAMJ,IAAI,GAAG1D,qBAAqB,CAAC+D,QAAQ,CAACD,QAAQ,EAAE;QAClDxD,IAAI,EAAEL,cAAc,CAACiF,MAAM;QAC3BjB,KAAK,EAAE,OAAO,CAAC;MACnB,CAAC,CAAC;MACF,OAAO9C,oCAAoC,CAACC,MAAM,EAAE,QAAQ0C,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACxD,IAAI,CAAC,KAAK,QAAQ,GACrIoD,IAAI,CAACQ,SAAS,GACVpE,GAAG,CAACmB,QAAQ,CAAC,iDAAiD,EAAE,iDAAiD,EAAE6C,QAAQ,CAACxD,IAAI,CAAC,GACjIR,GAAG,CAACmB,QAAQ,CAAC,uCAAuC,EAAE,uCAAuC,EAAE6C,QAAQ,CAACxD,IAAI,CAAC,GACjHoD,IAAI,CAACQ,SAAS,GACVpE,GAAG,CAACmB,QAAQ,CAAC,4CAA4C,EAAE,uCAAuC,CAAC,GACnGnB,GAAG,CAACmB,QAAQ,CAAC,kCAAkC,EAAE,6BAA6B,CAAC,EAAE;QACvFkD,OAAO,EAAElE,cAAc,CAACiF,MAAM,CAACJ,QAAQ,CAACpB,IAAI,CAACpD,IAAI,CAAC,GAAGoD,IAAI,CAACpD,IAAI,GAAGpB,gBAAgB,CAAC6F,IAAI;QACtFX,oBAAoB,EAAE,IAAI;QAC1BC,2BAA2B,EAAEX,IAAI,CAACQ;MACtC,CAAC,EAAER,IAAI,CAACO,KAAK,EAAE/D,uBAAuB,CAAC8E,YAAY,CAAC;IACxD;EAAC;AAAA,EAlC6B5F,YAAY;AAoC9C,WAAa+F,qBAAqB,0BAAAC,cAAA;EAC9B,SAAAD,sBAAA,EAAc;IAAAhD,eAAA,OAAAgD,qBAAA;IAAA,OAAA/C,UAAA,OAAA+C,qBAAA,GACJ;MACF9C,EAAE,EAAE3C,wBAAwB;MAC5B4C,KAAK,EAAExC,GAAG,CAACmB,QAAQ,CAAC,uBAAuB,EAAE,kBAAkB,CAAC;MAChEsB,KAAK,EAAE,kBAAkB;MACzBC,YAAY,EAAEzC,cAAc,CAAC0C,GAAG,CAACnD,iBAAiB,CAACoD,QAAQ,EAAErC,6BAA6B,CAACJ,cAAc,CAACoF,qBAAqB,CAAC,CAAC;MACjIzC,MAAM,EAAE;QACJC,MAAM,EAAEvD,iBAAiB,CAACwD,cAAc;QACxCC,OAAO,EAAE,IAAI,CAAC,qBAAqB,GAAG,CAAC,mBAAmB,EAAE,CAAC;QAC7DC,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC;EACL;EAACC,SAAA,CAAAkC,qBAAA,EAAAC,cAAA;EAAA,OAAAlC,YAAA,CAAAiC,qBAAA;IAAAhC,GAAA;IAAAzC,KAAA,EACD,SAAA0C,IAAIC,SAAS,EAAEjC,MAAM,EAAE;MACnB,OAAOD,oCAAoC,CAACC,MAAM,EAAEtB,GAAG,CAACmB,QAAQ,CAAC,oCAAoC,EAAE,sCAAsC,CAAC,EAAE;QAAEkD,OAAO,EAAElE,cAAc,CAACoF,qBAAqB;QAAEjB,oBAAoB,EAAE;MAAK,CAAC,EAAE,UAAU,CAAC,oCAAoClE,uBAAuB,CAACoF,eAAe,CAAC;IAC1T;EAAC;AAAA,EAhBsClG,YAAY;AAkBvD,WAAamG,YAAY,0BAAAC,cAAA;EACrB,SAAAD,aAAA,EAAc;IAAApD,eAAA,OAAAoD,YAAA;IAAA,OAAAnD,UAAA,OAAAmD,YAAA,GACJ;MACFlD,EAAE,EAAE5C,eAAe;MACnB6C,KAAK,EAAExC,GAAG,CAACmB,QAAQ,CAAC,cAAc,EAAE,SAAS,CAAC;MAC9CsB,KAAK,EAAE,SAAS;MAChBC,YAAY,EAAEzC,cAAc,CAAC0C,GAAG,CAACnD,iBAAiB,CAACoD,QAAQ,EAAErC,6BAA6B,CAACJ,cAAc,CAACwF,YAAY,CAAC;IAC3H,CAAC;EACL;EAACxC,SAAA,CAAAsC,YAAA,EAAAC,cAAA;EAAA,OAAAtC,YAAA,CAAAqC,YAAA;IAAApC,GAAA;IAAAzC,KAAA,EACD,SAAA0C,IAAIC,SAAS,EAAEjC,MAAM,EAAE;MACnB,OAAOD,oCAAoC,CAACC,MAAM,EAAEtB,GAAG,CAACmB,QAAQ,CAAC,oBAAoB,EAAE,6BAA6B,CAAC,EAAE;QAAEkD,OAAO,EAAElE,cAAc,CAACwF,YAAY;QAAErB,oBAAoB,EAAE;MAAK,CAAC,EAAE,UAAU,CAAC,oCAAoClE,uBAAuB,CAACwF,MAAM,CAAC;IAC/Q;EAAC;AAAA,EAX6BtG,YAAY;AAa9C,WAAauG,aAAa,0BAAAC,cAAA;EACtB,SAAAD,cAAA,EAAc;IAAAxD,eAAA,OAAAwD,aAAA;IAAA,OAAAvD,UAAA,OAAAuD,aAAA,GACJ;MACFtD,EAAE,EAAE9C,gBAAgB;MACpB+C,KAAK,EAAExC,GAAG,CAACmB,QAAQ,CAAC,eAAe,EAAE,aAAa,CAAC;MACnDsB,KAAK,EAAE,aAAa;MACpBC,YAAY,EAAEzC,cAAc,CAAC0C,GAAG,CAACnD,iBAAiB,CAACoD,QAAQ,EAAErC,6BAA6B,CAACJ,cAAc,CAACqD,QAAQ,CAAC,CAAC;MACpHV,MAAM,EAAE;QACJC,MAAM,EAAEvD,iBAAiB,CAACwD,cAAc;QACxCC,OAAO,EAAE,GAAG,CAAC,mBAAmB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7DyB,GAAG,EAAE;UACDzB,OAAO,EAAE,IAAI,CAAC,uBAAuB,GAAG,CAAC,mBAAmB,EAAE,CAAC;QACnE,CAAC;QACDC,MAAM,EAAE,GAAG,CAAC;MAChB;IACJ,CAAC;EACL;EAACC,SAAA,CAAA0C,aAAA,EAAAC,cAAA;EAAA,OAAA1C,YAAA,CAAAyC,aAAA;IAAAxC,GAAA;IAAAzC,KAAA,EACD,SAAA0C,IAAIC,SAAS,EAAEjC,MAAM,EAAE;MACnB,OAAOD,oCAAoC,CAACC,MAAM,EAAEtB,GAAG,CAACmB,QAAQ,CAAC,mCAAmC,EAAE,yBAAyB,CAAC,EAAE;QAC9HkD,OAAO,EAAElE,cAAc,CAACqD,QAAQ;QAChCe,2BAA2B,EAAE;MACjC,CAAC,EAAE,UAAU,CAAC,oCAAoCnE,uBAAuB,CAAC2F,OAAO,CAAC;IACtF;EAAC;AAAA,EAtB8BzG,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}