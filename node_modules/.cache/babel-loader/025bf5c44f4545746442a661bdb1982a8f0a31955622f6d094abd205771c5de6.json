{"ast":null,"code":"import _objectSpread from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _typeof from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.flat-map.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat-map.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar CopyPasteController_1;\nimport { addDisposableListener, getActiveDocument } from '../../../../base/browser/dom.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';\nimport { UriList, createStringDataTransferItem, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ClipboardEventUtils } from '../../../browser/controller/textAreaInput.js';\nimport { toExternalVSDataTransfer, toVSDataTransfer } from '../../../browser/dnd.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { DocumentPasteTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport { createCombinedWorkspaceEdit, sortEditsByYieldTo } from './edit.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nimport { localize } from '../../../../nls.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgressService } from '../../../../platform/progress/common/progress.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nexport var changePasteTypeCommandId = 'editor.changePasteType';\nexport var pasteWidgetVisibleCtx = new RawContextKey('pasteWidgetVisible', false, localize('pasteWidgetVisible', \"Whether the paste widget is showing\"));\nvar vscodeClipboardMime = 'application/vnd.code.copyMetadata';\nvar CopyPasteController = CopyPasteController_1 = /*#__PURE__*/function (_Disposable) {\n  function CopyPasteController(editor, instantiationService, _bulkEditService, _clipboardService, _languageFeaturesService, _quickInputService, _progressService) {\n    var _this;\n    _classCallCheck(this, CopyPasteController);\n    _this = _callSuper(this, CopyPasteController);\n    _this._bulkEditService = _bulkEditService;\n    _this._clipboardService = _clipboardService;\n    _this._languageFeaturesService = _languageFeaturesService;\n    _this._quickInputService = _quickInputService;\n    _this._progressService = _progressService;\n    _this._editor = editor;\n    var container = editor.getContainerDomNode();\n    _this._register(addDisposableListener(container, 'copy', function (e) {\n      return _this.handleCopy(e);\n    }));\n    _this._register(addDisposableListener(container, 'cut', function (e) {\n      return _this.handleCopy(e);\n    }));\n    _this._register(addDisposableListener(container, 'paste', function (e) {\n      return _this.handlePaste(e);\n    }, true));\n    _this._pasteProgressManager = _this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));\n    _this._postPasteWidgetManager = _this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, {\n      id: changePasteTypeCommandId,\n      label: localize('postPasteWidgetTitle', \"Show paste options...\")\n    }));\n    return _this;\n  }\n  _inherits(CopyPasteController, _Disposable);\n  return _createClass(CopyPasteController, [{\n    key: \"changePasteType\",\n    value: function changePasteType() {\n      this._postPasteWidgetManager.tryShowSelector();\n    }\n  }, {\n    key: \"pasteAs\",\n    value: function pasteAs(preferred) {\n      this._editor.focus();\n      try {\n        this._pasteAsActionContext = {\n          preferred: preferred\n        };\n        getActiveDocument().execCommand('paste');\n      } finally {\n        this._pasteAsActionContext = undefined;\n      }\n    }\n  }, {\n    key: \"clearWidgets\",\n    value: function clearWidgets() {\n      this._postPasteWidgetManager.clear();\n    }\n  }, {\n    key: \"isPasteAsEnabled\",\n    value: function isPasteAsEnabled() {\n      return this._editor.getOption(85 /* EditorOption.pasteAs */).enabled && !this._editor.getOption(91 /* EditorOption.readOnly */);\n    }\n  }, {\n    key: \"finishedPaste\",\n    value: function () {\n      var _finishedPaste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this._currentPasteOperation;\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function finishedPaste() {\n        return _finishedPaste.apply(this, arguments);\n      }\n      return finishedPaste;\n    }()\n  }, {\n    key: \"handleCopy\",\n    value: function handleCopy(e) {\n      var _a, _b;\n      if (!this._editor.hasTextFocus()) {\n        return;\n      }\n      if (platform.isWeb) {\n        // Explicitly clear the web resources clipboard.\n        // This is needed because on web, the browser clipboard is faked out using an in-memory store.\n        // This means the resources clipboard is not properly updated when copying from the editor.\n        this._clipboardService.writeResources([]);\n      }\n      if (!e.clipboardData || !this.isPasteAsEnabled()) {\n        return;\n      }\n      var model = this._editor.getModel();\n      var selections = this._editor.getSelections();\n      if (!model || !(selections === null || selections === void 0 ? void 0 : selections.length)) {\n        return;\n      }\n      var enableEmptySelectionClipboard = this._editor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n      var ranges = selections;\n      var wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();\n      if (wasFromEmptySelection) {\n        if (!enableEmptySelectionClipboard) {\n          return;\n        }\n        ranges = [new Range(ranges[0].startLineNumber, 1, ranges[0].startLineNumber, 1 + model.getLineLength(ranges[0].startLineNumber))];\n      }\n      var toCopy = (_a = this._editor._getViewModel()) === null || _a === void 0 ? void 0 : _a.getPlainTextToCopy(selections, enableEmptySelectionClipboard, platform.isWindows);\n      var multicursorText = Array.isArray(toCopy) ? toCopy : null;\n      var defaultPastePayload = {\n        multicursorText: multicursorText,\n        pasteOnNewLine: wasFromEmptySelection,\n        mode: null\n      };\n      var providers = this._languageFeaturesService.documentPasteEditProvider.ordered(model).filter(function (x) {\n        return !!x.prepareDocumentPaste;\n      });\n      if (!providers.length) {\n        this.setCopyMetadata(e.clipboardData, {\n          defaultPastePayload: defaultPastePayload\n        });\n        return;\n      }\n      var dataTransfer = toVSDataTransfer(e.clipboardData);\n      var providerCopyMimeTypes = providers.flatMap(function (x) {\n        var _a;\n        return (_a = x.copyMimeTypes) !== null && _a !== void 0 ? _a : [];\n      });\n      // Save off a handle pointing to data that VS Code maintains.\n      var handle = generateUuid();\n      this.setCopyMetadata(e.clipboardData, {\n        id: handle,\n        providerCopyMimeTypes: providerCopyMimeTypes,\n        defaultPastePayload: defaultPastePayload\n      });\n      var promise = createCancelablePromise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(token) {\n          var results, _iterator, _step, result, _iterator2, _step2, _step2$value, mime, value;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = coalesce;\n                _context3.next = 3;\n                return Promise.all(providers.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider) {\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.prev = 0;\n                          _context2.next = 3;\n                          return provider.prepareDocumentPaste(model, ranges, dataTransfer, token);\n                        case 3:\n                          return _context2.abrupt(\"return\", _context2.sent);\n                        case 6:\n                          _context2.prev = 6;\n                          _context2.t0 = _context2[\"catch\"](0);\n                          console.error(_context2.t0);\n                          return _context2.abrupt(\"return\", undefined);\n                        case 10:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }, _callee2, null, [[0, 6]]);\n                  }));\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n              case 3:\n                _context3.t1 = _context3.sent;\n                results = (0, _context3.t0)(_context3.t1);\n                // Values from higher priority providers should overwrite values from lower priority ones.\n                // Reverse the array to so that the calls to `replace` below will do this\n                results.reverse();\n                _iterator = _createForOfIteratorHelper(results);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    result = _step.value;\n                    _iterator2 = _createForOfIteratorHelper(result);\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        _step2$value = _slicedToArray(_step2.value, 2), mime = _step2$value[0], value = _step2$value[1];\n                        dataTransfer.replace(mime, value);\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                return _context3.abrupt(\"return\", dataTransfer);\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      (_b = CopyPasteController_1._currentCopyOperation) === null || _b === void 0 ? void 0 : _b.dataTransferPromise.cancel();\n      CopyPasteController_1._currentCopyOperation = {\n        handle: handle,\n        dataTransferPromise: promise\n      };\n    }\n  }, {\n    key: \"handlePaste\",\n    value: function () {\n      var _handlePaste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(e) {\n        var _this2 = this;\n        var _a, _b, _c, _d, model, selections, metadata, dataTransfer, allPotentialMimeTypes, allProviders;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(!e.clipboardData || !this._editor.hasTextFocus())) {\n                _context4.next = 2;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 2:\n              (_a = MessageController.get(this._editor)) === null || _a === void 0 ? void 0 : _a.closeMessage();\n              (_b = this._currentPasteOperation) === null || _b === void 0 ? void 0 : _b.cancel();\n              this._currentPasteOperation = undefined;\n              model = this._editor.getModel();\n              selections = this._editor.getSelections();\n              if (!(!(selections === null || selections === void 0 ? void 0 : selections.length) || !model)) {\n                _context4.next = 9;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 9:\n              if (!(!this.isPasteAsEnabled() && !this._pasteAsActionContext // Still enable if paste as was explicitly requested\n              )) {\n                _context4.next = 11;\n                break;\n              }\n              return _context4.abrupt(\"return\");\n            case 11:\n              metadata = this.fetchCopyMetadata(e);\n              dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n              dataTransfer[\"delete\"](vscodeClipboardMime);\n              allPotentialMimeTypes = [].concat(_toConsumableArray(e.clipboardData.types), _toConsumableArray((_c = metadata === null || metadata === void 0 ? void 0 : metadata.providerCopyMimeTypes) !== null && _c !== void 0 ? _c : []), [\n              // TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n              // However we can only check the system clipboard async. For this early check, just add it in.\n              // We filter providers again once we have the final dataTransfer we will use.\n              Mimes.uriList]);\n              allProviders = this._languageFeaturesService.documentPasteEditProvider.ordered(model).filter(function (provider) {\n                var _a, _b;\n                // Filter out providers that don't match the requested paste types\n                var preference = (_a = _this2._pasteAsActionContext) === null || _a === void 0 ? void 0 : _a.preferred;\n                if (preference) {\n                  if (provider.providedPasteEditKinds && !_this2.providerMatchesPreference(provider, preference)) {\n                    return false;\n                  }\n                }\n                // And providers that don't handle any of mime types in the clipboard\n                return (_b = provider.pasteMimeTypes) === null || _b === void 0 ? void 0 : _b.some(function (type) {\n                  return matchesMimeType(type, allPotentialMimeTypes);\n                });\n              });\n              if (allProviders.length) {\n                _context4.next = 19;\n                break;\n              }\n              if ((_d = this._pasteAsActionContext) === null || _d === void 0 ? void 0 : _d.preferred) {\n                this.showPasteAsNoEditMessage(selections, this._pasteAsActionContext.preferred);\n              }\n              return _context4.abrupt(\"return\");\n            case 19:\n              // Prevent the editor's default paste handler from running.\n              // Note that after this point, we are fully responsible for handling paste.\n              // If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n              e.preventDefault();\n              e.stopImmediatePropagation();\n              if (this._pasteAsActionContext) {\n                this.showPasteAsPick(this._pasteAsActionContext.preferred, allProviders, selections, dataTransfer, metadata);\n              } else {\n                this.doPasteInline(allProviders, selections, dataTransfer, metadata, e);\n              }\n            case 22:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function handlePaste(_x3) {\n        return _handlePaste.apply(this, arguments);\n      }\n      return handlePaste;\n    }()\n  }, {\n    key: \"showPasteAsNoEditMessage\",\n    value: function showPasteAsNoEditMessage(selections, preference) {\n      var _a;\n      (_a = MessageController.get(this._editor)) === null || _a === void 0 ? void 0 : _a.showMessage(localize('pasteAsError', \"No paste edits for '{0}' found\", preference instanceof HierarchicalKind ? preference.value : preference.providerId), selections[0].getStartPosition());\n    }\n  }, {\n    key: \"doPasteInline\",\n    value: function doPasteInline(allProviders, selections, dataTransfer, metadata, clipboardEvent) {\n      var _this3 = this;\n      var p = createCancelablePromise( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(token) {\n          var editor, model, tokenSource, supportedProviders, context, providerEdits, canShowWidget;\n          return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                editor = _this3._editor;\n                if (editor.hasModel()) {\n                  _context6.next = 3;\n                  break;\n                }\n                return _context6.abrupt(\"return\");\n              case 3:\n                model = editor.getModel();\n                tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n                _context6.prev = 5;\n                _context6.next = 8;\n                return _this3.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n              case 8:\n                if (!tokenSource.token.isCancellationRequested) {\n                  _context6.next = 10;\n                  break;\n                }\n                return _context6.abrupt(\"return\");\n              case 10:\n                supportedProviders = allProviders.filter(function (provider) {\n                  return _this3.isSupportedPasteProvider(provider, dataTransfer);\n                });\n                if (!(!supportedProviders.length || supportedProviders.length === 1 && supportedProviders[0] instanceof DefaultTextPasteOrDropEditProvider // Only our default text provider is active\n                )) {\n                  _context6.next = 13;\n                  break;\n                }\n                return _context6.abrupt(\"return\", _this3.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token, clipboardEvent));\n              case 13:\n                context = {\n                  triggerKind: DocumentPasteTriggerKind.Automatic\n                };\n                _context6.next = 16;\n                return _this3.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);\n              case 16:\n                providerEdits = _context6.sent;\n                if (!tokenSource.token.isCancellationRequested) {\n                  _context6.next = 19;\n                  break;\n                }\n                return _context6.abrupt(\"return\");\n              case 19:\n                if (!(providerEdits.length === 1 && providerEdits[0].provider instanceof DefaultTextPasteOrDropEditProvider)) {\n                  _context6.next = 21;\n                  break;\n                }\n                return _context6.abrupt(\"return\", _this3.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token, clipboardEvent));\n              case 21:\n                if (!providerEdits.length) {\n                  _context6.next = 24;\n                  break;\n                }\n                canShowWidget = editor.getOption(85 /* EditorOption.pasteAs */).showPasteSelector === 'afterPaste';\n                return _context6.abrupt(\"return\", _this3._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, {\n                  activeEditIndex: 0,\n                  allEdits: providerEdits\n                }, canShowWidget, /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(edit, token) {\n                    var _a, _b, resolved;\n                    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                      while (1) switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return (_b = (_a = edit.provider).resolveDocumentPasteEdit) === null || _b === void 0 ? void 0 : _b.call(_a, edit, token);\n                        case 2:\n                          resolved = _context5.sent;\n                          if (resolved) {\n                            edit.additionalEdit = resolved.additionalEdit;\n                          }\n                          return _context5.abrupt(\"return\", edit);\n                        case 5:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }, _callee5);\n                  }));\n                  return function (_x5, _x6) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }(), tokenSource.token));\n              case 24:\n                _context6.next = 26;\n                return _this3.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token, clipboardEvent);\n              case 26:\n                _context6.prev = 26;\n                tokenSource.dispose();\n                if (_this3._currentPasteOperation === p) {\n                  _this3._currentPasteOperation = undefined;\n                }\n                return _context6.finish(26);\n              case 30:\n              case \"end\":\n                return _context6.stop();\n            }\n          }, _callee6, null, [[5,, 26, 30]]);\n        }));\n        return function (_x4) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n      this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', \"Running paste handlers. Click to cancel\"), p);\n      this._currentPasteOperation = p;\n    }\n  }, {\n    key: \"showPasteAsPick\",\n    value: function showPasteAsPick(preference, allProviders, selections, dataTransfer, metadata) {\n      var _this4 = this;\n      var p = createCancelablePromise( /*#__PURE__*/function () {\n        var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(token) {\n          var editor, model, tokenSource, supportedProviders, context, providerEdits, pickedEdit, selected, combinedWorkspaceEdit;\n          return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n            while (1) switch (_context7.prev = _context7.next) {\n              case 0:\n                editor = _this4._editor;\n                if (editor.hasModel()) {\n                  _context7.next = 3;\n                  break;\n                }\n                return _context7.abrupt(\"return\");\n              case 3:\n                model = editor.getModel();\n                tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n                _context7.prev = 5;\n                _context7.next = 8;\n                return _this4.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n              case 8:\n                if (!tokenSource.token.isCancellationRequested) {\n                  _context7.next = 10;\n                  break;\n                }\n                return _context7.abrupt(\"return\");\n              case 10:\n                // Filter out any providers the don't match the full data transfer we will send them.\n                supportedProviders = allProviders.filter(function (provider) {\n                  return _this4.isSupportedPasteProvider(provider, dataTransfer, preference);\n                });\n                if (preference) {\n                  // We are looking for a specific edit\n                  supportedProviders = supportedProviders.filter(function (provider) {\n                    return _this4.providerMatchesPreference(provider, preference);\n                  });\n                }\n                context = {\n                  triggerKind: DocumentPasteTriggerKind.PasteAs,\n                  only: preference && preference instanceof HierarchicalKind ? preference : undefined\n                };\n                _context7.next = 15;\n                return _this4.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);\n              case 15:\n                providerEdits = _context7.sent;\n                if (!tokenSource.token.isCancellationRequested) {\n                  _context7.next = 18;\n                  break;\n                }\n                return _context7.abrupt(\"return\");\n              case 18:\n                // Filter out any edits that don't match the requested kind\n                if (preference) {\n                  providerEdits = providerEdits.filter(function (edit) {\n                    if (preference instanceof HierarchicalKind) {\n                      return preference.contains(edit.kind);\n                    } else {\n                      return preference.providerId === edit.provider.id;\n                    }\n                  });\n                }\n                if (providerEdits.length) {\n                  _context7.next = 22;\n                  break;\n                }\n                if (context.only) {\n                  _this4.showPasteAsNoEditMessage(selections, context.only);\n                }\n                return _context7.abrupt(\"return\");\n              case 22:\n                if (!preference) {\n                  _context7.next = 26;\n                  break;\n                }\n                pickedEdit = providerEdits.at(0);\n                _context7.next = 30;\n                break;\n              case 26:\n                _context7.next = 28;\n                return _this4._quickInputService.pick(providerEdits.map(function (edit) {\n                  var _a;\n                  return {\n                    label: edit.title,\n                    description: (_a = edit.kind) === null || _a === void 0 ? void 0 : _a.value,\n                    edit: edit\n                  };\n                }), {\n                  placeHolder: localize('pasteAsPickerPlaceholder', \"Select Paste Action\")\n                });\n              case 28:\n                selected = _context7.sent;\n                pickedEdit = selected === null || selected === void 0 ? void 0 : selected.edit;\n              case 30:\n                if (pickedEdit) {\n                  _context7.next = 32;\n                  break;\n                }\n                return _context7.abrupt(\"return\");\n              case 32:\n                combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);\n                _context7.next = 35;\n                return _this4._bulkEditService.apply(combinedWorkspaceEdit, {\n                  editor: _this4._editor\n                });\n              case 35:\n                _context7.prev = 35;\n                tokenSource.dispose();\n                if (_this4._currentPasteOperation === p) {\n                  _this4._currentPasteOperation = undefined;\n                }\n                return _context7.finish(35);\n              case 39:\n              case \"end\":\n                return _context7.stop();\n            }\n          }, _callee7, null, [[5,, 35, 39]]);\n        }));\n        return function (_x7) {\n          return _ref5.apply(this, arguments);\n        };\n      }());\n      this._progressService.withProgress({\n        location: 10 /* ProgressLocation.Window */,\n        title: localize('pasteAsProgress', \"Running paste handlers\")\n      }, function () {\n        return p;\n      });\n    }\n  }, {\n    key: \"setCopyMetadata\",\n    value: function setCopyMetadata(dataTransfer, metadata) {\n      dataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n    }\n  }, {\n    key: \"fetchCopyMetadata\",\n    value: function fetchCopyMetadata(e) {\n      var _a;\n      if (!e.clipboardData) {\n        return;\n      }\n      // Prefer using the clipboard data we saved off\n      var rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n      if (rawMetadata) {\n        try {\n          return JSON.parse(rawMetadata);\n        } catch (_b) {\n          return undefined;\n        }\n      }\n      // Otherwise try to extract the generic text editor metadata\n      var _ClipboardEventUtils$ = ClipboardEventUtils.getTextData(e.clipboardData),\n        _ClipboardEventUtils$2 = _slicedToArray(_ClipboardEventUtils$, 2),\n        _ = _ClipboardEventUtils$2[0],\n        metadata = _ClipboardEventUtils$2[1];\n      if (metadata) {\n        return {\n          defaultPastePayload: {\n            mode: metadata.mode,\n            multicursorText: (_a = metadata.multicursorText) !== null && _a !== void 0 ? _a : null,\n            pasteOnNewLine: !!metadata.isFromEmptySelection\n          }\n        };\n      }\n      return undefined;\n    }\n  }, {\n    key: \"mergeInDataFromCopy\",\n    value: function () {\n      var _mergeInDataFromCopy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(dataTransfer, metadata, token) {\n        var _a, toMergeDataTransfer, _iterator3, _step3, _step3$value, key, value, resources;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!((metadata === null || metadata === void 0 ? void 0 : metadata.id) && ((_a = CopyPasteController_1._currentCopyOperation) === null || _a === void 0 ? void 0 : _a.handle) === metadata.id)) {\n                _context8.next = 8;\n                break;\n              }\n              _context8.next = 3;\n              return CopyPasteController_1._currentCopyOperation.dataTransferPromise;\n            case 3:\n              toMergeDataTransfer = _context8.sent;\n              if (!token.isCancellationRequested) {\n                _context8.next = 6;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 6:\n              _iterator3 = _createForOfIteratorHelper(toMergeDataTransfer);\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  _step3$value = _slicedToArray(_step3.value, 2), key = _step3$value[0], value = _step3$value[1];\n                  dataTransfer.replace(key, value);\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            case 8:\n              if (dataTransfer.has(Mimes.uriList)) {\n                _context8.next = 15;\n                break;\n              }\n              _context8.next = 11;\n              return this._clipboardService.readResources();\n            case 11:\n              resources = _context8.sent;\n              if (!token.isCancellationRequested) {\n                _context8.next = 14;\n                break;\n              }\n              return _context8.abrupt(\"return\");\n            case 14:\n              if (resources.length) {\n                dataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));\n              }\n            case 15:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function mergeInDataFromCopy(_x8, _x9, _x10) {\n        return _mergeInDataFromCopy.apply(this, arguments);\n      }\n      return mergeInDataFromCopy;\n    }()\n  }, {\n    key: \"getPasteEdits\",\n    value: function () {\n      var _getPasteEdits = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(providers, dataTransfer, model, selections, context, token) {\n        var results, edits;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return raceCancellation(Promise.all(providers.map( /*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(provider) {\n                  var _a, _b, _edits;\n                  return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n                    while (1) switch (_context9.prev = _context9.next) {\n                      case 0:\n                        _context9.prev = 0;\n                        _context9.next = 3;\n                        return (_a = provider.provideDocumentPasteEdits) === null || _a === void 0 ? void 0 : _a.call(provider, model, selections, dataTransfer, context, token);\n                      case 3:\n                        _edits = _context9.sent;\n                        return _context9.abrupt(\"return\", (_b = _edits === null || _edits === void 0 ? void 0 : _edits.edits) === null || _b === void 0 ? void 0 : _b.map(function (edit) {\n                          return _objectSpread(_objectSpread({}, edit), {}, {\n                            provider: provider\n                          });\n                        }));\n                      case 7:\n                        _context9.prev = 7;\n                        _context9.t0 = _context9[\"catch\"](0);\n                        console.error(_context9.t0);\n                      case 10:\n                        return _context9.abrupt(\"return\", undefined);\n                      case 11:\n                      case \"end\":\n                        return _context9.stop();\n                    }\n                  }, _callee9, null, [[0, 7]]);\n                }));\n                return function (_x17) {\n                  return _ref6.apply(this, arguments);\n                };\n              }())), token);\n            case 2:\n              results = _context10.sent;\n              edits = coalesce(results !== null && results !== void 0 ? results : []).flat().filter(function (edit) {\n                return !context.only || context.only.contains(edit.kind);\n              });\n              return _context10.abrupt(\"return\", sortEditsByYieldTo(edits));\n            case 5:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      }));\n      function getPasteEdits(_x11, _x12, _x13, _x14, _x15, _x16) {\n        return _getPasteEdits.apply(this, arguments);\n      }\n      return getPasteEdits;\n    }()\n  }, {\n    key: \"applyDefaultPasteHandler\",\n    value: function () {\n      var _applyDefaultPasteHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(dataTransfer, metadata, token, clipboardEvent) {\n        var _a, _b, _c, _d, textDataTransfer, text, payload;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              textDataTransfer = (_a = dataTransfer.get(Mimes.text)) !== null && _a !== void 0 ? _a : dataTransfer.get('text');\n              _context11.next = 3;\n              return textDataTransfer === null || textDataTransfer === void 0 ? void 0 : textDataTransfer.asString();\n            case 3:\n              _context11.t1 = _b = _context11.sent;\n              _context11.t0 = _context11.t1 !== null;\n              if (!_context11.t0) {\n                _context11.next = 7;\n                break;\n              }\n              _context11.t0 = _b !== void 0;\n            case 7:\n              if (!_context11.t0) {\n                _context11.next = 11;\n                break;\n              }\n              _context11.t2 = _b;\n              _context11.next = 12;\n              break;\n            case 11:\n              _context11.t2 = '';\n            case 12:\n              text = _context11.t2;\n              if (!token.isCancellationRequested) {\n                _context11.next = 15;\n                break;\n              }\n              return _context11.abrupt(\"return\");\n            case 15:\n              payload = {\n                clipboardEvent: clipboardEvent,\n                text: text,\n                pasteOnNewLine: (_c = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.pasteOnNewLine) !== null && _c !== void 0 ? _c : false,\n                multicursorText: (_d = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.multicursorText) !== null && _d !== void 0 ? _d : null,\n                mode: null\n              };\n              this._editor.trigger('keyboard', \"paste\" /* Handler.Paste */, payload);\n            case 17:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function applyDefaultPasteHandler(_x18, _x19, _x20, _x21) {\n        return _applyDefaultPasteHandler.apply(this, arguments);\n      }\n      return applyDefaultPasteHandler;\n    }()\n    /**\n     * Filter out providers if they:\n     * - Don't handle any of the data transfer types we have\n     * - Don't match the preferred paste kind\n     */\n  }, {\n    key: \"isSupportedPasteProvider\",\n    value: function isSupportedPasteProvider(provider, dataTransfer, preference) {\n      var _a;\n      if (!((_a = provider.pasteMimeTypes) === null || _a === void 0 ? void 0 : _a.some(function (type) {\n        return dataTransfer.matches(type);\n      }))) {\n        return false;\n      }\n      return !preference || this.providerMatchesPreference(provider, preference);\n    }\n  }, {\n    key: \"providerMatchesPreference\",\n    value: function providerMatchesPreference(provider, preference) {\n      if (preference instanceof HierarchicalKind) {\n        if (!provider.providedPasteEditKinds) {\n          return true;\n        }\n        return provider.providedPasteEditKinds.some(function (providedKind) {\n          return preference.contains(providedKind);\n        });\n      } else {\n        return provider.id === preference.providerId;\n      }\n    }\n  }], [{\n    key: \"get\",\n    value: function get(editor) {\n      return editor.getContribution(CopyPasteController_1.ID);\n    }\n  }]);\n}(Disposable);\nCopyPasteController.ID = 'editor.contrib.copyPasteActionController';\nCopyPasteController = CopyPasteController_1 = __decorate([__param(1, IInstantiationService), __param(2, IBulkEditService), __param(3, IClipboardService), __param(4, ILanguageFeaturesService), __param(5, IQuickInputService), __param(6, IProgressService)], CopyPasteController);\nexport { CopyPasteController };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","_typeof","decorate","i","defineProperty","__param","paramIndex","decorator","CopyPasteController_1","addDisposableListener","getActiveDocument","coalesce","createCancelablePromise","raceCancellation","UriList","createStringDataTransferItem","matchesMimeType","HierarchicalKind","Disposable","Mimes","platform","generateUuid","ClipboardEventUtils","toExternalVSDataTransfer","toVSDataTransfer","IBulkEditService","Range","DocumentPasteTriggerKind","ILanguageFeaturesService","DefaultTextPasteOrDropEditProvider","createCombinedWorkspaceEdit","sortEditsByYieldTo","EditorStateCancellationTokenSource","InlineProgressManager","MessageController","localize","IClipboardService","RawContextKey","IInstantiationService","IProgressService","IQuickInputService","PostEditWidgetManager","changePasteTypeCommandId","pasteWidgetVisibleCtx","vscodeClipboardMime","CopyPasteController","_Disposable","editor","instantiationService","_bulkEditService","_clipboardService","_languageFeaturesService","_quickInputService","_progressService","_this","_classCallCheck","_callSuper","_editor","container","getContainerDomNode","_register","e","handleCopy","handlePaste","_pasteProgressManager","_postPasteWidgetManager","createInstance","id","label","_inherits","_createClass","value","changePasteType","tryShowSelector","pasteAs","preferred","focus","_pasteAsActionContext","execCommand","undefined","clearWidgets","clear","isPasteAsEnabled","getOption","enabled","_finishedPaste","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","_currentPasteOperation","stop","finishedPaste","apply","_a","_b","hasTextFocus","isWeb","writeResources","clipboardData","model","getModel","selections","getSelections","enableEmptySelectionClipboard","ranges","wasFromEmptySelection","isEmpty","startLineNumber","getLineLength","toCopy","_getViewModel","getPlainTextToCopy","isWindows","multicursorText","Array","isArray","defaultPastePayload","pasteOnNewLine","mode","providers","documentPasteEditProvider","ordered","filter","x","prepareDocumentPaste","setCopyMetadata","dataTransfer","providerCopyMimeTypes","flatMap","copyMimeTypes","handle","promise","_ref","_callee3","token","results","_iterator","_step","result","_iterator2","_step2","_step2$value","mime","_callee3$","_context3","t0","Promise","all","map","_ref2","_callee2","provider","_callee2$","_context2","abrupt","sent","console","error","_x2","t1","reverse","_createForOfIteratorHelper","s","n","done","_slicedToArray","replace","err","f","_x","_currentCopyOperation","dataTransferPromise","cancel","_handlePaste","_callee4","_this2","_c","_d","metadata","allPotentialMimeTypes","allProviders","_callee4$","_context4","get","closeMessage","fetchCopyMetadata","concat","_toConsumableArray","types","uriList","preference","providedPasteEditKinds","providerMatchesPreference","pasteMimeTypes","some","type","showPasteAsNoEditMessage","preventDefault","stopImmediatePropagation","showPasteAsPick","doPasteInline","_x3","showMessage","providerId","getStartPosition","clipboardEvent","_this3","p","_ref3","_callee6","tokenSource","supportedProviders","context","providerEdits","canShowWidget","_callee6$","_context6","hasModel","mergeInDataFromCopy","isCancellationRequested","isSupportedPasteProvider","applyDefaultPasteHandler","triggerKind","Automatic","getPasteEdits","showPasteSelector","applyEditAndShowIfNeeded","activeEditIndex","allEdits","_ref4","_callee5","edit","resolved","_callee5$","_context5","resolveDocumentPasteEdit","call","additionalEdit","_x5","_x6","dispose","finish","_x4","showWhile","getEndPosition","_this4","_ref5","_callee7","pickedEdit","selected","combinedWorkspaceEdit","_callee7$","_context7","PasteAs","only","contains","kind","at","pick","title","description","placeHolder","uri","_x7","withProgress","location","setData","JSON","stringify","rawMetadata","getData","parse","_ClipboardEventUtils$","getTextData","_ClipboardEventUtils$2","_","isFromEmptySelection","_mergeInDataFromCopy","_callee8","toMergeDataTransfer","_iterator3","_step3","_step3$value","resources","_callee8$","_context8","has","readResources","append","create","_x8","_x9","_x10","_getPasteEdits","_callee10","edits","_callee10$","_context10","_ref6","_callee9","_edits","_callee9$","_context9","provideDocumentPasteEdits","_objectSpread","_x17","flat","_x11","_x12","_x13","_x14","_x15","_x16","_applyDefaultPasteHandler","_callee11","textDataTransfer","text","payload","_callee11$","_context11","asString","t2","trigger","_x18","_x19","_x20","_x21","matches","providedKind","getContribution","ID"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar CopyPasteController_1;\nimport { addDisposableListener, getActiveDocument } from '../../../../base/browser/dom.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { createCancelablePromise, raceCancellation } from '../../../../base/common/async.js';\nimport { UriList, createStringDataTransferItem, matchesMimeType } from '../../../../base/common/dataTransfer.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { Mimes } from '../../../../base/common/mime.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { generateUuid } from '../../../../base/common/uuid.js';\nimport { ClipboardEventUtils } from '../../../browser/controller/textAreaInput.js';\nimport { toExternalVSDataTransfer, toVSDataTransfer } from '../../../browser/dnd.js';\nimport { IBulkEditService } from '../../../browser/services/bulkEditService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { DocumentPasteTriggerKind } from '../../../common/languages.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport { createCombinedWorkspaceEdit, sortEditsByYieldTo } from './edit.js';\nimport { EditorStateCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { InlineProgressManager } from '../../inlineProgress/browser/inlineProgress.js';\nimport { MessageController } from '../../message/browser/messageController.js';\nimport { localize } from '../../../../nls.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IProgressService } from '../../../../platform/progress/common/progress.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { PostEditWidgetManager } from './postEditWidget.js';\nexport const changePasteTypeCommandId = 'editor.changePasteType';\nexport const pasteWidgetVisibleCtx = new RawContextKey('pasteWidgetVisible', false, localize('pasteWidgetVisible', \"Whether the paste widget is showing\"));\nconst vscodeClipboardMime = 'application/vnd.code.copyMetadata';\nlet CopyPasteController = CopyPasteController_1 = class CopyPasteController extends Disposable {\n    static get(editor) {\n        return editor.getContribution(CopyPasteController_1.ID);\n    }\n    constructor(editor, instantiationService, _bulkEditService, _clipboardService, _languageFeaturesService, _quickInputService, _progressService) {\n        super();\n        this._bulkEditService = _bulkEditService;\n        this._clipboardService = _clipboardService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._quickInputService = _quickInputService;\n        this._progressService = _progressService;\n        this._editor = editor;\n        const container = editor.getContainerDomNode();\n        this._register(addDisposableListener(container, 'copy', e => this.handleCopy(e)));\n        this._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));\n        this._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));\n        this._pasteProgressManager = this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));\n        this._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, { id: changePasteTypeCommandId, label: localize('postPasteWidgetTitle', \"Show paste options...\") }));\n    }\n    changePasteType() {\n        this._postPasteWidgetManager.tryShowSelector();\n    }\n    pasteAs(preferred) {\n        this._editor.focus();\n        try {\n            this._pasteAsActionContext = { preferred };\n            getActiveDocument().execCommand('paste');\n        }\n        finally {\n            this._pasteAsActionContext = undefined;\n        }\n    }\n    clearWidgets() {\n        this._postPasteWidgetManager.clear();\n    }\n    isPasteAsEnabled() {\n        return this._editor.getOption(85 /* EditorOption.pasteAs */).enabled\n            && !this._editor.getOption(91 /* EditorOption.readOnly */);\n    }\n    async finishedPaste() {\n        await this._currentPasteOperation;\n    }\n    handleCopy(e) {\n        var _a, _b;\n        if (!this._editor.hasTextFocus()) {\n            return;\n        }\n        if (platform.isWeb) {\n            // Explicitly clear the web resources clipboard.\n            // This is needed because on web, the browser clipboard is faked out using an in-memory store.\n            // This means the resources clipboard is not properly updated when copying from the editor.\n            this._clipboardService.writeResources([]);\n        }\n        if (!e.clipboardData || !this.isPasteAsEnabled()) {\n            return;\n        }\n        const model = this._editor.getModel();\n        const selections = this._editor.getSelections();\n        if (!model || !(selections === null || selections === void 0 ? void 0 : selections.length)) {\n            return;\n        }\n        const enableEmptySelectionClipboard = this._editor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n        let ranges = selections;\n        const wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();\n        if (wasFromEmptySelection) {\n            if (!enableEmptySelectionClipboard) {\n                return;\n            }\n            ranges = [new Range(ranges[0].startLineNumber, 1, ranges[0].startLineNumber, 1 + model.getLineLength(ranges[0].startLineNumber))];\n        }\n        const toCopy = (_a = this._editor._getViewModel()) === null || _a === void 0 ? void 0 : _a.getPlainTextToCopy(selections, enableEmptySelectionClipboard, platform.isWindows);\n        const multicursorText = Array.isArray(toCopy) ? toCopy : null;\n        const defaultPastePayload = {\n            multicursorText,\n            pasteOnNewLine: wasFromEmptySelection,\n            mode: null\n        };\n        const providers = this._languageFeaturesService.documentPasteEditProvider\n            .ordered(model)\n            .filter(x => !!x.prepareDocumentPaste);\n        if (!providers.length) {\n            this.setCopyMetadata(e.clipboardData, { defaultPastePayload });\n            return;\n        }\n        const dataTransfer = toVSDataTransfer(e.clipboardData);\n        const providerCopyMimeTypes = providers.flatMap(x => { var _a; return (_a = x.copyMimeTypes) !== null && _a !== void 0 ? _a : []; });\n        // Save off a handle pointing to data that VS Code maintains.\n        const handle = generateUuid();\n        this.setCopyMetadata(e.clipboardData, {\n            id: handle,\n            providerCopyMimeTypes,\n            defaultPastePayload\n        });\n        const promise = createCancelablePromise(async (token) => {\n            const results = coalesce(await Promise.all(providers.map(async (provider) => {\n                try {\n                    return await provider.prepareDocumentPaste(model, ranges, dataTransfer, token);\n                }\n                catch (err) {\n                    console.error(err);\n                    return undefined;\n                }\n            })));\n            // Values from higher priority providers should overwrite values from lower priority ones.\n            // Reverse the array to so that the calls to `replace` below will do this\n            results.reverse();\n            for (const result of results) {\n                for (const [mime, value] of result) {\n                    dataTransfer.replace(mime, value);\n                }\n            }\n            return dataTransfer;\n        });\n        (_b = CopyPasteController_1._currentCopyOperation) === null || _b === void 0 ? void 0 : _b.dataTransferPromise.cancel();\n        CopyPasteController_1._currentCopyOperation = { handle: handle, dataTransferPromise: promise };\n    }\n    async handlePaste(e) {\n        var _a, _b, _c, _d;\n        if (!e.clipboardData || !this._editor.hasTextFocus()) {\n            return;\n        }\n        (_a = MessageController.get(this._editor)) === null || _a === void 0 ? void 0 : _a.closeMessage();\n        (_b = this._currentPasteOperation) === null || _b === void 0 ? void 0 : _b.cancel();\n        this._currentPasteOperation = undefined;\n        const model = this._editor.getModel();\n        const selections = this._editor.getSelections();\n        if (!(selections === null || selections === void 0 ? void 0 : selections.length) || !model) {\n            return;\n        }\n        if (!this.isPasteAsEnabled()\n            && !this._pasteAsActionContext // Still enable if paste as was explicitly requested\n        ) {\n            return;\n        }\n        const metadata = this.fetchCopyMetadata(e);\n        const dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n        dataTransfer.delete(vscodeClipboardMime);\n        const allPotentialMimeTypes = [\n            ...e.clipboardData.types,\n            ...(_c = metadata === null || metadata === void 0 ? void 0 : metadata.providerCopyMimeTypes) !== null && _c !== void 0 ? _c : [],\n            // TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n            // However we can only check the system clipboard async. For this early check, just add it in.\n            // We filter providers again once we have the final dataTransfer we will use.\n            Mimes.uriList,\n        ];\n        const allProviders = this._languageFeaturesService.documentPasteEditProvider\n            .ordered(model)\n            .filter(provider => {\n            var _a, _b;\n            // Filter out providers that don't match the requested paste types\n            const preference = (_a = this._pasteAsActionContext) === null || _a === void 0 ? void 0 : _a.preferred;\n            if (preference) {\n                if (provider.providedPasteEditKinds && !this.providerMatchesPreference(provider, preference)) {\n                    return false;\n                }\n            }\n            // And providers that don't handle any of mime types in the clipboard\n            return (_b = provider.pasteMimeTypes) === null || _b === void 0 ? void 0 : _b.some(type => matchesMimeType(type, allPotentialMimeTypes));\n        });\n        if (!allProviders.length) {\n            if ((_d = this._pasteAsActionContext) === null || _d === void 0 ? void 0 : _d.preferred) {\n                this.showPasteAsNoEditMessage(selections, this._pasteAsActionContext.preferred);\n            }\n            return;\n        }\n        // Prevent the editor's default paste handler from running.\n        // Note that after this point, we are fully responsible for handling paste.\n        // If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        if (this._pasteAsActionContext) {\n            this.showPasteAsPick(this._pasteAsActionContext.preferred, allProviders, selections, dataTransfer, metadata);\n        }\n        else {\n            this.doPasteInline(allProviders, selections, dataTransfer, metadata, e);\n        }\n    }\n    showPasteAsNoEditMessage(selections, preference) {\n        var _a;\n        (_a = MessageController.get(this._editor)) === null || _a === void 0 ? void 0 : _a.showMessage(localize('pasteAsError', \"No paste edits for '{0}' found\", preference instanceof HierarchicalKind ? preference.value : preference.providerId), selections[0].getStartPosition());\n    }\n    doPasteInline(allProviders, selections, dataTransfer, metadata, clipboardEvent) {\n        const p = createCancelablePromise(async (token) => {\n            const editor = this._editor;\n            if (!editor.hasModel()) {\n                return;\n            }\n            const model = editor.getModel();\n            const tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n            try {\n                await this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                const supportedProviders = allProviders.filter(provider => this.isSupportedPasteProvider(provider, dataTransfer));\n                if (!supportedProviders.length\n                    || (supportedProviders.length === 1 && supportedProviders[0] instanceof DefaultTextPasteOrDropEditProvider) // Only our default text provider is active\n                ) {\n                    return this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token, clipboardEvent);\n                }\n                const context = {\n                    triggerKind: DocumentPasteTriggerKind.Automatic,\n                };\n                const providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // If the only edit returned is our default text edit, use the default paste handler\n                if (providerEdits.length === 1 && providerEdits[0].provider instanceof DefaultTextPasteOrDropEditProvider) {\n                    return this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token, clipboardEvent);\n                }\n                if (providerEdits.length) {\n                    const canShowWidget = editor.getOption(85 /* EditorOption.pasteAs */).showPasteSelector === 'afterPaste';\n                    return this._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, { activeEditIndex: 0, allEdits: providerEdits }, canShowWidget, async (edit, token) => {\n                        var _a, _b;\n                        const resolved = await ((_b = (_a = edit.provider).resolveDocumentPasteEdit) === null || _b === void 0 ? void 0 : _b.call(_a, edit, token));\n                        if (resolved) {\n                            edit.additionalEdit = resolved.additionalEdit;\n                        }\n                        return edit;\n                    }, tokenSource.token);\n                }\n                await this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token, clipboardEvent);\n            }\n            finally {\n                tokenSource.dispose();\n                if (this._currentPasteOperation === p) {\n                    this._currentPasteOperation = undefined;\n                }\n            }\n        });\n        this._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', \"Running paste handlers. Click to cancel\"), p);\n        this._currentPasteOperation = p;\n    }\n    showPasteAsPick(preference, allProviders, selections, dataTransfer, metadata) {\n        const p = createCancelablePromise(async (token) => {\n            const editor = this._editor;\n            if (!editor.hasModel()) {\n                return;\n            }\n            const model = editor.getModel();\n            const tokenSource = new EditorStateCancellationTokenSource(editor, 1 /* CodeEditorStateFlag.Value */ | 2 /* CodeEditorStateFlag.Selection */, undefined, token);\n            try {\n                await this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // Filter out any providers the don't match the full data transfer we will send them.\n                let supportedProviders = allProviders.filter(provider => this.isSupportedPasteProvider(provider, dataTransfer, preference));\n                if (preference) {\n                    // We are looking for a specific edit\n                    supportedProviders = supportedProviders.filter(provider => this.providerMatchesPreference(provider, preference));\n                }\n                const context = {\n                    triggerKind: DocumentPasteTriggerKind.PasteAs,\n                    only: preference && preference instanceof HierarchicalKind ? preference : undefined,\n                };\n                let providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, context, tokenSource.token);\n                if (tokenSource.token.isCancellationRequested) {\n                    return;\n                }\n                // Filter out any edits that don't match the requested kind\n                if (preference) {\n                    providerEdits = providerEdits.filter(edit => {\n                        if (preference instanceof HierarchicalKind) {\n                            return preference.contains(edit.kind);\n                        }\n                        else {\n                            return preference.providerId === edit.provider.id;\n                        }\n                    });\n                }\n                if (!providerEdits.length) {\n                    if (context.only) {\n                        this.showPasteAsNoEditMessage(selections, context.only);\n                    }\n                    return;\n                }\n                let pickedEdit;\n                if (preference) {\n                    pickedEdit = providerEdits.at(0);\n                }\n                else {\n                    const selected = await this._quickInputService.pick(providerEdits.map((edit) => {\n                        var _a;\n                        return ({\n                            label: edit.title,\n                            description: (_a = edit.kind) === null || _a === void 0 ? void 0 : _a.value,\n                            edit,\n                        });\n                    }), {\n                        placeHolder: localize('pasteAsPickerPlaceholder', \"Select Paste Action\"),\n                    });\n                    pickedEdit = selected === null || selected === void 0 ? void 0 : selected.edit;\n                }\n                if (!pickedEdit) {\n                    return;\n                }\n                const combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);\n                await this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor });\n            }\n            finally {\n                tokenSource.dispose();\n                if (this._currentPasteOperation === p) {\n                    this._currentPasteOperation = undefined;\n                }\n            }\n        });\n        this._progressService.withProgress({\n            location: 10 /* ProgressLocation.Window */,\n            title: localize('pasteAsProgress', \"Running paste handlers\"),\n        }, () => p);\n    }\n    setCopyMetadata(dataTransfer, metadata) {\n        dataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n    }\n    fetchCopyMetadata(e) {\n        var _a;\n        if (!e.clipboardData) {\n            return;\n        }\n        // Prefer using the clipboard data we saved off\n        const rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n        if (rawMetadata) {\n            try {\n                return JSON.parse(rawMetadata);\n            }\n            catch (_b) {\n                return undefined;\n            }\n        }\n        // Otherwise try to extract the generic text editor metadata\n        const [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n        if (metadata) {\n            return {\n                defaultPastePayload: {\n                    mode: metadata.mode,\n                    multicursorText: (_a = metadata.multicursorText) !== null && _a !== void 0 ? _a : null,\n                    pasteOnNewLine: !!metadata.isFromEmptySelection,\n                },\n            };\n        }\n        return undefined;\n    }\n    async mergeInDataFromCopy(dataTransfer, metadata, token) {\n        var _a;\n        if ((metadata === null || metadata === void 0 ? void 0 : metadata.id) && ((_a = CopyPasteController_1._currentCopyOperation) === null || _a === void 0 ? void 0 : _a.handle) === metadata.id) {\n            const toMergeDataTransfer = await CopyPasteController_1._currentCopyOperation.dataTransferPromise;\n            if (token.isCancellationRequested) {\n                return;\n            }\n            for (const [key, value] of toMergeDataTransfer) {\n                dataTransfer.replace(key, value);\n            }\n        }\n        if (!dataTransfer.has(Mimes.uriList)) {\n            const resources = await this._clipboardService.readResources();\n            if (token.isCancellationRequested) {\n                return;\n            }\n            if (resources.length) {\n                dataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));\n            }\n        }\n    }\n    async getPasteEdits(providers, dataTransfer, model, selections, context, token) {\n        const results = await raceCancellation(Promise.all(providers.map(async (provider) => {\n            var _a, _b;\n            try {\n                const edits = await ((_a = provider.provideDocumentPasteEdits) === null || _a === void 0 ? void 0 : _a.call(provider, model, selections, dataTransfer, context, token));\n                // TODO: dispose of edits\n                return (_b = edits === null || edits === void 0 ? void 0 : edits.edits) === null || _b === void 0 ? void 0 : _b.map(edit => ({ ...edit, provider }));\n            }\n            catch (err) {\n                console.error(err);\n            }\n            return undefined;\n        })), token);\n        const edits = coalesce(results !== null && results !== void 0 ? results : []).flat().filter(edit => {\n            return !context.only || context.only.contains(edit.kind);\n        });\n        return sortEditsByYieldTo(edits);\n    }\n    async applyDefaultPasteHandler(dataTransfer, metadata, token, clipboardEvent) {\n        var _a, _b, _c, _d;\n        const textDataTransfer = (_a = dataTransfer.get(Mimes.text)) !== null && _a !== void 0 ? _a : dataTransfer.get('text');\n        const text = (_b = (await (textDataTransfer === null || textDataTransfer === void 0 ? void 0 : textDataTransfer.asString()))) !== null && _b !== void 0 ? _b : '';\n        if (token.isCancellationRequested) {\n            return;\n        }\n        const payload = {\n            clipboardEvent,\n            text,\n            pasteOnNewLine: (_c = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.pasteOnNewLine) !== null && _c !== void 0 ? _c : false,\n            multicursorText: (_d = metadata === null || metadata === void 0 ? void 0 : metadata.defaultPastePayload.multicursorText) !== null && _d !== void 0 ? _d : null,\n            mode: null,\n        };\n        this._editor.trigger('keyboard', \"paste\" /* Handler.Paste */, payload);\n    }\n    /**\n     * Filter out providers if they:\n     * - Don't handle any of the data transfer types we have\n     * - Don't match the preferred paste kind\n     */\n    isSupportedPasteProvider(provider, dataTransfer, preference) {\n        var _a;\n        if (!((_a = provider.pasteMimeTypes) === null || _a === void 0 ? void 0 : _a.some(type => dataTransfer.matches(type)))) {\n            return false;\n        }\n        return !preference || this.providerMatchesPreference(provider, preference);\n    }\n    providerMatchesPreference(provider, preference) {\n        if (preference instanceof HierarchicalKind) {\n            if (!provider.providedPasteEditKinds) {\n                return true;\n            }\n            return provider.providedPasteEditKinds.some(providedKind => preference.contains(providedKind));\n        }\n        else {\n            return provider.id === preference.providerId;\n        }\n    }\n};\nCopyPasteController.ID = 'editor.contrib.copyPasteActionController';\nCopyPasteController = CopyPasteController_1 = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IBulkEditService),\n    __param(3, IClipboardService),\n    __param(4, ILanguageFeaturesService),\n    __param(5, IQuickInputService),\n    __param(6, IProgressService)\n], CopyPasteController);\nexport { CopyPasteController };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}