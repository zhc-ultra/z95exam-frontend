{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _typeof from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.create.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport var IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n  var root = Object.create(null);\n  for (var key in properties) {\n    addToValueTree(root, key, properties[key], conflictReporter);\n  }\n  return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n  var segments = key.split('.');\n  var last = segments.pop();\n  var curr = settingsTreeRoot;\n  for (var i = 0; i < segments.length; i++) {\n    var s = segments[i];\n    var obj = curr[s];\n    switch (_typeof(obj)) {\n      case 'undefined':\n        obj = curr[s] = Object.create(null);\n        break;\n      case 'object':\n        break;\n      default:\n        conflictReporter(\"Ignoring \".concat(key, \" as \").concat(segments.slice(0, i + 1).join('.'), \" is \").concat(JSON.stringify(obj)));\n        return;\n    }\n    curr = obj;\n  }\n  if (_typeof(curr) === 'object' && curr !== null) {\n    try {\n      curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n    } catch (e) {\n      conflictReporter(\"Ignoring \".concat(key, \" as \").concat(segments.join('.'), \" is \").concat(JSON.stringify(curr)));\n    }\n  } else {\n    conflictReporter(\"Ignoring \".concat(key, \" as \").concat(segments.join('.'), \" is \").concat(JSON.stringify(curr)));\n  }\n}\nexport function removeFromValueTree(valueTree, key) {\n  var segments = key.split('.');\n  doRemoveFromValueTree(valueTree, segments);\n}\nfunction doRemoveFromValueTree(valueTree, segments) {\n  var first = segments.shift();\n  if (segments.length === 0) {\n    // Reached last segment\n    delete valueTree[first];\n    return;\n  }\n  if (Object.keys(valueTree).indexOf(first) !== -1) {\n    var value = valueTree[first];\n    if (_typeof(value) === 'object' && !Array.isArray(value)) {\n      doRemoveFromValueTree(value, segments);\n      if (Object.keys(value).length === 0) {\n        delete valueTree[first];\n      }\n    }\n  }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n  function accessSetting(config, path) {\n    var current = config;\n    var _iterator = _createForOfIteratorHelper(path),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var component = _step.value;\n        if (_typeof(current) !== 'object' || current === null) {\n          return undefined;\n        }\n        current = current[component];\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return current;\n  }\n  var path = settingPath.split('.');\n  var result = accessSetting(config, path);\n  return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getLanguageTagSettingPlainKey(settingKey) {\n  return settingKey.replace(/[\\[\\]]/g, '');\n}","map":{"version":3,"names":["createDecorator","IConfigurationService","toValuesTree","properties","conflictReporter","root","Object","create","key","addToValueTree","settingsTreeRoot","value","segments","split","last","pop","curr","i","length","s","obj","_typeof","concat","slice","join","JSON","stringify","e","removeFromValueTree","valueTree","doRemoveFromValueTree","first","shift","keys","indexOf","Array","isArray","getConfigurationValue","config","settingPath","defaultValue","accessSetting","path","current","_iterator","_createForOfIteratorHelper","_step","n","done","component","undefined","err","f","result","getLanguageTagSettingPlainKey","settingKey","replace"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/platform/configuration/common/configuration.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n    const root = Object.create(null);\n    for (const key in properties) {\n        addToValueTree(root, key, properties[key], conflictReporter);\n    }\n    return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n    const segments = key.split('.');\n    const last = segments.pop();\n    let curr = settingsTreeRoot;\n    for (let i = 0; i < segments.length; i++) {\n        const s = segments[i];\n        let obj = curr[s];\n        switch (typeof obj) {\n            case 'undefined':\n                obj = curr[s] = Object.create(null);\n                break;\n            case 'object':\n                break;\n            default:\n                conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);\n                return;\n        }\n        curr = obj;\n    }\n    if (typeof curr === 'object' && curr !== null) {\n        try {\n            curr[last] = value; // workaround https://github.com/microsoft/vscode/issues/13606\n        }\n        catch (e) {\n            conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n        }\n    }\n    else {\n        conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);\n    }\n}\nexport function removeFromValueTree(valueTree, key) {\n    const segments = key.split('.');\n    doRemoveFromValueTree(valueTree, segments);\n}\nfunction doRemoveFromValueTree(valueTree, segments) {\n    const first = segments.shift();\n    if (segments.length === 0) {\n        // Reached last segment\n        delete valueTree[first];\n        return;\n    }\n    if (Object.keys(valueTree).indexOf(first) !== -1) {\n        const value = valueTree[first];\n        if (typeof value === 'object' && !Array.isArray(value)) {\n            doRemoveFromValueTree(value, segments);\n            if (Object.keys(value).length === 0) {\n                delete valueTree[first];\n            }\n        }\n    }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n    function accessSetting(config, path) {\n        let current = config;\n        for (const component of path) {\n            if (typeof current !== 'object' || current === null) {\n                return undefined;\n            }\n            current = current[component];\n        }\n        return current;\n    }\n    const path = settingPath.split('.');\n    const result = accessSetting(config, path);\n    return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getLanguageTagSettingPlainKey(settingKey) {\n    return settingKey.replace(/[\\[\\]]/g, '');\n}\n"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,6CAA6C;AAC7E,OAAO,IAAMC,qBAAqB,GAAGD,eAAe,CAAC,sBAAsB,CAAC;AAC5E,OAAO,SAASE,YAAYA,CAACC,UAAU,EAAEC,gBAAgB,EAAE;EACvD,IAAMC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAChC,KAAK,IAAMC,GAAG,IAAIL,UAAU,EAAE;IAC1BM,cAAc,CAACJ,IAAI,EAAEG,GAAG,EAAEL,UAAU,CAACK,GAAG,CAAC,EAAEJ,gBAAgB,CAAC;EAChE;EACA,OAAOC,IAAI;AACf;AACA,OAAO,SAASI,cAAcA,CAACC,gBAAgB,EAAEF,GAAG,EAAEG,KAAK,EAAEP,gBAAgB,EAAE;EAC3E,IAAMQ,QAAQ,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAMC,IAAI,GAAGF,QAAQ,CAACG,GAAG,CAAC,CAAC;EAC3B,IAAIC,IAAI,GAAGN,gBAAgB;EAC3B,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAME,CAAC,GAAGP,QAAQ,CAACK,CAAC,CAAC;IACrB,IAAIG,GAAG,GAAGJ,IAAI,CAACG,CAAC,CAAC;IACjB,QAAAE,OAAA,CAAeD,GAAG;MACd,KAAK,WAAW;QACZA,GAAG,GAAGJ,IAAI,CAACG,CAAC,CAAC,GAAGb,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QACnC;MACJ,KAAK,QAAQ;QACT;MACJ;QACIH,gBAAgB,aAAAkB,MAAA,CAAad,GAAG,UAAAc,MAAA,CAAOV,QAAQ,CAACW,KAAK,CAAC,CAAC,EAAEN,CAAC,GAAG,CAAC,CAAC,CAACO,IAAI,CAAC,GAAG,CAAC,UAAAF,MAAA,CAAOG,IAAI,CAACC,SAAS,CAACN,GAAG,CAAC,CAAE,CAAC;QACtG;IACR;IACAJ,IAAI,GAAGI,GAAG;EACd;EACA,IAAIC,OAAA,CAAOL,IAAI,MAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE;IAC3C,IAAI;MACAA,IAAI,CAACF,IAAI,CAAC,GAAGH,KAAK,CAAC,CAAC;IACxB,CAAC,CACD,OAAOgB,CAAC,EAAE;MACNvB,gBAAgB,aAAAkB,MAAA,CAAad,GAAG,UAAAc,MAAA,CAAOV,QAAQ,CAACY,IAAI,CAAC,GAAG,CAAC,UAAAF,MAAA,CAAOG,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,CAAE,CAAC;IAC3F;EACJ,CAAC,MACI;IACDZ,gBAAgB,aAAAkB,MAAA,CAAad,GAAG,UAAAc,MAAA,CAAOV,QAAQ,CAACY,IAAI,CAAC,GAAG,CAAC,UAAAF,MAAA,CAAOG,IAAI,CAACC,SAAS,CAACV,IAAI,CAAC,CAAE,CAAC;EAC3F;AACJ;AACA,OAAO,SAASY,mBAAmBA,CAACC,SAAS,EAAErB,GAAG,EAAE;EAChD,IAAMI,QAAQ,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;EAC/BiB,qBAAqB,CAACD,SAAS,EAAEjB,QAAQ,CAAC;AAC9C;AACA,SAASkB,qBAAqBA,CAACD,SAAS,EAAEjB,QAAQ,EAAE;EAChD,IAAMmB,KAAK,GAAGnB,QAAQ,CAACoB,KAAK,CAAC,CAAC;EAC9B,IAAIpB,QAAQ,CAACM,MAAM,KAAK,CAAC,EAAE;IACvB;IACA,OAAOW,SAAS,CAACE,KAAK,CAAC;IACvB;EACJ;EACA,IAAIzB,MAAM,CAAC2B,IAAI,CAACJ,SAAS,CAAC,CAACK,OAAO,CAACH,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;IAC9C,IAAMpB,KAAK,GAAGkB,SAAS,CAACE,KAAK,CAAC;IAC9B,IAAIV,OAAA,CAAOV,KAAK,MAAK,QAAQ,IAAI,CAACwB,KAAK,CAACC,OAAO,CAACzB,KAAK,CAAC,EAAE;MACpDmB,qBAAqB,CAACnB,KAAK,EAAEC,QAAQ,CAAC;MACtC,IAAIN,MAAM,CAAC2B,IAAI,CAACtB,KAAK,CAAC,CAACO,MAAM,KAAK,CAAC,EAAE;QACjC,OAAOW,SAAS,CAACE,KAAK,CAAC;MAC3B;IACJ;EACJ;AACJ;AACA;AACA;AACA;AACA,OAAO,SAASM,qBAAqBA,CAACC,MAAM,EAAEC,WAAW,EAAEC,YAAY,EAAE;EACrE,SAASC,aAAaA,CAACH,MAAM,EAAEI,IAAI,EAAE;IACjC,IAAIC,OAAO,GAAGL,MAAM;IAAC,IAAAM,SAAA,GAAAC,0BAAA,CACGH,IAAI;MAAAI,KAAA;IAAA;MAA5B,KAAAF,SAAA,CAAAzB,CAAA,MAAA2B,KAAA,GAAAF,SAAA,CAAAG,CAAA,IAAAC,IAAA,GAA8B;QAAA,IAAnBC,SAAS,GAAAH,KAAA,CAAAnC,KAAA;QAChB,IAAIU,OAAA,CAAOsB,OAAO,MAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAAE;UACjD,OAAOO,SAAS;QACpB;QACAP,OAAO,GAAGA,OAAO,CAACM,SAAS,CAAC;MAChC;IAAC,SAAAE,GAAA;MAAAP,SAAA,CAAAjB,CAAA,CAAAwB,GAAA;IAAA;MAAAP,SAAA,CAAAQ,CAAA;IAAA;IACD,OAAOT,OAAO;EAClB;EACA,IAAMD,IAAI,GAAGH,WAAW,CAAC1B,KAAK,CAAC,GAAG,CAAC;EACnC,IAAMwC,MAAM,GAAGZ,aAAa,CAACH,MAAM,EAAEI,IAAI,CAAC;EAC1C,OAAO,OAAOW,MAAM,KAAK,WAAW,GAAGb,YAAY,GAAGa,MAAM;AAChE;AACA,OAAO,SAASC,6BAA6BA,CAACC,UAAU,EAAE;EACtD,OAAOA,UAAU,CAACC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}