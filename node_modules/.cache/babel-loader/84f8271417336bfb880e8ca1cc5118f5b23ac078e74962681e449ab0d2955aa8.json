{"ast":null,"code":"import _slicedToArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _get from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _typeof from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/es.string.bold.js\";\nimport \"core-js/modules/es.string.italics.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport './textAreaHandler.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { CopyOptions, TextAreaInput, TextAreaWrapper } from './textAreaInput.js';\nimport { PagedScreenReaderStrategy, TextAreaState, _debugComposition } from './textAreaState.js';\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { getMapForWordSeparators } from '../../common/core/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { TokenizationRegistry } from '../../common/languages.js';\nimport { Color } from '../../../base/common/color.js';\nimport { IME } from '../../../base/common/ime.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nvar VisibleTextAreaData = /*#__PURE__*/function () {\n  function VisibleTextAreaData(_context, modelLineNumber, distanceToModelLineStart, widthOfHiddenLineTextBefore, distanceToModelLineEnd) {\n    _classCallCheck(this, VisibleTextAreaData);\n    this._context = _context;\n    this.modelLineNumber = modelLineNumber;\n    this.distanceToModelLineStart = distanceToModelLineStart;\n    this.widthOfHiddenLineTextBefore = widthOfHiddenLineTextBefore;\n    this.distanceToModelLineEnd = distanceToModelLineEnd;\n    this._visibleTextAreaBrand = undefined;\n    this.startPosition = null;\n    this.endPosition = null;\n    this.visibleTextareaStart = null;\n    this.visibleTextareaEnd = null;\n    /**\n     * When doing composition, the currently composed text might be split up into\n     * multiple tokens, then merged again into a single token, etc. Here we attempt\n     * to keep the presentation of the <textarea> stable by using the previous used\n     * style if multiple tokens come into play. This avoids flickering.\n     */\n    this._previousPresentation = null;\n  }\n  return _createClass(VisibleTextAreaData, [{\n    key: \"prepareRender\",\n    value: function prepareRender(visibleRangeProvider) {\n      var startModelPosition = new Position(this.modelLineNumber, this.distanceToModelLineStart + 1);\n      var endModelPosition = new Position(this.modelLineNumber, this._context.viewModel.model.getLineMaxColumn(this.modelLineNumber) - this.distanceToModelLineEnd);\n      this.startPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(startModelPosition);\n      this.endPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(endModelPosition);\n      if (this.startPosition.lineNumber === this.endPosition.lineNumber) {\n        this.visibleTextareaStart = visibleRangeProvider.visibleRangeForPosition(this.startPosition);\n        this.visibleTextareaEnd = visibleRangeProvider.visibleRangeForPosition(this.endPosition);\n      } else {\n        // TODO: what if the view positions are not on the same line?\n        this.visibleTextareaStart = null;\n        this.visibleTextareaEnd = null;\n      }\n    }\n  }, {\n    key: \"definePresentation\",\n    value: function definePresentation(tokenPresentation) {\n      if (!this._previousPresentation) {\n        // To avoid flickering, once set, always reuse a presentation throughout the entire IME session\n        if (tokenPresentation) {\n          this._previousPresentation = tokenPresentation;\n        } else {\n          this._previousPresentation = {\n            foreground: 1 /* ColorId.DefaultForeground */,\n            italic: false,\n            bold: false,\n            underline: false,\n            strikethrough: false\n          };\n        }\n      }\n      return this._previousPresentation;\n    }\n  }]);\n}();\nvar canUseZeroSizeTextarea = browser.isFirefox;\nvar TextAreaHandler = /*#__PURE__*/function (_ViewPart) {\n  function TextAreaHandler(context, viewController, visibleRangeProvider, _keybindingService, _instantiationService) {\n    var _this;\n    _classCallCheck(this, TextAreaHandler);\n    _this = _callSuper(this, TextAreaHandler, [context]);\n    _this._keybindingService = _keybindingService;\n    _this._instantiationService = _instantiationService;\n    _this._primaryCursorPosition = new Position(1, 1);\n    _this._primaryCursorVisibleRange = null;\n    _this._viewController = viewController;\n    _this._visibleRangeProvider = visibleRangeProvider;\n    _this._scrollLeft = 0;\n    _this._scrollTop = 0;\n    var options = _this._context.configuration.options;\n    var layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n    _this._setAccessibilityOptions(options);\n    _this._contentLeft = layoutInfo.contentLeft;\n    _this._contentWidth = layoutInfo.contentWidth;\n    _this._contentHeight = layoutInfo.height;\n    _this._fontInfo = options.get(50 /* EditorOption.fontInfo */);\n    _this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n    _this._emptySelectionClipboard = options.get(37 /* EditorOption.emptySelectionClipboard */);\n    _this._copyWithSyntaxHighlighting = options.get(25 /* EditorOption.copyWithSyntaxHighlighting */);\n    _this._visibleTextArea = null;\n    _this._selections = [new Selection(1, 1, 1, 1)];\n    _this._modelSelections = [new Selection(1, 1, 1, 1)];\n    _this._lastRenderPosition = null;\n    // Text Area (The focus will always be in the textarea when the cursor is blinking)\n    _this.textArea = createFastDomNode(document.createElement('textarea'));\n    PartFingerprints.write(_this.textArea, 7 /* PartFingerprint.TextArea */);\n    _this.textArea.setClassName(\"inputarea \".concat(MOUSE_CURSOR_TEXT_CSS_CLASS_NAME));\n    _this.textArea.setAttribute('wrap', _this._textAreaWrapping && !_this._visibleTextArea ? 'on' : 'off');\n    var _this$_context$viewMo = _this._context.viewModel.model.getOptions(),\n      tabSize = _this$_context$viewMo.tabSize;\n    _this.textArea.domNode.style.tabSize = \"\".concat(tabSize * _this._fontInfo.spaceWidth, \"px\");\n    _this.textArea.setAttribute('autocorrect', 'off');\n    _this.textArea.setAttribute('autocapitalize', 'off');\n    _this.textArea.setAttribute('autocomplete', 'off');\n    _this.textArea.setAttribute('spellcheck', 'false');\n    _this.textArea.setAttribute('aria-label', _this._getAriaLabel(options));\n    _this.textArea.setAttribute('aria-required', options.get(5 /* EditorOption.ariaRequired */) ? 'true' : 'false');\n    _this.textArea.setAttribute('tabindex', String(options.get(124 /* EditorOption.tabIndex */)));\n    _this.textArea.setAttribute('role', 'textbox');\n    _this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\n    _this.textArea.setAttribute('aria-multiline', 'true');\n    _this.textArea.setAttribute('aria-autocomplete', options.get(91 /* EditorOption.readOnly */) ? 'none' : 'both');\n    _this._ensureReadOnlyAttribute();\n    _this.textAreaCover = createFastDomNode(document.createElement('div'));\n    _this.textAreaCover.setPosition('absolute');\n    var simpleModel = {\n      getLineCount: function getLineCount() {\n        return _this._context.viewModel.getLineCount();\n      },\n      getLineMaxColumn: function getLineMaxColumn(lineNumber) {\n        return _this._context.viewModel.getLineMaxColumn(lineNumber);\n      },\n      getValueInRange: function getValueInRange(range, eol) {\n        return _this._context.viewModel.getValueInRange(range, eol);\n      },\n      getValueLengthInRange: function getValueLengthInRange(range, eol) {\n        return _this._context.viewModel.getValueLengthInRange(range, eol);\n      },\n      modifyPosition: function modifyPosition(position, offset) {\n        return _this._context.viewModel.modifyPosition(position, offset);\n      }\n    };\n    var textAreaInputHost = {\n      getDataToCopy: function getDataToCopy() {\n        var rawTextToCopy = _this._context.viewModel.getPlainTextToCopy(_this._modelSelections, _this._emptySelectionClipboard, platform.isWindows);\n        var newLineCharacter = _this._context.viewModel.model.getEOL();\n        var isFromEmptySelection = _this._emptySelectionClipboard && _this._modelSelections.length === 1 && _this._modelSelections[0].isEmpty();\n        var multicursorText = Array.isArray(rawTextToCopy) ? rawTextToCopy : null;\n        var text = Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy;\n        var html = undefined;\n        var mode = null;\n        if (CopyOptions.forceCopyWithSyntaxHighlighting || _this._copyWithSyntaxHighlighting && text.length < 65536) {\n          var richText = _this._context.viewModel.getRichTextToCopy(_this._modelSelections, _this._emptySelectionClipboard);\n          if (richText) {\n            html = richText.html;\n            mode = richText.mode;\n          }\n        }\n        return {\n          isFromEmptySelection: isFromEmptySelection,\n          multicursorText: multicursorText,\n          text: text,\n          html: html,\n          mode: mode\n        };\n      },\n      getScreenReaderContent: function getScreenReaderContent() {\n        if (_this._accessibilitySupport === 1 /* AccessibilitySupport.Disabled */) {\n          // We know for a fact that a screen reader is not attached\n          // On OSX, we write the character before the cursor to allow for \"long-press\" composition\n          // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n          var selection = _this._selections[0];\n          if (platform.isMacintosh && selection.isEmpty()) {\n            var position = selection.getStartPosition();\n            var textBefore = _this._getWordBeforePosition(position);\n            if (textBefore.length === 0) {\n              textBefore = _this._getCharacterBeforePosition(position);\n            }\n            if (textBefore.length > 0) {\n              return new TextAreaState(textBefore, textBefore.length, textBefore.length, Range.fromPositions(position), 0);\n            }\n          }\n          // on macOS, write current selection into textarea will allow system text services pick selected text,\n          // but we still want to limit the amount of text given Chromium handles very poorly text even of a few\n          // thousand chars\n          // (https://github.com/microsoft/vscode/issues/27799)\n          var LIMIT_CHARS = 500;\n          if (platform.isMacintosh && !selection.isEmpty() && simpleModel.getValueLengthInRange(selection, 0 /* EndOfLinePreference.TextDefined */) < LIMIT_CHARS) {\n            var text = simpleModel.getValueInRange(selection, 0 /* EndOfLinePreference.TextDefined */);\n            return new TextAreaState(text, 0, text.length, selection, 0);\n          }\n          // on Safari, document.execCommand('cut') and document.execCommand('copy') will just not work\n          // if the textarea has no content selected. So if there is an editor selection, ensure something\n          // is selected in the textarea.\n          if (browser.isSafari && !selection.isEmpty()) {\n            var placeholderText = 'vscode-placeholder';\n            return new TextAreaState(placeholderText, 0, placeholderText.length, null, undefined);\n          }\n          return TextAreaState.EMPTY;\n        }\n        if (browser.isAndroid) {\n          // when tapping in the editor on a word, Android enters composition mode.\n          // in the `compositionstart` event we cannot clear the textarea, because\n          // it then forgets to ever send a `compositionend`.\n          // we therefore only write the current word in the textarea\n          var _selection = _this._selections[0];\n          if (_selection.isEmpty()) {\n            var _position = _selection.getStartPosition();\n            var _this$_getAndroidWord = _this._getAndroidWordAtPosition(_position),\n              _this$_getAndroidWord2 = _slicedToArray(_this$_getAndroidWord, 2),\n              wordAtPosition = _this$_getAndroidWord2[0],\n              positionOffsetInWord = _this$_getAndroidWord2[1];\n            if (wordAtPosition.length > 0) {\n              return new TextAreaState(wordAtPosition, positionOffsetInWord, positionOffsetInWord, Range.fromPositions(_position), 0);\n            }\n          }\n          return TextAreaState.EMPTY;\n        }\n        return PagedScreenReaderStrategy.fromEditorSelection(simpleModel, _this._selections[0], _this._accessibilityPageSize, _this._accessibilitySupport === 0 /* AccessibilitySupport.Unknown */);\n      },\n      deduceModelPosition: function deduceModelPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        return _this._context.viewModel.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n      }\n    };\n    var textAreaWrapper = _this._register(new TextAreaWrapper(_this.textArea.domNode));\n    _this._textAreaInput = _this._register(_this._instantiationService.createInstance(TextAreaInput, textAreaInputHost, textAreaWrapper, platform.OS, {\n      isAndroid: browser.isAndroid,\n      isChrome: browser.isChrome,\n      isFirefox: browser.isFirefox,\n      isSafari: browser.isSafari\n    }));\n    _this._register(_this._textAreaInput.onKeyDown(function (e) {\n      _this._viewController.emitKeyDown(e);\n    }));\n    _this._register(_this._textAreaInput.onKeyUp(function (e) {\n      _this._viewController.emitKeyUp(e);\n    }));\n    _this._register(_this._textAreaInput.onPaste(function (e) {\n      var pasteOnNewLine = false;\n      var multicursorText = null;\n      var mode = null;\n      if (e.metadata) {\n        pasteOnNewLine = _this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection;\n        multicursorText = typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null;\n        mode = e.metadata.mode;\n      }\n      _this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\n    }));\n    _this._register(_this._textAreaInput.onCut(function () {\n      _this._viewController.cut();\n    }));\n    _this._register(_this._textAreaInput.onType(function (e) {\n      if (e.replacePrevCharCnt || e.replaceNextCharCnt || e.positionDelta) {\n        // must be handled through the new command\n        if (_debugComposition) {\n          console.log(\" => compositionType: <<\".concat(e.text, \">>, \").concat(e.replacePrevCharCnt, \", \").concat(e.replaceNextCharCnt, \", \").concat(e.positionDelta));\n        }\n        _this._viewController.compositionType(e.text, e.replacePrevCharCnt, e.replaceNextCharCnt, e.positionDelta);\n      } else {\n        if (_debugComposition) {\n          console.log(\" => type: <<\".concat(e.text, \">>\"));\n        }\n        _this._viewController.type(e.text);\n      }\n    }));\n    _this._register(_this._textAreaInput.onSelectionChangeRequest(function (modelSelection) {\n      _this._viewController.setSelection(modelSelection);\n    }));\n    _this._register(_this._textAreaInput.onCompositionStart(function (e) {\n      // The textarea might contain some content when composition starts.\n      //\n      // When we make the textarea visible, it always has a height of 1 line,\n      // so we don't need to worry too much about content on lines above or below\n      // the selection.\n      //\n      // However, the text on the current line needs to be made visible because\n      // some IME methods allow to move to other glyphs on the current line\n      // (by pressing arrow keys).\n      //\n      // (1) The textarea might contain only some parts of the current line,\n      // like the word before the selection. Also, the content inside the textarea\n      // can grow or shrink as composition occurs. We therefore anchor the textarea\n      // in terms of distance to a certain line start and line end.\n      //\n      // (2) Also, we should not make \\t characters visible, because their rendering\n      // inside the <textarea> will not align nicely with our rendering. We therefore\n      // will hide (if necessary) some of the leading text on the current line.\n      var ta = _this.textArea.domNode;\n      var modelSelection = _this._modelSelections[0];\n      var _ref = function () {\n          // Find the text that is on the current line before the selection\n          var textBeforeSelection = ta.value.substring(0, Math.min(ta.selectionStart, ta.selectionEnd));\n          var lineFeedOffset1 = textBeforeSelection.lastIndexOf('\\n');\n          var lineTextBeforeSelection = textBeforeSelection.substring(lineFeedOffset1 + 1);\n          // We now search to see if we should hide some part of it (if it contains \\t)\n          var tabOffset1 = lineTextBeforeSelection.lastIndexOf('\\t');\n          var desiredVisibleBeforeCharCount = lineTextBeforeSelection.length - tabOffset1 - 1;\n          var startModelPosition = modelSelection.getStartPosition();\n          var visibleBeforeCharCount = Math.min(startModelPosition.column - 1, desiredVisibleBeforeCharCount);\n          var distanceToModelLineStart = startModelPosition.column - 1 - visibleBeforeCharCount;\n          var hiddenLineTextBefore = lineTextBeforeSelection.substring(0, lineTextBeforeSelection.length - visibleBeforeCharCount);\n          var _this$_context$viewMo2 = _this._context.viewModel.model.getOptions(),\n            tabSize = _this$_context$viewMo2.tabSize;\n          var widthOfHiddenTextBefore = measureText(_this.textArea.domNode.ownerDocument, hiddenLineTextBefore, _this._fontInfo, tabSize);\n          return {\n            distanceToModelLineStart: distanceToModelLineStart,\n            widthOfHiddenTextBefore: widthOfHiddenTextBefore\n          };\n        }(),\n        distanceToModelLineStart = _ref.distanceToModelLineStart,\n        widthOfHiddenTextBefore = _ref.widthOfHiddenTextBefore;\n      var _ref2 = function () {\n          // Find the text that is on the current line after the selection\n          var textAfterSelection = ta.value.substring(Math.max(ta.selectionStart, ta.selectionEnd));\n          var lineFeedOffset2 = textAfterSelection.indexOf('\\n');\n          var lineTextAfterSelection = lineFeedOffset2 === -1 ? textAfterSelection : textAfterSelection.substring(0, lineFeedOffset2);\n          var tabOffset2 = lineTextAfterSelection.indexOf('\\t');\n          var desiredVisibleAfterCharCount = tabOffset2 === -1 ? lineTextAfterSelection.length : lineTextAfterSelection.length - tabOffset2 - 1;\n          var endModelPosition = modelSelection.getEndPosition();\n          var visibleAfterCharCount = Math.min(_this._context.viewModel.model.getLineMaxColumn(endModelPosition.lineNumber) - endModelPosition.column, desiredVisibleAfterCharCount);\n          var distanceToModelLineEnd = _this._context.viewModel.model.getLineMaxColumn(endModelPosition.lineNumber) - endModelPosition.column - visibleAfterCharCount;\n          return {\n            distanceToModelLineEnd: distanceToModelLineEnd\n          };\n        }(),\n        distanceToModelLineEnd = _ref2.distanceToModelLineEnd;\n      // Scroll to reveal the location in the editor where composition occurs\n      _this._context.viewModel.revealRange('keyboard', true, Range.fromPositions(_this._selections[0].getStartPosition()), 0 /* viewEvents.VerticalRevealType.Simple */, 1 /* ScrollType.Immediate */);\n      _this._visibleTextArea = new VisibleTextAreaData(_this._context, modelSelection.startLineNumber, distanceToModelLineStart, widthOfHiddenTextBefore, distanceToModelLineEnd);\n      // We turn off wrapping if the <textarea> becomes visible for composition\n      _this.textArea.setAttribute('wrap', _this._textAreaWrapping && !_this._visibleTextArea ? 'on' : 'off');\n      _this._visibleTextArea.prepareRender(_this._visibleRangeProvider);\n      _this._render();\n      // Show the textarea\n      _this.textArea.setClassName(\"inputarea \".concat(MOUSE_CURSOR_TEXT_CSS_CLASS_NAME, \" ime-input\"));\n      _this._viewController.compositionStart();\n      _this._context.viewModel.onCompositionStart();\n    }));\n    _this._register(_this._textAreaInput.onCompositionUpdate(function (e) {\n      if (!_this._visibleTextArea) {\n        return;\n      }\n      _this._visibleTextArea.prepareRender(_this._visibleRangeProvider);\n      _this._render();\n    }));\n    _this._register(_this._textAreaInput.onCompositionEnd(function () {\n      _this._visibleTextArea = null;\n      // We turn on wrapping as necessary if the <textarea> hides after composition\n      _this.textArea.setAttribute('wrap', _this._textAreaWrapping && !_this._visibleTextArea ? 'on' : 'off');\n      _this._render();\n      _this.textArea.setClassName(\"inputarea \".concat(MOUSE_CURSOR_TEXT_CSS_CLASS_NAME));\n      _this._viewController.compositionEnd();\n      _this._context.viewModel.onCompositionEnd();\n    }));\n    _this._register(_this._textAreaInput.onFocus(function () {\n      _this._context.viewModel.setHasFocus(true);\n    }));\n    _this._register(_this._textAreaInput.onBlur(function () {\n      _this._context.viewModel.setHasFocus(false);\n    }));\n    _this._register(IME.onDidChange(function () {\n      _this._ensureReadOnlyAttribute();\n    }));\n    return _this;\n  }\n  _inherits(TextAreaHandler, _ViewPart);\n  return _createClass(TextAreaHandler, [{\n    key: \"writeScreenReaderContent\",\n    value: function writeScreenReaderContent(reason) {\n      this._textAreaInput.writeNativeTextAreaContent(reason);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(TextAreaHandler.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"_getAndroidWordAtPosition\",\n    value: function _getAndroidWordAtPosition(position) {\n      var ANDROID_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\",.<>/?';\n      var lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n      var wordSeparators = getMapForWordSeparators(ANDROID_WORD_SEPARATORS, []);\n      var goingLeft = true;\n      var startColumn = position.column;\n      var goingRight = true;\n      var endColumn = position.column;\n      var distance = 0;\n      while (distance < 50 && (goingLeft || goingRight)) {\n        if (goingLeft && startColumn <= 1) {\n          goingLeft = false;\n        }\n        if (goingLeft) {\n          var charCode = lineContent.charCodeAt(startColumn - 2);\n          var charClass = wordSeparators.get(charCode);\n          if (charClass !== 0 /* WordCharacterClass.Regular */) {\n            goingLeft = false;\n          } else {\n            startColumn--;\n          }\n        }\n        if (goingRight && endColumn > lineContent.length) {\n          goingRight = false;\n        }\n        if (goingRight) {\n          var _charCode = lineContent.charCodeAt(endColumn - 1);\n          var _charClass = wordSeparators.get(_charCode);\n          if (_charClass !== 0 /* WordCharacterClass.Regular */) {\n            goingRight = false;\n          } else {\n            endColumn++;\n          }\n        }\n        distance++;\n      }\n      return [lineContent.substring(startColumn - 1, endColumn - 1), position.column - startColumn];\n    }\n  }, {\n    key: \"_getWordBeforePosition\",\n    value: function _getWordBeforePosition(position) {\n      var lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n      var wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(131 /* EditorOption.wordSeparators */), []);\n      var column = position.column;\n      var distance = 0;\n      while (column > 1) {\n        var charCode = lineContent.charCodeAt(column - 2);\n        var charClass = wordSeparators.get(charCode);\n        if (charClass !== 0 /* WordCharacterClass.Regular */ || distance > 50) {\n          return lineContent.substring(column - 1, position.column - 1);\n        }\n        distance++;\n        column--;\n      }\n      return lineContent.substring(0, position.column - 1);\n    }\n  }, {\n    key: \"_getCharacterBeforePosition\",\n    value: function _getCharacterBeforePosition(position) {\n      if (position.column > 1) {\n        var lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n        var charBefore = lineContent.charAt(position.column - 2);\n        if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n          return charBefore;\n        }\n      }\n      return '';\n    }\n  }, {\n    key: \"_getAriaLabel\",\n    value: function _getAriaLabel(options) {\n      var _a, _b, _c;\n      var accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n      if (accessibilitySupport === 1 /* AccessibilitySupport.Disabled */) {\n        var toggleKeybindingLabel = (_a = this._keybindingService.lookupKeybinding('editor.action.toggleScreenReaderAccessibilityMode')) === null || _a === void 0 ? void 0 : _a.getAriaLabel();\n        var runCommandKeybindingLabel = (_b = this._keybindingService.lookupKeybinding('workbench.action.showCommands')) === null || _b === void 0 ? void 0 : _b.getAriaLabel();\n        var keybindingEditorKeybindingLabel = (_c = this._keybindingService.lookupKeybinding('workbench.action.openGlobalKeybindings')) === null || _c === void 0 ? void 0 : _c.getAriaLabel();\n        var editorNotAccessibleMessage = nls.localize('accessibilityModeOff', \"The editor is not accessible at this time.\");\n        if (toggleKeybindingLabel) {\n          return nls.localize('accessibilityOffAriaLabel', \"{0} To enable screen reader optimized mode, use {1}\", editorNotAccessibleMessage, toggleKeybindingLabel);\n        } else if (runCommandKeybindingLabel) {\n          return nls.localize('accessibilityOffAriaLabelNoKb', \"{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.\", editorNotAccessibleMessage, runCommandKeybindingLabel);\n        } else if (keybindingEditorKeybindingLabel) {\n          return nls.localize('accessibilityOffAriaLabelNoKbs', \"{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it.\", editorNotAccessibleMessage, keybindingEditorKeybindingLabel);\n        } else {\n          // SOS\n          return editorNotAccessibleMessage;\n        }\n      }\n      return options.get(4 /* EditorOption.ariaLabel */);\n    }\n  }, {\n    key: \"_setAccessibilityOptions\",\n    value: function _setAccessibilityOptions(options) {\n      this._accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n      var accessibilityPageSize = options.get(3 /* EditorOption.accessibilityPageSize */);\n      if (this._accessibilitySupport === 2 /* AccessibilitySupport.Enabled */ && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\n        // If a screen reader is attached and the default value is not set we should automatically increase the page size to 500 for a better experience\n        this._accessibilityPageSize = 500;\n      } else {\n        this._accessibilityPageSize = accessibilityPageSize;\n      }\n      // When wrapping is enabled and a screen reader might be attached,\n      // we will size the textarea to match the width used for wrapping points computation (see `domLineBreaksComputer.ts`).\n      // This is because screen readers will read the text in the textarea and we'd like that the\n      // wrapping points in the textarea match the wrapping points in the editor.\n      var layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n      var wrappingColumn = layoutInfo.wrappingColumn;\n      if (wrappingColumn !== -1 && this._accessibilitySupport !== 1 /* AccessibilitySupport.Disabled */) {\n        var fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._textAreaWrapping = true;\n        this._textAreaWidth = Math.round(wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n      } else {\n        this._textAreaWrapping = false;\n        this._textAreaWidth = canUseZeroSizeTextarea ? 0 : 1;\n      }\n    }\n    // --- begin event handlers\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      var layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n      this._setAccessibilityOptions(options);\n      this._contentLeft = layoutInfo.contentLeft;\n      this._contentWidth = layoutInfo.contentWidth;\n      this._contentHeight = layoutInfo.height;\n      this._fontInfo = options.get(50 /* EditorOption.fontInfo */);\n      this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n      this._emptySelectionClipboard = options.get(37 /* EditorOption.emptySelectionClipboard */);\n      this._copyWithSyntaxHighlighting = options.get(25 /* EditorOption.copyWithSyntaxHighlighting */);\n      this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n      var _this$_context$viewMo3 = this._context.viewModel.model.getOptions(),\n        tabSize = _this$_context$viewMo3.tabSize;\n      this.textArea.domNode.style.tabSize = \"\".concat(tabSize * this._fontInfo.spaceWidth, \"px\");\n      this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n      this.textArea.setAttribute('aria-required', options.get(5 /* EditorOption.ariaRequired */) ? 'true' : 'false');\n      this.textArea.setAttribute('tabindex', String(options.get(124 /* EditorOption.tabIndex */)));\n      if (e.hasChanged(34 /* EditorOption.domReadOnly */) || e.hasChanged(91 /* EditorOption.readOnly */)) {\n        this._ensureReadOnlyAttribute();\n      }\n      if (e.hasChanged(2 /* EditorOption.accessibilitySupport */)) {\n        this._textAreaInput.writeNativeTextAreaContent('strategy changed');\n      }\n      return true;\n    }\n  }, {\n    key: \"onCursorStateChanged\",\n    value: function onCursorStateChanged(e) {\n      this._selections = e.selections.slice(0);\n      this._modelSelections = e.modelSelections.slice(0);\n      // We must update the <textarea> synchronously, otherwise long press IME on macos breaks.\n      // See https://github.com/microsoft/vscode/issues/165821\n      this._textAreaInput.writeNativeTextAreaContent('selection changed');\n      return true;\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged(e) {\n      // true for inline decorations that can end up relayouting text\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      this._scrollLeft = e.scrollLeft;\n      this._scrollTop = e.scrollTop;\n      return true;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    }\n    // --- end event handlers\n    // --- begin view API\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this._textAreaInput.isFocused();\n    }\n  }, {\n    key: \"focusTextArea\",\n    value: function focusTextArea() {\n      this._textAreaInput.focusTextArea();\n    }\n  }, {\n    key: \"getLastRenderData\",\n    value: function getLastRenderData() {\n      return this._lastRenderPosition;\n    }\n  }, {\n    key: \"setAriaOptions\",\n    value: function setAriaOptions(options) {\n      if (options.activeDescendant) {\n        this.textArea.setAttribute('aria-haspopup', 'true');\n        this.textArea.setAttribute('aria-autocomplete', 'list');\n        this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\n      } else {\n        this.textArea.setAttribute('aria-haspopup', 'false');\n        this.textArea.setAttribute('aria-autocomplete', 'both');\n        this.textArea.removeAttribute('aria-activedescendant');\n      }\n      if (options.role) {\n        this.textArea.setAttribute('role', options.role);\n      }\n    }\n    // --- end view API\n  }, {\n    key: \"_ensureReadOnlyAttribute\",\n    value: function _ensureReadOnlyAttribute() {\n      var options = this._context.configuration.options;\n      // When someone requests to disable IME, we set the \"readonly\" attribute on the <textarea>.\n      // This will prevent composition.\n      var useReadOnly = !IME.enabled || options.get(34 /* EditorOption.domReadOnly */) && options.get(91 /* EditorOption.readOnly */);\n      if (useReadOnly) {\n        this.textArea.setAttribute('readonly', 'true');\n      } else {\n        this.textArea.removeAttribute('readonly');\n      }\n    }\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      var _a;\n      this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n      this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\n      (_a = this._visibleTextArea) === null || _a === void 0 ? void 0 : _a.prepareRender(ctx);\n    }\n  }, {\n    key: \"render\",\n    value: function render(ctx) {\n      this._textAreaInput.writeNativeTextAreaContent('render');\n      this._render();\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      var _a;\n      if (this._visibleTextArea) {\n        // The text area is visible for composition reasons\n        var visibleStart = this._visibleTextArea.visibleTextareaStart;\n        var visibleEnd = this._visibleTextArea.visibleTextareaEnd;\n        var startPosition = this._visibleTextArea.startPosition;\n        var endPosition = this._visibleTextArea.endPosition;\n        if (startPosition && endPosition && visibleStart && visibleEnd && visibleEnd.left >= this._scrollLeft && visibleStart.left <= this._scrollLeft + this._contentWidth) {\n          var _top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._primaryCursorPosition.lineNumber) - this._scrollTop;\n          var lineCount = this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));\n          var scrollLeft = this._visibleTextArea.widthOfHiddenLineTextBefore;\n          var _left = this._contentLeft + visibleStart.left - this._scrollLeft;\n          // See https://github.com/microsoft/vscode/issues/141725#issuecomment-1050670841\n          // Here we are adding +1 to avoid flickering that might be caused by having a width that is too small.\n          // This could be caused by rounding errors that might only show up with certain font families.\n          // In other words, a pixel might be lost when doing something like\n          //      `Math.round(end) - Math.round(start)`\n          // vs\n          //      `Math.round(end - start)`\n          var width = visibleEnd.left - visibleStart.left + 1;\n          if (_left < this._contentLeft) {\n            // the textarea would be rendered on top of the margin,\n            // so reduce its width. We use the same technique as\n            // for hiding text before\n            var delta = this._contentLeft - _left;\n            _left += delta;\n            scrollLeft += delta;\n            width -= delta;\n          }\n          if (width > this._contentWidth) {\n            // the textarea would be wider than the content width,\n            // so reduce its width.\n            width = this._contentWidth;\n          }\n          // Try to render the textarea with the color/font style to match the text under it\n          var viewLineData = this._context.viewModel.getViewLineData(startPosition.lineNumber);\n          var startTokenIndex = viewLineData.tokens.findTokenIndexAtOffset(startPosition.column - 1);\n          var endTokenIndex = viewLineData.tokens.findTokenIndexAtOffset(endPosition.column - 1);\n          var textareaSpansSingleToken = startTokenIndex === endTokenIndex;\n          var presentation = this._visibleTextArea.definePresentation(textareaSpansSingleToken ? viewLineData.tokens.getPresentation(startTokenIndex) : null);\n          this.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n          this.textArea.domNode.scrollLeft = scrollLeft;\n          this._doRender({\n            lastRenderPosition: null,\n            top: _top,\n            left: _left,\n            width: width,\n            height: this._lineHeight,\n            useCover: false,\n            color: (TokenizationRegistry.getColorMap() || [])[presentation.foreground],\n            italic: presentation.italic,\n            bold: presentation.bold,\n            underline: presentation.underline,\n            strikethrough: presentation.strikethrough\n          });\n        }\n        return;\n      }\n      if (!this._primaryCursorVisibleRange) {\n        // The primary cursor is outside the viewport => place textarea to the top left\n        this._renderAtTopLeft();\n        return;\n      }\n      var left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n      if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n        // cursor is outside the viewport\n        this._renderAtTopLeft();\n        return;\n      }\n      var top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n      if (top < 0 || top > this._contentHeight) {\n        // cursor is outside the viewport\n        this._renderAtTopLeft();\n        return;\n      }\n      // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n      if (platform.isMacintosh || this._accessibilitySupport === 2 /* AccessibilitySupport.Enabled */) {\n        // For the popup emoji input, we will make the text area as high as the line height\n        // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\n        this._doRender({\n          lastRenderPosition: this._primaryCursorPosition,\n          top: top,\n          left: this._textAreaWrapping ? this._contentLeft : left,\n          width: this._textAreaWidth,\n          height: this._lineHeight,\n          useCover: false\n        });\n        // In case the textarea contains a word, we're going to try to align the textarea's cursor\n        // with our cursor by scrolling the textarea as much as possible\n        this.textArea.domNode.scrollLeft = this._primaryCursorVisibleRange.left;\n        var _lineCount = (_a = this._textAreaInput.textAreaState.newlineCountBeforeSelection) !== null && _a !== void 0 ? _a : this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));\n        this.textArea.domNode.scrollTop = _lineCount * this._lineHeight;\n        return;\n      }\n      this._doRender({\n        lastRenderPosition: this._primaryCursorPosition,\n        top: top,\n        left: this._textAreaWrapping ? this._contentLeft : left,\n        width: this._textAreaWidth,\n        height: canUseZeroSizeTextarea ? 0 : 1,\n        useCover: false\n      });\n    }\n  }, {\n    key: \"_newlinecount\",\n    value: function _newlinecount(text) {\n      var result = 0;\n      var startIndex = -1;\n      do {\n        startIndex = text.indexOf('\\n', startIndex + 1);\n        if (startIndex === -1) {\n          break;\n        }\n        result++;\n      } while (true);\n      return result;\n    }\n  }, {\n    key: \"_renderAtTopLeft\",\n    value: function _renderAtTopLeft() {\n      // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n      // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\n      this._doRender({\n        lastRenderPosition: null,\n        top: 0,\n        left: 0,\n        width: this._textAreaWidth,\n        height: canUseZeroSizeTextarea ? 0 : 1,\n        useCover: true\n      });\n    }\n  }, {\n    key: \"_doRender\",\n    value: function _doRender(renderData) {\n      this._lastRenderPosition = renderData.lastRenderPosition;\n      var ta = this.textArea;\n      var tac = this.textAreaCover;\n      applyFontInfo(ta, this._fontInfo);\n      ta.setTop(renderData.top);\n      ta.setLeft(renderData.left);\n      ta.setWidth(renderData.width);\n      ta.setHeight(renderData.height);\n      ta.setColor(renderData.color ? Color.Format.CSS.formatHex(renderData.color) : '');\n      ta.setFontStyle(renderData.italic ? 'italic' : '');\n      if (renderData.bold) {\n        // fontWeight is also set by `applyFontInfo`, so only overwrite it if necessary\n        ta.setFontWeight('bold');\n      }\n      ta.setTextDecoration(\"\".concat(renderData.underline ? ' underline' : '').concat(renderData.strikethrough ? ' line-through' : ''));\n      tac.setTop(renderData.useCover ? renderData.top : 0);\n      tac.setLeft(renderData.useCover ? renderData.left : 0);\n      tac.setWidth(renderData.useCover ? renderData.width : 0);\n      tac.setHeight(renderData.useCover ? renderData.height : 0);\n      var options = this._context.configuration.options;\n      if (options.get(57 /* EditorOption.glyphMargin */)) {\n        tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\n      } else {\n        if (options.get(68 /* EditorOption.lineNumbers */).renderType !== 0 /* RenderLineNumbersType.Off */) {\n          tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\n        } else {\n          tac.setClassName('monaco-editor-background textAreaCover');\n        }\n      }\n    }\n  }]);\n}(ViewPart);\nTextAreaHandler = __decorate([__param(3, IKeybindingService), __param(4, IInstantiationService)], TextAreaHandler);\nexport { TextAreaHandler };\nfunction measureText(targetDocument, text, fontInfo, tabSize) {\n  if (text.length === 0) {\n    return 0;\n  }\n  var container = targetDocument.createElement('div');\n  container.style.position = 'absolute';\n  container.style.top = '-50000px';\n  container.style.width = '50000px';\n  var regularDomNode = targetDocument.createElement('span');\n  applyFontInfo(regularDomNode, fontInfo);\n  regularDomNode.style.whiteSpace = 'pre'; // just like the textarea\n  regularDomNode.style.tabSize = \"\".concat(tabSize * fontInfo.spaceWidth, \"px\"); // just like the textarea\n  regularDomNode.append(text);\n  container.appendChild(regularDomNode);\n  targetDocument.body.appendChild(container);\n  var res = regularDomNode.offsetWidth;\n  targetDocument.body.removeChild(container);\n  return res;\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","_typeof","decorate","i","defineProperty","__param","paramIndex","decorator","nls","browser","createFastDomNode","platform","strings","applyFontInfo","CopyOptions","TextAreaInput","TextAreaWrapper","PagedScreenReaderStrategy","TextAreaState","_debugComposition","PartFingerprints","ViewPart","LineNumbersOverlay","Margin","EditorOptions","getMapForWordSeparators","Position","Range","Selection","MOUSE_CURSOR_TEXT_CSS_CLASS_NAME","TokenizationRegistry","Color","IME","IKeybindingService","IInstantiationService","VisibleTextAreaData","_context","modelLineNumber","distanceToModelLineStart","widthOfHiddenLineTextBefore","distanceToModelLineEnd","_classCallCheck","_visibleTextAreaBrand","undefined","startPosition","endPosition","visibleTextareaStart","visibleTextareaEnd","_previousPresentation","_createClass","value","prepareRender","visibleRangeProvider","startModelPosition","endModelPosition","viewModel","model","getLineMaxColumn","coordinatesConverter","convertModelPositionToViewPosition","lineNumber","visibleRangeForPosition","definePresentation","tokenPresentation","foreground","italic","bold","underline","strikethrough","canUseZeroSizeTextarea","isFirefox","TextAreaHandler","_ViewPart","context","viewController","_keybindingService","_instantiationService","_this","_callSuper","_primaryCursorPosition","_primaryCursorVisibleRange","_viewController","_visibleRangeProvider","_scrollLeft","_scrollTop","options","configuration","layoutInfo","get","_setAccessibilityOptions","_contentLeft","contentLeft","_contentWidth","contentWidth","_contentHeight","height","_fontInfo","_lineHeight","_emptySelectionClipboard","_copyWithSyntaxHighlighting","_visibleTextArea","_selections","_modelSelections","_lastRenderPosition","textArea","document","createElement","write","setClassName","concat","setAttribute","_textAreaWrapping","_this$_context$viewMo","getOptions","tabSize","domNode","style","spaceWidth","_getAriaLabel","String","localize","_ensureReadOnlyAttribute","textAreaCover","setPosition","simpleModel","getLineCount","getValueInRange","range","eol","getValueLengthInRange","modifyPosition","position","offset","textAreaInputHost","getDataToCopy","rawTextToCopy","getPlainTextToCopy","isWindows","newLineCharacter","getEOL","isFromEmptySelection","isEmpty","multicursorText","Array","isArray","text","join","html","mode","forceCopyWithSyntaxHighlighting","richText","getRichTextToCopy","getScreenReaderContent","_accessibilitySupport","selection","isMacintosh","getStartPosition","textBefore","_getWordBeforePosition","_getCharacterBeforePosition","fromPositions","LIMIT_CHARS","isSafari","placeholderText","EMPTY","isAndroid","_this$_getAndroidWord","_getAndroidWordAtPosition","_this$_getAndroidWord2","_slicedToArray","wordAtPosition","positionOffsetInWord","fromEditorSelection","_accessibilityPageSize","deduceModelPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","deduceModelPositionRelativeToViewPosition","textAreaWrapper","_register","_textAreaInput","createInstance","OS","isChrome","onKeyDown","e","emitKeyDown","onKeyUp","emitKeyUp","onPaste","pasteOnNewLine","metadata","paste","onCut","cut","onType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","console","log","compositionType","type","onSelectionChangeRequest","modelSelection","setSelection","onCompositionStart","ta","_ref","textBeforeSelection","substring","Math","min","selectionStart","selectionEnd","lineFeedOffset1","lastIndexOf","lineTextBeforeSelection","tabOffset1","desiredVisibleBeforeCharCount","visibleBeforeCharCount","column","hiddenLineTextBefore","_this$_context$viewMo2","widthOfHiddenTextBefore","measureText","ownerDocument","_ref2","textAfterSelection","max","lineFeedOffset2","indexOf","lineTextAfterSelection","tabOffset2","desiredVisibleAfterCharCount","getEndPosition","visibleAfterCharCount","revealRange","startLineNumber","_render","compositionStart","onCompositionUpdate","onCompositionEnd","compositionEnd","onFocus","setHasFocus","onBlur","onDidChange","_inherits","writeScreenReaderContent","reason","writeNativeTextAreaContent","dispose","_get","_getPrototypeOf","prototype","call","ANDROID_WORD_SEPARATORS","lineContent","getLineContent","wordSeparators","goingLeft","startColumn","goingRight","endColumn","distance","charCode","charCodeAt","charClass","charBefore","charAt","isHighSurrogate","_a","_b","_c","accessibilitySupport","toggleKeybindingLabel","lookupKeybinding","getAriaLabel","runCommandKeybindingLabel","keybindingEditorKeybindingLabel","editorNotAccessibleMessage","accessibilityPageSize","defaultValue","wrappingColumn","fontInfo","_textAreaWidth","round","typicalHalfwidthCharacterWidth","onConfigurationChanged","_this$_context$viewMo3","hasChanged","onCursorStateChanged","selections","slice","modelSelections","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollLeft","scrollTop","onZonesChanged","isFocused","focusTextArea","getLastRenderData","setAriaOptions","activeDescendant","removeAttribute","role","useReadOnly","enabled","ctx","positionLineNumber","positionColumn","render","visibleStart","visibleEnd","left","top","viewLayout","getVerticalOffsetForLineNumber","lineCount","_newlinecount","substr","width","delta","viewLineData","getViewLineData","startTokenIndex","tokens","findTokenIndexAtOffset","endTokenIndex","textareaSpansSingleToken","presentation","getPresentation","_doRender","lastRenderPosition","useCover","color","getColorMap","_renderAtTopLeft","textAreaState","newlineCountBeforeSelection","result","startIndex","renderData","tac","setTop","setLeft","setWidth","setHeight","setColor","Format","CSS","formatHex","setFontStyle","setFontWeight","setTextDecoration","OUTER_CLASS_NAME","renderType","CLASS_NAME","targetDocument","container","regularDomNode","whiteSpace","append","appendChild","body","res","offsetWidth","removeChild"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaHandler.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport './textAreaHandler.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { CopyOptions, TextAreaInput, TextAreaWrapper } from './textAreaInput.js';\nimport { PagedScreenReaderStrategy, TextAreaState, _debugComposition } from './textAreaState.js';\nimport { PartFingerprints, ViewPart } from '../view/viewPart.js';\nimport { LineNumbersOverlay } from '../viewParts/lineNumbers/lineNumbers.js';\nimport { Margin } from '../viewParts/margin/margin.js';\nimport { EditorOptions } from '../../common/config/editorOptions.js';\nimport { getMapForWordSeparators } from '../../common/core/wordCharacterClassifier.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from '../../../base/browser/ui/mouseCursor/mouseCursor.js';\nimport { TokenizationRegistry } from '../../common/languages.js';\nimport { Color } from '../../../base/common/color.js';\nimport { IME } from '../../../base/common/ime.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nclass VisibleTextAreaData {\n    constructor(_context, modelLineNumber, distanceToModelLineStart, widthOfHiddenLineTextBefore, distanceToModelLineEnd) {\n        this._context = _context;\n        this.modelLineNumber = modelLineNumber;\n        this.distanceToModelLineStart = distanceToModelLineStart;\n        this.widthOfHiddenLineTextBefore = widthOfHiddenLineTextBefore;\n        this.distanceToModelLineEnd = distanceToModelLineEnd;\n        this._visibleTextAreaBrand = undefined;\n        this.startPosition = null;\n        this.endPosition = null;\n        this.visibleTextareaStart = null;\n        this.visibleTextareaEnd = null;\n        /**\n         * When doing composition, the currently composed text might be split up into\n         * multiple tokens, then merged again into a single token, etc. Here we attempt\n         * to keep the presentation of the <textarea> stable by using the previous used\n         * style if multiple tokens come into play. This avoids flickering.\n         */\n        this._previousPresentation = null;\n    }\n    prepareRender(visibleRangeProvider) {\n        const startModelPosition = new Position(this.modelLineNumber, this.distanceToModelLineStart + 1);\n        const endModelPosition = new Position(this.modelLineNumber, this._context.viewModel.model.getLineMaxColumn(this.modelLineNumber) - this.distanceToModelLineEnd);\n        this.startPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(startModelPosition);\n        this.endPosition = this._context.viewModel.coordinatesConverter.convertModelPositionToViewPosition(endModelPosition);\n        if (this.startPosition.lineNumber === this.endPosition.lineNumber) {\n            this.visibleTextareaStart = visibleRangeProvider.visibleRangeForPosition(this.startPosition);\n            this.visibleTextareaEnd = visibleRangeProvider.visibleRangeForPosition(this.endPosition);\n        }\n        else {\n            // TODO: what if the view positions are not on the same line?\n            this.visibleTextareaStart = null;\n            this.visibleTextareaEnd = null;\n        }\n    }\n    definePresentation(tokenPresentation) {\n        if (!this._previousPresentation) {\n            // To avoid flickering, once set, always reuse a presentation throughout the entire IME session\n            if (tokenPresentation) {\n                this._previousPresentation = tokenPresentation;\n            }\n            else {\n                this._previousPresentation = {\n                    foreground: 1 /* ColorId.DefaultForeground */,\n                    italic: false,\n                    bold: false,\n                    underline: false,\n                    strikethrough: false,\n                };\n            }\n        }\n        return this._previousPresentation;\n    }\n}\nconst canUseZeroSizeTextarea = (browser.isFirefox);\nlet TextAreaHandler = class TextAreaHandler extends ViewPart {\n    constructor(context, viewController, visibleRangeProvider, _keybindingService, _instantiationService) {\n        super(context);\n        this._keybindingService = _keybindingService;\n        this._instantiationService = _instantiationService;\n        this._primaryCursorPosition = new Position(1, 1);\n        this._primaryCursorVisibleRange = null;\n        this._viewController = viewController;\n        this._visibleRangeProvider = visibleRangeProvider;\n        this._scrollLeft = 0;\n        this._scrollTop = 0;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._setAccessibilityOptions(options);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentHeight = layoutInfo.height;\n        this._fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._emptySelectionClipboard = options.get(37 /* EditorOption.emptySelectionClipboard */);\n        this._copyWithSyntaxHighlighting = options.get(25 /* EditorOption.copyWithSyntaxHighlighting */);\n        this._visibleTextArea = null;\n        this._selections = [new Selection(1, 1, 1, 1)];\n        this._modelSelections = [new Selection(1, 1, 1, 1)];\n        this._lastRenderPosition = null;\n        // Text Area (The focus will always be in the textarea when the cursor is blinking)\n        this.textArea = createFastDomNode(document.createElement('textarea'));\n        PartFingerprints.write(this.textArea, 7 /* PartFingerprint.TextArea */);\n        this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n        this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n        const { tabSize } = this._context.viewModel.model.getOptions();\n        this.textArea.domNode.style.tabSize = `${tabSize * this._fontInfo.spaceWidth}px`;\n        this.textArea.setAttribute('autocorrect', 'off');\n        this.textArea.setAttribute('autocapitalize', 'off');\n        this.textArea.setAttribute('autocomplete', 'off');\n        this.textArea.setAttribute('spellcheck', 'false');\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n        this.textArea.setAttribute('aria-required', options.get(5 /* EditorOption.ariaRequired */) ? 'true' : 'false');\n        this.textArea.setAttribute('tabindex', String(options.get(124 /* EditorOption.tabIndex */)));\n        this.textArea.setAttribute('role', 'textbox');\n        this.textArea.setAttribute('aria-roledescription', nls.localize('editor', \"editor\"));\n        this.textArea.setAttribute('aria-multiline', 'true');\n        this.textArea.setAttribute('aria-autocomplete', options.get(91 /* EditorOption.readOnly */) ? 'none' : 'both');\n        this._ensureReadOnlyAttribute();\n        this.textAreaCover = createFastDomNode(document.createElement('div'));\n        this.textAreaCover.setPosition('absolute');\n        const simpleModel = {\n            getLineCount: () => {\n                return this._context.viewModel.getLineCount();\n            },\n            getLineMaxColumn: (lineNumber) => {\n                return this._context.viewModel.getLineMaxColumn(lineNumber);\n            },\n            getValueInRange: (range, eol) => {\n                return this._context.viewModel.getValueInRange(range, eol);\n            },\n            getValueLengthInRange: (range, eol) => {\n                return this._context.viewModel.getValueLengthInRange(range, eol);\n            },\n            modifyPosition: (position, offset) => {\n                return this._context.viewModel.modifyPosition(position, offset);\n            }\n        };\n        const textAreaInputHost = {\n            getDataToCopy: () => {\n                const rawTextToCopy = this._context.viewModel.getPlainTextToCopy(this._modelSelections, this._emptySelectionClipboard, platform.isWindows);\n                const newLineCharacter = this._context.viewModel.model.getEOL();\n                const isFromEmptySelection = (this._emptySelectionClipboard && this._modelSelections.length === 1 && this._modelSelections[0].isEmpty());\n                const multicursorText = (Array.isArray(rawTextToCopy) ? rawTextToCopy : null);\n                const text = (Array.isArray(rawTextToCopy) ? rawTextToCopy.join(newLineCharacter) : rawTextToCopy);\n                let html = undefined;\n                let mode = null;\n                if (CopyOptions.forceCopyWithSyntaxHighlighting || (this._copyWithSyntaxHighlighting && text.length < 65536)) {\n                    const richText = this._context.viewModel.getRichTextToCopy(this._modelSelections, this._emptySelectionClipboard);\n                    if (richText) {\n                        html = richText.html;\n                        mode = richText.mode;\n                    }\n                }\n                return {\n                    isFromEmptySelection,\n                    multicursorText,\n                    text,\n                    html,\n                    mode\n                };\n            },\n            getScreenReaderContent: () => {\n                if (this._accessibilitySupport === 1 /* AccessibilitySupport.Disabled */) {\n                    // We know for a fact that a screen reader is not attached\n                    // On OSX, we write the character before the cursor to allow for \"long-press\" composition\n                    // Also on OSX, we write the word before the cursor to allow for the Accessibility Keyboard to give good hints\n                    const selection = this._selections[0];\n                    if (platform.isMacintosh && selection.isEmpty()) {\n                        const position = selection.getStartPosition();\n                        let textBefore = this._getWordBeforePosition(position);\n                        if (textBefore.length === 0) {\n                            textBefore = this._getCharacterBeforePosition(position);\n                        }\n                        if (textBefore.length > 0) {\n                            return new TextAreaState(textBefore, textBefore.length, textBefore.length, Range.fromPositions(position), 0);\n                        }\n                    }\n                    // on macOS, write current selection into textarea will allow system text services pick selected text,\n                    // but we still want to limit the amount of text given Chromium handles very poorly text even of a few\n                    // thousand chars\n                    // (https://github.com/microsoft/vscode/issues/27799)\n                    const LIMIT_CHARS = 500;\n                    if (platform.isMacintosh && !selection.isEmpty() && simpleModel.getValueLengthInRange(selection, 0 /* EndOfLinePreference.TextDefined */) < LIMIT_CHARS) {\n                        const text = simpleModel.getValueInRange(selection, 0 /* EndOfLinePreference.TextDefined */);\n                        return new TextAreaState(text, 0, text.length, selection, 0);\n                    }\n                    // on Safari, document.execCommand('cut') and document.execCommand('copy') will just not work\n                    // if the textarea has no content selected. So if there is an editor selection, ensure something\n                    // is selected in the textarea.\n                    if (browser.isSafari && !selection.isEmpty()) {\n                        const placeholderText = 'vscode-placeholder';\n                        return new TextAreaState(placeholderText, 0, placeholderText.length, null, undefined);\n                    }\n                    return TextAreaState.EMPTY;\n                }\n                if (browser.isAndroid) {\n                    // when tapping in the editor on a word, Android enters composition mode.\n                    // in the `compositionstart` event we cannot clear the textarea, because\n                    // it then forgets to ever send a `compositionend`.\n                    // we therefore only write the current word in the textarea\n                    const selection = this._selections[0];\n                    if (selection.isEmpty()) {\n                        const position = selection.getStartPosition();\n                        const [wordAtPosition, positionOffsetInWord] = this._getAndroidWordAtPosition(position);\n                        if (wordAtPosition.length > 0) {\n                            return new TextAreaState(wordAtPosition, positionOffsetInWord, positionOffsetInWord, Range.fromPositions(position), 0);\n                        }\n                    }\n                    return TextAreaState.EMPTY;\n                }\n                return PagedScreenReaderStrategy.fromEditorSelection(simpleModel, this._selections[0], this._accessibilityPageSize, this._accessibilitySupport === 0 /* AccessibilitySupport.Unknown */);\n            },\n            deduceModelPosition: (viewAnchorPosition, deltaOffset, lineFeedCnt) => {\n                return this._context.viewModel.deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt);\n            }\n        };\n        const textAreaWrapper = this._register(new TextAreaWrapper(this.textArea.domNode));\n        this._textAreaInput = this._register(this._instantiationService.createInstance(TextAreaInput, textAreaInputHost, textAreaWrapper, platform.OS, {\n            isAndroid: browser.isAndroid,\n            isChrome: browser.isChrome,\n            isFirefox: browser.isFirefox,\n            isSafari: browser.isSafari,\n        }));\n        this._register(this._textAreaInput.onKeyDown((e) => {\n            this._viewController.emitKeyDown(e);\n        }));\n        this._register(this._textAreaInput.onKeyUp((e) => {\n            this._viewController.emitKeyUp(e);\n        }));\n        this._register(this._textAreaInput.onPaste((e) => {\n            let pasteOnNewLine = false;\n            let multicursorText = null;\n            let mode = null;\n            if (e.metadata) {\n                pasteOnNewLine = (this._emptySelectionClipboard && !!e.metadata.isFromEmptySelection);\n                multicursorText = (typeof e.metadata.multicursorText !== 'undefined' ? e.metadata.multicursorText : null);\n                mode = e.metadata.mode;\n            }\n            this._viewController.paste(e.text, pasteOnNewLine, multicursorText, mode);\n        }));\n        this._register(this._textAreaInput.onCut(() => {\n            this._viewController.cut();\n        }));\n        this._register(this._textAreaInput.onType((e) => {\n            if (e.replacePrevCharCnt || e.replaceNextCharCnt || e.positionDelta) {\n                // must be handled through the new command\n                if (_debugComposition) {\n                    console.log(` => compositionType: <<${e.text}>>, ${e.replacePrevCharCnt}, ${e.replaceNextCharCnt}, ${e.positionDelta}`);\n                }\n                this._viewController.compositionType(e.text, e.replacePrevCharCnt, e.replaceNextCharCnt, e.positionDelta);\n            }\n            else {\n                if (_debugComposition) {\n                    console.log(` => type: <<${e.text}>>`);\n                }\n                this._viewController.type(e.text);\n            }\n        }));\n        this._register(this._textAreaInput.onSelectionChangeRequest((modelSelection) => {\n            this._viewController.setSelection(modelSelection);\n        }));\n        this._register(this._textAreaInput.onCompositionStart((e) => {\n            // The textarea might contain some content when composition starts.\n            //\n            // When we make the textarea visible, it always has a height of 1 line,\n            // so we don't need to worry too much about content on lines above or below\n            // the selection.\n            //\n            // However, the text on the current line needs to be made visible because\n            // some IME methods allow to move to other glyphs on the current line\n            // (by pressing arrow keys).\n            //\n            // (1) The textarea might contain only some parts of the current line,\n            // like the word before the selection. Also, the content inside the textarea\n            // can grow or shrink as composition occurs. We therefore anchor the textarea\n            // in terms of distance to a certain line start and line end.\n            //\n            // (2) Also, we should not make \\t characters visible, because their rendering\n            // inside the <textarea> will not align nicely with our rendering. We therefore\n            // will hide (if necessary) some of the leading text on the current line.\n            const ta = this.textArea.domNode;\n            const modelSelection = this._modelSelections[0];\n            const { distanceToModelLineStart, widthOfHiddenTextBefore } = (() => {\n                // Find the text that is on the current line before the selection\n                const textBeforeSelection = ta.value.substring(0, Math.min(ta.selectionStart, ta.selectionEnd));\n                const lineFeedOffset1 = textBeforeSelection.lastIndexOf('\\n');\n                const lineTextBeforeSelection = textBeforeSelection.substring(lineFeedOffset1 + 1);\n                // We now search to see if we should hide some part of it (if it contains \\t)\n                const tabOffset1 = lineTextBeforeSelection.lastIndexOf('\\t');\n                const desiredVisibleBeforeCharCount = lineTextBeforeSelection.length - tabOffset1 - 1;\n                const startModelPosition = modelSelection.getStartPosition();\n                const visibleBeforeCharCount = Math.min(startModelPosition.column - 1, desiredVisibleBeforeCharCount);\n                const distanceToModelLineStart = startModelPosition.column - 1 - visibleBeforeCharCount;\n                const hiddenLineTextBefore = lineTextBeforeSelection.substring(0, lineTextBeforeSelection.length - visibleBeforeCharCount);\n                const { tabSize } = this._context.viewModel.model.getOptions();\n                const widthOfHiddenTextBefore = measureText(this.textArea.domNode.ownerDocument, hiddenLineTextBefore, this._fontInfo, tabSize);\n                return { distanceToModelLineStart, widthOfHiddenTextBefore };\n            })();\n            const { distanceToModelLineEnd } = (() => {\n                // Find the text that is on the current line after the selection\n                const textAfterSelection = ta.value.substring(Math.max(ta.selectionStart, ta.selectionEnd));\n                const lineFeedOffset2 = textAfterSelection.indexOf('\\n');\n                const lineTextAfterSelection = lineFeedOffset2 === -1 ? textAfterSelection : textAfterSelection.substring(0, lineFeedOffset2);\n                const tabOffset2 = lineTextAfterSelection.indexOf('\\t');\n                const desiredVisibleAfterCharCount = (tabOffset2 === -1 ? lineTextAfterSelection.length : lineTextAfterSelection.length - tabOffset2 - 1);\n                const endModelPosition = modelSelection.getEndPosition();\n                const visibleAfterCharCount = Math.min(this._context.viewModel.model.getLineMaxColumn(endModelPosition.lineNumber) - endModelPosition.column, desiredVisibleAfterCharCount);\n                const distanceToModelLineEnd = this._context.viewModel.model.getLineMaxColumn(endModelPosition.lineNumber) - endModelPosition.column - visibleAfterCharCount;\n                return { distanceToModelLineEnd };\n            })();\n            // Scroll to reveal the location in the editor where composition occurs\n            this._context.viewModel.revealRange('keyboard', true, Range.fromPositions(this._selections[0].getStartPosition()), 0 /* viewEvents.VerticalRevealType.Simple */, 1 /* ScrollType.Immediate */);\n            this._visibleTextArea = new VisibleTextAreaData(this._context, modelSelection.startLineNumber, distanceToModelLineStart, widthOfHiddenTextBefore, distanceToModelLineEnd);\n            // We turn off wrapping if the <textarea> becomes visible for composition\n            this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n            this._visibleTextArea.prepareRender(this._visibleRangeProvider);\n            this._render();\n            // Show the textarea\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ime-input`);\n            this._viewController.compositionStart();\n            this._context.viewModel.onCompositionStart();\n        }));\n        this._register(this._textAreaInput.onCompositionUpdate((e) => {\n            if (!this._visibleTextArea) {\n                return;\n            }\n            this._visibleTextArea.prepareRender(this._visibleRangeProvider);\n            this._render();\n        }));\n        this._register(this._textAreaInput.onCompositionEnd(() => {\n            this._visibleTextArea = null;\n            // We turn on wrapping as necessary if the <textarea> hides after composition\n            this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n            this._render();\n            this.textArea.setClassName(`inputarea ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n            this._viewController.compositionEnd();\n            this._context.viewModel.onCompositionEnd();\n        }));\n        this._register(this._textAreaInput.onFocus(() => {\n            this._context.viewModel.setHasFocus(true);\n        }));\n        this._register(this._textAreaInput.onBlur(() => {\n            this._context.viewModel.setHasFocus(false);\n        }));\n        this._register(IME.onDidChange(() => {\n            this._ensureReadOnlyAttribute();\n        }));\n    }\n    writeScreenReaderContent(reason) {\n        this._textAreaInput.writeNativeTextAreaContent(reason);\n    }\n    dispose() {\n        super.dispose();\n    }\n    _getAndroidWordAtPosition(position) {\n        const ANDROID_WORD_SEPARATORS = '`~!@#$%^&*()-=+[{]}\\\\|;:\",.<>/?';\n        const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n        const wordSeparators = getMapForWordSeparators(ANDROID_WORD_SEPARATORS, []);\n        let goingLeft = true;\n        let startColumn = position.column;\n        let goingRight = true;\n        let endColumn = position.column;\n        let distance = 0;\n        while (distance < 50 && (goingLeft || goingRight)) {\n            if (goingLeft && startColumn <= 1) {\n                goingLeft = false;\n            }\n            if (goingLeft) {\n                const charCode = lineContent.charCodeAt(startColumn - 2);\n                const charClass = wordSeparators.get(charCode);\n                if (charClass !== 0 /* WordCharacterClass.Regular */) {\n                    goingLeft = false;\n                }\n                else {\n                    startColumn--;\n                }\n            }\n            if (goingRight && endColumn > lineContent.length) {\n                goingRight = false;\n            }\n            if (goingRight) {\n                const charCode = lineContent.charCodeAt(endColumn - 1);\n                const charClass = wordSeparators.get(charCode);\n                if (charClass !== 0 /* WordCharacterClass.Regular */) {\n                    goingRight = false;\n                }\n                else {\n                    endColumn++;\n                }\n            }\n            distance++;\n        }\n        return [lineContent.substring(startColumn - 1, endColumn - 1), position.column - startColumn];\n    }\n    _getWordBeforePosition(position) {\n        const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n        const wordSeparators = getMapForWordSeparators(this._context.configuration.options.get(131 /* EditorOption.wordSeparators */), []);\n        let column = position.column;\n        let distance = 0;\n        while (column > 1) {\n            const charCode = lineContent.charCodeAt(column - 2);\n            const charClass = wordSeparators.get(charCode);\n            if (charClass !== 0 /* WordCharacterClass.Regular */ || distance > 50) {\n                return lineContent.substring(column - 1, position.column - 1);\n            }\n            distance++;\n            column--;\n        }\n        return lineContent.substring(0, position.column - 1);\n    }\n    _getCharacterBeforePosition(position) {\n        if (position.column > 1) {\n            const lineContent = this._context.viewModel.getLineContent(position.lineNumber);\n            const charBefore = lineContent.charAt(position.column - 2);\n            if (!strings.isHighSurrogate(charBefore.charCodeAt(0))) {\n                return charBefore;\n            }\n        }\n        return '';\n    }\n    _getAriaLabel(options) {\n        var _a, _b, _c;\n        const accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        if (accessibilitySupport === 1 /* AccessibilitySupport.Disabled */) {\n            const toggleKeybindingLabel = (_a = this._keybindingService.lookupKeybinding('editor.action.toggleScreenReaderAccessibilityMode')) === null || _a === void 0 ? void 0 : _a.getAriaLabel();\n            const runCommandKeybindingLabel = (_b = this._keybindingService.lookupKeybinding('workbench.action.showCommands')) === null || _b === void 0 ? void 0 : _b.getAriaLabel();\n            const keybindingEditorKeybindingLabel = (_c = this._keybindingService.lookupKeybinding('workbench.action.openGlobalKeybindings')) === null || _c === void 0 ? void 0 : _c.getAriaLabel();\n            const editorNotAccessibleMessage = nls.localize('accessibilityModeOff', \"The editor is not accessible at this time.\");\n            if (toggleKeybindingLabel) {\n                return nls.localize('accessibilityOffAriaLabel', \"{0} To enable screen reader optimized mode, use {1}\", editorNotAccessibleMessage, toggleKeybindingLabel);\n            }\n            else if (runCommandKeybindingLabel) {\n                return nls.localize('accessibilityOffAriaLabelNoKb', \"{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.\", editorNotAccessibleMessage, runCommandKeybindingLabel);\n            }\n            else if (keybindingEditorKeybindingLabel) {\n                return nls.localize('accessibilityOffAriaLabelNoKbs', \"{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it.\", editorNotAccessibleMessage, keybindingEditorKeybindingLabel);\n            }\n            else {\n                // SOS\n                return editorNotAccessibleMessage;\n            }\n        }\n        return options.get(4 /* EditorOption.ariaLabel */);\n    }\n    _setAccessibilityOptions(options) {\n        this._accessibilitySupport = options.get(2 /* EditorOption.accessibilitySupport */);\n        const accessibilityPageSize = options.get(3 /* EditorOption.accessibilityPageSize */);\n        if (this._accessibilitySupport === 2 /* AccessibilitySupport.Enabled */ && accessibilityPageSize === EditorOptions.accessibilityPageSize.defaultValue) {\n            // If a screen reader is attached and the default value is not set we should automatically increase the page size to 500 for a better experience\n            this._accessibilityPageSize = 500;\n        }\n        else {\n            this._accessibilityPageSize = accessibilityPageSize;\n        }\n        // When wrapping is enabled and a screen reader might be attached,\n        // we will size the textarea to match the width used for wrapping points computation (see `domLineBreaksComputer.ts`).\n        // This is because screen readers will read the text in the textarea and we'd like that the\n        // wrapping points in the textarea match the wrapping points in the editor.\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        const wrappingColumn = layoutInfo.wrappingColumn;\n        if (wrappingColumn !== -1 && this._accessibilitySupport !== 1 /* AccessibilitySupport.Disabled */) {\n            const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n            this._textAreaWrapping = true;\n            this._textAreaWidth = Math.round(wrappingColumn * fontInfo.typicalHalfwidthCharacterWidth);\n        }\n        else {\n            this._textAreaWrapping = false;\n            this._textAreaWidth = (canUseZeroSizeTextarea ? 0 : 1);\n        }\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        this._setAccessibilityOptions(options);\n        this._contentLeft = layoutInfo.contentLeft;\n        this._contentWidth = layoutInfo.contentWidth;\n        this._contentHeight = layoutInfo.height;\n        this._fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this._lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this._emptySelectionClipboard = options.get(37 /* EditorOption.emptySelectionClipboard */);\n        this._copyWithSyntaxHighlighting = options.get(25 /* EditorOption.copyWithSyntaxHighlighting */);\n        this.textArea.setAttribute('wrap', this._textAreaWrapping && !this._visibleTextArea ? 'on' : 'off');\n        const { tabSize } = this._context.viewModel.model.getOptions();\n        this.textArea.domNode.style.tabSize = `${tabSize * this._fontInfo.spaceWidth}px`;\n        this.textArea.setAttribute('aria-label', this._getAriaLabel(options));\n        this.textArea.setAttribute('aria-required', options.get(5 /* EditorOption.ariaRequired */) ? 'true' : 'false');\n        this.textArea.setAttribute('tabindex', String(options.get(124 /* EditorOption.tabIndex */)));\n        if (e.hasChanged(34 /* EditorOption.domReadOnly */) || e.hasChanged(91 /* EditorOption.readOnly */)) {\n            this._ensureReadOnlyAttribute();\n        }\n        if (e.hasChanged(2 /* EditorOption.accessibilitySupport */)) {\n            this._textAreaInput.writeNativeTextAreaContent('strategy changed');\n        }\n        return true;\n    }\n    onCursorStateChanged(e) {\n        this._selections = e.selections.slice(0);\n        this._modelSelections = e.modelSelections.slice(0);\n        // We must update the <textarea> synchronously, otherwise long press IME on macos breaks.\n        // See https://github.com/microsoft/vscode/issues/165821\n        this._textAreaInput.writeNativeTextAreaContent('selection changed');\n        return true;\n    }\n    onDecorationsChanged(e) {\n        // true for inline decorations that can end up relayouting text\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        this._scrollLeft = e.scrollLeft;\n        this._scrollTop = e.scrollTop;\n        return true;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    // --- begin view API\n    isFocused() {\n        return this._textAreaInput.isFocused();\n    }\n    focusTextArea() {\n        this._textAreaInput.focusTextArea();\n    }\n    getLastRenderData() {\n        return this._lastRenderPosition;\n    }\n    setAriaOptions(options) {\n        if (options.activeDescendant) {\n            this.textArea.setAttribute('aria-haspopup', 'true');\n            this.textArea.setAttribute('aria-autocomplete', 'list');\n            this.textArea.setAttribute('aria-activedescendant', options.activeDescendant);\n        }\n        else {\n            this.textArea.setAttribute('aria-haspopup', 'false');\n            this.textArea.setAttribute('aria-autocomplete', 'both');\n            this.textArea.removeAttribute('aria-activedescendant');\n        }\n        if (options.role) {\n            this.textArea.setAttribute('role', options.role);\n        }\n    }\n    // --- end view API\n    _ensureReadOnlyAttribute() {\n        const options = this._context.configuration.options;\n        // When someone requests to disable IME, we set the \"readonly\" attribute on the <textarea>.\n        // This will prevent composition.\n        const useReadOnly = !IME.enabled || (options.get(34 /* EditorOption.domReadOnly */) && options.get(91 /* EditorOption.readOnly */));\n        if (useReadOnly) {\n            this.textArea.setAttribute('readonly', 'true');\n        }\n        else {\n            this.textArea.removeAttribute('readonly');\n        }\n    }\n    prepareRender(ctx) {\n        var _a;\n        this._primaryCursorPosition = new Position(this._selections[0].positionLineNumber, this._selections[0].positionColumn);\n        this._primaryCursorVisibleRange = ctx.visibleRangeForPosition(this._primaryCursorPosition);\n        (_a = this._visibleTextArea) === null || _a === void 0 ? void 0 : _a.prepareRender(ctx);\n    }\n    render(ctx) {\n        this._textAreaInput.writeNativeTextAreaContent('render');\n        this._render();\n    }\n    _render() {\n        var _a;\n        if (this._visibleTextArea) {\n            // The text area is visible for composition reasons\n            const visibleStart = this._visibleTextArea.visibleTextareaStart;\n            const visibleEnd = this._visibleTextArea.visibleTextareaEnd;\n            const startPosition = this._visibleTextArea.startPosition;\n            const endPosition = this._visibleTextArea.endPosition;\n            if (startPosition && endPosition && visibleStart && visibleEnd && visibleEnd.left >= this._scrollLeft && visibleStart.left <= this._scrollLeft + this._contentWidth) {\n                const top = (this._context.viewLayout.getVerticalOffsetForLineNumber(this._primaryCursorPosition.lineNumber) - this._scrollTop);\n                const lineCount = this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));\n                let scrollLeft = this._visibleTextArea.widthOfHiddenLineTextBefore;\n                let left = (this._contentLeft + visibleStart.left - this._scrollLeft);\n                // See https://github.com/microsoft/vscode/issues/141725#issuecomment-1050670841\n                // Here we are adding +1 to avoid flickering that might be caused by having a width that is too small.\n                // This could be caused by rounding errors that might only show up with certain font families.\n                // In other words, a pixel might be lost when doing something like\n                //      `Math.round(end) - Math.round(start)`\n                // vs\n                //      `Math.round(end - start)`\n                let width = visibleEnd.left - visibleStart.left + 1;\n                if (left < this._contentLeft) {\n                    // the textarea would be rendered on top of the margin,\n                    // so reduce its width. We use the same technique as\n                    // for hiding text before\n                    const delta = (this._contentLeft - left);\n                    left += delta;\n                    scrollLeft += delta;\n                    width -= delta;\n                }\n                if (width > this._contentWidth) {\n                    // the textarea would be wider than the content width,\n                    // so reduce its width.\n                    width = this._contentWidth;\n                }\n                // Try to render the textarea with the color/font style to match the text under it\n                const viewLineData = this._context.viewModel.getViewLineData(startPosition.lineNumber);\n                const startTokenIndex = viewLineData.tokens.findTokenIndexAtOffset(startPosition.column - 1);\n                const endTokenIndex = viewLineData.tokens.findTokenIndexAtOffset(endPosition.column - 1);\n                const textareaSpansSingleToken = (startTokenIndex === endTokenIndex);\n                const presentation = this._visibleTextArea.definePresentation((textareaSpansSingleToken ? viewLineData.tokens.getPresentation(startTokenIndex) : null));\n                this.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n                this.textArea.domNode.scrollLeft = scrollLeft;\n                this._doRender({\n                    lastRenderPosition: null,\n                    top: top,\n                    left: left,\n                    width: width,\n                    height: this._lineHeight,\n                    useCover: false,\n                    color: (TokenizationRegistry.getColorMap() || [])[presentation.foreground],\n                    italic: presentation.italic,\n                    bold: presentation.bold,\n                    underline: presentation.underline,\n                    strikethrough: presentation.strikethrough\n                });\n            }\n            return;\n        }\n        if (!this._primaryCursorVisibleRange) {\n            // The primary cursor is outside the viewport => place textarea to the top left\n            this._renderAtTopLeft();\n            return;\n        }\n        const left = this._contentLeft + this._primaryCursorVisibleRange.left - this._scrollLeft;\n        if (left < this._contentLeft || left > this._contentLeft + this._contentWidth) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        const top = this._context.viewLayout.getVerticalOffsetForLineNumber(this._selections[0].positionLineNumber) - this._scrollTop;\n        if (top < 0 || top > this._contentHeight) {\n            // cursor is outside the viewport\n            this._renderAtTopLeft();\n            return;\n        }\n        // The primary cursor is in the viewport (at least vertically) => place textarea on the cursor\n        if (platform.isMacintosh || this._accessibilitySupport === 2 /* AccessibilitySupport.Enabled */) {\n            // For the popup emoji input, we will make the text area as high as the line height\n            // We will also make the fontSize and lineHeight the correct dimensions to help with the placement of these pickers\n            this._doRender({\n                lastRenderPosition: this._primaryCursorPosition,\n                top,\n                left: this._textAreaWrapping ? this._contentLeft : left,\n                width: this._textAreaWidth,\n                height: this._lineHeight,\n                useCover: false\n            });\n            // In case the textarea contains a word, we're going to try to align the textarea's cursor\n            // with our cursor by scrolling the textarea as much as possible\n            this.textArea.domNode.scrollLeft = this._primaryCursorVisibleRange.left;\n            const lineCount = (_a = this._textAreaInput.textAreaState.newlineCountBeforeSelection) !== null && _a !== void 0 ? _a : this._newlinecount(this.textArea.domNode.value.substr(0, this.textArea.domNode.selectionStart));\n            this.textArea.domNode.scrollTop = lineCount * this._lineHeight;\n            return;\n        }\n        this._doRender({\n            lastRenderPosition: this._primaryCursorPosition,\n            top: top,\n            left: this._textAreaWrapping ? this._contentLeft : left,\n            width: this._textAreaWidth,\n            height: (canUseZeroSizeTextarea ? 0 : 1),\n            useCover: false\n        });\n    }\n    _newlinecount(text) {\n        let result = 0;\n        let startIndex = -1;\n        do {\n            startIndex = text.indexOf('\\n', startIndex + 1);\n            if (startIndex === -1) {\n                break;\n            }\n            result++;\n        } while (true);\n        return result;\n    }\n    _renderAtTopLeft() {\n        // (in WebKit the textarea is 1px by 1px because it cannot handle input to a 0x0 textarea)\n        // specifically, when doing Korean IME, setting the textarea to 0x0 breaks IME badly.\n        this._doRender({\n            lastRenderPosition: null,\n            top: 0,\n            left: 0,\n            width: this._textAreaWidth,\n            height: (canUseZeroSizeTextarea ? 0 : 1),\n            useCover: true\n        });\n    }\n    _doRender(renderData) {\n        this._lastRenderPosition = renderData.lastRenderPosition;\n        const ta = this.textArea;\n        const tac = this.textAreaCover;\n        applyFontInfo(ta, this._fontInfo);\n        ta.setTop(renderData.top);\n        ta.setLeft(renderData.left);\n        ta.setWidth(renderData.width);\n        ta.setHeight(renderData.height);\n        ta.setColor(renderData.color ? Color.Format.CSS.formatHex(renderData.color) : '');\n        ta.setFontStyle(renderData.italic ? 'italic' : '');\n        if (renderData.bold) {\n            // fontWeight is also set by `applyFontInfo`, so only overwrite it if necessary\n            ta.setFontWeight('bold');\n        }\n        ta.setTextDecoration(`${renderData.underline ? ' underline' : ''}${renderData.strikethrough ? ' line-through' : ''}`);\n        tac.setTop(renderData.useCover ? renderData.top : 0);\n        tac.setLeft(renderData.useCover ? renderData.left : 0);\n        tac.setWidth(renderData.useCover ? renderData.width : 0);\n        tac.setHeight(renderData.useCover ? renderData.height : 0);\n        const options = this._context.configuration.options;\n        if (options.get(57 /* EditorOption.glyphMargin */)) {\n            tac.setClassName('monaco-editor-background textAreaCover ' + Margin.OUTER_CLASS_NAME);\n        }\n        else {\n            if (options.get(68 /* EditorOption.lineNumbers */).renderType !== 0 /* RenderLineNumbersType.Off */) {\n                tac.setClassName('monaco-editor-background textAreaCover ' + LineNumbersOverlay.CLASS_NAME);\n            }\n            else {\n                tac.setClassName('monaco-editor-background textAreaCover');\n            }\n        }\n    }\n};\nTextAreaHandler = __decorate([\n    __param(3, IKeybindingService),\n    __param(4, IInstantiationService)\n], TextAreaHandler);\nexport { TextAreaHandler };\nfunction measureText(targetDocument, text, fontInfo, tabSize) {\n    if (text.length === 0) {\n        return 0;\n    }\n    const container = targetDocument.createElement('div');\n    container.style.position = 'absolute';\n    container.style.top = '-50000px';\n    container.style.width = '50000px';\n    const regularDomNode = targetDocument.createElement('span');\n    applyFontInfo(regularDomNode, fontInfo);\n    regularDomNode.style.whiteSpace = 'pre'; // just like the textarea\n    regularDomNode.style.tabSize = `${tabSize * fontInfo.spaceWidth}px`; // just like the textarea\n    regularDomNode.append(text);\n    container.appendChild(regularDomNode);\n    targetDocument.body.appendChild(container);\n    const res = regularDomNode.offsetWidth;\n    targetDocument.body.removeChild(container);\n    return res;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}