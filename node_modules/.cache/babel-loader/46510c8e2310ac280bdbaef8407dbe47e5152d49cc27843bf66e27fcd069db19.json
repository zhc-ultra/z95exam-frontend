{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.index-of.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation as _normalizeIndentation } from './core/indentation.js';\nvar autoCloseAlways = function autoCloseAlways() {\n  return true;\n};\nvar autoCloseNever = function autoCloseNever() {\n  return false;\n};\nvar autoCloseBeforeWhitespace = function autoCloseBeforeWhitespace(chr) {\n  return chr === ' ' || chr === '\\t';\n};\nexport var CursorConfiguration = /*#__PURE__*/function () {\n  function CursorConfiguration(languageId, modelOptions, configuration, languageConfigurationService) {\n    _classCallCheck(this, CursorConfiguration);\n    var _a;\n    this.languageConfigurationService = languageConfigurationService;\n    this._cursorMoveConfigurationBrand = undefined;\n    this._languageId = languageId;\n    var options = configuration.options;\n    var layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n    var fontInfo = options.get(50 /* EditorOption.fontInfo */);\n    this.readOnly = options.get(91 /* EditorOption.readOnly */);\n    this.tabSize = modelOptions.tabSize;\n    this.indentSize = modelOptions.indentSize;\n    this.insertSpaces = modelOptions.insertSpaces;\n    this.stickyTabStops = options.get(116 /* EditorOption.stickyTabStops */);\n    this.lineHeight = fontInfo.lineHeight;\n    this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n    this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n    this.useTabStops = options.get(128 /* EditorOption.useTabStops */);\n    this.wordSeparators = options.get(131 /* EditorOption.wordSeparators */);\n    this.emptySelectionClipboard = options.get(37 /* EditorOption.emptySelectionClipboard */);\n    this.copyWithSyntaxHighlighting = options.get(25 /* EditorOption.copyWithSyntaxHighlighting */);\n    this.multiCursorMergeOverlapping = options.get(77 /* EditorOption.multiCursorMergeOverlapping */);\n    this.multiCursorPaste = options.get(79 /* EditorOption.multiCursorPaste */);\n    this.multiCursorLimit = options.get(80 /* EditorOption.multiCursorLimit */);\n    this.autoClosingBrackets = options.get(6 /* EditorOption.autoClosingBrackets */);\n    this.autoClosingComments = options.get(7 /* EditorOption.autoClosingComments */);\n    this.autoClosingQuotes = options.get(11 /* EditorOption.autoClosingQuotes */);\n    this.autoClosingDelete = options.get(9 /* EditorOption.autoClosingDelete */);\n    this.autoClosingOvertype = options.get(10 /* EditorOption.autoClosingOvertype */);\n    this.autoSurround = options.get(14 /* EditorOption.autoSurround */);\n    this.autoIndent = options.get(12 /* EditorOption.autoIndent */);\n    this.wordSegmenterLocales = options.get(130 /* EditorOption.wordSegmenterLocales */);\n    this.surroundingPairs = {};\n    this._electricChars = null;\n    this.shouldAutoCloseBefore = {\n      quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes, true),\n      comment: this._getShouldAutoClose(languageId, this.autoClosingComments, false),\n      bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets, false)\n    };\n    this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n    var surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n    if (surroundingPairs) {\n      var _iterator = _createForOfIteratorHelper(surroundingPairs),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pair = _step.value;\n          this.surroundingPairs[pair.open] = pair.close;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    var commentsConfiguration = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n    this.blockCommentStartToken = (_a = commentsConfiguration === null || commentsConfiguration === void 0 ? void 0 : commentsConfiguration.blockCommentStartToken) !== null && _a !== void 0 ? _a : null;\n  }\n  return _createClass(CursorConfiguration, [{\n    key: \"electricChars\",\n    get: function get() {\n      var _a;\n      if (!this._electricChars) {\n        this._electricChars = {};\n        var electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n        if (electricChars) {\n          var _iterator2 = _createForOfIteratorHelper(electricChars),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _char = _step2.value;\n              this._electricChars[_char] = true;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n      return this._electricChars;\n    }\n    /**\n     * Should return opening bracket type to match indentation with\n     */\n  }, {\n    key: \"onElectricCharacter\",\n    value: function onElectricCharacter(character, context, column) {\n      var scopedLineTokens = createScopedLineTokens(context, column - 1);\n      var electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n      if (!electricCharacterSupport) {\n        return null;\n      }\n      return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n    }\n  }, {\n    key: \"normalizeIndentation\",\n    value: function normalizeIndentation(str) {\n      return _normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    }\n  }, {\n    key: \"_getShouldAutoClose\",\n    value: function _getShouldAutoClose(languageId, autoCloseConfig, forQuotes) {\n      switch (autoCloseConfig) {\n        case 'beforeWhitespace':\n          return autoCloseBeforeWhitespace;\n        case 'languageDefined':\n          return this._getLanguageDefinedShouldAutoClose(languageId, forQuotes);\n        case 'always':\n          return autoCloseAlways;\n        case 'never':\n          return autoCloseNever;\n      }\n    }\n  }, {\n    key: \"_getLanguageDefinedShouldAutoClose\",\n    value: function _getLanguageDefinedShouldAutoClose(languageId, forQuotes) {\n      var autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet(forQuotes);\n      return function (c) {\n        return autoCloseBeforeSet.indexOf(c) !== -1;\n      };\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n  }, {\n    key: \"visibleColumnFromColumn\",\n    value: function visibleColumnFromColumn(model, position) {\n      return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n  }, {\n    key: \"columnFromVisibleColumn\",\n    value: function columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n      var result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n      var minColumn = model.getLineMinColumn(lineNumber);\n      if (result < minColumn) {\n        return minColumn;\n      }\n      var maxColumn = model.getLineMaxColumn(lineNumber);\n      if (result > maxColumn) {\n        return maxColumn;\n      }\n      return result;\n    }\n  }], [{\n    key: \"shouldRecreate\",\n    value: function shouldRecreate(e) {\n      return e.hasChanged(145 /* EditorOption.layoutInfo */) || e.hasChanged(131 /* EditorOption.wordSeparators */) || e.hasChanged(37 /* EditorOption.emptySelectionClipboard */) || e.hasChanged(77 /* EditorOption.multiCursorMergeOverlapping */) || e.hasChanged(79 /* EditorOption.multiCursorPaste */) || e.hasChanged(80 /* EditorOption.multiCursorLimit */) || e.hasChanged(6 /* EditorOption.autoClosingBrackets */) || e.hasChanged(7 /* EditorOption.autoClosingComments */) || e.hasChanged(11 /* EditorOption.autoClosingQuotes */) || e.hasChanged(9 /* EditorOption.autoClosingDelete */) || e.hasChanged(10 /* EditorOption.autoClosingOvertype */) || e.hasChanged(14 /* EditorOption.autoSurround */) || e.hasChanged(128 /* EditorOption.useTabStops */) || e.hasChanged(50 /* EditorOption.fontInfo */) || e.hasChanged(91 /* EditorOption.readOnly */) || e.hasChanged(130 /* EditorOption.wordSegmenterLocales */);\n    }\n  }]);\n}();\nexport var CursorState = /*#__PURE__*/function () {\n  function CursorState(modelState, viewState) {\n    _classCallCheck(this, CursorState);\n    this._cursorStateBrand = undefined;\n    this.modelState = modelState;\n    this.viewState = viewState;\n  }\n  return _createClass(CursorState, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState);\n    }\n  }], [{\n    key: \"fromModelState\",\n    value: function fromModelState(modelState) {\n      return new PartialModelCursorState(modelState);\n    }\n  }, {\n    key: \"fromViewState\",\n    value: function fromViewState(viewState) {\n      return new PartialViewCursorState(viewState);\n    }\n  }, {\n    key: \"fromModelSelection\",\n    value: function fromModelSelection(modelSelection) {\n      var selection = Selection.liftSelection(modelSelection);\n      var modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0 /* SelectionStartKind.Simple */, 0, selection.getPosition(), 0);\n      return CursorState.fromModelState(modelState);\n    }\n  }, {\n    key: \"fromModelSelections\",\n    value: function fromModelSelections(modelSelections) {\n      var states = [];\n      for (var i = 0, len = modelSelections.length; i < len; i++) {\n        states[i] = this.fromModelSelection(modelSelections[i]);\n      }\n      return states;\n    }\n  }]);\n}();\nexport var PartialModelCursorState = /*#__PURE__*/_createClass(function PartialModelCursorState(modelState) {\n  _classCallCheck(this, PartialModelCursorState);\n  this.modelState = modelState;\n  this.viewState = null;\n});\nexport var PartialViewCursorState = /*#__PURE__*/_createClass(function PartialViewCursorState(viewState) {\n  _classCallCheck(this, PartialViewCursorState);\n  this.modelState = null;\n  this.viewState = viewState;\n});\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport var SingleCursorState = /*#__PURE__*/function () {\n  function SingleCursorState(selectionStart, selectionStartKind, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n    _classCallCheck(this, SingleCursorState);\n    this.selectionStart = selectionStart;\n    this.selectionStartKind = selectionStartKind;\n    this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n    this.position = position;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n    this._singleCursorStateBrand = undefined;\n    this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n  }\n  return _createClass(SingleCursorState, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === other.leftoverVisibleColumns && this.selectionStartKind === other.selectionStartKind && this.position.equals(other.position) && this.selectionStart.equalsRange(other.selectionStart);\n    }\n  }, {\n    key: \"hasSelection\",\n    value: function hasSelection() {\n      return !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n    }\n  }, {\n    key: \"move\",\n    value: function move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n      if (inSelectionMode) {\n        // move just position\n        return new SingleCursorState(this.selectionStart, this.selectionStartKind, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n      } else {\n        // move everything\n        return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0 /* SelectionStartKind.Simple */, leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n      }\n    }\n  }], [{\n    key: \"_computeSelection\",\n    value: function _computeSelection(selectionStart, position) {\n      if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n        return Selection.fromPositions(selectionStart.getStartPosition(), position);\n      } else {\n        return Selection.fromPositions(selectionStart.getEndPosition(), position);\n      }\n    }\n  }]);\n}();\nexport var EditOperationResult = /*#__PURE__*/_createClass(function EditOperationResult(type, commands, opts) {\n  _classCallCheck(this, EditOperationResult);\n  this._editOperationResultBrand = undefined;\n  this.type = type;\n  this.commands = commands;\n  this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n  this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n});\nexport function isQuote(ch) {\n  return ch === '\\'' || ch === '\"' || ch === '`';\n}","map":{"version":3,"names":["Position","Range","Selection","createScopedLineTokens","CursorColumns","normalizeIndentation","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","chr","CursorConfiguration","languageId","modelOptions","configuration","languageConfigurationService","_classCallCheck","_a","_cursorMoveConfigurationBrand","undefined","_languageId","options","layoutInfo","get","fontInfo","readOnly","tabSize","indentSize","insertSpaces","stickyTabStops","lineHeight","typicalHalfwidthCharacterWidth","pageSize","Math","max","floor","height","useTabStops","wordSeparators","emptySelectionClipboard","copyWithSyntaxHighlighting","multiCursorMergeOverlapping","multiCursorPaste","multiCursorLimit","autoClosingBrackets","autoClosingComments","autoClosingQuotes","autoClosingDelete","autoClosingOvertype","autoSurround","autoIndent","wordSegmenterLocales","surroundingPairs","_electricChars","shouldAutoCloseBefore","quote","_getShouldAutoClose","comment","bracket","autoClosingPairs","getLanguageConfiguration","getAutoClosingPairs","getSurroundingPairs","_iterator","_createForOfIteratorHelper","_step","s","n","done","pair","value","open","close","err","e","f","commentsConfiguration","comments","blockCommentStartToken","_createClass","key","electricChars","electricCharacter","getElectricCharacters","_iterator2","_step2","char","onElectricCharacter","character","context","column","scopedLineTokens","electricCharacterSupport","firstCharOffset","str","autoCloseConfig","forQuotes","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet","getAutoCloseBeforeSet","c","indexOf","visibleColumnFromColumn","model","position","getLineContent","lineNumber","columnFromVisibleColumn","visibleColumn","result","minColumn","getLineMinColumn","maxColumn","getLineMaxColumn","shouldRecreate","hasChanged","CursorState","modelState","viewState","_cursorStateBrand","equals","other","fromModelState","PartialModelCursorState","fromViewState","PartialViewCursorState","fromModelSelection","modelSelection","selection","liftSelection","SingleCursorState","fromPositions","getSelectionStart","getPosition","fromModelSelections","modelSelections","states","i","len","length","selectionStart","selectionStartKind","selectionStartLeftoverVisibleColumns","leftoverVisibleColumns","_singleCursorStateBrand","_computeSelection","equalsRange","hasSelection","isEmpty","move","inSelectionMode","isBeforeOrEqual","getStartPosition","getEndPosition","EditOperationResult","type","commands","opts","_editOperationResultBrand","shouldPushStackElementBefore","shouldPushStackElementAfter","isQuote","ch"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/cursorCommon.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from './core/position.js';\nimport { Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { createScopedLineTokens } from './languages/supports.js';\nimport { CursorColumns } from './core/cursorColumns.js';\nimport { normalizeIndentation } from './core/indentation.js';\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr) => (chr === ' ' || chr === '\\t');\nexport class CursorConfiguration {\n    static shouldRecreate(e) {\n        return (e.hasChanged(145 /* EditorOption.layoutInfo */)\n            || e.hasChanged(131 /* EditorOption.wordSeparators */)\n            || e.hasChanged(37 /* EditorOption.emptySelectionClipboard */)\n            || e.hasChanged(77 /* EditorOption.multiCursorMergeOverlapping */)\n            || e.hasChanged(79 /* EditorOption.multiCursorPaste */)\n            || e.hasChanged(80 /* EditorOption.multiCursorLimit */)\n            || e.hasChanged(6 /* EditorOption.autoClosingBrackets */)\n            || e.hasChanged(7 /* EditorOption.autoClosingComments */)\n            || e.hasChanged(11 /* EditorOption.autoClosingQuotes */)\n            || e.hasChanged(9 /* EditorOption.autoClosingDelete */)\n            || e.hasChanged(10 /* EditorOption.autoClosingOvertype */)\n            || e.hasChanged(14 /* EditorOption.autoSurround */)\n            || e.hasChanged(128 /* EditorOption.useTabStops */)\n            || e.hasChanged(50 /* EditorOption.fontInfo */)\n            || e.hasChanged(91 /* EditorOption.readOnly */)\n            || e.hasChanged(130 /* EditorOption.wordSegmenterLocales */));\n    }\n    constructor(languageId, modelOptions, configuration, languageConfigurationService) {\n        var _a;\n        this.languageConfigurationService = languageConfigurationService;\n        this._cursorMoveConfigurationBrand = undefined;\n        this._languageId = languageId;\n        const options = configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        this.readOnly = options.get(91 /* EditorOption.readOnly */);\n        this.tabSize = modelOptions.tabSize;\n        this.indentSize = modelOptions.indentSize;\n        this.insertSpaces = modelOptions.insertSpaces;\n        this.stickyTabStops = options.get(116 /* EditorOption.stickyTabStops */);\n        this.lineHeight = fontInfo.lineHeight;\n        this.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n        this.useTabStops = options.get(128 /* EditorOption.useTabStops */);\n        this.wordSeparators = options.get(131 /* EditorOption.wordSeparators */);\n        this.emptySelectionClipboard = options.get(37 /* EditorOption.emptySelectionClipboard */);\n        this.copyWithSyntaxHighlighting = options.get(25 /* EditorOption.copyWithSyntaxHighlighting */);\n        this.multiCursorMergeOverlapping = options.get(77 /* EditorOption.multiCursorMergeOverlapping */);\n        this.multiCursorPaste = options.get(79 /* EditorOption.multiCursorPaste */);\n        this.multiCursorLimit = options.get(80 /* EditorOption.multiCursorLimit */);\n        this.autoClosingBrackets = options.get(6 /* EditorOption.autoClosingBrackets */);\n        this.autoClosingComments = options.get(7 /* EditorOption.autoClosingComments */);\n        this.autoClosingQuotes = options.get(11 /* EditorOption.autoClosingQuotes */);\n        this.autoClosingDelete = options.get(9 /* EditorOption.autoClosingDelete */);\n        this.autoClosingOvertype = options.get(10 /* EditorOption.autoClosingOvertype */);\n        this.autoSurround = options.get(14 /* EditorOption.autoSurround */);\n        this.autoIndent = options.get(12 /* EditorOption.autoIndent */);\n        this.wordSegmenterLocales = options.get(130 /* EditorOption.wordSegmenterLocales */);\n        this.surroundingPairs = {};\n        this._electricChars = null;\n        this.shouldAutoCloseBefore = {\n            quote: this._getShouldAutoClose(languageId, this.autoClosingQuotes, true),\n            comment: this._getShouldAutoClose(languageId, this.autoClosingComments, false),\n            bracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets, false),\n        };\n        this.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n        const surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n        if (surroundingPairs) {\n            for (const pair of surroundingPairs) {\n                this.surroundingPairs[pair.open] = pair.close;\n            }\n        }\n        const commentsConfiguration = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n        this.blockCommentStartToken = (_a = commentsConfiguration === null || commentsConfiguration === void 0 ? void 0 : commentsConfiguration.blockCommentStartToken) !== null && _a !== void 0 ? _a : null;\n    }\n    get electricChars() {\n        var _a;\n        if (!this._electricChars) {\n            this._electricChars = {};\n            const electricChars = (_a = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter) === null || _a === void 0 ? void 0 : _a.getElectricCharacters();\n            if (electricChars) {\n                for (const char of electricChars) {\n                    this._electricChars[char] = true;\n                }\n            }\n        }\n        return this._electricChars;\n    }\n    /**\n     * Should return opening bracket type to match indentation with\n     */\n    onElectricCharacter(character, context, column) {\n        const scopedLineTokens = createScopedLineTokens(context, column - 1);\n        const electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n        if (!electricCharacterSupport) {\n            return null;\n        }\n        return electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n    }\n    normalizeIndentation(str) {\n        return normalizeIndentation(str, this.indentSize, this.insertSpaces);\n    }\n    _getShouldAutoClose(languageId, autoCloseConfig, forQuotes) {\n        switch (autoCloseConfig) {\n            case 'beforeWhitespace':\n                return autoCloseBeforeWhitespace;\n            case 'languageDefined':\n                return this._getLanguageDefinedShouldAutoClose(languageId, forQuotes);\n            case 'always':\n                return autoCloseAlways;\n            case 'never':\n                return autoCloseNever;\n        }\n    }\n    _getLanguageDefinedShouldAutoClose(languageId, forQuotes) {\n        const autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet(forQuotes);\n        return c => autoCloseBeforeSet.indexOf(c) !== -1;\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    visibleColumnFromColumn(model, position) {\n        return CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n    }\n    /**\n     * Returns a visible column from a column.\n     * @see {@link CursorColumns}\n     */\n    columnFromVisibleColumn(model, lineNumber, visibleColumn) {\n        const result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n        const minColumn = model.getLineMinColumn(lineNumber);\n        if (result < minColumn) {\n            return minColumn;\n        }\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        if (result > maxColumn) {\n            return maxColumn;\n        }\n        return result;\n    }\n}\nexport class CursorState {\n    static fromModelState(modelState) {\n        return new PartialModelCursorState(modelState);\n    }\n    static fromViewState(viewState) {\n        return new PartialViewCursorState(viewState);\n    }\n    static fromModelSelection(modelSelection) {\n        const selection = Selection.liftSelection(modelSelection);\n        const modelState = new SingleCursorState(Range.fromPositions(selection.getSelectionStart()), 0 /* SelectionStartKind.Simple */, 0, selection.getPosition(), 0);\n        return CursorState.fromModelState(modelState);\n    }\n    static fromModelSelections(modelSelections) {\n        const states = [];\n        for (let i = 0, len = modelSelections.length; i < len; i++) {\n            states[i] = this.fromModelSelection(modelSelections[i]);\n        }\n        return states;\n    }\n    constructor(modelState, viewState) {\n        this._cursorStateBrand = undefined;\n        this.modelState = modelState;\n        this.viewState = viewState;\n    }\n    equals(other) {\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n    }\n}\nexport class PartialModelCursorState {\n    constructor(modelState) {\n        this.modelState = modelState;\n        this.viewState = null;\n    }\n}\nexport class PartialViewCursorState {\n    constructor(viewState) {\n        this.modelState = null;\n        this.viewState = viewState;\n    }\n}\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n    constructor(selectionStart, selectionStartKind, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n        this.selectionStart = selectionStart;\n        this.selectionStartKind = selectionStartKind;\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n        this.position = position;\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\n        this._singleCursorStateBrand = undefined;\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n    }\n    equals(other) {\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\n            && this.selectionStartKind === other.selectionStartKind\n            && this.position.equals(other.position)\n            && this.selectionStart.equalsRange(other.selectionStart));\n    }\n    hasSelection() {\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n    }\n    move(inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n        if (inSelectionMode) {\n            // move just position\n            return new SingleCursorState(this.selectionStart, this.selectionStartKind, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n        else {\n            // move everything\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0 /* SelectionStartKind.Simple */, leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n        }\n    }\n    static _computeSelection(selectionStart, position) {\n        if (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n            return Selection.fromPositions(selectionStart.getStartPosition(), position);\n        }\n        else {\n            return Selection.fromPositions(selectionStart.getEndPosition(), position);\n        }\n    }\n}\nexport class EditOperationResult {\n    constructor(type, commands, opts) {\n        this._editOperationResultBrand = undefined;\n        this.type = type;\n        this.commands = commands;\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n    }\n}\nexport function isQuote(ch) {\n    return (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}