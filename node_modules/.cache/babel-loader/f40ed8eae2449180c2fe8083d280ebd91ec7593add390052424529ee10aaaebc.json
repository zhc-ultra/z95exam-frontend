{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState, SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\n/**\n * Represents a single cursor.\n*/\nexport var Cursor = /*#__PURE__*/function () {\n  function Cursor(context) {\n    _classCallCheck(this, Cursor);\n    this._selTrackedRange = null;\n    this._trackSelection = true;\n    this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(1, 1), 0));\n  }\n  return _createClass(Cursor, [{\n    key: \"dispose\",\n    value: function dispose(context) {\n      this._removeTrackedRange(context);\n    }\n  }, {\n    key: \"startTrackingSelection\",\n    value: function startTrackingSelection(context) {\n      this._trackSelection = true;\n      this._updateTrackedRange(context);\n    }\n  }, {\n    key: \"stopTrackingSelection\",\n    value: function stopTrackingSelection(context) {\n      this._trackSelection = false;\n      this._removeTrackedRange(context);\n    }\n  }, {\n    key: \"_updateTrackedRange\",\n    value: function _updateTrackedRange(context) {\n      if (!this._trackSelection) {\n        // don't track the selection\n        return;\n      }\n      this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n    }\n  }, {\n    key: \"_removeTrackedRange\",\n    value: function _removeTrackedRange(context) {\n      this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n    }\n  }, {\n    key: \"asCursorState\",\n    value: function asCursorState() {\n      return new CursorState(this.modelState, this.viewState);\n    }\n  }, {\n    key: \"readSelectionFromMarkers\",\n    value: function readSelectionFromMarkers(context) {\n      var range = context.model._getTrackedRange(this._selTrackedRange);\n      if (this.modelState.selection.isEmpty() && !range.isEmpty()) {\n        // Avoid selecting text when recovering from markers\n        return Selection.fromRange(range.collapseToEnd(), this.modelState.selection.getDirection());\n      }\n      return Selection.fromRange(range, this.modelState.selection.getDirection());\n    }\n  }, {\n    key: \"ensureValidState\",\n    value: function ensureValidState(context) {\n      this._setState(context, this.modelState, this.viewState);\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(context, modelState, viewState) {\n      this._setState(context, modelState, viewState);\n    }\n  }, {\n    key: \"_setState\",\n    value: function _setState(context, modelState, viewState) {\n      if (viewState) {\n        viewState = Cursor._validateViewState(context.viewModel, viewState);\n      }\n      if (!modelState) {\n        if (!viewState) {\n          return;\n        }\n        // We only have the view state => compute the model state\n        var selectionStart = context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart));\n        var position = context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));\n        modelState = new SingleCursorState(selectionStart, viewState.selectionStartKind, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n      } else {\n        // Validate new model state\n        var _selectionStart = context.model.validateRange(modelState.selectionStart);\n        var selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(_selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n        var _position = context.model.validatePosition(modelState.position);\n        var leftoverVisibleColumns = modelState.position.equals(_position) ? modelState.leftoverVisibleColumns : 0;\n        modelState = new SingleCursorState(_selectionStart, modelState.selectionStartKind, selectionStartLeftoverVisibleColumns, _position, leftoverVisibleColumns);\n      }\n      if (!viewState) {\n        // We only have the model state => compute the view state\n        var viewSelectionStart1 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n        var viewSelectionStart2 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n        var viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n        var viewPosition = context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);\n        viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartKind, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n      } else {\n        // Validate new view state\n        var _viewSelectionStart = context.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n        var _viewPosition = context.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);\n        viewState = new SingleCursorState(_viewSelectionStart, modelState.selectionStartKind, modelState.selectionStartLeftoverVisibleColumns, _viewPosition, modelState.leftoverVisibleColumns);\n      }\n      this.modelState = modelState;\n      this.viewState = viewState;\n      this._updateTrackedRange(context);\n    }\n  }], [{\n    key: \"_validatePositionWithCache\",\n    value: function _validatePositionWithCache(viewModel, position, cacheInput, cacheOutput) {\n      if (position.equals(cacheInput)) {\n        return cacheOutput;\n      }\n      return viewModel.normalizePosition(position, 2 /* PositionAffinity.None */);\n    }\n  }, {\n    key: \"_validateViewState\",\n    value: function _validateViewState(viewModel, viewState) {\n      var position = viewState.position;\n      var sStartPosition = viewState.selectionStart.getStartPosition();\n      var sEndPosition = viewState.selectionStart.getEndPosition();\n      var validPosition = viewModel.normalizePosition(position, 2 /* PositionAffinity.None */);\n      var validSStartPosition = this._validatePositionWithCache(viewModel, sStartPosition, position, validPosition);\n      var validSEndPosition = this._validatePositionWithCache(viewModel, sEndPosition, sStartPosition, validSStartPosition);\n      if (position.equals(validPosition) && sStartPosition.equals(validSStartPosition) && sEndPosition.equals(validSEndPosition)) {\n        // fast path: the state is valid\n        return viewState;\n      }\n      return new SingleCursorState(Range.fromPositions(validSStartPosition, validSEndPosition), viewState.selectionStartKind, viewState.selectionStartLeftoverVisibleColumns + sStartPosition.column - validSStartPosition.column, validPosition, viewState.leftoverVisibleColumns + position.column - validPosition.column);\n    }\n  }]);\n}();","map":{"version":3,"names":["CursorState","SingleCursorState","Position","Range","Selection","Cursor","context","_classCallCheck","_selTrackedRange","_trackSelection","_setState","_createClass","key","value","dispose","_removeTrackedRange","startTrackingSelection","_updateTrackedRange","stopTrackingSelection","model","_setTrackedRange","modelState","selection","asCursorState","viewState","readSelectionFromMarkers","range","_getTrackedRange","isEmpty","fromRange","collapseToEnd","getDirection","ensureValidState","setState","_validateViewState","viewModel","selectionStart","validateRange","coordinatesConverter","convertViewRangeToModelRange","position","validatePosition","convertViewPositionToModelPosition","selectionStartKind","selectionStartLeftoverVisibleColumns","leftoverVisibleColumns","equalsRange","equals","viewSelectionStart1","convertModelPositionToViewPosition","startLineNumber","startColumn","viewSelectionStart2","endLineNumber","endColumn","viewSelectionStart","lineNumber","column","viewPosition","validateViewRange","validateViewPosition","_validatePositionWithCache","cacheInput","cacheOutput","normalizePosition","sStartPosition","getStartPosition","sEndPosition","getEndPosition","validPosition","validSStartPosition","validSEndPosition","fromPositions"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/cursor/oneCursor.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState, SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\n/**\n * Represents a single cursor.\n*/\nexport class Cursor {\n    constructor(context) {\n        this._selTrackedRange = null;\n        this._trackSelection = true;\n        this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(1, 1), 0));\n    }\n    dispose(context) {\n        this._removeTrackedRange(context);\n    }\n    startTrackingSelection(context) {\n        this._trackSelection = true;\n        this._updateTrackedRange(context);\n    }\n    stopTrackingSelection(context) {\n        this._trackSelection = false;\n        this._removeTrackedRange(context);\n    }\n    _updateTrackedRange(context) {\n        if (!this._trackSelection) {\n            // don't track the selection\n            return;\n        }\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n    }\n    _removeTrackedRange(context) {\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0 /* TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges */);\n    }\n    asCursorState() {\n        return new CursorState(this.modelState, this.viewState);\n    }\n    readSelectionFromMarkers(context) {\n        const range = context.model._getTrackedRange(this._selTrackedRange);\n        if (this.modelState.selection.isEmpty() && !range.isEmpty()) {\n            // Avoid selecting text when recovering from markers\n            return Selection.fromRange(range.collapseToEnd(), this.modelState.selection.getDirection());\n        }\n        return Selection.fromRange(range, this.modelState.selection.getDirection());\n    }\n    ensureValidState(context) {\n        this._setState(context, this.modelState, this.viewState);\n    }\n    setState(context, modelState, viewState) {\n        this._setState(context, modelState, viewState);\n    }\n    static _validatePositionWithCache(viewModel, position, cacheInput, cacheOutput) {\n        if (position.equals(cacheInput)) {\n            return cacheOutput;\n        }\n        return viewModel.normalizePosition(position, 2 /* PositionAffinity.None */);\n    }\n    static _validateViewState(viewModel, viewState) {\n        const position = viewState.position;\n        const sStartPosition = viewState.selectionStart.getStartPosition();\n        const sEndPosition = viewState.selectionStart.getEndPosition();\n        const validPosition = viewModel.normalizePosition(position, 2 /* PositionAffinity.None */);\n        const validSStartPosition = this._validatePositionWithCache(viewModel, sStartPosition, position, validPosition);\n        const validSEndPosition = this._validatePositionWithCache(viewModel, sEndPosition, sStartPosition, validSStartPosition);\n        if (position.equals(validPosition) && sStartPosition.equals(validSStartPosition) && sEndPosition.equals(validSEndPosition)) {\n            // fast path: the state is valid\n            return viewState;\n        }\n        return new SingleCursorState(Range.fromPositions(validSStartPosition, validSEndPosition), viewState.selectionStartKind, viewState.selectionStartLeftoverVisibleColumns + sStartPosition.column - validSStartPosition.column, validPosition, viewState.leftoverVisibleColumns + position.column - validPosition.column);\n    }\n    _setState(context, modelState, viewState) {\n        if (viewState) {\n            viewState = Cursor._validateViewState(context.viewModel, viewState);\n        }\n        if (!modelState) {\n            if (!viewState) {\n                return;\n            }\n            // We only have the view state => compute the model state\n            const selectionStart = context.model.validateRange(context.coordinatesConverter.convertViewRangeToModelRange(viewState.selectionStart));\n            const position = context.model.validatePosition(context.coordinatesConverter.convertViewPositionToModelPosition(viewState.position));\n            modelState = new SingleCursorState(selectionStart, viewState.selectionStartKind, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n        }\n        else {\n            // Validate new model state\n            const selectionStart = context.model.validateRange(modelState.selectionStart);\n            const selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n            const position = context.model.validatePosition(modelState.position);\n            const leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\n            modelState = new SingleCursorState(selectionStart, modelState.selectionStartKind, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\n        }\n        if (!viewState) {\n            // We only have the model state => compute the view state\n            const viewSelectionStart1 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n            const viewSelectionStart2 = context.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n            const viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n            const viewPosition = context.coordinatesConverter.convertModelPositionToViewPosition(modelState.position);\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartKind, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n        }\n        else {\n            // Validate new view state\n            const viewSelectionStart = context.coordinatesConverter.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n            const viewPosition = context.coordinatesConverter.validateViewPosition(viewState.position, modelState.position);\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartKind, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n        }\n        this.modelState = modelState;\n        this.viewState = viewState;\n        this._updateTrackedRange(context);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}