{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { compareBy } from '../../../base/common/arrays.js';\nimport { findLastMaxBy, findFirstMinBy } from '../../../base/common/arraysFind.js';\nimport { CursorState } from '../cursorCommon.js';\nimport { Cursor } from './oneCursor.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport var CursorCollection = /*#__PURE__*/function () {\n  function CursorCollection(context) {\n    _classCallCheck(this, CursorCollection);\n    this.context = context;\n    this.cursors = [new Cursor(context)];\n    this.lastAddedCursorIndex = 0;\n  }\n  return _createClass(CursorCollection, [{\n    key: \"dispose\",\n    value: function dispose() {\n      var _iterator = _createForOfIteratorHelper(this.cursors),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var cursor = _step.value;\n          cursor.dispose(this.context);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"startTrackingSelections\",\n    value: function startTrackingSelections() {\n      var _iterator2 = _createForOfIteratorHelper(this.cursors),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var cursor = _step2.value;\n          cursor.startTrackingSelection(this.context);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"stopTrackingSelections\",\n    value: function stopTrackingSelections() {\n      var _iterator3 = _createForOfIteratorHelper(this.cursors),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var cursor = _step3.value;\n          cursor.stopTrackingSelection(this.context);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext(context) {\n      this.context = context;\n    }\n  }, {\n    key: \"ensureValidState\",\n    value: function ensureValidState() {\n      var _iterator4 = _createForOfIteratorHelper(this.cursors),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var cursor = _step4.value;\n          cursor.ensureValidState(this.context);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"readSelectionFromMarkers\",\n    value: function readSelectionFromMarkers() {\n      var _this = this;\n      return this.cursors.map(function (c) {\n        return c.readSelectionFromMarkers(_this.context);\n      });\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this.cursors.map(function (c) {\n        return c.asCursorState();\n      });\n    }\n  }, {\n    key: \"getViewPositions\",\n    value: function getViewPositions() {\n      return this.cursors.map(function (c) {\n        return c.viewState.position;\n      });\n    }\n  }, {\n    key: \"getTopMostViewPosition\",\n    value: function getTopMostViewPosition() {\n      return findFirstMinBy(this.cursors, compareBy(function (c) {\n        return c.viewState.position;\n      }, Position.compare)).viewState.position;\n    }\n  }, {\n    key: \"getBottomMostViewPosition\",\n    value: function getBottomMostViewPosition() {\n      return findLastMaxBy(this.cursors, compareBy(function (c) {\n        return c.viewState.position;\n      }, Position.compare)).viewState.position;\n    }\n  }, {\n    key: \"getSelections\",\n    value: function getSelections() {\n      return this.cursors.map(function (c) {\n        return c.modelState.selection;\n      });\n    }\n  }, {\n    key: \"getViewSelections\",\n    value: function getViewSelections() {\n      return this.cursors.map(function (c) {\n        return c.viewState.selection;\n      });\n    }\n  }, {\n    key: \"setSelections\",\n    value: function setSelections(selections) {\n      this.setStates(CursorState.fromModelSelections(selections));\n    }\n  }, {\n    key: \"getPrimaryCursor\",\n    value: function getPrimaryCursor() {\n      return this.cursors[0].asCursorState();\n    }\n  }, {\n    key: \"setStates\",\n    value: function setStates(states) {\n      if (states === null) {\n        return;\n      }\n      this.cursors[0].setState(this.context, states[0].modelState, states[0].viewState);\n      this._setSecondaryStates(states.slice(1));\n    }\n    /**\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n     */\n  }, {\n    key: \"_setSecondaryStates\",\n    value: function _setSecondaryStates(secondaryStates) {\n      var secondaryCursorsLength = this.cursors.length - 1;\n      var secondaryStatesLength = secondaryStates.length;\n      if (secondaryCursorsLength < secondaryStatesLength) {\n        var createCnt = secondaryStatesLength - secondaryCursorsLength;\n        for (var i = 0; i < createCnt; i++) {\n          this._addSecondaryCursor();\n        }\n      } else if (secondaryCursorsLength > secondaryStatesLength) {\n        var removeCnt = secondaryCursorsLength - secondaryStatesLength;\n        for (var _i = 0; _i < removeCnt; _i++) {\n          this._removeSecondaryCursor(this.cursors.length - 2);\n        }\n      }\n      for (var _i2 = 0; _i2 < secondaryStatesLength; _i2++) {\n        this.cursors[_i2 + 1].setState(this.context, secondaryStates[_i2].modelState, secondaryStates[_i2].viewState);\n      }\n    }\n  }, {\n    key: \"killSecondaryCursors\",\n    value: function killSecondaryCursors() {\n      this._setSecondaryStates([]);\n    }\n  }, {\n    key: \"_addSecondaryCursor\",\n    value: function _addSecondaryCursor() {\n      this.cursors.push(new Cursor(this.context));\n      this.lastAddedCursorIndex = this.cursors.length - 1;\n    }\n  }, {\n    key: \"getLastAddedCursorIndex\",\n    value: function getLastAddedCursorIndex() {\n      if (this.cursors.length === 1 || this.lastAddedCursorIndex === 0) {\n        return 0;\n      }\n      return this.lastAddedCursorIndex;\n    }\n  }, {\n    key: \"_removeSecondaryCursor\",\n    value: function _removeSecondaryCursor(removeIndex) {\n      if (this.lastAddedCursorIndex >= removeIndex + 1) {\n        this.lastAddedCursorIndex--;\n      }\n      this.cursors[removeIndex + 1].dispose(this.context);\n      this.cursors.splice(removeIndex + 1, 1);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      if (this.cursors.length === 1) {\n        return;\n      }\n      var cursors = this.cursors.slice(0);\n      var sortedCursors = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        sortedCursors.push({\n          index: i,\n          selection: cursors[i].modelState.selection\n        });\n      }\n      sortedCursors.sort(compareBy(function (s) {\n        return s.selection;\n      }, Range.compareRangesUsingStarts));\n      for (var sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n        var current = sortedCursors[sortedCursorIndex];\n        var next = sortedCursors[sortedCursorIndex + 1];\n        var currentSelection = current.selection;\n        var nextSelection = next.selection;\n        if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n          continue;\n        }\n        var shouldMergeCursors = void 0;\n        if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n          // Merge touching cursors if one of them is collapsed\n          shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n        } else {\n          // Merge only overlapping cursors (i.e. allow touching ranges)\n          shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n        }\n        if (shouldMergeCursors) {\n          var winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n          var looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n          var looserIndex = sortedCursors[looserSortedCursorIndex].index;\n          var winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n          var looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n          var winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n          if (!looserSelection.equalsSelection(winnerSelection)) {\n            var resultingRange = looserSelection.plusRange(winnerSelection);\n            var looserSelectionIsLTR = looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn;\n            var winnerSelectionIsLTR = winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn;\n            // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n            var resultingSelectionIsLTR = void 0;\n            if (looserIndex === this.lastAddedCursorIndex) {\n              resultingSelectionIsLTR = looserSelectionIsLTR;\n              this.lastAddedCursorIndex = winnerIndex;\n            } else {\n              // Winner takes it all\n              resultingSelectionIsLTR = winnerSelectionIsLTR;\n            }\n            var resultingSelection = void 0;\n            if (resultingSelectionIsLTR) {\n              resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n            } else {\n              resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n            }\n            sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n            var resultingState = CursorState.fromModelSelection(resultingSelection);\n            cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n          }\n          var _iterator5 = _createForOfIteratorHelper(sortedCursors),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var sortedCursor = _step5.value;\n              if (sortedCursor.index > looserIndex) {\n                sortedCursor.index--;\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n          cursors.splice(looserIndex, 1);\n          sortedCursors.splice(looserSortedCursorIndex, 1);\n          this._removeSecondaryCursor(looserIndex - 1);\n          sortedCursorIndex--;\n        }\n      }\n    }\n  }]);\n}();","map":{"version":3,"names":["compareBy","findLastMaxBy","findFirstMinBy","CursorState","Cursor","Position","Range","Selection","CursorCollection","context","_classCallCheck","cursors","lastAddedCursorIndex","_createClass","key","value","dispose","_iterator","_createForOfIteratorHelper","_step","s","n","done","cursor","err","e","f","startTrackingSelections","_iterator2","_step2","startTrackingSelection","stopTrackingSelections","_iterator3","_step3","stopTrackingSelection","updateContext","ensureValidState","_iterator4","_step4","readSelectionFromMarkers","_this","map","c","getAll","asCursorState","getViewPositions","viewState","position","getTopMostViewPosition","compare","getBottomMostViewPosition","getSelections","modelState","selection","getViewSelections","setSelections","selections","setStates","fromModelSelections","getPrimaryCursor","states","setState","_setSecondaryStates","slice","secondaryStates","secondaryCursorsLength","length","secondaryStatesLength","createCnt","i","_addSecondaryCursor","removeCnt","_removeSecondaryCursor","killSecondaryCursors","push","getLastAddedCursorIndex","removeIndex","splice","normalize","sortedCursors","len","index","sort","compareRangesUsingStarts","sortedCursorIndex","current","next","currentSelection","nextSelection","cursorConfig","multiCursorMergeOverlapping","shouldMergeCursors","isEmpty","getStartPosition","isBeforeOrEqual","getEndPosition","isBefore","winnerSortedCursorIndex","looserSortedCursorIndex","looserIndex","winnerIndex","looserSelection","winnerSelection","equalsSelection","resultingRange","plusRange","looserSelectionIsLTR","selectionStartLineNumber","startLineNumber","selectionStartColumn","startColumn","winnerSelectionIsLTR","resultingSelectionIsLTR","resultingSelection","endLineNumber","endColumn","resultingState","fromModelSelection","_iterator5","_step5","sortedCursor"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorCollection.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { compareBy } from '../../../base/common/arrays.js';\nimport { findLastMaxBy, findFirstMinBy } from '../../../base/common/arraysFind.js';\nimport { CursorState } from '../cursorCommon.js';\nimport { Cursor } from './oneCursor.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nexport class CursorCollection {\n    constructor(context) {\n        this.context = context;\n        this.cursors = [new Cursor(context)];\n        this.lastAddedCursorIndex = 0;\n    }\n    dispose() {\n        for (const cursor of this.cursors) {\n            cursor.dispose(this.context);\n        }\n    }\n    startTrackingSelections() {\n        for (const cursor of this.cursors) {\n            cursor.startTrackingSelection(this.context);\n        }\n    }\n    stopTrackingSelections() {\n        for (const cursor of this.cursors) {\n            cursor.stopTrackingSelection(this.context);\n        }\n    }\n    updateContext(context) {\n        this.context = context;\n    }\n    ensureValidState() {\n        for (const cursor of this.cursors) {\n            cursor.ensureValidState(this.context);\n        }\n    }\n    readSelectionFromMarkers() {\n        return this.cursors.map(c => c.readSelectionFromMarkers(this.context));\n    }\n    getAll() {\n        return this.cursors.map(c => c.asCursorState());\n    }\n    getViewPositions() {\n        return this.cursors.map(c => c.viewState.position);\n    }\n    getTopMostViewPosition() {\n        return findFirstMinBy(this.cursors, compareBy(c => c.viewState.position, Position.compare)).viewState.position;\n    }\n    getBottomMostViewPosition() {\n        return findLastMaxBy(this.cursors, compareBy(c => c.viewState.position, Position.compare)).viewState.position;\n    }\n    getSelections() {\n        return this.cursors.map(c => c.modelState.selection);\n    }\n    getViewSelections() {\n        return this.cursors.map(c => c.viewState.selection);\n    }\n    setSelections(selections) {\n        this.setStates(CursorState.fromModelSelections(selections));\n    }\n    getPrimaryCursor() {\n        return this.cursors[0].asCursorState();\n    }\n    setStates(states) {\n        if (states === null) {\n            return;\n        }\n        this.cursors[0].setState(this.context, states[0].modelState, states[0].viewState);\n        this._setSecondaryStates(states.slice(1));\n    }\n    /**\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n     */\n    _setSecondaryStates(secondaryStates) {\n        const secondaryCursorsLength = this.cursors.length - 1;\n        const secondaryStatesLength = secondaryStates.length;\n        if (secondaryCursorsLength < secondaryStatesLength) {\n            const createCnt = secondaryStatesLength - secondaryCursorsLength;\n            for (let i = 0; i < createCnt; i++) {\n                this._addSecondaryCursor();\n            }\n        }\n        else if (secondaryCursorsLength > secondaryStatesLength) {\n            const removeCnt = secondaryCursorsLength - secondaryStatesLength;\n            for (let i = 0; i < removeCnt; i++) {\n                this._removeSecondaryCursor(this.cursors.length - 2);\n            }\n        }\n        for (let i = 0; i < secondaryStatesLength; i++) {\n            this.cursors[i + 1].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n        }\n    }\n    killSecondaryCursors() {\n        this._setSecondaryStates([]);\n    }\n    _addSecondaryCursor() {\n        this.cursors.push(new Cursor(this.context));\n        this.lastAddedCursorIndex = this.cursors.length - 1;\n    }\n    getLastAddedCursorIndex() {\n        if (this.cursors.length === 1 || this.lastAddedCursorIndex === 0) {\n            return 0;\n        }\n        return this.lastAddedCursorIndex;\n    }\n    _removeSecondaryCursor(removeIndex) {\n        if (this.lastAddedCursorIndex >= removeIndex + 1) {\n            this.lastAddedCursorIndex--;\n        }\n        this.cursors[removeIndex + 1].dispose(this.context);\n        this.cursors.splice(removeIndex + 1, 1);\n    }\n    normalize() {\n        if (this.cursors.length === 1) {\n            return;\n        }\n        const cursors = this.cursors.slice(0);\n        const sortedCursors = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            sortedCursors.push({\n                index: i,\n                selection: cursors[i].modelState.selection,\n            });\n        }\n        sortedCursors.sort(compareBy(s => s.selection, Range.compareRangesUsingStarts));\n        for (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n            const current = sortedCursors[sortedCursorIndex];\n            const next = sortedCursors[sortedCursorIndex + 1];\n            const currentSelection = current.selection;\n            const nextSelection = next.selection;\n            if (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n                continue;\n            }\n            let shouldMergeCursors;\n            if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n                // Merge touching cursors if one of them is collapsed\n                shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n            }\n            else {\n                // Merge only overlapping cursors (i.e. allow touching ranges)\n                shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n            }\n            if (shouldMergeCursors) {\n                const winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n                const looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n                const looserIndex = sortedCursors[looserSortedCursorIndex].index;\n                const winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n                const looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n                const winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n                if (!looserSelection.equalsSelection(winnerSelection)) {\n                    const resultingRange = looserSelection.plusRange(winnerSelection);\n                    const looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\n                    const winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\n                    // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n                    let resultingSelectionIsLTR;\n                    if (looserIndex === this.lastAddedCursorIndex) {\n                        resultingSelectionIsLTR = looserSelectionIsLTR;\n                        this.lastAddedCursorIndex = winnerIndex;\n                    }\n                    else {\n                        // Winner takes it all\n                        resultingSelectionIsLTR = winnerSelectionIsLTR;\n                    }\n                    let resultingSelection;\n                    if (resultingSelectionIsLTR) {\n                        resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n                    }\n                    else {\n                        resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n                    }\n                    sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n                    const resultingState = CursorState.fromModelSelection(resultingSelection);\n                    cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n                }\n                for (const sortedCursor of sortedCursors) {\n                    if (sortedCursor.index > looserIndex) {\n                        sortedCursor.index--;\n                    }\n                }\n                cursors.splice(looserIndex, 1);\n                sortedCursors.splice(looserSortedCursorIndex, 1);\n                this._removeSecondaryCursor(looserIndex - 1);\n                sortedCursorIndex--;\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}