{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var DebugNameData = /*#__PURE__*/function () {\n  function DebugNameData(owner, debugNameSource, referenceFn) {\n    _classCallCheck(this, DebugNameData);\n    this.owner = owner;\n    this.debugNameSource = debugNameSource;\n    this.referenceFn = referenceFn;\n  }\n  return _createClass(DebugNameData, [{\n    key: \"getDebugName\",\n    value: function getDebugName(target) {\n      return _getDebugName(target, this);\n    }\n  }]);\n}();\nvar countPerName = new Map();\nvar cachedDebugName = new WeakMap();\nfunction _getDebugName(target, data) {\n  var _a;\n  var cached = cachedDebugName.get(target);\n  if (cached) {\n    return cached;\n  }\n  var dbgName = computeDebugName(target, data);\n  if (dbgName) {\n    var count = (_a = countPerName.get(dbgName)) !== null && _a !== void 0 ? _a : 0;\n    count++;\n    countPerName.set(dbgName, count);\n    var result = count === 1 ? dbgName : \"\".concat(dbgName, \"#\").concat(count);\n    cachedDebugName.set(target, result);\n    return result;\n  }\n  return undefined;\n}\nexport { _getDebugName as getDebugName };\nfunction computeDebugName(self, data) {\n  var cached = cachedDebugName.get(self);\n  if (cached) {\n    return cached;\n  }\n  var ownerStr = data.owner ? formatOwner(data.owner) + \".\" : '';\n  var result;\n  var debugNameSource = data.debugNameSource;\n  if (debugNameSource !== undefined) {\n    if (typeof debugNameSource === 'function') {\n      result = debugNameSource();\n      if (result !== undefined) {\n        return ownerStr + result;\n      }\n    } else {\n      return ownerStr + debugNameSource;\n    }\n  }\n  var referenceFn = data.referenceFn;\n  if (referenceFn !== undefined) {\n    result = getFunctionName(referenceFn);\n    if (result !== undefined) {\n      return ownerStr + result;\n    }\n  }\n  if (data.owner !== undefined) {\n    var key = findKey(data.owner, self);\n    if (key !== undefined) {\n      return ownerStr + key;\n    }\n  }\n  return undefined;\n}\nfunction findKey(obj, value) {\n  for (var key in obj) {\n    if (obj[key] === value) {\n      return key;\n    }\n  }\n  return undefined;\n}\nvar countPerClassName = new Map();\nvar ownerId = new WeakMap();\nfunction formatOwner(owner) {\n  var _a;\n  var id = ownerId.get(owner);\n  if (id) {\n    return id;\n  }\n  var className = getClassName(owner);\n  var count = (_a = countPerClassName.get(className)) !== null && _a !== void 0 ? _a : 0;\n  count++;\n  countPerClassName.set(className, count);\n  var result = count === 1 ? className : \"\".concat(className, \"#\").concat(count);\n  ownerId.set(owner, result);\n  return result;\n}\nfunction getClassName(obj) {\n  var ctor = obj.constructor;\n  if (ctor) {\n    return ctor.name;\n  }\n  return 'Object';\n}\nexport function getFunctionName(fn) {\n  var fnSrc = fn.toString();\n  // Pattern: /** @description ... */\n  var regexp = /\\/\\*\\*\\s*@description\\s*([^*]*)\\*\\//;\n  var match = regexp.exec(fnSrc);\n  var result = match ? match[1] : undefined;\n  return result === null || result === void 0 ? void 0 : result.trim();\n}","map":{"version":3,"names":["DebugNameData","owner","debugNameSource","referenceFn","_classCallCheck","_createClass","key","value","getDebugName","target","countPerName","Map","cachedDebugName","WeakMap","data","_a","cached","get","dbgName","computeDebugName","count","set","result","concat","undefined","_getDebugName","self","ownerStr","formatOwner","getFunctionName","findKey","obj","countPerClassName","ownerId","id","className","getClassName","ctor","constructor","name","fn","fnSrc","toString","regexp","match","exec","trim"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/base/common/observableInternal/debugName.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class DebugNameData {\n    constructor(owner, debugNameSource, referenceFn) {\n        this.owner = owner;\n        this.debugNameSource = debugNameSource;\n        this.referenceFn = referenceFn;\n    }\n    getDebugName(target) {\n        return getDebugName(target, this);\n    }\n}\nconst countPerName = new Map();\nconst cachedDebugName = new WeakMap();\nexport function getDebugName(target, data) {\n    var _a;\n    const cached = cachedDebugName.get(target);\n    if (cached) {\n        return cached;\n    }\n    const dbgName = computeDebugName(target, data);\n    if (dbgName) {\n        let count = (_a = countPerName.get(dbgName)) !== null && _a !== void 0 ? _a : 0;\n        count++;\n        countPerName.set(dbgName, count);\n        const result = count === 1 ? dbgName : `${dbgName}#${count}`;\n        cachedDebugName.set(target, result);\n        return result;\n    }\n    return undefined;\n}\nfunction computeDebugName(self, data) {\n    const cached = cachedDebugName.get(self);\n    if (cached) {\n        return cached;\n    }\n    const ownerStr = data.owner ? formatOwner(data.owner) + `.` : '';\n    let result;\n    const debugNameSource = data.debugNameSource;\n    if (debugNameSource !== undefined) {\n        if (typeof debugNameSource === 'function') {\n            result = debugNameSource();\n            if (result !== undefined) {\n                return ownerStr + result;\n            }\n        }\n        else {\n            return ownerStr + debugNameSource;\n        }\n    }\n    const referenceFn = data.referenceFn;\n    if (referenceFn !== undefined) {\n        result = getFunctionName(referenceFn);\n        if (result !== undefined) {\n            return ownerStr + result;\n        }\n    }\n    if (data.owner !== undefined) {\n        const key = findKey(data.owner, self);\n        if (key !== undefined) {\n            return ownerStr + key;\n        }\n    }\n    return undefined;\n}\nfunction findKey(obj, value) {\n    for (const key in obj) {\n        if (obj[key] === value) {\n            return key;\n        }\n    }\n    return undefined;\n}\nconst countPerClassName = new Map();\nconst ownerId = new WeakMap();\nfunction formatOwner(owner) {\n    var _a;\n    const id = ownerId.get(owner);\n    if (id) {\n        return id;\n    }\n    const className = getClassName(owner);\n    let count = (_a = countPerClassName.get(className)) !== null && _a !== void 0 ? _a : 0;\n    count++;\n    countPerClassName.set(className, count);\n    const result = count === 1 ? className : `${className}#${count}`;\n    ownerId.set(owner, result);\n    return result;\n}\nfunction getClassName(obj) {\n    const ctor = obj.constructor;\n    if (ctor) {\n        return ctor.name;\n    }\n    return 'Object';\n}\nexport function getFunctionName(fn) {\n    const fnSrc = fn.toString();\n    // Pattern: /** @description ... */\n    const regexp = /\\/\\*\\*\\s*@description\\s*([^*]*)\\*\\//;\n    const match = regexp.exec(fnSrc);\n    const result = match ? match[1] : undefined;\n    return result === null || result === void 0 ? void 0 : result.trim();\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,WAAaA,aAAa;EACtB,SAAAA,cAAYC,KAAK,EAAEC,eAAe,EAAEC,WAAW,EAAE;IAAAC,eAAA,OAAAJ,aAAA;IAC7C,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,WAAW,GAAGA,WAAW;EAClC;EAAC,OAAAE,YAAA,CAAAL,aAAA;IAAAM,GAAA;IAAAC,KAAA,EACD,SAAAC,aAAaC,MAAM,EAAE;MACjB,OAAOD,aAAY,CAACC,MAAM,EAAE,IAAI,CAAC;IACrC;EAAC;AAAA;AAEL,IAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC9B,IAAMC,eAAe,GAAG,IAAIC,OAAO,CAAC,CAAC;AAC9B,SAASL,aAAYA,CAACC,MAAM,EAAEK,IAAI,EAAE;EACvC,IAAIC,EAAE;EACN,IAAMC,MAAM,GAAGJ,eAAe,CAACK,GAAG,CAACR,MAAM,CAAC;EAC1C,IAAIO,MAAM,EAAE;IACR,OAAOA,MAAM;EACjB;EACA,IAAME,OAAO,GAAGC,gBAAgB,CAACV,MAAM,EAAEK,IAAI,CAAC;EAC9C,IAAII,OAAO,EAAE;IACT,IAAIE,KAAK,GAAG,CAACL,EAAE,GAAGL,YAAY,CAACO,GAAG,CAACC,OAAO,CAAC,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;IAC/EK,KAAK,EAAE;IACPV,YAAY,CAACW,GAAG,CAACH,OAAO,EAAEE,KAAK,CAAC;IAChC,IAAME,MAAM,GAAGF,KAAK,KAAK,CAAC,GAAGF,OAAO,MAAAK,MAAA,CAAML,OAAO,OAAAK,MAAA,CAAIH,KAAK,CAAE;IAC5DR,eAAe,CAACS,GAAG,CAACZ,MAAM,EAAEa,MAAM,CAAC;IACnC,OAAOA,MAAM;EACjB;EACA,OAAOE,SAAS;AACpB;AAAC,SAAAC,aAAA,IAAAjB,YAAA;AACD,SAASW,gBAAgBA,CAACO,IAAI,EAAEZ,IAAI,EAAE;EAClC,IAAME,MAAM,GAAGJ,eAAe,CAACK,GAAG,CAACS,IAAI,CAAC;EACxC,IAAIV,MAAM,EAAE;IACR,OAAOA,MAAM;EACjB;EACA,IAAMW,QAAQ,GAAGb,IAAI,CAACb,KAAK,GAAG2B,WAAW,CAACd,IAAI,CAACb,KAAK,CAAC,MAAM,GAAG,EAAE;EAChE,IAAIqB,MAAM;EACV,IAAMpB,eAAe,GAAGY,IAAI,CAACZ,eAAe;EAC5C,IAAIA,eAAe,KAAKsB,SAAS,EAAE;IAC/B,IAAI,OAAOtB,eAAe,KAAK,UAAU,EAAE;MACvCoB,MAAM,GAAGpB,eAAe,CAAC,CAAC;MAC1B,IAAIoB,MAAM,KAAKE,SAAS,EAAE;QACtB,OAAOG,QAAQ,GAAGL,MAAM;MAC5B;IACJ,CAAC,MACI;MACD,OAAOK,QAAQ,GAAGzB,eAAe;IACrC;EACJ;EACA,IAAMC,WAAW,GAAGW,IAAI,CAACX,WAAW;EACpC,IAAIA,WAAW,KAAKqB,SAAS,EAAE;IAC3BF,MAAM,GAAGO,eAAe,CAAC1B,WAAW,CAAC;IACrC,IAAImB,MAAM,KAAKE,SAAS,EAAE;MACtB,OAAOG,QAAQ,GAAGL,MAAM;IAC5B;EACJ;EACA,IAAIR,IAAI,CAACb,KAAK,KAAKuB,SAAS,EAAE;IAC1B,IAAMlB,GAAG,GAAGwB,OAAO,CAAChB,IAAI,CAACb,KAAK,EAAEyB,IAAI,CAAC;IACrC,IAAIpB,GAAG,KAAKkB,SAAS,EAAE;MACnB,OAAOG,QAAQ,GAAGrB,GAAG;IACzB;EACJ;EACA,OAAOkB,SAAS;AACpB;AACA,SAASM,OAAOA,CAACC,GAAG,EAAExB,KAAK,EAAE;EACzB,KAAK,IAAMD,GAAG,IAAIyB,GAAG,EAAE;IACnB,IAAIA,GAAG,CAACzB,GAAG,CAAC,KAAKC,KAAK,EAAE;MACpB,OAAOD,GAAG;IACd;EACJ;EACA,OAAOkB,SAAS;AACpB;AACA,IAAMQ,iBAAiB,GAAG,IAAIrB,GAAG,CAAC,CAAC;AACnC,IAAMsB,OAAO,GAAG,IAAIpB,OAAO,CAAC,CAAC;AAC7B,SAASe,WAAWA,CAAC3B,KAAK,EAAE;EACxB,IAAIc,EAAE;EACN,IAAMmB,EAAE,GAAGD,OAAO,CAAChB,GAAG,CAAChB,KAAK,CAAC;EAC7B,IAAIiC,EAAE,EAAE;IACJ,OAAOA,EAAE;EACb;EACA,IAAMC,SAAS,GAAGC,YAAY,CAACnC,KAAK,CAAC;EACrC,IAAImB,KAAK,GAAG,CAACL,EAAE,GAAGiB,iBAAiB,CAACf,GAAG,CAACkB,SAAS,CAAC,MAAM,IAAI,IAAIpB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;EACtFK,KAAK,EAAE;EACPY,iBAAiB,CAACX,GAAG,CAACc,SAAS,EAAEf,KAAK,CAAC;EACvC,IAAME,MAAM,GAAGF,KAAK,KAAK,CAAC,GAAGe,SAAS,MAAAZ,MAAA,CAAMY,SAAS,OAAAZ,MAAA,CAAIH,KAAK,CAAE;EAChEa,OAAO,CAACZ,GAAG,CAACpB,KAAK,EAAEqB,MAAM,CAAC;EAC1B,OAAOA,MAAM;AACjB;AACA,SAASc,YAAYA,CAACL,GAAG,EAAE;EACvB,IAAMM,IAAI,GAAGN,GAAG,CAACO,WAAW;EAC5B,IAAID,IAAI,EAAE;IACN,OAAOA,IAAI,CAACE,IAAI;EACpB;EACA,OAAO,QAAQ;AACnB;AACA,OAAO,SAASV,eAAeA,CAACW,EAAE,EAAE;EAChC,IAAMC,KAAK,GAAGD,EAAE,CAACE,QAAQ,CAAC,CAAC;EAC3B;EACA,IAAMC,MAAM,GAAG,qCAAqC;EACpD,IAAMC,KAAK,GAAGD,MAAM,CAACE,IAAI,CAACJ,KAAK,CAAC;EAChC,IAAMnB,MAAM,GAAGsB,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGpB,SAAS;EAC3C,OAAOF,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACwB,IAAI,CAAC,CAAC;AACxE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}