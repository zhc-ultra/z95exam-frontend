{"ast":null,"code":"import _defineProperty from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\nvar tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n};\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport var gfmTaskListItem = {\n  text: _defineProperty({}, codes.leftSquareBracket, tasklistCheck)\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  var self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== codes.eof ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, types.whitespace);\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === codes.eof ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","codes","types","tasklistCheck","tokenize","tokenizeTasklistCheck","gfmTaskListItem","text","_defineProperty","leftSquareBracket","effects","nok","self","open","code","previous","eof","_gfmTasklistFirstContentOfListItem","enter","consume","exit","inside","close","uppercaseX","lowercaseX","rightSquareBracket","after","check","spaceThenNonSpace","whitespace"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\nconst tasklistCheck = {tokenize: tokenizeTasklistCheck}\n\n// To do: next major: expose function to make extension.\n\n/**\n * Extension for `micromark` that can be passed in `extensions`, to\n * enable GFM task list items syntax.\n *\n * @type {Extension}\n */\nexport const gfmTaskListItem = {\n  text: {[codes.leftSquareBracket]: tasklistCheck}\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== codes.eof ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({tokenize: spaceThenNonSpace}, ok, nok)(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, types.whitespace)\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === codes.eof ? nok(code) : ok(code)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}