{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalState } from '../../../base/common/errors.js';\nimport { localize } from '../../../nls.js';\nfunction hintDidYouMean() {\n  switch (arguments.length) {\n    case 1:\n      return localize('contextkey.scanner.hint.didYouMean1', \"Did you mean {0}?\", arguments.length <= 0 ? undefined : arguments[0]);\n    case 2:\n      return localize('contextkey.scanner.hint.didYouMean2', \"Did you mean {0} or {1}?\", arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\n    case 3:\n      return localize('contextkey.scanner.hint.didYouMean3', \"Did you mean {0}, {1} or {2}?\", arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n    default:\n      // we just don't expect that many\n      return undefined;\n  }\n}\nvar hintDidYouForgetToOpenOrCloseQuote = localize('contextkey.scanner.hint.didYouForgetToOpenOrCloseQuote', \"Did you forget to open or close the quote?\");\nvar hintDidYouForgetToEscapeSlash = localize('contextkey.scanner.hint.didYouForgetToEscapeSlash', \"Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\\\\\/\\'.\");\n/**\n * A simple scanner for context keys.\n *\n * Example:\n *\n * ```ts\n * const scanner = new Scanner().reset('resourceFileName =~ /docker/ && !config.docker.enabled');\n * const tokens = [...scanner];\n * if (scanner.errorTokens.length > 0) {\n *     scanner.errorTokens.forEach(err => console.error(`Unexpected token at ${err.offset}: ${err.lexeme}\\nHint: ${err.additional}`));\n * } else {\n *     // process tokens\n * }\n * ```\n */\nexport var Scanner = /*#__PURE__*/function () {\n  function Scanner() {\n    _classCallCheck(this, Scanner);\n    this._input = '';\n    this._start = 0;\n    this._current = 0;\n    this._tokens = [];\n    this._errors = [];\n    // u - unicode, y - sticky // TODO@ulugbekna: we accept double quotes as part of the string rather than as a delimiter (to preserve old parser's behavior)\n    this.stringRe = new RegExp(\"(?:[\\\"-%\\\\*-<>-_a-z\\\\xAA\\\\xB5\\\\xBA\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0560-\\\\u0588\\\\u05D0-\\\\u05EA\\\\u05EF-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u0860-\\\\u086A\\\\u0870-\\\\u0887\\\\u0889-\\\\u088E\\\\u08A0-\\\\u08C9\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u09FC\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0AF9\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58-\\\\u0C5A\\\\u0C5D\\\\u0C60\\\\u0C61\\\\u0C80\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D04-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D54-\\\\u0D56\\\\u0D5F-\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E86-\\\\u0E8A\\\\u0E8C-\\\\u0EA3\\\\u0EA5\\\\u0EA7-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F5\\\\u13F8-\\\\u13FD\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16F1-\\\\u16F8\\\\u1700-\\\\u1711\\\\u171F-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1878\\\\u1880-\\\\u1884\\\\u1887-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19B0-\\\\u19C9\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4C\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1C80-\\\\u1C88\\\\u1C90-\\\\u1CBA\\\\u1CBD-\\\\u1CBF\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF3\\\\u1CF5\\\\u1CF6\\\\u1CFA\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2183\\\\u2184\\\\u2C00-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005\\\\u3006\\\\u3031-\\\\u3035\\\\u303B\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312F\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BF\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DBF\\\\u4E00-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6E5\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA7CA\\\\uA7D0\\\\uA7D1\\\\uA7D3\\\\uA7D5-\\\\uA7D9\\\\uA7F2-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA8FD\\\\uA8FE\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB69\\\\uAB70-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]|\\\\uD800[\\\\uDC00-\\\\uDC0B\\\\uDC0D-\\\\uDC26\\\\uDC28-\\\\uDC3A\\\\uDC3C\\\\uDC3D\\\\uDC3F-\\\\uDC4D\\\\uDC50-\\\\uDC5D\\\\uDC80-\\\\uDCFA\\\\uDE80-\\\\uDE9C\\\\uDEA0-\\\\uDED0\\\\uDF00-\\\\uDF1F\\\\uDF2D-\\\\uDF40\\\\uDF42-\\\\uDF49\\\\uDF50-\\\\uDF75\\\\uDF80-\\\\uDF9D\\\\uDFA0-\\\\uDFC3\\\\uDFC8-\\\\uDFCF]|\\\\uD801[\\\\uDC00-\\\\uDC9D\\\\uDCB0-\\\\uDCD3\\\\uDCD8-\\\\uDCFB\\\\uDD00-\\\\uDD27\\\\uDD30-\\\\uDD63\\\\uDD70-\\\\uDD7A\\\\uDD7C-\\\\uDD8A\\\\uDD8C-\\\\uDD92\\\\uDD94\\\\uDD95\\\\uDD97-\\\\uDDA1\\\\uDDA3-\\\\uDDB1\\\\uDDB3-\\\\uDDB9\\\\uDDBB\\\\uDDBC\\\\uDE00-\\\\uDF36\\\\uDF40-\\\\uDF55\\\\uDF60-\\\\uDF67\\\\uDF80-\\\\uDF85\\\\uDF87-\\\\uDFB0\\\\uDFB2-\\\\uDFBA]|\\\\uD802[\\\\uDC00-\\\\uDC05\\\\uDC08\\\\uDC0A-\\\\uDC35\\\\uDC37\\\\uDC38\\\\uDC3C\\\\uDC3F-\\\\uDC55\\\\uDC60-\\\\uDC76\\\\uDC80-\\\\uDC9E\\\\uDCE0-\\\\uDCF2\\\\uDCF4\\\\uDCF5\\\\uDD00-\\\\uDD15\\\\uDD20-\\\\uDD39\\\\uDD80-\\\\uDDB7\\\\uDDBE\\\\uDDBF\\\\uDE00\\\\uDE10-\\\\uDE13\\\\uDE15-\\\\uDE17\\\\uDE19-\\\\uDE35\\\\uDE60-\\\\uDE7C\\\\uDE80-\\\\uDE9C\\\\uDEC0-\\\\uDEC7\\\\uDEC9-\\\\uDEE4\\\\uDF00-\\\\uDF35\\\\uDF40-\\\\uDF55\\\\uDF60-\\\\uDF72\\\\uDF80-\\\\uDF91]|\\\\uD803[\\\\uDC00-\\\\uDC48\\\\uDC80-\\\\uDCB2\\\\uDCC0-\\\\uDCF2\\\\uDD00-\\\\uDD23\\\\uDE80-\\\\uDEA9\\\\uDEB0\\\\uDEB1\\\\uDF00-\\\\uDF1C\\\\uDF27\\\\uDF30-\\\\uDF45\\\\uDF70-\\\\uDF81\\\\uDFB0-\\\\uDFC4\\\\uDFE0-\\\\uDFF6]|\\\\uD804[\\\\uDC03-\\\\uDC37\\\\uDC71\\\\uDC72\\\\uDC75\\\\uDC83-\\\\uDCAF\\\\uDCD0-\\\\uDCE8\\\\uDD03-\\\\uDD26\\\\uDD44\\\\uDD47\\\\uDD50-\\\\uDD72\\\\uDD76\\\\uDD83-\\\\uDDB2\\\\uDDC1-\\\\uDDC4\\\\uDDDA\\\\uDDDC\\\\uDE00-\\\\uDE11\\\\uDE13-\\\\uDE2B\\\\uDE3F\\\\uDE40\\\\uDE80-\\\\uDE86\\\\uDE88\\\\uDE8A-\\\\uDE8D\\\\uDE8F-\\\\uDE9D\\\\uDE9F-\\\\uDEA8\\\\uDEB0-\\\\uDEDE\\\\uDF05-\\\\uDF0C\\\\uDF0F\\\\uDF10\\\\uDF13-\\\\uDF28\\\\uDF2A-\\\\uDF30\\\\uDF32\\\\uDF33\\\\uDF35-\\\\uDF39\\\\uDF3D\\\\uDF50\\\\uDF5D-\\\\uDF61]|\\\\uD805[\\\\uDC00-\\\\uDC34\\\\uDC47-\\\\uDC4A\\\\uDC5F-\\\\uDC61\\\\uDC80-\\\\uDCAF\\\\uDCC4\\\\uDCC5\\\\uDCC7\\\\uDD80-\\\\uDDAE\\\\uDDD8-\\\\uDDDB\\\\uDE00-\\\\uDE2F\\\\uDE44\\\\uDE80-\\\\uDEAA\\\\uDEB8\\\\uDF00-\\\\uDF1A\\\\uDF40-\\\\uDF46]|\\\\uD806[\\\\uDC00-\\\\uDC2B\\\\uDCA0-\\\\uDCDF\\\\uDCFF-\\\\uDD06\\\\uDD09\\\\uDD0C-\\\\uDD13\\\\uDD15\\\\uDD16\\\\uDD18-\\\\uDD2F\\\\uDD3F\\\\uDD41\\\\uDDA0-\\\\uDDA7\\\\uDDAA-\\\\uDDD0\\\\uDDE1\\\\uDDE3\\\\uDE00\\\\uDE0B-\\\\uDE32\\\\uDE3A\\\\uDE50\\\\uDE5C-\\\\uDE89\\\\uDE9D\\\\uDEB0-\\\\uDEF8]|\\\\uD807[\\\\uDC00-\\\\uDC08\\\\uDC0A-\\\\uDC2E\\\\uDC40\\\\uDC72-\\\\uDC8F\\\\uDD00-\\\\uDD06\\\\uDD08\\\\uDD09\\\\uDD0B-\\\\uDD30\\\\uDD46\\\\uDD60-\\\\uDD65\\\\uDD67\\\\uDD68\\\\uDD6A-\\\\uDD89\\\\uDD98\\\\uDEE0-\\\\uDEF2\\\\uDF02\\\\uDF04-\\\\uDF10\\\\uDF12-\\\\uDF33\\\\uDFB0]|\\\\uD808[\\\\uDC00-\\\\uDF99]|\\\\uD809[\\\\uDC80-\\\\uDD43]|\\\\uD80B[\\\\uDF90-\\\\uDFF0]|[\\\\uD80C\\\\uD81C-\\\\uD820\\\\uD822\\\\uD840-\\\\uD868\\\\uD86A-\\\\uD86C\\\\uD86F-\\\\uD872\\\\uD874-\\\\uD879\\\\uD880-\\\\uD883\\\\uD885-\\\\uD887][\\\\uDC00-\\\\uDFFF]|\\\\uD80D[\\\\uDC00-\\\\uDC2F\\\\uDC41-\\\\uDC46]|\\\\uD811[\\\\uDC00-\\\\uDE46]|\\\\uD81A[\\\\uDC00-\\\\uDE38\\\\uDE40-\\\\uDE5E\\\\uDE70-\\\\uDEBE\\\\uDED0-\\\\uDEED\\\\uDF00-\\\\uDF2F\\\\uDF40-\\\\uDF43\\\\uDF63-\\\\uDF77\\\\uDF7D-\\\\uDF8F]|\\\\uD81B[\\\\uDE40-\\\\uDE7F\\\\uDF00-\\\\uDF4A\\\\uDF50\\\\uDF93-\\\\uDF9F\\\\uDFE0\\\\uDFE1\\\\uDFE3]|\\\\uD821[\\\\uDC00-\\\\uDFF7]|\\\\uD823[\\\\uDC00-\\\\uDCD5\\\\uDD00-\\\\uDD08]|\\\\uD82B[\\\\uDFF0-\\\\uDFF3\\\\uDFF5-\\\\uDFFB\\\\uDFFD\\\\uDFFE]|\\\\uD82C[\\\\uDC00-\\\\uDD22\\\\uDD32\\\\uDD50-\\\\uDD52\\\\uDD55\\\\uDD64-\\\\uDD67\\\\uDD70-\\\\uDEFB]|\\\\uD82F[\\\\uDC00-\\\\uDC6A\\\\uDC70-\\\\uDC7C\\\\uDC80-\\\\uDC88\\\\uDC90-\\\\uDC99]|\\\\uD835[\\\\uDC00-\\\\uDC54\\\\uDC56-\\\\uDC9C\\\\uDC9E\\\\uDC9F\\\\uDCA2\\\\uDCA5\\\\uDCA6\\\\uDCA9-\\\\uDCAC\\\\uDCAE-\\\\uDCB9\\\\uDCBB\\\\uDCBD-\\\\uDCC3\\\\uDCC5-\\\\uDD05\\\\uDD07-\\\\uDD0A\\\\uDD0D-\\\\uDD14\\\\uDD16-\\\\uDD1C\\\\uDD1E-\\\\uDD39\\\\uDD3B-\\\\uDD3E\\\\uDD40-\\\\uDD44\\\\uDD46\\\\uDD4A-\\\\uDD50\\\\uDD52-\\\\uDEA5\\\\uDEA8-\\\\uDEC0\\\\uDEC2-\\\\uDEDA\\\\uDEDC-\\\\uDEFA\\\\uDEFC-\\\\uDF14\\\\uDF16-\\\\uDF34\\\\uDF36-\\\\uDF4E\\\\uDF50-\\\\uDF6E\\\\uDF70-\\\\uDF88\\\\uDF8A-\\\\uDFA8\\\\uDFAA-\\\\uDFC2\\\\uDFC4-\\\\uDFCB]|\\\\uD837[\\\\uDF00-\\\\uDF1E\\\\uDF25-\\\\uDF2A]|\\\\uD838[\\\\uDC30-\\\\uDC6D\\\\uDD00-\\\\uDD2C\\\\uDD37-\\\\uDD3D\\\\uDD4E\\\\uDE90-\\\\uDEAD\\\\uDEC0-\\\\uDEEB]|\\\\uD839[\\\\uDCD0-\\\\uDCEB\\\\uDFE0-\\\\uDFE6\\\\uDFE8-\\\\uDFEB\\\\uDFED\\\\uDFEE\\\\uDFF0-\\\\uDFFE]|\\\\uD83A[\\\\uDC00-\\\\uDCC4\\\\uDD00-\\\\uDD43\\\\uDD4B]|\\\\uD83B[\\\\uDE00-\\\\uDE03\\\\uDE05-\\\\uDE1F\\\\uDE21\\\\uDE22\\\\uDE24\\\\uDE27\\\\uDE29-\\\\uDE32\\\\uDE34-\\\\uDE37\\\\uDE39\\\\uDE3B\\\\uDE42\\\\uDE47\\\\uDE49\\\\uDE4B\\\\uDE4D-\\\\uDE4F\\\\uDE51\\\\uDE52\\\\uDE54\\\\uDE57\\\\uDE59\\\\uDE5B\\\\uDE5D\\\\uDE5F\\\\uDE61\\\\uDE62\\\\uDE64\\\\uDE67-\\\\uDE6A\\\\uDE6C-\\\\uDE72\\\\uDE74-\\\\uDE77\\\\uDE79-\\\\uDE7C\\\\uDE7E\\\\uDE80-\\\\uDE89\\\\uDE8B-\\\\uDE9B\\\\uDEA1-\\\\uDEA3\\\\uDEA5-\\\\uDEA9\\\\uDEAB-\\\\uDEBB]|\\\\uD869[\\\\uDC00-\\\\uDEDF\\\\uDF00-\\\\uDFFF]|\\\\uD86D[\\\\uDC00-\\\\uDF39\\\\uDF40-\\\\uDFFF]|\\\\uD86E[\\\\uDC00-\\\\uDC1D\\\\uDC20-\\\\uDFFF]|\\\\uD873[\\\\uDC00-\\\\uDEA1\\\\uDEB0-\\\\uDFFF]|\\\\uD87A[\\\\uDC00-\\\\uDFE0\\\\uDFF0-\\\\uDFFF]|\\\\uD87B[\\\\uDC00-\\\\uDE5D]|\\\\uD87E[\\\\uDC00-\\\\uDE1D]|\\\\uD884[\\\\uDC00-\\\\uDF4A\\\\uDF50-\\\\uDFFF]|\\\\uD888[\\\\uDC00-\\\\uDFAF])+\", \"y\");\n  }\n  return _createClass(Scanner, [{\n    key: \"reset\",\n    value: function reset(value) {\n      this._input = value;\n      this._start = 0;\n      this._current = 0;\n      this._tokens = [];\n      this._errors = [];\n      return this;\n    }\n  }, {\n    key: \"scan\",\n    value: function scan() {\n      while (!this._isAtEnd()) {\n        this._start = this._current;\n        var ch = this._advance();\n        switch (ch) {\n          case 40 /* CharCode.OpenParen */:\n            this._addToken(0 /* TokenType.LParen */);\n            break;\n          case 41 /* CharCode.CloseParen */:\n            this._addToken(1 /* TokenType.RParen */);\n            break;\n          case 33 /* CharCode.ExclamationMark */:\n            if (this._match(61 /* CharCode.Equals */)) {\n              var isTripleEq = this._match(61 /* CharCode.Equals */); // eat last `=` if `!==`\n              this._tokens.push({\n                type: 4 /* TokenType.NotEq */,\n                offset: this._start,\n                isTripleEq: isTripleEq\n              });\n            } else {\n              this._addToken(2 /* TokenType.Neg */);\n            }\n            break;\n          case 39 /* CharCode.SingleQuote */:\n            this._quotedString();\n            break;\n          case 47 /* CharCode.Slash */:\n            this._regex();\n            break;\n          case 61 /* CharCode.Equals */:\n            if (this._match(61 /* CharCode.Equals */)) {\n              // support `==`\n              var _isTripleEq = this._match(61 /* CharCode.Equals */); // eat last `=` if `===`\n              this._tokens.push({\n                type: 3 /* TokenType.Eq */,\n                offset: this._start,\n                isTripleEq: _isTripleEq\n              });\n            } else if (this._match(126 /* CharCode.Tilde */)) {\n              this._addToken(9 /* TokenType.RegexOp */);\n            } else {\n              this._error(hintDidYouMean('==', '=~'));\n            }\n            break;\n          case 60 /* CharCode.LessThan */:\n            this._addToken(this._match(61 /* CharCode.Equals */) ? 6 /* TokenType.LtEq */ : 5 /* TokenType.Lt */);\n            break;\n          case 62 /* CharCode.GreaterThan */:\n            this._addToken(this._match(61 /* CharCode.Equals */) ? 8 /* TokenType.GtEq */ : 7 /* TokenType.Gt */);\n            break;\n          case 38 /* CharCode.Ampersand */:\n            if (this._match(38 /* CharCode.Ampersand */)) {\n              this._addToken(15 /* TokenType.And */);\n            } else {\n              this._error(hintDidYouMean('&&'));\n            }\n            break;\n          case 124 /* CharCode.Pipe */:\n            if (this._match(124 /* CharCode.Pipe */)) {\n              this._addToken(16 /* TokenType.Or */);\n            } else {\n              this._error(hintDidYouMean('||'));\n            }\n            break;\n          // TODO@ulugbekna: 1) rewrite using a regex 2) reconsider what characters are considered whitespace, including unicode, nbsp, etc.\n          case 32 /* CharCode.Space */:\n          case 13 /* CharCode.CarriageReturn */:\n          case 9 /* CharCode.Tab */:\n          case 10 /* CharCode.LineFeed */:\n          case 160 /* CharCode.NoBreakSpace */:\n            // &nbsp\n            break;\n          default:\n            this._string();\n        }\n      }\n      this._start = this._current;\n      this._addToken(20 /* TokenType.EOF */);\n      return Array.from(this._tokens);\n    }\n  }, {\n    key: \"_match\",\n    value: function _match(expected) {\n      if (this._isAtEnd()) {\n        return false;\n      }\n      if (this._input.charCodeAt(this._current) !== expected) {\n        return false;\n      }\n      this._current++;\n      return true;\n    }\n  }, {\n    key: \"_advance\",\n    value: function _advance() {\n      return this._input.charCodeAt(this._current++);\n    }\n  }, {\n    key: \"_peek\",\n    value: function _peek() {\n      return this._isAtEnd() ? 0 /* CharCode.Null */ : this._input.charCodeAt(this._current);\n    }\n  }, {\n    key: \"_addToken\",\n    value: function _addToken(type) {\n      this._tokens.push({\n        type: type,\n        offset: this._start\n      });\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(additional) {\n      var offset = this._start;\n      var lexeme = this._input.substring(this._start, this._current);\n      var errToken = {\n        type: 19 /* TokenType.Error */,\n        offset: this._start,\n        lexeme: lexeme\n      };\n      this._errors.push({\n        offset: offset,\n        lexeme: lexeme,\n        additionalInfo: additional\n      });\n      this._tokens.push(errToken);\n    }\n  }, {\n    key: \"_string\",\n    value: function _string() {\n      this.stringRe.lastIndex = this._start;\n      var match = this.stringRe.exec(this._input);\n      if (match) {\n        this._current = this._start + match[0].length;\n        var lexeme = this._input.substring(this._start, this._current);\n        var keyword = Scanner._keywords.get(lexeme);\n        if (keyword) {\n          this._addToken(keyword);\n        } else {\n          this._tokens.push({\n            type: 17 /* TokenType.Str */,\n            lexeme: lexeme,\n            offset: this._start\n          });\n        }\n      }\n    }\n    // captures the lexeme without the leading and trailing '\n  }, {\n    key: \"_quotedString\",\n    value: function _quotedString() {\n      while (this._peek() !== 39 /* CharCode.SingleQuote */ && !this._isAtEnd()) {\n        // TODO@ulugbekna: add support for escaping ' ?\n        this._advance();\n      }\n      if (this._isAtEnd()) {\n        this._error(hintDidYouForgetToOpenOrCloseQuote);\n        return;\n      }\n      // consume the closing '\n      this._advance();\n      this._tokens.push({\n        type: 18 /* TokenType.QuotedStr */,\n        lexeme: this._input.substring(this._start + 1, this._current - 1),\n        offset: this._start + 1\n      });\n    }\n    /*\n     * Lexing a regex expression: /.../[igsmyu]*\n     * Based on https://github.com/microsoft/TypeScript/blob/9247ef115e617805983740ba795d7a8164babf89/src/compiler/scanner.ts#L2129-L2181\n     *\n     * Note that we want slashes within a regex to be escaped, e.g., /file:\\\\/\\\\/\\\\// should match `file:///`\n     */\n  }, {\n    key: \"_regex\",\n    value: function _regex() {\n      var p = this._current;\n      var inEscape = false;\n      var inCharacterClass = false;\n      while (true) {\n        if (p >= this._input.length) {\n          this._current = p;\n          this._error(hintDidYouForgetToEscapeSlash);\n          return;\n        }\n        var ch = this._input.charCodeAt(p);\n        if (inEscape) {\n          // parsing an escape character\n          inEscape = false;\n        } else if (ch === 47 /* CharCode.Slash */ && !inCharacterClass) {\n          // end of regex\n          p++;\n          break;\n        } else if (ch === 91 /* CharCode.OpenSquareBracket */) {\n          inCharacterClass = true;\n        } else if (ch === 92 /* CharCode.Backslash */) {\n          inEscape = true;\n        } else if (ch === 93 /* CharCode.CloseSquareBracket */) {\n          inCharacterClass = false;\n        }\n        p++;\n      }\n      // Consume flags // TODO@ulugbekna: use regex instead\n      while (p < this._input.length && Scanner._regexFlags.has(this._input.charCodeAt(p))) {\n        p++;\n      }\n      this._current = p;\n      var lexeme = this._input.substring(this._start, this._current);\n      this._tokens.push({\n        type: 10 /* TokenType.RegexStr */,\n        lexeme: lexeme,\n        offset: this._start\n      });\n    }\n  }, {\n    key: \"_isAtEnd\",\n    value: function _isAtEnd() {\n      return this._current >= this._input.length;\n    }\n  }], [{\n    key: \"getLexeme\",\n    value: function getLexeme(token) {\n      switch (token.type) {\n        case 0 /* TokenType.LParen */:\n          return '(';\n        case 1 /* TokenType.RParen */:\n          return ')';\n        case 2 /* TokenType.Neg */:\n          return '!';\n        case 3 /* TokenType.Eq */:\n          return token.isTripleEq ? '===' : '==';\n        case 4 /* TokenType.NotEq */:\n          return token.isTripleEq ? '!==' : '!=';\n        case 5 /* TokenType.Lt */:\n          return '<';\n        case 6 /* TokenType.LtEq */:\n          return '<=';\n        case 7 /* TokenType.Gt */:\n          return '>=';\n        case 8 /* TokenType.GtEq */:\n          return '>=';\n        case 9 /* TokenType.RegexOp */:\n          return '=~';\n        case 10 /* TokenType.RegexStr */:\n          return token.lexeme;\n        case 11 /* TokenType.True */:\n          return 'true';\n        case 12 /* TokenType.False */:\n          return 'false';\n        case 13 /* TokenType.In */:\n          return 'in';\n        case 14 /* TokenType.Not */:\n          return 'not';\n        case 15 /* TokenType.And */:\n          return '&&';\n        case 16 /* TokenType.Or */:\n          return '||';\n        case 17 /* TokenType.Str */:\n          return token.lexeme;\n        case 18 /* TokenType.QuotedStr */:\n          return token.lexeme;\n        case 19 /* TokenType.Error */:\n          return token.lexeme;\n        case 20 /* TokenType.EOF */:\n          return 'EOF';\n        default:\n          throw illegalState(\"unhandled token type: \".concat(JSON.stringify(token), \"; have you forgotten to add a case?\"));\n      }\n    }\n  }]);\n}();\nScanner._regexFlags = new Set(['i', 'g', 's', 'm', 'y', 'u'].map(function (ch) {\n  return ch.charCodeAt(0);\n}));\nScanner._keywords = new Map([['not', 14 /* TokenType.Not */], ['in', 13 /* TokenType.In */], ['false', 12 /* TokenType.False */], ['true', 11 /* TokenType.True */]]);","map":{"version":3,"names":["illegalState","localize","hintDidYouMean","arguments","length","undefined","hintDidYouForgetToOpenOrCloseQuote","hintDidYouForgetToEscapeSlash","Scanner","_classCallCheck","_input","_start","_current","_tokens","_errors","stringRe","RegExp","_createClass","key","value","reset","scan","_isAtEnd","ch","_advance","_addToken","_match","isTripleEq","push","type","offset","_quotedString","_regex","_error","_string","Array","from","expected","charCodeAt","_peek","additional","lexeme","substring","errToken","additionalInfo","lastIndex","match","exec","keyword","_keywords","get","p","inEscape","inCharacterClass","_regexFlags","has","getLexeme","token","concat","JSON","stringify","Set","map","Map"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/platform/contextkey/common/scanner.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalState } from '../../../base/common/errors.js';\nimport { localize } from '../../../nls.js';\nfunction hintDidYouMean(...meant) {\n    switch (meant.length) {\n        case 1:\n            return localize('contextkey.scanner.hint.didYouMean1', \"Did you mean {0}?\", meant[0]);\n        case 2:\n            return localize('contextkey.scanner.hint.didYouMean2', \"Did you mean {0} or {1}?\", meant[0], meant[1]);\n        case 3:\n            return localize('contextkey.scanner.hint.didYouMean3', \"Did you mean {0}, {1} or {2}?\", meant[0], meant[1], meant[2]);\n        default: // we just don't expect that many\n            return undefined;\n    }\n}\nconst hintDidYouForgetToOpenOrCloseQuote = localize('contextkey.scanner.hint.didYouForgetToOpenOrCloseQuote', \"Did you forget to open or close the quote?\");\nconst hintDidYouForgetToEscapeSlash = localize('contextkey.scanner.hint.didYouForgetToEscapeSlash', \"Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\\\\\/\\'.\");\n/**\n * A simple scanner for context keys.\n *\n * Example:\n *\n * ```ts\n * const scanner = new Scanner().reset('resourceFileName =~ /docker/ && !config.docker.enabled');\n * const tokens = [...scanner];\n * if (scanner.errorTokens.length > 0) {\n *     scanner.errorTokens.forEach(err => console.error(`Unexpected token at ${err.offset}: ${err.lexeme}\\nHint: ${err.additional}`));\n * } else {\n *     // process tokens\n * }\n * ```\n */\nexport class Scanner {\n    constructor() {\n        this._input = '';\n        this._start = 0;\n        this._current = 0;\n        this._tokens = [];\n        this._errors = [];\n        // u - unicode, y - sticky // TODO@ulugbekna: we accept double quotes as part of the string rather than as a delimiter (to preserve old parser's behavior)\n        this.stringRe = /[a-zA-Z0-9_<>\\-\\./\\\\:\\*\\?\\+\\[\\]\\^,#@;\"%\\$\\p{L}-]+/uy;\n    }\n    static getLexeme(token) {\n        switch (token.type) {\n            case 0 /* TokenType.LParen */:\n                return '(';\n            case 1 /* TokenType.RParen */:\n                return ')';\n            case 2 /* TokenType.Neg */:\n                return '!';\n            case 3 /* TokenType.Eq */:\n                return token.isTripleEq ? '===' : '==';\n            case 4 /* TokenType.NotEq */:\n                return token.isTripleEq ? '!==' : '!=';\n            case 5 /* TokenType.Lt */:\n                return '<';\n            case 6 /* TokenType.LtEq */:\n                return '<=';\n            case 7 /* TokenType.Gt */:\n                return '>=';\n            case 8 /* TokenType.GtEq */:\n                return '>=';\n            case 9 /* TokenType.RegexOp */:\n                return '=~';\n            case 10 /* TokenType.RegexStr */:\n                return token.lexeme;\n            case 11 /* TokenType.True */:\n                return 'true';\n            case 12 /* TokenType.False */:\n                return 'false';\n            case 13 /* TokenType.In */:\n                return 'in';\n            case 14 /* TokenType.Not */:\n                return 'not';\n            case 15 /* TokenType.And */:\n                return '&&';\n            case 16 /* TokenType.Or */:\n                return '||';\n            case 17 /* TokenType.Str */:\n                return token.lexeme;\n            case 18 /* TokenType.QuotedStr */:\n                return token.lexeme;\n            case 19 /* TokenType.Error */:\n                return token.lexeme;\n            case 20 /* TokenType.EOF */:\n                return 'EOF';\n            default:\n                throw illegalState(`unhandled token type: ${JSON.stringify(token)}; have you forgotten to add a case?`);\n        }\n    }\n    reset(value) {\n        this._input = value;\n        this._start = 0;\n        this._current = 0;\n        this._tokens = [];\n        this._errors = [];\n        return this;\n    }\n    scan() {\n        while (!this._isAtEnd()) {\n            this._start = this._current;\n            const ch = this._advance();\n            switch (ch) {\n                case 40 /* CharCode.OpenParen */:\n                    this._addToken(0 /* TokenType.LParen */);\n                    break;\n                case 41 /* CharCode.CloseParen */:\n                    this._addToken(1 /* TokenType.RParen */);\n                    break;\n                case 33 /* CharCode.ExclamationMark */:\n                    if (this._match(61 /* CharCode.Equals */)) {\n                        const isTripleEq = this._match(61 /* CharCode.Equals */); // eat last `=` if `!==`\n                        this._tokens.push({ type: 4 /* TokenType.NotEq */, offset: this._start, isTripleEq });\n                    }\n                    else {\n                        this._addToken(2 /* TokenType.Neg */);\n                    }\n                    break;\n                case 39 /* CharCode.SingleQuote */:\n                    this._quotedString();\n                    break;\n                case 47 /* CharCode.Slash */:\n                    this._regex();\n                    break;\n                case 61 /* CharCode.Equals */:\n                    if (this._match(61 /* CharCode.Equals */)) { // support `==`\n                        const isTripleEq = this._match(61 /* CharCode.Equals */); // eat last `=` if `===`\n                        this._tokens.push({ type: 3 /* TokenType.Eq */, offset: this._start, isTripleEq });\n                    }\n                    else if (this._match(126 /* CharCode.Tilde */)) {\n                        this._addToken(9 /* TokenType.RegexOp */);\n                    }\n                    else {\n                        this._error(hintDidYouMean('==', '=~'));\n                    }\n                    break;\n                case 60 /* CharCode.LessThan */:\n                    this._addToken(this._match(61 /* CharCode.Equals */) ? 6 /* TokenType.LtEq */ : 5 /* TokenType.Lt */);\n                    break;\n                case 62 /* CharCode.GreaterThan */:\n                    this._addToken(this._match(61 /* CharCode.Equals */) ? 8 /* TokenType.GtEq */ : 7 /* TokenType.Gt */);\n                    break;\n                case 38 /* CharCode.Ampersand */:\n                    if (this._match(38 /* CharCode.Ampersand */)) {\n                        this._addToken(15 /* TokenType.And */);\n                    }\n                    else {\n                        this._error(hintDidYouMean('&&'));\n                    }\n                    break;\n                case 124 /* CharCode.Pipe */:\n                    if (this._match(124 /* CharCode.Pipe */)) {\n                        this._addToken(16 /* TokenType.Or */);\n                    }\n                    else {\n                        this._error(hintDidYouMean('||'));\n                    }\n                    break;\n                // TODO@ulugbekna: 1) rewrite using a regex 2) reconsider what characters are considered whitespace, including unicode, nbsp, etc.\n                case 32 /* CharCode.Space */:\n                case 13 /* CharCode.CarriageReturn */:\n                case 9 /* CharCode.Tab */:\n                case 10 /* CharCode.LineFeed */:\n                case 160 /* CharCode.NoBreakSpace */: // &nbsp\n                    break;\n                default:\n                    this._string();\n            }\n        }\n        this._start = this._current;\n        this._addToken(20 /* TokenType.EOF */);\n        return Array.from(this._tokens);\n    }\n    _match(expected) {\n        if (this._isAtEnd()) {\n            return false;\n        }\n        if (this._input.charCodeAt(this._current) !== expected) {\n            return false;\n        }\n        this._current++;\n        return true;\n    }\n    _advance() {\n        return this._input.charCodeAt(this._current++);\n    }\n    _peek() {\n        return this._isAtEnd() ? 0 /* CharCode.Null */ : this._input.charCodeAt(this._current);\n    }\n    _addToken(type) {\n        this._tokens.push({ type, offset: this._start });\n    }\n    _error(additional) {\n        const offset = this._start;\n        const lexeme = this._input.substring(this._start, this._current);\n        const errToken = { type: 19 /* TokenType.Error */, offset: this._start, lexeme };\n        this._errors.push({ offset, lexeme, additionalInfo: additional });\n        this._tokens.push(errToken);\n    }\n    _string() {\n        this.stringRe.lastIndex = this._start;\n        const match = this.stringRe.exec(this._input);\n        if (match) {\n            this._current = this._start + match[0].length;\n            const lexeme = this._input.substring(this._start, this._current);\n            const keyword = Scanner._keywords.get(lexeme);\n            if (keyword) {\n                this._addToken(keyword);\n            }\n            else {\n                this._tokens.push({ type: 17 /* TokenType.Str */, lexeme, offset: this._start });\n            }\n        }\n    }\n    // captures the lexeme without the leading and trailing '\n    _quotedString() {\n        while (this._peek() !== 39 /* CharCode.SingleQuote */ && !this._isAtEnd()) { // TODO@ulugbekna: add support for escaping ' ?\n            this._advance();\n        }\n        if (this._isAtEnd()) {\n            this._error(hintDidYouForgetToOpenOrCloseQuote);\n            return;\n        }\n        // consume the closing '\n        this._advance();\n        this._tokens.push({ type: 18 /* TokenType.QuotedStr */, lexeme: this._input.substring(this._start + 1, this._current - 1), offset: this._start + 1 });\n    }\n    /*\n     * Lexing a regex expression: /.../[igsmyu]*\n     * Based on https://github.com/microsoft/TypeScript/blob/9247ef115e617805983740ba795d7a8164babf89/src/compiler/scanner.ts#L2129-L2181\n     *\n     * Note that we want slashes within a regex to be escaped, e.g., /file:\\\\/\\\\/\\\\// should match `file:///`\n     */\n    _regex() {\n        let p = this._current;\n        let inEscape = false;\n        let inCharacterClass = false;\n        while (true) {\n            if (p >= this._input.length) {\n                this._current = p;\n                this._error(hintDidYouForgetToEscapeSlash);\n                return;\n            }\n            const ch = this._input.charCodeAt(p);\n            if (inEscape) { // parsing an escape character\n                inEscape = false;\n            }\n            else if (ch === 47 /* CharCode.Slash */ && !inCharacterClass) { // end of regex\n                p++;\n                break;\n            }\n            else if (ch === 91 /* CharCode.OpenSquareBracket */) {\n                inCharacterClass = true;\n            }\n            else if (ch === 92 /* CharCode.Backslash */) {\n                inEscape = true;\n            }\n            else if (ch === 93 /* CharCode.CloseSquareBracket */) {\n                inCharacterClass = false;\n            }\n            p++;\n        }\n        // Consume flags // TODO@ulugbekna: use regex instead\n        while (p < this._input.length && Scanner._regexFlags.has(this._input.charCodeAt(p))) {\n            p++;\n        }\n        this._current = p;\n        const lexeme = this._input.substring(this._start, this._current);\n        this._tokens.push({ type: 10 /* TokenType.RegexStr */, lexeme, offset: this._start });\n    }\n    _isAtEnd() {\n        return this._current >= this._input.length;\n    }\n}\nScanner._regexFlags = new Set(['i', 'g', 's', 'm', 'y', 'u'].map(ch => ch.charCodeAt(0)));\nScanner._keywords = new Map([\n    ['not', 14 /* TokenType.Not */],\n    ['in', 13 /* TokenType.In */],\n    ['false', 12 /* TokenType.False */],\n    ['true', 11 /* TokenType.True */],\n]);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}