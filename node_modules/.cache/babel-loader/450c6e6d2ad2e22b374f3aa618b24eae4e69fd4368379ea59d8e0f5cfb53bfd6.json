{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport var BlockCommentCommand = /*#__PURE__*/function () {\n  function BlockCommentCommand(selection, insertSpace, languageConfigurationService) {\n    _classCallCheck(this, BlockCommentCommand);\n    this.languageConfigurationService = languageConfigurationService;\n    this._selection = selection;\n    this._insertSpace = insertSpace;\n    this._usedEndToken = null;\n  }\n  return _createClass(BlockCommentCommand, [{\n    key: \"_createOperationsForBlockComment\",\n    value: function _createOperationsForBlockComment(selection, startToken, endToken, insertSpace, model, builder) {\n      var startLineNumber = selection.startLineNumber;\n      var startColumn = selection.startColumn;\n      var endLineNumber = selection.endLineNumber;\n      var endColumn = selection.endColumn;\n      var startLineText = model.getLineContent(startLineNumber);\n      var endLineText = model.getLineContent(endLineNumber);\n      var startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);\n      var endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);\n      if (startTokenIndex !== -1 && endTokenIndex !== -1) {\n        if (startLineNumber === endLineNumber) {\n          var lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);\n          if (lineBetweenTokens.indexOf(endToken) >= 0) {\n            // force to add a block comment\n            startTokenIndex = -1;\n            endTokenIndex = -1;\n          }\n        } else {\n          var startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);\n          var endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);\n          if (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {\n            // force to add a block comment\n            startTokenIndex = -1;\n            endTokenIndex = -1;\n          }\n        }\n      }\n      var ops;\n      if (startTokenIndex !== -1 && endTokenIndex !== -1) {\n        // Consider spaces as part of the comment tokens\n        if (insertSpace && startTokenIndex + startToken.length < startLineText.length && startLineText.charCodeAt(startTokenIndex + startToken.length) === 32 /* CharCode.Space */) {\n          // Pretend the start token contains a trailing space\n          startToken = startToken + ' ';\n        }\n        if (insertSpace && endTokenIndex > 0 && endLineText.charCodeAt(endTokenIndex - 1) === 32 /* CharCode.Space */) {\n          // Pretend the end token contains a leading space\n          endToken = ' ' + endToken;\n          endTokenIndex -= 1;\n        }\n        ops = BlockCommentCommand._createRemoveBlockCommentOperations(new Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);\n      } else {\n        ops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken, this._insertSpace);\n        this._usedEndToken = ops.length === 1 ? endToken : null;\n      }\n      var _iterator = _createForOfIteratorHelper(ops),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var op = _step.value;\n          builder.addTrackedEditOperation(op.range, op.text);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"getEditOperations\",\n    value: function getEditOperations(model, builder) {\n      var startLineNumber = this._selection.startLineNumber;\n      var startColumn = this._selection.startColumn;\n      model.tokenization.tokenizeIfCheap(startLineNumber);\n      var languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);\n      var config = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n      if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\n        // Mode does not support block comments\n        return;\n      }\n      this._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, this._insertSpace, model, builder);\n    }\n  }, {\n    key: \"computeCursorState\",\n    value: function computeCursorState(model, helper) {\n      var inverseEditOperations = helper.getInverseEditOperations();\n      if (inverseEditOperations.length === 2) {\n        var startTokenEditOperation = inverseEditOperations[0];\n        var endTokenEditOperation = inverseEditOperations[1];\n        return new Selection(startTokenEditOperation.range.endLineNumber, startTokenEditOperation.range.endColumn, endTokenEditOperation.range.startLineNumber, endTokenEditOperation.range.startColumn);\n      } else {\n        var srcRange = inverseEditOperations[0].range;\n        var deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken\n        return new Selection(srcRange.endLineNumber, srcRange.endColumn + deltaColumn, srcRange.endLineNumber, srcRange.endColumn + deltaColumn);\n      }\n    }\n  }], [{\n    key: \"_haystackHasNeedleAtOffset\",\n    value: function _haystackHasNeedleAtOffset(haystack, needle, offset) {\n      if (offset < 0) {\n        return false;\n      }\n      var needleLength = needle.length;\n      var haystackLength = haystack.length;\n      if (offset + needleLength > haystackLength) {\n        return false;\n      }\n      for (var i = 0; i < needleLength; i++) {\n        var codeA = haystack.charCodeAt(offset + i);\n        var codeB = needle.charCodeAt(i);\n        if (codeA === codeB) {\n          continue;\n        }\n        if (codeA >= 65 /* CharCode.A */ && codeA <= 90 /* CharCode.Z */ && codeA + 32 === codeB) {\n          // codeA is upper-case variant of codeB\n          continue;\n        }\n        if (codeB >= 65 /* CharCode.A */ && codeB <= 90 /* CharCode.Z */ && codeB + 32 === codeA) {\n          // codeB is upper-case variant of codeA\n          continue;\n        }\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"_createRemoveBlockCommentOperations\",\n    value: function _createRemoveBlockCommentOperations(r, startToken, endToken) {\n      var res = [];\n      if (!Range.isEmpty(r)) {\n        // Remove block comment start\n        res.push(EditOperation[\"delete\"](new Range(r.startLineNumber, r.startColumn - startToken.length, r.startLineNumber, r.startColumn)));\n        // Remove block comment end\n        res.push(EditOperation[\"delete\"](new Range(r.endLineNumber, r.endColumn, r.endLineNumber, r.endColumn + endToken.length)));\n      } else {\n        // Remove both continuously\n        res.push(EditOperation[\"delete\"](new Range(r.startLineNumber, r.startColumn - startToken.length, r.endLineNumber, r.endColumn + endToken.length)));\n      }\n      return res;\n    }\n  }, {\n    key: \"_createAddBlockCommentOperations\",\n    value: function _createAddBlockCommentOperations(r, startToken, endToken, insertSpace) {\n      var res = [];\n      if (!Range.isEmpty(r)) {\n        // Insert block comment start\n        res.push(EditOperation.insert(new Position(r.startLineNumber, r.startColumn), startToken + (insertSpace ? ' ' : '')));\n        // Insert block comment end\n        res.push(EditOperation.insert(new Position(r.endLineNumber, r.endColumn), (insertSpace ? ' ' : '') + endToken));\n      } else {\n        // Insert both continuously\n        res.push(EditOperation.replace(new Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn), startToken + '  ' + endToken));\n      }\n      return res;\n    }\n  }]);\n}();","map":{"version":3,"names":["EditOperation","Position","Range","Selection","BlockCommentCommand","selection","insertSpace","languageConfigurationService","_classCallCheck","_selection","_insertSpace","_usedEndToken","_createClass","key","value","_createOperationsForBlockComment","startToken","endToken","model","builder","startLineNumber","startColumn","endLineNumber","endColumn","startLineText","getLineContent","endLineText","startTokenIndex","lastIndexOf","length","endTokenIndex","indexOf","lineBetweenTokens","substring","startLineAfterStartToken","endLineBeforeEndToken","ops","charCodeAt","_createRemoveBlockCommentOperations","_createAddBlockCommentOperations","_iterator","_createForOfIteratorHelper","_step","s","n","done","op","addTrackedEditOperation","range","text","err","e","f","getEditOperations","tokenization","tokenizeIfCheap","languageId","getLanguageIdAtPosition","config","getLanguageConfiguration","comments","blockCommentStartToken","blockCommentEndToken","computeCursorState","helper","inverseEditOperations","getInverseEditOperations","startTokenEditOperation","endTokenEditOperation","srcRange","deltaColumn","_haystackHasNeedleAtOffset","haystack","needle","offset","needleLength","haystackLength","i","codeA","codeB","r","res","isEmpty","push","insert","replace"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/contrib/comment/browser/blockCommentCommand.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport class BlockCommentCommand {\n    constructor(selection, insertSpace, languageConfigurationService) {\n        this.languageConfigurationService = languageConfigurationService;\n        this._selection = selection;\n        this._insertSpace = insertSpace;\n        this._usedEndToken = null;\n    }\n    static _haystackHasNeedleAtOffset(haystack, needle, offset) {\n        if (offset < 0) {\n            return false;\n        }\n        const needleLength = needle.length;\n        const haystackLength = haystack.length;\n        if (offset + needleLength > haystackLength) {\n            return false;\n        }\n        for (let i = 0; i < needleLength; i++) {\n            const codeA = haystack.charCodeAt(offset + i);\n            const codeB = needle.charCodeAt(i);\n            if (codeA === codeB) {\n                continue;\n            }\n            if (codeA >= 65 /* CharCode.A */ && codeA <= 90 /* CharCode.Z */ && codeA + 32 === codeB) {\n                // codeA is upper-case variant of codeB\n                continue;\n            }\n            if (codeB >= 65 /* CharCode.A */ && codeB <= 90 /* CharCode.Z */ && codeB + 32 === codeA) {\n                // codeB is upper-case variant of codeA\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n    _createOperationsForBlockComment(selection, startToken, endToken, insertSpace, model, builder) {\n        const startLineNumber = selection.startLineNumber;\n        const startColumn = selection.startColumn;\n        const endLineNumber = selection.endLineNumber;\n        const endColumn = selection.endColumn;\n        const startLineText = model.getLineContent(startLineNumber);\n        const endLineText = model.getLineContent(endLineNumber);\n        let startTokenIndex = startLineText.lastIndexOf(startToken, startColumn - 1 + startToken.length);\n        let endTokenIndex = endLineText.indexOf(endToken, endColumn - 1 - endToken.length);\n        if (startTokenIndex !== -1 && endTokenIndex !== -1) {\n            if (startLineNumber === endLineNumber) {\n                const lineBetweenTokens = startLineText.substring(startTokenIndex + startToken.length, endTokenIndex);\n                if (lineBetweenTokens.indexOf(endToken) >= 0) {\n                    // force to add a block comment\n                    startTokenIndex = -1;\n                    endTokenIndex = -1;\n                }\n            }\n            else {\n                const startLineAfterStartToken = startLineText.substring(startTokenIndex + startToken.length);\n                const endLineBeforeEndToken = endLineText.substring(0, endTokenIndex);\n                if (startLineAfterStartToken.indexOf(endToken) >= 0 || endLineBeforeEndToken.indexOf(endToken) >= 0) {\n                    // force to add a block comment\n                    startTokenIndex = -1;\n                    endTokenIndex = -1;\n                }\n            }\n        }\n        let ops;\n        if (startTokenIndex !== -1 && endTokenIndex !== -1) {\n            // Consider spaces as part of the comment tokens\n            if (insertSpace && startTokenIndex + startToken.length < startLineText.length && startLineText.charCodeAt(startTokenIndex + startToken.length) === 32 /* CharCode.Space */) {\n                // Pretend the start token contains a trailing space\n                startToken = startToken + ' ';\n            }\n            if (insertSpace && endTokenIndex > 0 && endLineText.charCodeAt(endTokenIndex - 1) === 32 /* CharCode.Space */) {\n                // Pretend the end token contains a leading space\n                endToken = ' ' + endToken;\n                endTokenIndex -= 1;\n            }\n            ops = BlockCommentCommand._createRemoveBlockCommentOperations(new Range(startLineNumber, startTokenIndex + startToken.length + 1, endLineNumber, endTokenIndex + 1), startToken, endToken);\n        }\n        else {\n            ops = BlockCommentCommand._createAddBlockCommentOperations(selection, startToken, endToken, this._insertSpace);\n            this._usedEndToken = ops.length === 1 ? endToken : null;\n        }\n        for (const op of ops) {\n            builder.addTrackedEditOperation(op.range, op.text);\n        }\n    }\n    static _createRemoveBlockCommentOperations(r, startToken, endToken) {\n        const res = [];\n        if (!Range.isEmpty(r)) {\n            // Remove block comment start\n            res.push(EditOperation.delete(new Range(r.startLineNumber, r.startColumn - startToken.length, r.startLineNumber, r.startColumn)));\n            // Remove block comment end\n            res.push(EditOperation.delete(new Range(r.endLineNumber, r.endColumn, r.endLineNumber, r.endColumn + endToken.length)));\n        }\n        else {\n            // Remove both continuously\n            res.push(EditOperation.delete(new Range(r.startLineNumber, r.startColumn - startToken.length, r.endLineNumber, r.endColumn + endToken.length)));\n        }\n        return res;\n    }\n    static _createAddBlockCommentOperations(r, startToken, endToken, insertSpace) {\n        const res = [];\n        if (!Range.isEmpty(r)) {\n            // Insert block comment start\n            res.push(EditOperation.insert(new Position(r.startLineNumber, r.startColumn), startToken + (insertSpace ? ' ' : '')));\n            // Insert block comment end\n            res.push(EditOperation.insert(new Position(r.endLineNumber, r.endColumn), (insertSpace ? ' ' : '') + endToken));\n        }\n        else {\n            // Insert both continuously\n            res.push(EditOperation.replace(new Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn), startToken + '  ' + endToken));\n        }\n        return res;\n    }\n    getEditOperations(model, builder) {\n        const startLineNumber = this._selection.startLineNumber;\n        const startColumn = this._selection.startColumn;\n        model.tokenization.tokenizeIfCheap(startLineNumber);\n        const languageId = model.getLanguageIdAtPosition(startLineNumber, startColumn);\n        const config = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n        if (!config || !config.blockCommentStartToken || !config.blockCommentEndToken) {\n            // Mode does not support block comments\n            return;\n        }\n        this._createOperationsForBlockComment(this._selection, config.blockCommentStartToken, config.blockCommentEndToken, this._insertSpace, model, builder);\n    }\n    computeCursorState(model, helper) {\n        const inverseEditOperations = helper.getInverseEditOperations();\n        if (inverseEditOperations.length === 2) {\n            const startTokenEditOperation = inverseEditOperations[0];\n            const endTokenEditOperation = inverseEditOperations[1];\n            return new Selection(startTokenEditOperation.range.endLineNumber, startTokenEditOperation.range.endColumn, endTokenEditOperation.range.startLineNumber, endTokenEditOperation.range.startColumn);\n        }\n        else {\n            const srcRange = inverseEditOperations[0].range;\n            const deltaColumn = this._usedEndToken ? -this._usedEndToken.length - 1 : 0; // minus 1 space before endToken\n            return new Selection(srcRange.endLineNumber, srcRange.endColumn + deltaColumn, srcRange.endLineNumber, srcRange.endColumn + deltaColumn);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}