{"ast":null,"code":"import _objectSpread from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.is-array.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../base/common/glob.js';\nimport { normalize } from '../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType) {\n  if (Array.isArray(selector)) {\n    // array -> take max individual value\n    var ret = 0;\n    var _iterator = _createForOfIteratorHelper(selector),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var filter = _step.value;\n        var value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType);\n        if (value === 10) {\n          return value; // already at the highest\n        }\n        if (value > ret) {\n          ret = value;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return ret;\n  } else if (typeof selector === 'string') {\n    if (!candidateIsSynchronized) {\n      return 0;\n    }\n    // short-hand notion, desugars to\n    // 'fooLang' -> { language: 'fooLang'}\n    // '*' -> { language: '*' }\n    if (selector === '*') {\n      return 5;\n    } else if (selector === candidateLanguage) {\n      return 10;\n    } else {\n      return 0;\n    }\n  } else if (selector) {\n    // filter -> select accordingly, use defaults for scheme\n    var language = selector.language,\n      pattern = selector.pattern,\n      scheme = selector.scheme,\n      hasAccessToAllModels = selector.hasAccessToAllModels,\n      notebookType = selector.notebookType; // TODO: microsoft/TypeScript#42768\n    if (!candidateIsSynchronized && !hasAccessToAllModels) {\n      return 0;\n    }\n    // selector targets a notebook -> use the notebook uri instead\n    // of the \"normal\" document uri.\n    if (notebookType && candidateNotebookUri) {\n      candidateUri = candidateNotebookUri;\n    }\n    var _ret = 0;\n    if (scheme) {\n      if (scheme === candidateUri.scheme) {\n        _ret = 10;\n      } else if (scheme === '*') {\n        _ret = 5;\n      } else {\n        return 0;\n      }\n    }\n    if (language) {\n      if (language === candidateLanguage) {\n        _ret = 10;\n      } else if (language === '*') {\n        _ret = Math.max(_ret, 5);\n      } else {\n        return 0;\n      }\n    }\n    if (notebookType) {\n      if (notebookType === candidateNotebookType) {\n        _ret = 10;\n      } else if (notebookType === '*' && candidateNotebookType !== undefined) {\n        _ret = Math.max(_ret, 5);\n      } else {\n        return 0;\n      }\n    }\n    if (pattern) {\n      var normalizedPattern;\n      if (typeof pattern === 'string') {\n        normalizedPattern = pattern;\n      } else {\n        // Since this pattern has a `base` property, we need\n        // to normalize this path first before passing it on\n        // because we will compare it against `Uri.fsPath`\n        // which uses platform specific separators.\n        // Refs: https://github.com/microsoft/vscode/issues/99938\n        normalizedPattern = _objectSpread(_objectSpread({}, pattern), {}, {\n          base: normalize(pattern.base)\n        });\n      }\n      if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n        _ret = 10;\n      } else {\n        return 0;\n      }\n    }\n    return _ret;\n  } else {\n    return 0;\n  }\n}","map":{"version":3,"names":["match","matchGlobPattern","normalize","score","selector","candidateUri","candidateLanguage","candidateIsSynchronized","candidateNotebookUri","candidateNotebookType","Array","isArray","ret","_iterator","_createForOfIteratorHelper","_step","s","n","done","filter","value","err","e","f","language","pattern","scheme","hasAccessToAllModels","notebookType","Math","max","undefined","normalizedPattern","_objectSpread","base","fsPath"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/languageSelector.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { match as matchGlobPattern } from '../../base/common/glob.js';\nimport { normalize } from '../../base/common/path.js';\nexport function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType) {\n    if (Array.isArray(selector)) {\n        // array -> take max individual value\n        let ret = 0;\n        for (const filter of selector) {\n            const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType);\n            if (value === 10) {\n                return value; // already at the highest\n            }\n            if (value > ret) {\n                ret = value;\n            }\n        }\n        return ret;\n    }\n    else if (typeof selector === 'string') {\n        if (!candidateIsSynchronized) {\n            return 0;\n        }\n        // short-hand notion, desugars to\n        // 'fooLang' -> { language: 'fooLang'}\n        // '*' -> { language: '*' }\n        if (selector === '*') {\n            return 5;\n        }\n        else if (selector === candidateLanguage) {\n            return 10;\n        }\n        else {\n            return 0;\n        }\n    }\n    else if (selector) {\n        // filter -> select accordingly, use defaults for scheme\n        const { language, pattern, scheme, hasAccessToAllModels, notebookType } = selector; // TODO: microsoft/TypeScript#42768\n        if (!candidateIsSynchronized && !hasAccessToAllModels) {\n            return 0;\n        }\n        // selector targets a notebook -> use the notebook uri instead\n        // of the \"normal\" document uri.\n        if (notebookType && candidateNotebookUri) {\n            candidateUri = candidateNotebookUri;\n        }\n        let ret = 0;\n        if (scheme) {\n            if (scheme === candidateUri.scheme) {\n                ret = 10;\n            }\n            else if (scheme === '*') {\n                ret = 5;\n            }\n            else {\n                return 0;\n            }\n        }\n        if (language) {\n            if (language === candidateLanguage) {\n                ret = 10;\n            }\n            else if (language === '*') {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (notebookType) {\n            if (notebookType === candidateNotebookType) {\n                ret = 10;\n            }\n            else if (notebookType === '*' && candidateNotebookType !== undefined) {\n                ret = Math.max(ret, 5);\n            }\n            else {\n                return 0;\n            }\n        }\n        if (pattern) {\n            let normalizedPattern;\n            if (typeof pattern === 'string') {\n                normalizedPattern = pattern;\n            }\n            else {\n                // Since this pattern has a `base` property, we need\n                // to normalize this path first before passing it on\n                // because we will compare it against `Uri.fsPath`\n                // which uses platform specific separators.\n                // Refs: https://github.com/microsoft/vscode/issues/99938\n                normalizedPattern = { ...pattern, base: normalize(pattern.base) };\n            }\n            if (normalizedPattern === candidateUri.fsPath || matchGlobPattern(normalizedPattern, candidateUri.fsPath)) {\n                ret = 10;\n            }\n            else {\n                return 0;\n            }\n        }\n        return ret;\n    }\n    else {\n        return 0;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}