{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var TreeNode = /*#__PURE__*/function () {\n  function TreeNode(piece, color) {\n    _classCallCheck(this, TreeNode);\n    this.piece = piece;\n    this.color = color;\n    this.size_left = 0;\n    this.lf_left = 0;\n    this.parent = this;\n    this.left = this;\n    this.right = this;\n  }\n  return _createClass(TreeNode, [{\n    key: \"next\",\n    value: function next() {\n      if (this.right !== SENTINEL) {\n        return leftest(this.right);\n      }\n      var node = this;\n      while (node.parent !== SENTINEL) {\n        if (node.parent.left === node) {\n          break;\n        }\n        node = node.parent;\n      }\n      if (node.parent === SENTINEL) {\n        return SENTINEL;\n      } else {\n        return node.parent;\n      }\n    }\n  }, {\n    key: \"prev\",\n    value: function prev() {\n      if (this.left !== SENTINEL) {\n        return righttest(this.left);\n      }\n      var node = this;\n      while (node.parent !== SENTINEL) {\n        if (node.parent.right === node) {\n          break;\n        }\n        node = node.parent;\n      }\n      if (node.parent === SENTINEL) {\n        return SENTINEL;\n      } else {\n        return node.parent;\n      }\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.parent = null;\n      this.left = null;\n      this.right = null;\n    }\n  }]);\n}();\nexport var SENTINEL = new TreeNode(null, 0 /* NodeColor.Black */);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = 0 /* NodeColor.Black */;\nexport function leftest(node) {\n  while (node.left !== SENTINEL) {\n    node = node.left;\n  }\n  return node;\n}\nexport function righttest(node) {\n  while (node.right !== SENTINEL) {\n    node = node.right;\n  }\n  return node;\n}\nfunction calculateSize(node) {\n  if (node === SENTINEL) {\n    return 0;\n  }\n  return node.size_left + node.piece.length + calculateSize(node.right);\n}\nfunction calculateLF(node) {\n  if (node === SENTINEL) {\n    return 0;\n  }\n  return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\nfunction resetSentinel() {\n  SENTINEL.parent = SENTINEL;\n}\nexport function leftRotate(tree, x) {\n  var y = x.right;\n  // fix size_left\n  y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n  y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n  x.right = y.left;\n  if (y.left !== SENTINEL) {\n    y.left.parent = x;\n  }\n  y.parent = x.parent;\n  if (x.parent === SENTINEL) {\n    tree.root = y;\n  } else if (x.parent.left === x) {\n    x.parent.left = y;\n  } else {\n    x.parent.right = y;\n  }\n  y.left = x;\n  x.parent = y;\n}\nexport function rightRotate(tree, y) {\n  var x = y.left;\n  y.left = x.right;\n  if (x.right !== SENTINEL) {\n    x.right.parent = y;\n  }\n  x.parent = y.parent;\n  // fix size_left\n  y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n  y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n  if (y.parent === SENTINEL) {\n    tree.root = x;\n  } else if (y === y.parent.right) {\n    y.parent.right = x;\n  } else {\n    y.parent.left = x;\n  }\n  x.right = y;\n  y.parent = x;\n}\nexport function rbDelete(tree, z) {\n  var x;\n  var y;\n  if (z.left === SENTINEL) {\n    y = z;\n    x = y.right;\n  } else if (z.right === SENTINEL) {\n    y = z;\n    x = y.left;\n  } else {\n    y = leftest(z.right);\n    x = y.right;\n  }\n  if (y === tree.root) {\n    tree.root = x;\n    // if x is null, we are removing the only node\n    x.color = 0 /* NodeColor.Black */;\n    z.detach();\n    resetSentinel();\n    tree.root.parent = SENTINEL;\n    return;\n  }\n  var yWasRed = y.color === 1 /* NodeColor.Red */;\n  if (y === y.parent.left) {\n    y.parent.left = x;\n  } else {\n    y.parent.right = x;\n  }\n  if (y === z) {\n    x.parent = y.parent;\n    recomputeTreeMetadata(tree, x);\n  } else {\n    if (y.parent === z) {\n      x.parent = y;\n    } else {\n      x.parent = y.parent;\n    }\n    // as we make changes to x's hierarchy, update size_left of subtree first\n    recomputeTreeMetadata(tree, x);\n    y.left = z.left;\n    y.right = z.right;\n    y.parent = z.parent;\n    y.color = z.color;\n    if (z === tree.root) {\n      tree.root = y;\n    } else {\n      if (z === z.parent.left) {\n        z.parent.left = y;\n      } else {\n        z.parent.right = y;\n      }\n    }\n    if (y.left !== SENTINEL) {\n      y.left.parent = y;\n    }\n    if (y.right !== SENTINEL) {\n      y.right.parent = y;\n    }\n    // update metadata\n    // we replace z with y, so in this sub tree, the length change is z.item.length\n    y.size_left = z.size_left;\n    y.lf_left = z.lf_left;\n    recomputeTreeMetadata(tree, y);\n  }\n  z.detach();\n  if (x.parent.left === x) {\n    var newSizeLeft = calculateSize(x);\n    var newLFLeft = calculateLF(x);\n    if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n      var delta = newSizeLeft - x.parent.size_left;\n      var lf_delta = newLFLeft - x.parent.lf_left;\n      x.parent.size_left = newSizeLeft;\n      x.parent.lf_left = newLFLeft;\n      updateTreeMetadata(tree, x.parent, delta, lf_delta);\n    }\n  }\n  recomputeTreeMetadata(tree, x.parent);\n  if (yWasRed) {\n    resetSentinel();\n    return;\n  }\n  // RB-DELETE-FIXUP\n  var w;\n  while (x !== tree.root && x.color === 0 /* NodeColor.Black */) {\n    if (x === x.parent.left) {\n      w = x.parent.right;\n      if (w.color === 1 /* NodeColor.Red */) {\n        w.color = 0 /* NodeColor.Black */;\n        x.parent.color = 1 /* NodeColor.Red */;\n        leftRotate(tree, x.parent);\n        w = x.parent.right;\n      }\n      if (w.left.color === 0 /* NodeColor.Black */ && w.right.color === 0 /* NodeColor.Black */) {\n        w.color = 1 /* NodeColor.Red */;\n        x = x.parent;\n      } else {\n        if (w.right.color === 0 /* NodeColor.Black */) {\n          w.left.color = 0 /* NodeColor.Black */;\n          w.color = 1 /* NodeColor.Red */;\n          rightRotate(tree, w);\n          w = x.parent.right;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 0 /* NodeColor.Black */;\n        w.right.color = 0 /* NodeColor.Black */;\n        leftRotate(tree, x.parent);\n        x = tree.root;\n      }\n    } else {\n      w = x.parent.left;\n      if (w.color === 1 /* NodeColor.Red */) {\n        w.color = 0 /* NodeColor.Black */;\n        x.parent.color = 1 /* NodeColor.Red */;\n        rightRotate(tree, x.parent);\n        w = x.parent.left;\n      }\n      if (w.left.color === 0 /* NodeColor.Black */ && w.right.color === 0 /* NodeColor.Black */) {\n        w.color = 1 /* NodeColor.Red */;\n        x = x.parent;\n      } else {\n        if (w.left.color === 0 /* NodeColor.Black */) {\n          w.right.color = 0 /* NodeColor.Black */;\n          w.color = 1 /* NodeColor.Red */;\n          leftRotate(tree, w);\n          w = x.parent.left;\n        }\n        w.color = x.parent.color;\n        x.parent.color = 0 /* NodeColor.Black */;\n        w.left.color = 0 /* NodeColor.Black */;\n        rightRotate(tree, x.parent);\n        x = tree.root;\n      }\n    }\n  }\n  x.color = 0 /* NodeColor.Black */;\n  resetSentinel();\n}\nexport function fixInsert(tree, x) {\n  recomputeTreeMetadata(tree, x);\n  while (x !== tree.root && x.parent.color === 1 /* NodeColor.Red */) {\n    if (x.parent === x.parent.parent.left) {\n      var y = x.parent.parent.right;\n      if (y.color === 1 /* NodeColor.Red */) {\n        x.parent.color = 0 /* NodeColor.Black */;\n        y.color = 0 /* NodeColor.Black */;\n        x.parent.parent.color = 1 /* NodeColor.Red */;\n        x = x.parent.parent;\n      } else {\n        if (x === x.parent.right) {\n          x = x.parent;\n          leftRotate(tree, x);\n        }\n        x.parent.color = 0 /* NodeColor.Black */;\n        x.parent.parent.color = 1 /* NodeColor.Red */;\n        rightRotate(tree, x.parent.parent);\n      }\n    } else {\n      var _y = x.parent.parent.left;\n      if (_y.color === 1 /* NodeColor.Red */) {\n        x.parent.color = 0 /* NodeColor.Black */;\n        _y.color = 0 /* NodeColor.Black */;\n        x.parent.parent.color = 1 /* NodeColor.Red */;\n        x = x.parent.parent;\n      } else {\n        if (x === x.parent.left) {\n          x = x.parent;\n          rightRotate(tree, x);\n        }\n        x.parent.color = 0 /* NodeColor.Black */;\n        x.parent.parent.color = 1 /* NodeColor.Red */;\n        leftRotate(tree, x.parent.parent);\n      }\n    }\n  }\n  tree.root.color = 0 /* NodeColor.Black */;\n}\nexport function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\n  // node length change or line feed count change\n  while (x !== tree.root && x !== SENTINEL) {\n    if (x.parent.left === x) {\n      x.parent.size_left += delta;\n      x.parent.lf_left += lineFeedCntDelta;\n    }\n    x = x.parent;\n  }\n}\nexport function recomputeTreeMetadata(tree, x) {\n  var delta = 0;\n  var lf_delta = 0;\n  if (x === tree.root) {\n    return;\n  }\n  // go upwards till the node whose left subtree is changed.\n  while (x !== tree.root && x === x.parent.right) {\n    x = x.parent;\n  }\n  if (x === tree.root) {\n    // well, it means we add a node to the end (inorder)\n    return;\n  }\n  // x is the node whose right subtree is changed.\n  x = x.parent;\n  delta = calculateSize(x.left) - x.size_left;\n  lf_delta = calculateLF(x.left) - x.lf_left;\n  x.size_left += delta;\n  x.lf_left += lf_delta;\n  // go upwards till root. O(logN)\n  while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n    if (x.parent.left === x) {\n      x.parent.size_left += delta;\n      x.parent.lf_left += lf_delta;\n    }\n    x = x.parent;\n  }\n}","map":{"version":3,"names":["TreeNode","piece","color","_classCallCheck","size_left","lf_left","parent","left","right","_createClass","key","value","next","SENTINEL","leftest","node","prev","righttest","detach","calculateSize","length","calculateLF","lineFeedCnt","resetSentinel","leftRotate","tree","x","y","root","rightRotate","rbDelete","z","yWasRed","recomputeTreeMetadata","newSizeLeft","newLFLeft","delta","lf_delta","updateTreeMetadata","w","fixInsert","lineFeedCntDelta"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class TreeNode {\n    constructor(piece, color) {\n        this.piece = piece;\n        this.color = color;\n        this.size_left = 0;\n        this.lf_left = 0;\n        this.parent = this;\n        this.left = this;\n        this.right = this;\n    }\n    next() {\n        if (this.right !== SENTINEL) {\n            return leftest(this.right);\n        }\n        let node = this;\n        while (node.parent !== SENTINEL) {\n            if (node.parent.left === node) {\n                break;\n            }\n            node = node.parent;\n        }\n        if (node.parent === SENTINEL) {\n            return SENTINEL;\n        }\n        else {\n            return node.parent;\n        }\n    }\n    prev() {\n        if (this.left !== SENTINEL) {\n            return righttest(this.left);\n        }\n        let node = this;\n        while (node.parent !== SENTINEL) {\n            if (node.parent.right === node) {\n                break;\n            }\n            node = node.parent;\n        }\n        if (node.parent === SENTINEL) {\n            return SENTINEL;\n        }\n        else {\n            return node.parent;\n        }\n    }\n    detach() {\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    }\n}\nexport const SENTINEL = new TreeNode(null, 0 /* NodeColor.Black */);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = 0 /* NodeColor.Black */;\nexport function leftest(node) {\n    while (node.left !== SENTINEL) {\n        node = node.left;\n    }\n    return node;\n}\nexport function righttest(node) {\n    while (node.right !== SENTINEL) {\n        node = node.right;\n    }\n    return node;\n}\nfunction calculateSize(node) {\n    if (node === SENTINEL) {\n        return 0;\n    }\n    return node.size_left + node.piece.length + calculateSize(node.right);\n}\nfunction calculateLF(node) {\n    if (node === SENTINEL) {\n        return 0;\n    }\n    return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\nfunction resetSentinel() {\n    SENTINEL.parent = SENTINEL;\n}\nexport function leftRotate(tree, x) {\n    const y = x.right;\n    // fix size_left\n    y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n    y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n    x.right = y.left;\n    if (y.left !== SENTINEL) {\n        y.left.parent = x;\n    }\n    y.parent = x.parent;\n    if (x.parent === SENTINEL) {\n        tree.root = y;\n    }\n    else if (x.parent.left === x) {\n        x.parent.left = y;\n    }\n    else {\n        x.parent.right = y;\n    }\n    y.left = x;\n    x.parent = y;\n}\nexport function rightRotate(tree, y) {\n    const x = y.left;\n    y.left = x.right;\n    if (x.right !== SENTINEL) {\n        x.right.parent = y;\n    }\n    x.parent = y.parent;\n    // fix size_left\n    y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n    y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n    if (y.parent === SENTINEL) {\n        tree.root = x;\n    }\n    else if (y === y.parent.right) {\n        y.parent.right = x;\n    }\n    else {\n        y.parent.left = x;\n    }\n    x.right = y;\n    y.parent = x;\n}\nexport function rbDelete(tree, z) {\n    let x;\n    let y;\n    if (z.left === SENTINEL) {\n        y = z;\n        x = y.right;\n    }\n    else if (z.right === SENTINEL) {\n        y = z;\n        x = y.left;\n    }\n    else {\n        y = leftest(z.right);\n        x = y.right;\n    }\n    if (y === tree.root) {\n        tree.root = x;\n        // if x is null, we are removing the only node\n        x.color = 0 /* NodeColor.Black */;\n        z.detach();\n        resetSentinel();\n        tree.root.parent = SENTINEL;\n        return;\n    }\n    const yWasRed = (y.color === 1 /* NodeColor.Red */);\n    if (y === y.parent.left) {\n        y.parent.left = x;\n    }\n    else {\n        y.parent.right = x;\n    }\n    if (y === z) {\n        x.parent = y.parent;\n        recomputeTreeMetadata(tree, x);\n    }\n    else {\n        if (y.parent === z) {\n            x.parent = y;\n        }\n        else {\n            x.parent = y.parent;\n        }\n        // as we make changes to x's hierarchy, update size_left of subtree first\n        recomputeTreeMetadata(tree, x);\n        y.left = z.left;\n        y.right = z.right;\n        y.parent = z.parent;\n        y.color = z.color;\n        if (z === tree.root) {\n            tree.root = y;\n        }\n        else {\n            if (z === z.parent.left) {\n                z.parent.left = y;\n            }\n            else {\n                z.parent.right = y;\n            }\n        }\n        if (y.left !== SENTINEL) {\n            y.left.parent = y;\n        }\n        if (y.right !== SENTINEL) {\n            y.right.parent = y;\n        }\n        // update metadata\n        // we replace z with y, so in this sub tree, the length change is z.item.length\n        y.size_left = z.size_left;\n        y.lf_left = z.lf_left;\n        recomputeTreeMetadata(tree, y);\n    }\n    z.detach();\n    if (x.parent.left === x) {\n        const newSizeLeft = calculateSize(x);\n        const newLFLeft = calculateLF(x);\n        if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n            const delta = newSizeLeft - x.parent.size_left;\n            const lf_delta = newLFLeft - x.parent.lf_left;\n            x.parent.size_left = newSizeLeft;\n            x.parent.lf_left = newLFLeft;\n            updateTreeMetadata(tree, x.parent, delta, lf_delta);\n        }\n    }\n    recomputeTreeMetadata(tree, x.parent);\n    if (yWasRed) {\n        resetSentinel();\n        return;\n    }\n    // RB-DELETE-FIXUP\n    let w;\n    while (x !== tree.root && x.color === 0 /* NodeColor.Black */) {\n        if (x === x.parent.left) {\n            w = x.parent.right;\n            if (w.color === 1 /* NodeColor.Red */) {\n                w.color = 0 /* NodeColor.Black */;\n                x.parent.color = 1 /* NodeColor.Red */;\n                leftRotate(tree, x.parent);\n                w = x.parent.right;\n            }\n            if (w.left.color === 0 /* NodeColor.Black */ && w.right.color === 0 /* NodeColor.Black */) {\n                w.color = 1 /* NodeColor.Red */;\n                x = x.parent;\n            }\n            else {\n                if (w.right.color === 0 /* NodeColor.Black */) {\n                    w.left.color = 0 /* NodeColor.Black */;\n                    w.color = 1 /* NodeColor.Red */;\n                    rightRotate(tree, w);\n                    w = x.parent.right;\n                }\n                w.color = x.parent.color;\n                x.parent.color = 0 /* NodeColor.Black */;\n                w.right.color = 0 /* NodeColor.Black */;\n                leftRotate(tree, x.parent);\n                x = tree.root;\n            }\n        }\n        else {\n            w = x.parent.left;\n            if (w.color === 1 /* NodeColor.Red */) {\n                w.color = 0 /* NodeColor.Black */;\n                x.parent.color = 1 /* NodeColor.Red */;\n                rightRotate(tree, x.parent);\n                w = x.parent.left;\n            }\n            if (w.left.color === 0 /* NodeColor.Black */ && w.right.color === 0 /* NodeColor.Black */) {\n                w.color = 1 /* NodeColor.Red */;\n                x = x.parent;\n            }\n            else {\n                if (w.left.color === 0 /* NodeColor.Black */) {\n                    w.right.color = 0 /* NodeColor.Black */;\n                    w.color = 1 /* NodeColor.Red */;\n                    leftRotate(tree, w);\n                    w = x.parent.left;\n                }\n                w.color = x.parent.color;\n                x.parent.color = 0 /* NodeColor.Black */;\n                w.left.color = 0 /* NodeColor.Black */;\n                rightRotate(tree, x.parent);\n                x = tree.root;\n            }\n        }\n    }\n    x.color = 0 /* NodeColor.Black */;\n    resetSentinel();\n}\nexport function fixInsert(tree, x) {\n    recomputeTreeMetadata(tree, x);\n    while (x !== tree.root && x.parent.color === 1 /* NodeColor.Red */) {\n        if (x.parent === x.parent.parent.left) {\n            const y = x.parent.parent.right;\n            if (y.color === 1 /* NodeColor.Red */) {\n                x.parent.color = 0 /* NodeColor.Black */;\n                y.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.right) {\n                    x = x.parent;\n                    leftRotate(tree, x);\n                }\n                x.parent.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                rightRotate(tree, x.parent.parent);\n            }\n        }\n        else {\n            const y = x.parent.parent.left;\n            if (y.color === 1 /* NodeColor.Red */) {\n                x.parent.color = 0 /* NodeColor.Black */;\n                y.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                x = x.parent.parent;\n            }\n            else {\n                if (x === x.parent.left) {\n                    x = x.parent;\n                    rightRotate(tree, x);\n                }\n                x.parent.color = 0 /* NodeColor.Black */;\n                x.parent.parent.color = 1 /* NodeColor.Red */;\n                leftRotate(tree, x.parent.parent);\n            }\n        }\n    }\n    tree.root.color = 0 /* NodeColor.Black */;\n}\nexport function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\n    // node length change or line feed count change\n    while (x !== tree.root && x !== SENTINEL) {\n        if (x.parent.left === x) {\n            x.parent.size_left += delta;\n            x.parent.lf_left += lineFeedCntDelta;\n        }\n        x = x.parent;\n    }\n}\nexport function recomputeTreeMetadata(tree, x) {\n    let delta = 0;\n    let lf_delta = 0;\n    if (x === tree.root) {\n        return;\n    }\n    // go upwards till the node whose left subtree is changed.\n    while (x !== tree.root && x === x.parent.right) {\n        x = x.parent;\n    }\n    if (x === tree.root) {\n        // well, it means we add a node to the end (inorder)\n        return;\n    }\n    // x is the node whose right subtree is changed.\n    x = x.parent;\n    delta = calculateSize(x.left) - x.size_left;\n    lf_delta = calculateLF(x.left) - x.lf_left;\n    x.size_left += delta;\n    x.lf_left += lf_delta;\n    // go upwards till root. O(logN)\n    while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n        if (x.parent.left === x) {\n            x.parent.size_left += delta;\n            x.parent.lf_left += lf_delta;\n        }\n        x = x.parent;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}