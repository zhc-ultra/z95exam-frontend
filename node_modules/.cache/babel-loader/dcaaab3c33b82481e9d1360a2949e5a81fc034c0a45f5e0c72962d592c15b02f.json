{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _typeof from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { SuggestModel } from './suggestModel.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nvar SuggestInlineCompletion = /*#__PURE__*/_createClass(function SuggestInlineCompletion(range, insertText, filterText, additionalTextEdits, command, completion) {\n  _classCallCheck(this, SuggestInlineCompletion);\n  this.range = range;\n  this.insertText = insertText;\n  this.filterText = filterText;\n  this.additionalTextEdits = additionalTextEdits;\n  this.command = command;\n  this.completion = completion;\n});\nvar InlineCompletionResults = /*#__PURE__*/function (_RefCountedDisposable) {\n  function InlineCompletionResults(model, line, word, completionModel, completions, _suggestMemoryService) {\n    var _this;\n    _classCallCheck(this, InlineCompletionResults);\n    _this = _callSuper(this, InlineCompletionResults, [completions.disposable]);\n    _this.model = model;\n    _this.line = line;\n    _this.word = word;\n    _this.completionModel = completionModel;\n    _this._suggestMemoryService = _suggestMemoryService;\n    return _this;\n  }\n  _inherits(InlineCompletionResults, _RefCountedDisposable);\n  return _createClass(InlineCompletionResults, [{\n    key: \"canBeReused\",\n    value: function canBeReused(model, line, word) {\n      return this.model === model // same model\n      && this.line === line && this.word.word.length > 0 && this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n      && this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n    }\n  }, {\n    key: \"items\",\n    get: function get() {\n      var _a;\n      var result = [];\n      // Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n      // ranked items are before/after\n      var items = this.completionModel.items;\n      var selectedIndex = this._suggestMemoryService.select(this.model, {\n        lineNumber: this.line,\n        column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta\n      }, items);\n      var first = Iterable.slice(items, selectedIndex);\n      var second = Iterable.slice(items, 0, selectedIndex);\n      var resolveCount = 5;\n      var _iterator = _createForOfIteratorHelper(Iterable.concat(first, second)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          if (item.score === FuzzyScore.Default) {\n            // skip items that have no overlap\n            continue;\n          }\n          var range = new Range(item.editStart.lineNumber, item.editStart.column, item.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n          );\n          var insertText = item.completion.insertTextRules && item.completion.insertTextRules & 4 /* CompletionItemInsertTextRule.InsertAsSnippet */ ? {\n            snippet: item.completion.insertText\n          } : item.completion.insertText;\n          result.push(new SuggestInlineCompletion(range, insertText, (_a = item.filterTextLow) !== null && _a !== void 0 ? _a : item.labelLow, item.completion.additionalTextEdits, item.completion.command, item));\n          // resolve the first N suggestions eagerly\n          if (resolveCount-- >= 0) {\n            item.resolve(CancellationToken.None);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return result;\n    }\n  }]);\n}(RefCountedDisposable);\nInlineCompletionResults = __decorate([__param(5, ISuggestMemoryService)], InlineCompletionResults);\nvar SuggestInlineCompletions = /*#__PURE__*/function (_Disposable) {\n  function SuggestInlineCompletions(_languageFeatureService, _clipboardService, _suggestMemoryService, _editorService) {\n    var _this2;\n    _classCallCheck(this, SuggestInlineCompletions);\n    _this2 = _callSuper(this, SuggestInlineCompletions);\n    _this2._languageFeatureService = _languageFeatureService;\n    _this2._clipboardService = _clipboardService;\n    _this2._suggestMemoryService = _suggestMemoryService;\n    _this2._editorService = _editorService;\n    _this2._store.add(_languageFeatureService.inlineCompletionsProvider.register('*', _this2));\n    return _this2;\n  }\n  _inherits(SuggestInlineCompletions, _Disposable);\n  return _createClass(SuggestInlineCompletions, [{\n    key: \"provideInlineCompletions\",\n    value: function () {\n      var _provideInlineCompletions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(model, position, context, token) {\n        var _a, editor, _iterator2, _step2, candidate, config, lineTokens, tokenType, wordInfo, triggerCharacterInfo, result, leadingLineContents, newLineContext, completions, clipboardText, completionModel;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!context.selectedSuggestionInfo) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              _iterator2 = _createForOfIteratorHelper(this._editorService.listCodeEditors());\n              _context.prev = 3;\n              _iterator2.s();\n            case 5:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 12;\n                break;\n              }\n              candidate = _step2.value;\n              if (!(candidate.getModel() === model)) {\n                _context.next = 10;\n                break;\n              }\n              editor = candidate;\n              return _context.abrupt(\"break\", 12);\n            case 10:\n              _context.next = 5;\n              break;\n            case 12:\n              _context.next = 17;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](3);\n              _iterator2.e(_context.t0);\n            case 17:\n              _context.prev = 17;\n              _iterator2.f();\n              return _context.finish(17);\n            case 20:\n              if (editor) {\n                _context.next = 22;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 22:\n              config = editor.getOption(89 /* EditorOption.quickSuggestions */);\n              if (!QuickSuggestionsOptions.isAllOff(config)) {\n                _context.next = 25;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 25:\n              model.tokenization.tokenizeIfCheap(position.lineNumber);\n              lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n              tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n              if (!(QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline')) {\n                _context.next = 30;\n                break;\n              }\n              return _context.abrupt(\"return\", undefined);\n            case 30:\n              // We consider non-empty leading words and trigger characters. The latter only\n              // when no word is being typed (word characters superseed trigger characters)\n              wordInfo = model.getWordAtPosition(position);\n              if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word)) {\n                triggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n              }\n              if (!(!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word) && !triggerCharacterInfo)) {\n                _context.next = 34;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 34:\n              // ensure that we have word information and that we are at the end of a word\n              // otherwise we stop because we don't want to do quick suggestions inside words\n              if (!wordInfo) {\n                wordInfo = model.getWordUntilPosition(position);\n              }\n              if (!(wordInfo.endColumn !== position.column)) {\n                _context.next = 37;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 37:\n              leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n              if (!(!triggerCharacterInfo && ((_a = this._lastResult) === null || _a === void 0 ? void 0 : _a.canBeReused(model, position.lineNumber, wordInfo)))) {\n                _context.next = 45;\n                break;\n              }\n              // reuse a previous result iff possible, only a refilter is needed\n              // TODO@jrieken this can be improved further and only incomplete results can be updated\n              // console.log(`REUSE with ${wordInfo.word}`);\n              newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n              this._lastResult.completionModel.lineContext = newLineContext;\n              this._lastResult.acquire();\n              result = this._lastResult;\n              _context.next = 54;\n              break;\n            case 45:\n              _context.next = 47;\n              return provideSuggestionItems(this._languageFeatureService.completionProvider, model, position, new CompletionOptions(undefined, SuggestModel.createSuggestFilter(editor).itemKind, triggerCharacterInfo === null || triggerCharacterInfo === void 0 ? void 0 : triggerCharacterInfo.providers), triggerCharacterInfo && {\n                triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */,\n                triggerCharacter: triggerCharacterInfo.ch\n              }, token);\n            case 47:\n              completions = _context.sent;\n              if (!completions.needsClipboard) {\n                _context.next = 52;\n                break;\n              }\n              _context.next = 51;\n              return this._clipboardService.readText();\n            case 51:\n              clipboardText = _context.sent;\n            case 52:\n              completionModel = new CompletionModel(completions.items, position.column, new LineContext(leadingLineContents, 0), WordDistance.None, editor.getOption(118 /* EditorOption.suggest */), editor.getOption(112 /* EditorOption.snippetSuggestions */), {\n                boostFullMatch: false,\n                firstMatchCanBeWeak: false\n              }, clipboardText);\n              result = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n            case 54:\n              this._lastResult = result;\n              return _context.abrupt(\"return\", result);\n            case 56:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[3, 14, 17, 20]]);\n      }));\n      function provideInlineCompletions(_x, _x2, _x3, _x4) {\n        return _provideInlineCompletions.apply(this, arguments);\n      }\n      return provideInlineCompletions;\n    }()\n  }, {\n    key: \"handleItemDidShow\",\n    value: function handleItemDidShow(_completions, item) {\n      item.completion.resolve(CancellationToken.None);\n    }\n  }, {\n    key: \"freeInlineCompletions\",\n    value: function freeInlineCompletions(result) {\n      result.release();\n    }\n  }, {\n    key: \"_getTriggerCharacterInfo\",\n    value: function _getTriggerCharacterInfo(model, position) {\n      var _a;\n      var ch = model.getValueInRange(Range.fromPositions({\n        lineNumber: position.lineNumber,\n        column: position.column - 1\n      }, position));\n      var providers = new Set();\n      var _iterator3 = _createForOfIteratorHelper(this._languageFeatureService.completionProvider.all(model)),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var provider = _step3.value;\n          if ((_a = provider.triggerCharacters) === null || _a === void 0 ? void 0 : _a.includes(ch)) {\n            providers.add(provider);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (providers.size === 0) {\n        return undefined;\n      }\n      return {\n        providers: providers,\n        ch: ch\n      };\n    }\n  }]);\n}(Disposable);\nSuggestInlineCompletions = __decorate([__param(0, ILanguageFeaturesService), __param(1, IClipboardService), __param(2, ISuggestMemoryService), __param(3, ICodeEditorService)], SuggestInlineCompletions);\nexport { SuggestInlineCompletions };\nregisterEditorFeature(SuggestInlineCompletions);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","_typeof","decorate","i","defineProperty","__param","paramIndex","decorator","CancellationToken","FuzzyScore","Iterable","Disposable","RefCountedDisposable","ICodeEditorService","Range","registerEditorFeature","ILanguageFeaturesService","CompletionModel","LineContext","CompletionOptions","provideSuggestionItems","QuickSuggestionsOptions","ISuggestMemoryService","SuggestModel","WordDistance","IClipboardService","SuggestInlineCompletion","_createClass","range","insertText","filterText","additionalTextEdits","command","completion","_classCallCheck","InlineCompletionResults","_RefCountedDisposable","model","line","word","completionModel","completions","_suggestMemoryService","_this","_callSuper","disposable","_inherits","value","canBeReused","startColumn","endColumn","getIncompleteProvider","size","get","_a","result","items","selectedIndex","select","lineNumber","column","lineContext","characterCountDelta","first","slice","second","resolveCount","_iterator","_createForOfIteratorHelper","concat","_step","s","n","done","item","score","Default","editStart","editInsertEnd","insertTextRules","snippet","push","filterTextLow","labelLow","resolve","None","err","e","f","SuggestInlineCompletions","_Disposable","_languageFeatureService","_clipboardService","_editorService","_this2","_store","add","inlineCompletionsProvider","register","_provideInlineCompletions","_asyncToGenerator","_regeneratorRuntime","mark","_callee","position","context","token","editor","_iterator2","_step2","candidate","config","lineTokens","tokenType","wordInfo","triggerCharacterInfo","leadingLineContents","newLineContext","clipboardText","wrap","_callee$","_context","prev","next","selectedSuggestionInfo","abrupt","listCodeEditors","getModel","t0","finish","getOption","isAllOff","tokenization","tokenizeIfCheap","getLineTokens","getStandardTokenType","findTokenIndexAtOffset","Math","max","valueFor","undefined","getWordAtPosition","_getTriggerCharacterInfo","getWordUntilPosition","getValueInRange","_lastResult","acquire","completionProvider","createSuggestFilter","itemKind","providers","triggerKind","triggerCharacter","ch","sent","needsClipboard","readText","boostFullMatch","firstMatchCanBeWeak","stop","provideInlineCompletions","_x","_x2","_x3","_x4","apply","handleItemDidShow","_completions","freeInlineCompletions","release","fromPositions","Set","_iterator3","all","_step3","provider","triggerCharacters","includes"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestInlineCompletions.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { Range } from '../../../common/core/range.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { SuggestModel } from './suggestModel.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nclass SuggestInlineCompletion {\n    constructor(range, insertText, filterText, additionalTextEdits, command, completion) {\n        this.range = range;\n        this.insertText = insertText;\n        this.filterText = filterText;\n        this.additionalTextEdits = additionalTextEdits;\n        this.command = command;\n        this.completion = completion;\n    }\n}\nlet InlineCompletionResults = class InlineCompletionResults extends RefCountedDisposable {\n    constructor(model, line, word, completionModel, completions, _suggestMemoryService) {\n        super(completions.disposable);\n        this.model = model;\n        this.line = line;\n        this.word = word;\n        this.completionModel = completionModel;\n        this._suggestMemoryService = _suggestMemoryService;\n    }\n    canBeReused(model, line, word) {\n        return this.model === model // same model\n            && this.line === line\n            && this.word.word.length > 0\n            && this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n            && this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n    }\n    get items() {\n        var _a;\n        const result = [];\n        // Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n        // ranked items are before/after\n        const { items } = this.completionModel;\n        const selectedIndex = this._suggestMemoryService.select(this.model, { lineNumber: this.line, column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta }, items);\n        const first = Iterable.slice(items, selectedIndex);\n        const second = Iterable.slice(items, 0, selectedIndex);\n        let resolveCount = 5;\n        for (const item of Iterable.concat(first, second)) {\n            if (item.score === FuzzyScore.Default) {\n                // skip items that have no overlap\n                continue;\n            }\n            const range = new Range(item.editStart.lineNumber, item.editStart.column, item.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n            );\n            const insertText = item.completion.insertTextRules && (item.completion.insertTextRules & 4 /* CompletionItemInsertTextRule.InsertAsSnippet */)\n                ? { snippet: item.completion.insertText }\n                : item.completion.insertText;\n            result.push(new SuggestInlineCompletion(range, insertText, (_a = item.filterTextLow) !== null && _a !== void 0 ? _a : item.labelLow, item.completion.additionalTextEdits, item.completion.command, item));\n            // resolve the first N suggestions eagerly\n            if (resolveCount-- >= 0) {\n                item.resolve(CancellationToken.None);\n            }\n        }\n        return result;\n    }\n};\nInlineCompletionResults = __decorate([\n    __param(5, ISuggestMemoryService)\n], InlineCompletionResults);\nlet SuggestInlineCompletions = class SuggestInlineCompletions extends Disposable {\n    constructor(_languageFeatureService, _clipboardService, _suggestMemoryService, _editorService) {\n        super();\n        this._languageFeatureService = _languageFeatureService;\n        this._clipboardService = _clipboardService;\n        this._suggestMemoryService = _suggestMemoryService;\n        this._editorService = _editorService;\n        this._store.add(_languageFeatureService.inlineCompletionsProvider.register('*', this));\n    }\n    async provideInlineCompletions(model, position, context, token) {\n        var _a;\n        if (context.selectedSuggestionInfo) {\n            return;\n        }\n        let editor;\n        for (const candidate of this._editorService.listCodeEditors()) {\n            if (candidate.getModel() === model) {\n                editor = candidate;\n                break;\n            }\n        }\n        if (!editor) {\n            return;\n        }\n        const config = editor.getOption(89 /* EditorOption.quickSuggestions */);\n        if (QuickSuggestionsOptions.isAllOff(config)) {\n            // quick suggest is off (for this model/language)\n            return;\n        }\n        model.tokenization.tokenizeIfCheap(position.lineNumber);\n        const lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n        const tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n        if (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n            // quick suggest is off (for this token)\n            return undefined;\n        }\n        // We consider non-empty leading words and trigger characters. The latter only\n        // when no word is being typed (word characters superseed trigger characters)\n        let wordInfo = model.getWordAtPosition(position);\n        let triggerCharacterInfo;\n        if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word)) {\n            triggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n        }\n        if (!(wordInfo === null || wordInfo === void 0 ? void 0 : wordInfo.word) && !triggerCharacterInfo) {\n            // not at word, not a trigger character\n            return;\n        }\n        // ensure that we have word information and that we are at the end of a word\n        // otherwise we stop because we don't want to do quick suggestions inside words\n        if (!wordInfo) {\n            wordInfo = model.getWordUntilPosition(position);\n        }\n        if (wordInfo.endColumn !== position.column) {\n            return;\n        }\n        let result;\n        const leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n        if (!triggerCharacterInfo && ((_a = this._lastResult) === null || _a === void 0 ? void 0 : _a.canBeReused(model, position.lineNumber, wordInfo))) {\n            // reuse a previous result iff possible, only a refilter is needed\n            // TODO@jrieken this can be improved further and only incomplete results can be updated\n            // console.log(`REUSE with ${wordInfo.word}`);\n            const newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n            this._lastResult.completionModel.lineContext = newLineContext;\n            this._lastResult.acquire();\n            result = this._lastResult;\n        }\n        else {\n            // refesh model is required\n            const completions = await provideSuggestionItems(this._languageFeatureService.completionProvider, model, position, new CompletionOptions(undefined, SuggestModel.createSuggestFilter(editor).itemKind, triggerCharacterInfo === null || triggerCharacterInfo === void 0 ? void 0 : triggerCharacterInfo.providers), triggerCharacterInfo && { triggerKind: 1 /* CompletionTriggerKind.TriggerCharacter */, triggerCharacter: triggerCharacterInfo.ch }, token);\n            let clipboardText;\n            if (completions.needsClipboard) {\n                clipboardText = await this._clipboardService.readText();\n            }\n            const completionModel = new CompletionModel(completions.items, position.column, new LineContext(leadingLineContents, 0), WordDistance.None, editor.getOption(118 /* EditorOption.suggest */), editor.getOption(112 /* EditorOption.snippetSuggestions */), { boostFullMatch: false, firstMatchCanBeWeak: false }, clipboardText);\n            result = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n        }\n        this._lastResult = result;\n        return result;\n    }\n    handleItemDidShow(_completions, item) {\n        item.completion.resolve(CancellationToken.None);\n    }\n    freeInlineCompletions(result) {\n        result.release();\n    }\n    _getTriggerCharacterInfo(model, position) {\n        var _a;\n        const ch = model.getValueInRange(Range.fromPositions({ lineNumber: position.lineNumber, column: position.column - 1 }, position));\n        const providers = new Set();\n        for (const provider of this._languageFeatureService.completionProvider.all(model)) {\n            if ((_a = provider.triggerCharacters) === null || _a === void 0 ? void 0 : _a.includes(ch)) {\n                providers.add(provider);\n            }\n        }\n        if (providers.size === 0) {\n            return undefined;\n        }\n        return { providers, ch };\n    }\n};\nSuggestInlineCompletions = __decorate([\n    __param(0, ILanguageFeaturesService),\n    __param(1, IClipboardService),\n    __param(2, ISuggestMemoryService),\n    __param(3, ICodeEditorService)\n], SuggestInlineCompletions);\nexport { SuggestInlineCompletions };\nregisterEditorFeature(SuggestInlineCompletions);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}