{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var Lazy = /*#__PURE__*/function () {\n  function Lazy(executor) {\n    _classCallCheck(this, Lazy);\n    this.executor = executor;\n    this._didRun = false;\n  }\n  /**\n   * Get the wrapped value.\n   *\n   * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\n   * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\n   */\n  return _createClass(Lazy, [{\n    key: \"value\",\n    get: function get() {\n      if (!this._didRun) {\n        try {\n          this._value = this.executor();\n        } catch (err) {\n          this._error = err;\n        } finally {\n          this._didRun = true;\n        }\n      }\n      if (this._error) {\n        throw this._error;\n      }\n      return this._value;\n    }\n    /**\n     * Get the wrapped value without forcing evaluation.\n     */\n  }, {\n    key: \"rawValue\",\n    get: function get() {\n      return this._value;\n    }\n  }]);\n}();","map":{"version":3,"names":["Lazy","executor","_classCallCheck","_didRun","_createClass","key","get","_value","err","_error"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/base/common/lazy.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Lazy {\n    constructor(executor) {\n        this.executor = executor;\n        this._didRun = false;\n    }\n    /**\n     * Get the wrapped value.\n     *\n     * This will force evaluation of the lazy value if it has not been resolved yet. Lazy values are only\n     * resolved once. `getValue` will re-throw exceptions that are hit while resolving the value\n     */\n    get value() {\n        if (!this._didRun) {\n            try {\n                this._value = this.executor();\n            }\n            catch (err) {\n                this._error = err;\n            }\n            finally {\n                this._didRun = true;\n            }\n        }\n        if (this._error) {\n            throw this._error;\n        }\n        return this._value;\n    }\n    /**\n     * Get the wrapped value without forcing evaluation.\n     */\n    get rawValue() { return this._value; }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA,WAAaA,IAAI;EACb,SAAAA,KAAYC,QAAQ,EAAE;IAAAC,eAAA,OAAAF,IAAA;IAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,OAAO,GAAG,KAAK;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;EALI,OAAAC,YAAA,CAAAJ,IAAA;IAAAK,GAAA;IAAAC,GAAA,EAMA,SAAAA,IAAA,EAAY;MACR,IAAI,CAAC,IAAI,CAACH,OAAO,EAAE;QACf,IAAI;UACA,IAAI,CAACI,MAAM,GAAG,IAAI,CAACN,QAAQ,CAAC,CAAC;QACjC,CAAC,CACD,OAAOO,GAAG,EAAE;UACR,IAAI,CAACC,MAAM,GAAGD,GAAG;QACrB,CAAC,SACO;UACJ,IAAI,CAACL,OAAO,GAAG,IAAI;QACvB;MACJ;MACA,IAAI,IAAI,CAACM,MAAM,EAAE;QACb,MAAM,IAAI,CAACA,MAAM;MACrB;MACA,OAAO,IAAI,CAACF,MAAM;IACtB;IACA;AACJ;AACA;EAFI;IAAAF,GAAA;IAAAC,GAAA,EAGA,SAAAA,IAAA,EAAe;MAAE,OAAO,IAAI,CAACC,MAAM;IAAE;EAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}