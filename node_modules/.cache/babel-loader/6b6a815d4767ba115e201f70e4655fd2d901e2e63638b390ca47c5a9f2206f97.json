{"ast":null,"code":"import _get from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _Scanner$_table;\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var Scanner = /*#__PURE__*/function () {\n  function Scanner() {\n    _classCallCheck(this, Scanner);\n    this.value = '';\n    this.pos = 0;\n  }\n  return _createClass(Scanner, [{\n    key: \"text\",\n    value: function text(value) {\n      this.value = value;\n      this.pos = 0;\n    }\n  }, {\n    key: \"tokenText\",\n    value: function tokenText(token) {\n      return this.value.substr(token.pos, token.len);\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (this.pos >= this.value.length) {\n        return {\n          type: 14 /* TokenType.EOF */,\n          pos: this.pos,\n          len: 0\n        };\n      }\n      var pos = this.pos;\n      var len = 0;\n      var ch = this.value.charCodeAt(pos);\n      var type;\n      // static types\n      type = Scanner._table[ch];\n      if (typeof type === 'number') {\n        this.pos += 1;\n        return {\n          type: type,\n          pos: pos,\n          len: 1\n        };\n      }\n      // number\n      if (Scanner.isDigitCharacter(ch)) {\n        type = 8 /* TokenType.Int */;\n        do {\n          len += 1;\n          ch = this.value.charCodeAt(pos + len);\n        } while (Scanner.isDigitCharacter(ch));\n        this.pos += len;\n        return {\n          type: type,\n          pos: pos,\n          len: len\n        };\n      }\n      // variable name\n      if (Scanner.isVariableCharacter(ch)) {\n        type = 9 /* TokenType.VariableName */;\n        do {\n          ch = this.value.charCodeAt(pos + ++len);\n        } while (Scanner.isVariableCharacter(ch) || Scanner.isDigitCharacter(ch));\n        this.pos += len;\n        return {\n          type: type,\n          pos: pos,\n          len: len\n        };\n      }\n      // format\n      type = 10 /* TokenType.Format */;\n      do {\n        len += 1;\n        ch = this.value.charCodeAt(pos + len);\n      } while (!isNaN(ch) && typeof Scanner._table[ch] === 'undefined' // not static token\n      && !Scanner.isDigitCharacter(ch) // not number\n      && !Scanner.isVariableCharacter(ch) // not variable\n      );\n      this.pos += len;\n      return {\n        type: type,\n        pos: pos,\n        len: len\n      };\n    }\n  }], [{\n    key: \"isDigitCharacter\",\n    value: function isDigitCharacter(ch) {\n      return ch >= 48 /* CharCode.Digit0 */ && ch <= 57 /* CharCode.Digit9 */;\n    }\n  }, {\n    key: \"isVariableCharacter\",\n    value: function isVariableCharacter(ch) {\n      return ch === 95 /* CharCode.Underline */ || ch >= 97 /* CharCode.a */ && ch <= 122 /* CharCode.z */ || ch >= 65 /* CharCode.A */ && ch <= 90 /* CharCode.Z */;\n    }\n  }]);\n}();\nScanner._table = (_Scanner$_table = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_Scanner$_table, 36 /* CharCode.DollarSign */, 0), 58 /* CharCode.Colon */, 1), 44 /* CharCode.Comma */, 2), 123 /* CharCode.OpenCurlyBrace */, 3), 125 /* CharCode.CloseCurlyBrace */, 4), 92 /* CharCode.Backslash */, 5), 47 /* CharCode.Slash */, 6), 124 /* CharCode.Pipe */, 7), 43 /* CharCode.Plus */, 11), 45 /* CharCode.Dash */, 12), _defineProperty(_Scanner$_table, 63 /* CharCode.QuestionMark */, 13));\nexport var Marker = /*#__PURE__*/function () {\n  function Marker() {\n    _classCallCheck(this, Marker);\n    this._children = [];\n  }\n  return _createClass(Marker, [{\n    key: \"appendChild\",\n    value: function appendChild(child) {\n      if (child instanceof Text && this._children[this._children.length - 1] instanceof Text) {\n        // this and previous child are text -> merge them\n        this._children[this._children.length - 1].value += child.value;\n      } else {\n        // normal adoption of child\n        child.parent = this;\n        this._children.push(child);\n      }\n      return this;\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(child, others) {\n      var parent = child.parent;\n      var idx = parent.children.indexOf(child);\n      var newChildren = parent.children.slice(0);\n      newChildren.splice.apply(newChildren, [idx, 1].concat(_toConsumableArray(others)));\n      parent._children = newChildren;\n      (function _fixParent(children, parent) {\n        var _iterator = _createForOfIteratorHelper(children),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _child = _step.value;\n            _child.parent = parent;\n            _fixParent(_child.children, _child);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      })(others, parent);\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      return this._children;\n    }\n  }, {\n    key: \"rightMostDescendant\",\n    get: function get() {\n      if (this._children.length > 0) {\n        return this._children[this._children.length - 1].rightMostDescendant;\n      }\n      return this;\n    }\n  }, {\n    key: \"snippet\",\n    get: function get() {\n      var candidate = this;\n      while (true) {\n        if (!candidate) {\n          return undefined;\n        }\n        if (candidate instanceof TextmateSnippet) {\n          return candidate;\n        }\n        candidate = candidate.parent;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.children.reduce(function (prev, cur) {\n        return prev + cur.toString();\n      }, '');\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return 0;\n    }\n  }]);\n}();\nexport var Text = /*#__PURE__*/function (_Marker) {\n  function Text(value) {\n    var _this2;\n    _classCallCheck(this, Text);\n    _this2 = _callSuper(this, Text);\n    _this2.value = value;\n    return _this2;\n  }\n  _inherits(Text, _Marker);\n  return _createClass(Text, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.value;\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return this.value.length;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Text(this.value);\n    }\n  }]);\n}(Marker);\nexport var TransformableMarker = /*#__PURE__*/function (_Marker2) {\n  function TransformableMarker() {\n    _classCallCheck(this, TransformableMarker);\n    return _callSuper(this, TransformableMarker, arguments);\n  }\n  _inherits(TransformableMarker, _Marker2);\n  return _createClass(TransformableMarker);\n}(Marker);\nexport var Placeholder = /*#__PURE__*/function (_TransformableMarker) {\n  function Placeholder(index) {\n    var _this3;\n    _classCallCheck(this, Placeholder);\n    _this3 = _callSuper(this, Placeholder);\n    _this3.index = index;\n    return _this3;\n  }\n  _inherits(Placeholder, _TransformableMarker);\n  return _createClass(Placeholder, [{\n    key: \"isFinalTabstop\",\n    get: function get() {\n      return this.index === 0;\n    }\n  }, {\n    key: \"choice\",\n    get: function get() {\n      return this._children.length === 1 && this._children[0] instanceof Choice ? this._children[0] : undefined;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var ret = new Placeholder(this.index);\n      if (this.transform) {\n        ret.transform = this.transform.clone();\n      }\n      ret._children = this.children.map(function (child) {\n        return child.clone();\n      });\n      return ret;\n    }\n  }], [{\n    key: \"compareByIndex\",\n    value: function compareByIndex(a, b) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.isFinalTabstop) {\n        return 1;\n      } else if (b.isFinalTabstop) {\n        return -1;\n      } else if (a.index < b.index) {\n        return -1;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }]);\n}(TransformableMarker);\nexport var Choice = /*#__PURE__*/function (_Marker3) {\n  function Choice() {\n    var _this4;\n    _classCallCheck(this, Choice);\n    _this4 = _callSuper(this, Choice, arguments);\n    _this4.options = [];\n    return _this4;\n  }\n  _inherits(Choice, _Marker3);\n  return _createClass(Choice, [{\n    key: \"appendChild\",\n    value: function appendChild(marker) {\n      if (marker instanceof Text) {\n        marker.parent = this;\n        this.options.push(marker);\n      }\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.options[0].value;\n    }\n  }, {\n    key: \"len\",\n    value: function len() {\n      return this.options[0].len();\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var ret = new Choice();\n      this.options.forEach(ret.appendChild, ret);\n      return ret;\n    }\n  }]);\n}(Marker);\nexport var Transform = /*#__PURE__*/function (_Marker4) {\n  function Transform() {\n    var _this5;\n    _classCallCheck(this, Transform);\n    _this5 = _callSuper(this, Transform, arguments);\n    _this5.regexp = new RegExp('');\n    return _this5;\n  }\n  _inherits(Transform, _Marker4);\n  return _createClass(Transform, [{\n    key: \"resolve\",\n    value: function resolve(value) {\n      var _this = this;\n      var didMatch = false;\n      var ret = value.replace(this.regexp, function () {\n        didMatch = true;\n        return _this._replace(Array.prototype.slice.call(arguments, 0, -2));\n      });\n      // when the regex didn't match and when the transform has\n      // else branches, then run those\n      if (!didMatch && this._children.some(function (child) {\n        return child instanceof FormatString && Boolean(child.elseValue);\n      })) {\n        ret = this._replace([]);\n      }\n      return ret;\n    }\n  }, {\n    key: \"_replace\",\n    value: function _replace(groups) {\n      var ret = '';\n      var _iterator2 = _createForOfIteratorHelper(this._children),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var marker = _step2.value;\n          if (marker instanceof FormatString) {\n            var value = groups[marker.index] || '';\n            value = marker.resolve(value);\n            ret += value;\n          } else {\n            ret += marker.toString();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return ret;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '';\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var ret = new Transform();\n      ret.regexp = new RegExp(this.regexp.source, '' + (this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));\n      ret._children = this.children.map(function (child) {\n        return child.clone();\n      });\n      return ret;\n    }\n  }]);\n}(Marker);\nexport var FormatString = /*#__PURE__*/function (_Marker5) {\n  function FormatString(index, shorthandName, ifValue, elseValue) {\n    var _this6;\n    _classCallCheck(this, FormatString);\n    _this6 = _callSuper(this, FormatString);\n    _this6.index = index;\n    _this6.shorthandName = shorthandName;\n    _this6.ifValue = ifValue;\n    _this6.elseValue = elseValue;\n    return _this6;\n  }\n  _inherits(FormatString, _Marker5);\n  return _createClass(FormatString, [{\n    key: \"resolve\",\n    value: function resolve(value) {\n      if (this.shorthandName === 'upcase') {\n        return !value ? '' : value.toLocaleUpperCase();\n      } else if (this.shorthandName === 'downcase') {\n        return !value ? '' : value.toLocaleLowerCase();\n      } else if (this.shorthandName === 'capitalize') {\n        return !value ? '' : value[0].toLocaleUpperCase() + value.substr(1);\n      } else if (this.shorthandName === 'pascalcase') {\n        return !value ? '' : this._toPascalCase(value);\n      } else if (this.shorthandName === 'camelcase') {\n        return !value ? '' : this._toCamelCase(value);\n      } else if (Boolean(value) && typeof this.ifValue === 'string') {\n        return this.ifValue;\n      } else if (!Boolean(value) && typeof this.elseValue === 'string') {\n        return this.elseValue;\n      } else {\n        return value || '';\n      }\n    }\n  }, {\n    key: \"_toPascalCase\",\n    value: function _toPascalCase(value) {\n      var match = value.match(/[a-z0-9]+/gi);\n      if (!match) {\n        return value;\n      }\n      return match.map(function (word) {\n        return word.charAt(0).toUpperCase() + word.substr(1);\n      }).join('');\n    }\n  }, {\n    key: \"_toCamelCase\",\n    value: function _toCamelCase(value) {\n      var match = value.match(/[a-z0-9]+/gi);\n      if (!match) {\n        return value;\n      }\n      return match.map(function (word, index) {\n        if (index === 0) {\n          return word.charAt(0).toLowerCase() + word.substr(1);\n        }\n        return word.charAt(0).toUpperCase() + word.substr(1);\n      }).join('');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);\n      return ret;\n    }\n  }]);\n}(Marker);\nexport var Variable = /*#__PURE__*/function (_TransformableMarker2) {\n  function Variable(name) {\n    var _this7;\n    _classCallCheck(this, Variable);\n    _this7 = _callSuper(this, Variable);\n    _this7.name = name;\n    return _this7;\n  }\n  _inherits(Variable, _TransformableMarker2);\n  return _createClass(Variable, [{\n    key: \"resolve\",\n    value: function resolve(resolver) {\n      var value = resolver.resolve(this);\n      if (this.transform) {\n        value = this.transform.resolve(value || '');\n      }\n      if (value !== undefined) {\n        this._children = [new Text(value)];\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var ret = new Variable(this.name);\n      if (this.transform) {\n        ret.transform = this.transform.clone();\n      }\n      ret._children = this.children.map(function (child) {\n        return child.clone();\n      });\n      return ret;\n    }\n  }]);\n}(TransformableMarker);\nfunction _walk(marker, visitor) {\n  var stack = _toConsumableArray(marker);\n  while (stack.length > 0) {\n    var _marker = stack.shift();\n    var recurse = visitor(_marker);\n    if (!recurse) {\n      break;\n    }\n    stack.unshift.apply(stack, _toConsumableArray(_marker.children));\n  }\n}\nexport var TextmateSnippet = /*#__PURE__*/function (_Marker6) {\n  function TextmateSnippet() {\n    _classCallCheck(this, TextmateSnippet);\n    return _callSuper(this, TextmateSnippet, arguments);\n  }\n  _inherits(TextmateSnippet, _Marker6);\n  return _createClass(TextmateSnippet, [{\n    key: \"placeholderInfo\",\n    get: function get() {\n      if (!this._placeholders) {\n        // fill in placeholders\n        var all = [];\n        var last;\n        this.walk(function (candidate) {\n          if (candidate instanceof Placeholder) {\n            all.push(candidate);\n            last = !last || last.index < candidate.index ? candidate : last;\n          }\n          return true;\n        });\n        this._placeholders = {\n          all: all,\n          last: last\n        };\n      }\n      return this._placeholders;\n    }\n  }, {\n    key: \"placeholders\",\n    get: function get() {\n      var all = this.placeholderInfo.all;\n      return all;\n    }\n  }, {\n    key: \"offset\",\n    value: function offset(marker) {\n      var pos = 0;\n      var found = false;\n      this.walk(function (candidate) {\n        if (candidate === marker) {\n          found = true;\n          return false;\n        }\n        pos += candidate.len();\n        return true;\n      });\n      if (!found) {\n        return -1;\n      }\n      return pos;\n    }\n  }, {\n    key: \"fullLen\",\n    value: function fullLen(marker) {\n      var ret = 0;\n      _walk([marker], function (marker) {\n        ret += marker.len();\n        return true;\n      });\n      return ret;\n    }\n  }, {\n    key: \"enclosingPlaceholders\",\n    value: function enclosingPlaceholders(placeholder) {\n      var ret = [];\n      var parent = placeholder.parent;\n      while (parent) {\n        if (parent instanceof Placeholder) {\n          ret.push(parent);\n        }\n        parent = parent.parent;\n      }\n      return ret;\n    }\n  }, {\n    key: \"resolveVariables\",\n    value: function resolveVariables(resolver) {\n      var _this8 = this;\n      this.walk(function (candidate) {\n        if (candidate instanceof Variable) {\n          if (candidate.resolve(resolver)) {\n            _this8._placeholders = undefined;\n          }\n        }\n        return true;\n      });\n      return this;\n    }\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(child) {\n      this._placeholders = undefined;\n      return _get(_getPrototypeOf(TextmateSnippet.prototype), \"appendChild\", this).call(this, child);\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(child, others) {\n      this._placeholders = undefined;\n      return _get(_getPrototypeOf(TextmateSnippet.prototype), \"replace\", this).call(this, child, others);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var ret = new TextmateSnippet();\n      this._children = this.children.map(function (child) {\n        return child.clone();\n      });\n      return ret;\n    }\n  }, {\n    key: \"walk\",\n    value: function walk(visitor) {\n      _walk(this.children, visitor);\n    }\n  }]);\n}(Marker);\nexport var SnippetParser = /*#__PURE__*/function () {\n  function SnippetParser() {\n    _classCallCheck(this, SnippetParser);\n    this._scanner = new Scanner();\n    this._token = {\n      type: 14 /* TokenType.EOF */,\n      pos: 0,\n      len: 0\n    };\n  }\n  return _createClass(SnippetParser, [{\n    key: \"parse\",\n    value: function parse(value, insertFinalTabstop, enforceFinalTabstop) {\n      var snippet = new TextmateSnippet();\n      this.parseFragment(value, snippet);\n      this.ensureFinalTabstop(snippet, enforceFinalTabstop !== null && enforceFinalTabstop !== void 0 ? enforceFinalTabstop : false, insertFinalTabstop !== null && insertFinalTabstop !== void 0 ? insertFinalTabstop : false);\n      return snippet;\n    }\n  }, {\n    key: \"parseFragment\",\n    value: function parseFragment(value, snippet) {\n      var offset = snippet.children.length;\n      this._scanner.text(value);\n      this._token = this._scanner.next();\n      while (this._parse(snippet)) {\n        // nothing\n      }\n      // fill in values for placeholders. the first placeholder of an index\n      // that has a value defines the value for all placeholders with that index\n      var placeholderDefaultValues = new Map();\n      var incompletePlaceholders = [];\n      snippet.walk(function (marker) {\n        if (marker instanceof Placeholder) {\n          if (marker.isFinalTabstop) {\n            placeholderDefaultValues.set(0, undefined);\n          } else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) {\n            placeholderDefaultValues.set(marker.index, marker.children);\n          } else {\n            incompletePlaceholders.push(marker);\n          }\n        }\n        return true;\n      });\n      var fillInIncompletePlaceholder = function fillInIncompletePlaceholder(placeholder, stack) {\n        var defaultValues = placeholderDefaultValues.get(placeholder.index);\n        if (!defaultValues) {\n          return;\n        }\n        var clone = new Placeholder(placeholder.index);\n        clone.transform = placeholder.transform;\n        var _iterator3 = _createForOfIteratorHelper(defaultValues),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var child = _step3.value;\n            var newChild = child.clone();\n            clone.appendChild(newChild);\n            // \"recurse\" on children that are again placeholders\n            if (newChild instanceof Placeholder && placeholderDefaultValues.has(newChild.index) && !stack.has(newChild.index)) {\n              stack.add(newChild.index);\n              fillInIncompletePlaceholder(newChild, stack);\n              stack[\"delete\"](newChild.index);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        snippet.replace(placeholder, [clone]);\n      };\n      var stack = new Set();\n      for (var _i = 0, _incompletePlaceholde = incompletePlaceholders; _i < _incompletePlaceholde.length; _i++) {\n        var placeholder = _incompletePlaceholde[_i];\n        fillInIncompletePlaceholder(placeholder, stack);\n      }\n      return snippet.children.slice(offset);\n    }\n  }, {\n    key: \"ensureFinalTabstop\",\n    value: function ensureFinalTabstop(snippet, enforceFinalTabstop, insertFinalTabstop) {\n      if (enforceFinalTabstop || insertFinalTabstop && snippet.placeholders.length > 0) {\n        var finalTabstop = snippet.placeholders.find(function (p) {\n          return p.index === 0;\n        });\n        if (!finalTabstop) {\n          // the snippet uses placeholders but has no\n          // final tabstop defined -> insert at the end\n          snippet.appendChild(new Placeholder(0));\n        }\n      }\n    }\n  }, {\n    key: \"_accept\",\n    value: function _accept(type, value) {\n      if (type === undefined || this._token.type === type) {\n        var ret = !value ? true : this._scanner.tokenText(this._token);\n        this._token = this._scanner.next();\n        return ret;\n      }\n      return false;\n    }\n  }, {\n    key: \"_backTo\",\n    value: function _backTo(token) {\n      this._scanner.pos = token.pos + token.len;\n      this._token = token;\n      return false;\n    }\n  }, {\n    key: \"_until\",\n    value: function _until(type) {\n      var start = this._token;\n      while (this._token.type !== type) {\n        if (this._token.type === 14 /* TokenType.EOF */) {\n          return false;\n        } else if (this._token.type === 5 /* TokenType.Backslash */) {\n          var nextToken = this._scanner.next();\n          if (nextToken.type !== 0 /* TokenType.Dollar */ && nextToken.type !== 4 /* TokenType.CurlyClose */ && nextToken.type !== 5 /* TokenType.Backslash */) {\n            return false;\n          }\n        }\n        this._token = this._scanner.next();\n      }\n      var value = this._scanner.value.substring(start.pos, this._token.pos).replace(/\\\\(\\$|}|\\\\)/g, '$1');\n      this._token = this._scanner.next();\n      return value;\n    }\n  }, {\n    key: \"_parse\",\n    value: function _parse(marker) {\n      return this._parseEscaped(marker) || this._parseTabstopOrVariableName(marker) || this._parseComplexPlaceholder(marker) || this._parseComplexVariable(marker) || this._parseAnything(marker);\n    }\n    // \\$, \\\\, \\} -> just text\n  }, {\n    key: \"_parseEscaped\",\n    value: function _parseEscaped(marker) {\n      var value;\n      if (value = this._accept(5 /* TokenType.Backslash */, true)) {\n        // saw a backslash, append escaped token or that backslash\n        value = this._accept(0 /* TokenType.Dollar */, true) || this._accept(4 /* TokenType.CurlyClose */, true) || this._accept(5 /* TokenType.Backslash */, true) || value;\n        marker.appendChild(new Text(value));\n        return true;\n      }\n      return false;\n    }\n    // $foo -> variable, $1 -> tabstop\n  }, {\n    key: \"_parseTabstopOrVariableName\",\n    value: function _parseTabstopOrVariableName(parent) {\n      var value;\n      var token = this._token;\n      var match = this._accept(0 /* TokenType.Dollar */) && (value = this._accept(9 /* TokenType.VariableName */, true) || this._accept(8 /* TokenType.Int */, true));\n      if (!match) {\n        return this._backTo(token);\n      }\n      parent.appendChild(/^\\d+$/.test(value) ? new Placeholder(Number(value)) : new Variable(value));\n      return true;\n    }\n    // ${1:<children>}, ${1} -> placeholder\n  }, {\n    key: \"_parseComplexPlaceholder\",\n    value: function _parseComplexPlaceholder(parent) {\n      var index;\n      var token = this._token;\n      var match = this._accept(0 /* TokenType.Dollar */) && this._accept(3 /* TokenType.CurlyOpen */) && (index = this._accept(8 /* TokenType.Int */, true));\n      if (!match) {\n        return this._backTo(token);\n      }\n      var placeholder = new Placeholder(Number(index));\n      if (this._accept(1 /* TokenType.Colon */)) {\n        // ${1:<children>}\n        while (true) {\n          // ...} -> done\n          if (this._accept(4 /* TokenType.CurlyClose */)) {\n            parent.appendChild(placeholder);\n            return true;\n          }\n          if (this._parse(placeholder)) {\n            continue;\n          }\n          // fallback\n          parent.appendChild(new Text('${' + index + ':'));\n          placeholder.children.forEach(parent.appendChild, parent);\n          return true;\n        }\n      } else if (placeholder.index > 0 && this._accept(7 /* TokenType.Pipe */)) {\n        // ${1|one,two,three|}\n        var choice = new Choice();\n        while (true) {\n          if (this._parseChoiceElement(choice)) {\n            if (this._accept(2 /* TokenType.Comma */)) {\n              // opt, -> more\n              continue;\n            }\n            if (this._accept(7 /* TokenType.Pipe */)) {\n              placeholder.appendChild(choice);\n              if (this._accept(4 /* TokenType.CurlyClose */)) {\n                // ..|} -> done\n                parent.appendChild(placeholder);\n                return true;\n              }\n            }\n          }\n          this._backTo(token);\n          return false;\n        }\n      } else if (this._accept(6 /* TokenType.Forwardslash */)) {\n        // ${1/<regex>/<format>/<options>}\n        if (this._parseTransform(placeholder)) {\n          parent.appendChild(placeholder);\n          return true;\n        }\n        this._backTo(token);\n        return false;\n      } else if (this._accept(4 /* TokenType.CurlyClose */)) {\n        // ${1}\n        parent.appendChild(placeholder);\n        return true;\n      } else {\n        // ${1 <- missing curly or colon\n        return this._backTo(token);\n      }\n    }\n  }, {\n    key: \"_parseChoiceElement\",\n    value: function _parseChoiceElement(parent) {\n      var token = this._token;\n      var values = [];\n      while (true) {\n        if (this._token.type === 2 /* TokenType.Comma */ || this._token.type === 7 /* TokenType.Pipe */) {\n          break;\n        }\n        var value = void 0;\n        if (value = this._accept(5 /* TokenType.Backslash */, true)) {\n          // \\, \\|, or \\\\\n          value = this._accept(2 /* TokenType.Comma */, true) || this._accept(7 /* TokenType.Pipe */, true) || this._accept(5 /* TokenType.Backslash */, true) || value;\n        } else {\n          value = this._accept(undefined, true);\n        }\n        if (!value) {\n          // EOF\n          this._backTo(token);\n          return false;\n        }\n        values.push(value);\n      }\n      if (values.length === 0) {\n        this._backTo(token);\n        return false;\n      }\n      parent.appendChild(new Text(values.join('')));\n      return true;\n    }\n    // ${foo:<children>}, ${foo} -> variable\n  }, {\n    key: \"_parseComplexVariable\",\n    value: function _parseComplexVariable(parent) {\n      var name;\n      var token = this._token;\n      var match = this._accept(0 /* TokenType.Dollar */) && this._accept(3 /* TokenType.CurlyOpen */) && (name = this._accept(9 /* TokenType.VariableName */, true));\n      if (!match) {\n        return this._backTo(token);\n      }\n      var variable = new Variable(name);\n      if (this._accept(1 /* TokenType.Colon */)) {\n        // ${foo:<children>}\n        while (true) {\n          // ...} -> done\n          if (this._accept(4 /* TokenType.CurlyClose */)) {\n            parent.appendChild(variable);\n            return true;\n          }\n          if (this._parse(variable)) {\n            continue;\n          }\n          // fallback\n          parent.appendChild(new Text('${' + name + ':'));\n          variable.children.forEach(parent.appendChild, parent);\n          return true;\n        }\n      } else if (this._accept(6 /* TokenType.Forwardslash */)) {\n        // ${foo/<regex>/<format>/<options>}\n        if (this._parseTransform(variable)) {\n          parent.appendChild(variable);\n          return true;\n        }\n        this._backTo(token);\n        return false;\n      } else if (this._accept(4 /* TokenType.CurlyClose */)) {\n        // ${foo}\n        parent.appendChild(variable);\n        return true;\n      } else {\n        // ${foo <- missing curly or colon\n        return this._backTo(token);\n      }\n    }\n  }, {\n    key: \"_parseTransform\",\n    value: function _parseTransform(parent) {\n      // ...<regex>/<format>/<options>}\n      var transform = new Transform();\n      var regexValue = '';\n      var regexOptions = '';\n      // (1) /regex\n      while (true) {\n        if (this._accept(6 /* TokenType.Forwardslash */)) {\n          break;\n        }\n        var escaped = void 0;\n        if (escaped = this._accept(5 /* TokenType.Backslash */, true)) {\n          escaped = this._accept(6 /* TokenType.Forwardslash */, true) || escaped;\n          regexValue += escaped;\n          continue;\n        }\n        if (this._token.type !== 14 /* TokenType.EOF */) {\n          regexValue += this._accept(undefined, true);\n          continue;\n        }\n        return false;\n      }\n      // (2) /format\n      while (true) {\n        if (this._accept(6 /* TokenType.Forwardslash */)) {\n          break;\n        }\n        var _escaped = void 0;\n        if (_escaped = this._accept(5 /* TokenType.Backslash */, true)) {\n          _escaped = this._accept(5 /* TokenType.Backslash */, true) || this._accept(6 /* TokenType.Forwardslash */, true) || _escaped;\n          transform.appendChild(new Text(_escaped));\n          continue;\n        }\n        if (this._parseFormatString(transform) || this._parseAnything(transform)) {\n          continue;\n        }\n        return false;\n      }\n      // (3) /option\n      while (true) {\n        if (this._accept(4 /* TokenType.CurlyClose */)) {\n          break;\n        }\n        if (this._token.type !== 14 /* TokenType.EOF */) {\n          regexOptions += this._accept(undefined, true);\n          continue;\n        }\n        return false;\n      }\n      try {\n        transform.regexp = new RegExp(regexValue, regexOptions);\n      } catch (e) {\n        // invalid regexp\n        return false;\n      }\n      parent.transform = transform;\n      return true;\n    }\n  }, {\n    key: \"_parseFormatString\",\n    value: function _parseFormatString(parent) {\n      var token = this._token;\n      if (!this._accept(0 /* TokenType.Dollar */)) {\n        return false;\n      }\n      var complex = false;\n      if (this._accept(3 /* TokenType.CurlyOpen */)) {\n        complex = true;\n      }\n      var index = this._accept(8 /* TokenType.Int */, true);\n      if (!index) {\n        this._backTo(token);\n        return false;\n      } else if (!complex) {\n        // $1\n        parent.appendChild(new FormatString(Number(index)));\n        return true;\n      } else if (this._accept(4 /* TokenType.CurlyClose */)) {\n        // ${1}\n        parent.appendChild(new FormatString(Number(index)));\n        return true;\n      } else if (!this._accept(1 /* TokenType.Colon */)) {\n        this._backTo(token);\n        return false;\n      }\n      if (this._accept(6 /* TokenType.Forwardslash */)) {\n        // ${1:/upcase}\n        var shorthand = this._accept(9 /* TokenType.VariableName */, true);\n        if (!shorthand || !this._accept(4 /* TokenType.CurlyClose */)) {\n          this._backTo(token);\n          return false;\n        } else {\n          parent.appendChild(new FormatString(Number(index), shorthand));\n          return true;\n        }\n      } else if (this._accept(11 /* TokenType.Plus */)) {\n        // ${1:+<if>}\n        var ifValue = this._until(4 /* TokenType.CurlyClose */);\n        if (ifValue) {\n          parent.appendChild(new FormatString(Number(index), undefined, ifValue, undefined));\n          return true;\n        }\n      } else if (this._accept(12 /* TokenType.Dash */)) {\n        // ${2:-<else>}\n        var elseValue = this._until(4 /* TokenType.CurlyClose */);\n        if (elseValue) {\n          parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n          return true;\n        }\n      } else if (this._accept(13 /* TokenType.QuestionMark */)) {\n        // ${2:?<if>:<else>}\n        var _ifValue = this._until(1 /* TokenType.Colon */);\n        if (_ifValue) {\n          var _elseValue = this._until(4 /* TokenType.CurlyClose */);\n          if (_elseValue) {\n            parent.appendChild(new FormatString(Number(index), undefined, _ifValue, _elseValue));\n            return true;\n          }\n        }\n      } else {\n        // ${1:<else>}\n        var _elseValue2 = this._until(4 /* TokenType.CurlyClose */);\n        if (_elseValue2) {\n          parent.appendChild(new FormatString(Number(index), undefined, undefined, _elseValue2));\n          return true;\n        }\n      }\n      this._backTo(token);\n      return false;\n    }\n  }, {\n    key: \"_parseAnything\",\n    value: function _parseAnything(marker) {\n      if (this._token.type !== 14 /* TokenType.EOF */) {\n        marker.appendChild(new Text(this._scanner.tokenText(this._token)));\n        this._accept(undefined);\n        return true;\n      }\n      return false;\n    }\n  }], [{\n    key: \"escape\",\n    value: function escape(value) {\n      return value.replace(/\\$|}|\\\\/g, '\\\\$&');\n    }\n  }, {\n    key: \"guessNeedsClipboard\",\n    value: function guessNeedsClipboard(template) {\n      return /\\${?CLIPBOARD/.test(template);\n    }\n  }]);\n}();","map":{"version":3,"names":["Scanner","_classCallCheck","value","pos","_createClass","key","text","tokenText","token","substr","len","next","length","type","ch","charCodeAt","_table","isDigitCharacter","isVariableCharacter","isNaN","_Scanner$_table","_defineProperty","Marker","_children","appendChild","child","Text","parent","push","replace","others","idx","children","indexOf","newChildren","slice","splice","apply","concat","_toConsumableArray","_fixParent","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","get","rightMostDescendant","candidate","undefined","TextmateSnippet","toString","reduce","prev","cur","_Marker","_this2","_callSuper","_inherits","clone","TransformableMarker","_Marker2","arguments","Placeholder","_TransformableMarker","index","_this3","Choice","ret","transform","map","compareByIndex","a","b","isFinalTabstop","_Marker3","_this4","options","marker","forEach","Transform","_Marker4","_this5","regexp","RegExp","resolve","_this","didMatch","_replace","Array","prototype","call","some","FormatString","Boolean","elseValue","groups","_iterator2","_step2","source","ignoreCase","global","_Marker5","shorthandName","ifValue","_this6","toLocaleUpperCase","toLocaleLowerCase","_toPascalCase","_toCamelCase","match","word","charAt","toUpperCase","join","toLowerCase","Variable","_TransformableMarker2","name","_this7","resolver","walk","visitor","stack","shift","recurse","unshift","_Marker6","_placeholders","all","last","placeholderInfo","offset","found","fullLen","enclosingPlaceholders","placeholder","resolveVariables","_this8","_get","_getPrototypeOf","SnippetParser","_scanner","_token","parse","insertFinalTabstop","enforceFinalTabstop","snippet","parseFragment","ensureFinalTabstop","_parse","placeholderDefaultValues","Map","incompletePlaceholders","set","has","fillInIncompletePlaceholder","defaultValues","_iterator3","_step3","newChild","add","Set","_i","_incompletePlaceholde","placeholders","finalTabstop","find","p","_accept","_backTo","_until","start","nextToken","substring","_parseEscaped","_parseTabstopOrVariableName","_parseComplexPlaceholder","_parseComplexVariable","_parseAnything","test","Number","choice","_parseChoiceElement","_parseTransform","values","variable","regexValue","regexOptions","escaped","_parseFormatString","complex","shorthand","escape","guessNeedsClipboard","template"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetParser.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class Scanner {\n    constructor() {\n        this.value = '';\n        this.pos = 0;\n    }\n    static isDigitCharacter(ch) {\n        return ch >= 48 /* CharCode.Digit0 */ && ch <= 57 /* CharCode.Digit9 */;\n    }\n    static isVariableCharacter(ch) {\n        return ch === 95 /* CharCode.Underline */\n            || (ch >= 97 /* CharCode.a */ && ch <= 122 /* CharCode.z */)\n            || (ch >= 65 /* CharCode.A */ && ch <= 90 /* CharCode.Z */);\n    }\n    text(value) {\n        this.value = value;\n        this.pos = 0;\n    }\n    tokenText(token) {\n        return this.value.substr(token.pos, token.len);\n    }\n    next() {\n        if (this.pos >= this.value.length) {\n            return { type: 14 /* TokenType.EOF */, pos: this.pos, len: 0 };\n        }\n        const pos = this.pos;\n        let len = 0;\n        let ch = this.value.charCodeAt(pos);\n        let type;\n        // static types\n        type = Scanner._table[ch];\n        if (typeof type === 'number') {\n            this.pos += 1;\n            return { type, pos, len: 1 };\n        }\n        // number\n        if (Scanner.isDigitCharacter(ch)) {\n            type = 8 /* TokenType.Int */;\n            do {\n                len += 1;\n                ch = this.value.charCodeAt(pos + len);\n            } while (Scanner.isDigitCharacter(ch));\n            this.pos += len;\n            return { type, pos, len };\n        }\n        // variable name\n        if (Scanner.isVariableCharacter(ch)) {\n            type = 9 /* TokenType.VariableName */;\n            do {\n                ch = this.value.charCodeAt(pos + (++len));\n            } while (Scanner.isVariableCharacter(ch) || Scanner.isDigitCharacter(ch));\n            this.pos += len;\n            return { type, pos, len };\n        }\n        // format\n        type = 10 /* TokenType.Format */;\n        do {\n            len += 1;\n            ch = this.value.charCodeAt(pos + len);\n        } while (!isNaN(ch)\n            && typeof Scanner._table[ch] === 'undefined' // not static token\n            && !Scanner.isDigitCharacter(ch) // not number\n            && !Scanner.isVariableCharacter(ch) // not variable\n        );\n        this.pos += len;\n        return { type, pos, len };\n    }\n}\nScanner._table = {\n    [36 /* CharCode.DollarSign */]: 0 /* TokenType.Dollar */,\n    [58 /* CharCode.Colon */]: 1 /* TokenType.Colon */,\n    [44 /* CharCode.Comma */]: 2 /* TokenType.Comma */,\n    [123 /* CharCode.OpenCurlyBrace */]: 3 /* TokenType.CurlyOpen */,\n    [125 /* CharCode.CloseCurlyBrace */]: 4 /* TokenType.CurlyClose */,\n    [92 /* CharCode.Backslash */]: 5 /* TokenType.Backslash */,\n    [47 /* CharCode.Slash */]: 6 /* TokenType.Forwardslash */,\n    [124 /* CharCode.Pipe */]: 7 /* TokenType.Pipe */,\n    [43 /* CharCode.Plus */]: 11 /* TokenType.Plus */,\n    [45 /* CharCode.Dash */]: 12 /* TokenType.Dash */,\n    [63 /* CharCode.QuestionMark */]: 13 /* TokenType.QuestionMark */,\n};\nexport class Marker {\n    constructor() {\n        this._children = [];\n    }\n    appendChild(child) {\n        if (child instanceof Text && this._children[this._children.length - 1] instanceof Text) {\n            // this and previous child are text -> merge them\n            this._children[this._children.length - 1].value += child.value;\n        }\n        else {\n            // normal adoption of child\n            child.parent = this;\n            this._children.push(child);\n        }\n        return this;\n    }\n    replace(child, others) {\n        const { parent } = child;\n        const idx = parent.children.indexOf(child);\n        const newChildren = parent.children.slice(0);\n        newChildren.splice(idx, 1, ...others);\n        parent._children = newChildren;\n        (function _fixParent(children, parent) {\n            for (const child of children) {\n                child.parent = parent;\n                _fixParent(child.children, child);\n            }\n        })(others, parent);\n    }\n    get children() {\n        return this._children;\n    }\n    get rightMostDescendant() {\n        if (this._children.length > 0) {\n            return this._children[this._children.length - 1].rightMostDescendant;\n        }\n        return this;\n    }\n    get snippet() {\n        let candidate = this;\n        while (true) {\n            if (!candidate) {\n                return undefined;\n            }\n            if (candidate instanceof TextmateSnippet) {\n                return candidate;\n            }\n            candidate = candidate.parent;\n        }\n    }\n    toString() {\n        return this.children.reduce((prev, cur) => prev + cur.toString(), '');\n    }\n    len() {\n        return 0;\n    }\n}\nexport class Text extends Marker {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    len() {\n        return this.value.length;\n    }\n    clone() {\n        return new Text(this.value);\n    }\n}\nexport class TransformableMarker extends Marker {\n}\nexport class Placeholder extends TransformableMarker {\n    static compareByIndex(a, b) {\n        if (a.index === b.index) {\n            return 0;\n        }\n        else if (a.isFinalTabstop) {\n            return 1;\n        }\n        else if (b.isFinalTabstop) {\n            return -1;\n        }\n        else if (a.index < b.index) {\n            return -1;\n        }\n        else if (a.index > b.index) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    constructor(index) {\n        super();\n        this.index = index;\n    }\n    get isFinalTabstop() {\n        return this.index === 0;\n    }\n    get choice() {\n        return this._children.length === 1 && this._children[0] instanceof Choice\n            ? this._children[0]\n            : undefined;\n    }\n    clone() {\n        const ret = new Placeholder(this.index);\n        if (this.transform) {\n            ret.transform = this.transform.clone();\n        }\n        ret._children = this.children.map(child => child.clone());\n        return ret;\n    }\n}\nexport class Choice extends Marker {\n    constructor() {\n        super(...arguments);\n        this.options = [];\n    }\n    appendChild(marker) {\n        if (marker instanceof Text) {\n            marker.parent = this;\n            this.options.push(marker);\n        }\n        return this;\n    }\n    toString() {\n        return this.options[0].value;\n    }\n    len() {\n        return this.options[0].len();\n    }\n    clone() {\n        const ret = new Choice();\n        this.options.forEach(ret.appendChild, ret);\n        return ret;\n    }\n}\nexport class Transform extends Marker {\n    constructor() {\n        super(...arguments);\n        this.regexp = new RegExp('');\n    }\n    resolve(value) {\n        const _this = this;\n        let didMatch = false;\n        let ret = value.replace(this.regexp, function () {\n            didMatch = true;\n            return _this._replace(Array.prototype.slice.call(arguments, 0, -2));\n        });\n        // when the regex didn't match and when the transform has\n        // else branches, then run those\n        if (!didMatch && this._children.some(child => child instanceof FormatString && Boolean(child.elseValue))) {\n            ret = this._replace([]);\n        }\n        return ret;\n    }\n    _replace(groups) {\n        let ret = '';\n        for (const marker of this._children) {\n            if (marker instanceof FormatString) {\n                let value = groups[marker.index] || '';\n                value = marker.resolve(value);\n                ret += value;\n            }\n            else {\n                ret += marker.toString();\n            }\n        }\n        return ret;\n    }\n    toString() {\n        return '';\n    }\n    clone() {\n        const ret = new Transform();\n        ret.regexp = new RegExp(this.regexp.source, '' + (this.regexp.ignoreCase ? 'i' : '') + (this.regexp.global ? 'g' : ''));\n        ret._children = this.children.map(child => child.clone());\n        return ret;\n    }\n}\nexport class FormatString extends Marker {\n    constructor(index, shorthandName, ifValue, elseValue) {\n        super();\n        this.index = index;\n        this.shorthandName = shorthandName;\n        this.ifValue = ifValue;\n        this.elseValue = elseValue;\n    }\n    resolve(value) {\n        if (this.shorthandName === 'upcase') {\n            return !value ? '' : value.toLocaleUpperCase();\n        }\n        else if (this.shorthandName === 'downcase') {\n            return !value ? '' : value.toLocaleLowerCase();\n        }\n        else if (this.shorthandName === 'capitalize') {\n            return !value ? '' : (value[0].toLocaleUpperCase() + value.substr(1));\n        }\n        else if (this.shorthandName === 'pascalcase') {\n            return !value ? '' : this._toPascalCase(value);\n        }\n        else if (this.shorthandName === 'camelcase') {\n            return !value ? '' : this._toCamelCase(value);\n        }\n        else if (Boolean(value) && typeof this.ifValue === 'string') {\n            return this.ifValue;\n        }\n        else if (!Boolean(value) && typeof this.elseValue === 'string') {\n            return this.elseValue;\n        }\n        else {\n            return value || '';\n        }\n    }\n    _toPascalCase(value) {\n        const match = value.match(/[a-z0-9]+/gi);\n        if (!match) {\n            return value;\n        }\n        return match.map(word => {\n            return word.charAt(0).toUpperCase() + word.substr(1);\n        })\n            .join('');\n    }\n    _toCamelCase(value) {\n        const match = value.match(/[a-z0-9]+/gi);\n        if (!match) {\n            return value;\n        }\n        return match.map((word, index) => {\n            if (index === 0) {\n                return word.charAt(0).toLowerCase() + word.substr(1);\n            }\n            return word.charAt(0).toUpperCase() + word.substr(1);\n        })\n            .join('');\n    }\n    clone() {\n        const ret = new FormatString(this.index, this.shorthandName, this.ifValue, this.elseValue);\n        return ret;\n    }\n}\nexport class Variable extends TransformableMarker {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    resolve(resolver) {\n        let value = resolver.resolve(this);\n        if (this.transform) {\n            value = this.transform.resolve(value || '');\n        }\n        if (value !== undefined) {\n            this._children = [new Text(value)];\n            return true;\n        }\n        return false;\n    }\n    clone() {\n        const ret = new Variable(this.name);\n        if (this.transform) {\n            ret.transform = this.transform.clone();\n        }\n        ret._children = this.children.map(child => child.clone());\n        return ret;\n    }\n}\nfunction walk(marker, visitor) {\n    const stack = [...marker];\n    while (stack.length > 0) {\n        const marker = stack.shift();\n        const recurse = visitor(marker);\n        if (!recurse) {\n            break;\n        }\n        stack.unshift(...marker.children);\n    }\n}\nexport class TextmateSnippet extends Marker {\n    get placeholderInfo() {\n        if (!this._placeholders) {\n            // fill in placeholders\n            const all = [];\n            let last;\n            this.walk(function (candidate) {\n                if (candidate instanceof Placeholder) {\n                    all.push(candidate);\n                    last = !last || last.index < candidate.index ? candidate : last;\n                }\n                return true;\n            });\n            this._placeholders = { all, last };\n        }\n        return this._placeholders;\n    }\n    get placeholders() {\n        const { all } = this.placeholderInfo;\n        return all;\n    }\n    offset(marker) {\n        let pos = 0;\n        let found = false;\n        this.walk(candidate => {\n            if (candidate === marker) {\n                found = true;\n                return false;\n            }\n            pos += candidate.len();\n            return true;\n        });\n        if (!found) {\n            return -1;\n        }\n        return pos;\n    }\n    fullLen(marker) {\n        let ret = 0;\n        walk([marker], marker => {\n            ret += marker.len();\n            return true;\n        });\n        return ret;\n    }\n    enclosingPlaceholders(placeholder) {\n        const ret = [];\n        let { parent } = placeholder;\n        while (parent) {\n            if (parent instanceof Placeholder) {\n                ret.push(parent);\n            }\n            parent = parent.parent;\n        }\n        return ret;\n    }\n    resolveVariables(resolver) {\n        this.walk(candidate => {\n            if (candidate instanceof Variable) {\n                if (candidate.resolve(resolver)) {\n                    this._placeholders = undefined;\n                }\n            }\n            return true;\n        });\n        return this;\n    }\n    appendChild(child) {\n        this._placeholders = undefined;\n        return super.appendChild(child);\n    }\n    replace(child, others) {\n        this._placeholders = undefined;\n        return super.replace(child, others);\n    }\n    clone() {\n        const ret = new TextmateSnippet();\n        this._children = this.children.map(child => child.clone());\n        return ret;\n    }\n    walk(visitor) {\n        walk(this.children, visitor);\n    }\n}\nexport class SnippetParser {\n    constructor() {\n        this._scanner = new Scanner();\n        this._token = { type: 14 /* TokenType.EOF */, pos: 0, len: 0 };\n    }\n    static escape(value) {\n        return value.replace(/\\$|}|\\\\/g, '\\\\$&');\n    }\n    static guessNeedsClipboard(template) {\n        return /\\${?CLIPBOARD/.test(template);\n    }\n    parse(value, insertFinalTabstop, enforceFinalTabstop) {\n        const snippet = new TextmateSnippet();\n        this.parseFragment(value, snippet);\n        this.ensureFinalTabstop(snippet, enforceFinalTabstop !== null && enforceFinalTabstop !== void 0 ? enforceFinalTabstop : false, insertFinalTabstop !== null && insertFinalTabstop !== void 0 ? insertFinalTabstop : false);\n        return snippet;\n    }\n    parseFragment(value, snippet) {\n        const offset = snippet.children.length;\n        this._scanner.text(value);\n        this._token = this._scanner.next();\n        while (this._parse(snippet)) {\n            // nothing\n        }\n        // fill in values for placeholders. the first placeholder of an index\n        // that has a value defines the value for all placeholders with that index\n        const placeholderDefaultValues = new Map();\n        const incompletePlaceholders = [];\n        snippet.walk(marker => {\n            if (marker instanceof Placeholder) {\n                if (marker.isFinalTabstop) {\n                    placeholderDefaultValues.set(0, undefined);\n                }\n                else if (!placeholderDefaultValues.has(marker.index) && marker.children.length > 0) {\n                    placeholderDefaultValues.set(marker.index, marker.children);\n                }\n                else {\n                    incompletePlaceholders.push(marker);\n                }\n            }\n            return true;\n        });\n        const fillInIncompletePlaceholder = (placeholder, stack) => {\n            const defaultValues = placeholderDefaultValues.get(placeholder.index);\n            if (!defaultValues) {\n                return;\n            }\n            const clone = new Placeholder(placeholder.index);\n            clone.transform = placeholder.transform;\n            for (const child of defaultValues) {\n                const newChild = child.clone();\n                clone.appendChild(newChild);\n                // \"recurse\" on children that are again placeholders\n                if (newChild instanceof Placeholder && placeholderDefaultValues.has(newChild.index) && !stack.has(newChild.index)) {\n                    stack.add(newChild.index);\n                    fillInIncompletePlaceholder(newChild, stack);\n                    stack.delete(newChild.index);\n                }\n            }\n            snippet.replace(placeholder, [clone]);\n        };\n        const stack = new Set();\n        for (const placeholder of incompletePlaceholders) {\n            fillInIncompletePlaceholder(placeholder, stack);\n        }\n        return snippet.children.slice(offset);\n    }\n    ensureFinalTabstop(snippet, enforceFinalTabstop, insertFinalTabstop) {\n        if (enforceFinalTabstop || insertFinalTabstop && snippet.placeholders.length > 0) {\n            const finalTabstop = snippet.placeholders.find(p => p.index === 0);\n            if (!finalTabstop) {\n                // the snippet uses placeholders but has no\n                // final tabstop defined -> insert at the end\n                snippet.appendChild(new Placeholder(0));\n            }\n        }\n    }\n    _accept(type, value) {\n        if (type === undefined || this._token.type === type) {\n            const ret = !value ? true : this._scanner.tokenText(this._token);\n            this._token = this._scanner.next();\n            return ret;\n        }\n        return false;\n    }\n    _backTo(token) {\n        this._scanner.pos = token.pos + token.len;\n        this._token = token;\n        return false;\n    }\n    _until(type) {\n        const start = this._token;\n        while (this._token.type !== type) {\n            if (this._token.type === 14 /* TokenType.EOF */) {\n                return false;\n            }\n            else if (this._token.type === 5 /* TokenType.Backslash */) {\n                const nextToken = this._scanner.next();\n                if (nextToken.type !== 0 /* TokenType.Dollar */\n                    && nextToken.type !== 4 /* TokenType.CurlyClose */\n                    && nextToken.type !== 5 /* TokenType.Backslash */) {\n                    return false;\n                }\n            }\n            this._token = this._scanner.next();\n        }\n        const value = this._scanner.value.substring(start.pos, this._token.pos).replace(/\\\\(\\$|}|\\\\)/g, '$1');\n        this._token = this._scanner.next();\n        return value;\n    }\n    _parse(marker) {\n        return this._parseEscaped(marker)\n            || this._parseTabstopOrVariableName(marker)\n            || this._parseComplexPlaceholder(marker)\n            || this._parseComplexVariable(marker)\n            || this._parseAnything(marker);\n    }\n    // \\$, \\\\, \\} -> just text\n    _parseEscaped(marker) {\n        let value;\n        if (value = this._accept(5 /* TokenType.Backslash */, true)) {\n            // saw a backslash, append escaped token or that backslash\n            value = this._accept(0 /* TokenType.Dollar */, true)\n                || this._accept(4 /* TokenType.CurlyClose */, true)\n                || this._accept(5 /* TokenType.Backslash */, true)\n                || value;\n            marker.appendChild(new Text(value));\n            return true;\n        }\n        return false;\n    }\n    // $foo -> variable, $1 -> tabstop\n    _parseTabstopOrVariableName(parent) {\n        let value;\n        const token = this._token;\n        const match = this._accept(0 /* TokenType.Dollar */)\n            && (value = this._accept(9 /* TokenType.VariableName */, true) || this._accept(8 /* TokenType.Int */, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        parent.appendChild(/^\\d+$/.test(value)\n            ? new Placeholder(Number(value))\n            : new Variable(value));\n        return true;\n    }\n    // ${1:<children>}, ${1} -> placeholder\n    _parseComplexPlaceholder(parent) {\n        let index;\n        const token = this._token;\n        const match = this._accept(0 /* TokenType.Dollar */)\n            && this._accept(3 /* TokenType.CurlyOpen */)\n            && (index = this._accept(8 /* TokenType.Int */, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        const placeholder = new Placeholder(Number(index));\n        if (this._accept(1 /* TokenType.Colon */)) {\n            // ${1:<children>}\n            while (true) {\n                // ...} -> done\n                if (this._accept(4 /* TokenType.CurlyClose */)) {\n                    parent.appendChild(placeholder);\n                    return true;\n                }\n                if (this._parse(placeholder)) {\n                    continue;\n                }\n                // fallback\n                parent.appendChild(new Text('${' + index + ':'));\n                placeholder.children.forEach(parent.appendChild, parent);\n                return true;\n            }\n        }\n        else if (placeholder.index > 0 && this._accept(7 /* TokenType.Pipe */)) {\n            // ${1|one,two,three|}\n            const choice = new Choice();\n            while (true) {\n                if (this._parseChoiceElement(choice)) {\n                    if (this._accept(2 /* TokenType.Comma */)) {\n                        // opt, -> more\n                        continue;\n                    }\n                    if (this._accept(7 /* TokenType.Pipe */)) {\n                        placeholder.appendChild(choice);\n                        if (this._accept(4 /* TokenType.CurlyClose */)) {\n                            // ..|} -> done\n                            parent.appendChild(placeholder);\n                            return true;\n                        }\n                    }\n                }\n                this._backTo(token);\n                return false;\n            }\n        }\n        else if (this._accept(6 /* TokenType.Forwardslash */)) {\n            // ${1/<regex>/<format>/<options>}\n            if (this._parseTransform(placeholder)) {\n                parent.appendChild(placeholder);\n                return true;\n            }\n            this._backTo(token);\n            return false;\n        }\n        else if (this._accept(4 /* TokenType.CurlyClose */)) {\n            // ${1}\n            parent.appendChild(placeholder);\n            return true;\n        }\n        else {\n            // ${1 <- missing curly or colon\n            return this._backTo(token);\n        }\n    }\n    _parseChoiceElement(parent) {\n        const token = this._token;\n        const values = [];\n        while (true) {\n            if (this._token.type === 2 /* TokenType.Comma */ || this._token.type === 7 /* TokenType.Pipe */) {\n                break;\n            }\n            let value;\n            if (value = this._accept(5 /* TokenType.Backslash */, true)) {\n                // \\, \\|, or \\\\\n                value = this._accept(2 /* TokenType.Comma */, true)\n                    || this._accept(7 /* TokenType.Pipe */, true)\n                    || this._accept(5 /* TokenType.Backslash */, true)\n                    || value;\n            }\n            else {\n                value = this._accept(undefined, true);\n            }\n            if (!value) {\n                // EOF\n                this._backTo(token);\n                return false;\n            }\n            values.push(value);\n        }\n        if (values.length === 0) {\n            this._backTo(token);\n            return false;\n        }\n        parent.appendChild(new Text(values.join('')));\n        return true;\n    }\n    // ${foo:<children>}, ${foo} -> variable\n    _parseComplexVariable(parent) {\n        let name;\n        const token = this._token;\n        const match = this._accept(0 /* TokenType.Dollar */)\n            && this._accept(3 /* TokenType.CurlyOpen */)\n            && (name = this._accept(9 /* TokenType.VariableName */, true));\n        if (!match) {\n            return this._backTo(token);\n        }\n        const variable = new Variable(name);\n        if (this._accept(1 /* TokenType.Colon */)) {\n            // ${foo:<children>}\n            while (true) {\n                // ...} -> done\n                if (this._accept(4 /* TokenType.CurlyClose */)) {\n                    parent.appendChild(variable);\n                    return true;\n                }\n                if (this._parse(variable)) {\n                    continue;\n                }\n                // fallback\n                parent.appendChild(new Text('${' + name + ':'));\n                variable.children.forEach(parent.appendChild, parent);\n                return true;\n            }\n        }\n        else if (this._accept(6 /* TokenType.Forwardslash */)) {\n            // ${foo/<regex>/<format>/<options>}\n            if (this._parseTransform(variable)) {\n                parent.appendChild(variable);\n                return true;\n            }\n            this._backTo(token);\n            return false;\n        }\n        else if (this._accept(4 /* TokenType.CurlyClose */)) {\n            // ${foo}\n            parent.appendChild(variable);\n            return true;\n        }\n        else {\n            // ${foo <- missing curly or colon\n            return this._backTo(token);\n        }\n    }\n    _parseTransform(parent) {\n        // ...<regex>/<format>/<options>}\n        const transform = new Transform();\n        let regexValue = '';\n        let regexOptions = '';\n        // (1) /regex\n        while (true) {\n            if (this._accept(6 /* TokenType.Forwardslash */)) {\n                break;\n            }\n            let escaped;\n            if (escaped = this._accept(5 /* TokenType.Backslash */, true)) {\n                escaped = this._accept(6 /* TokenType.Forwardslash */, true) || escaped;\n                regexValue += escaped;\n                continue;\n            }\n            if (this._token.type !== 14 /* TokenType.EOF */) {\n                regexValue += this._accept(undefined, true);\n                continue;\n            }\n            return false;\n        }\n        // (2) /format\n        while (true) {\n            if (this._accept(6 /* TokenType.Forwardslash */)) {\n                break;\n            }\n            let escaped;\n            if (escaped = this._accept(5 /* TokenType.Backslash */, true)) {\n                escaped = this._accept(5 /* TokenType.Backslash */, true) || this._accept(6 /* TokenType.Forwardslash */, true) || escaped;\n                transform.appendChild(new Text(escaped));\n                continue;\n            }\n            if (this._parseFormatString(transform) || this._parseAnything(transform)) {\n                continue;\n            }\n            return false;\n        }\n        // (3) /option\n        while (true) {\n            if (this._accept(4 /* TokenType.CurlyClose */)) {\n                break;\n            }\n            if (this._token.type !== 14 /* TokenType.EOF */) {\n                regexOptions += this._accept(undefined, true);\n                continue;\n            }\n            return false;\n        }\n        try {\n            transform.regexp = new RegExp(regexValue, regexOptions);\n        }\n        catch (e) {\n            // invalid regexp\n            return false;\n        }\n        parent.transform = transform;\n        return true;\n    }\n    _parseFormatString(parent) {\n        const token = this._token;\n        if (!this._accept(0 /* TokenType.Dollar */)) {\n            return false;\n        }\n        let complex = false;\n        if (this._accept(3 /* TokenType.CurlyOpen */)) {\n            complex = true;\n        }\n        const index = this._accept(8 /* TokenType.Int */, true);\n        if (!index) {\n            this._backTo(token);\n            return false;\n        }\n        else if (!complex) {\n            // $1\n            parent.appendChild(new FormatString(Number(index)));\n            return true;\n        }\n        else if (this._accept(4 /* TokenType.CurlyClose */)) {\n            // ${1}\n            parent.appendChild(new FormatString(Number(index)));\n            return true;\n        }\n        else if (!this._accept(1 /* TokenType.Colon */)) {\n            this._backTo(token);\n            return false;\n        }\n        if (this._accept(6 /* TokenType.Forwardslash */)) {\n            // ${1:/upcase}\n            const shorthand = this._accept(9 /* TokenType.VariableName */, true);\n            if (!shorthand || !this._accept(4 /* TokenType.CurlyClose */)) {\n                this._backTo(token);\n                return false;\n            }\n            else {\n                parent.appendChild(new FormatString(Number(index), shorthand));\n                return true;\n            }\n        }\n        else if (this._accept(11 /* TokenType.Plus */)) {\n            // ${1:+<if>}\n            const ifValue = this._until(4 /* TokenType.CurlyClose */);\n            if (ifValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, ifValue, undefined));\n                return true;\n            }\n        }\n        else if (this._accept(12 /* TokenType.Dash */)) {\n            // ${2:-<else>}\n            const elseValue = this._until(4 /* TokenType.CurlyClose */);\n            if (elseValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n                return true;\n            }\n        }\n        else if (this._accept(13 /* TokenType.QuestionMark */)) {\n            // ${2:?<if>:<else>}\n            const ifValue = this._until(1 /* TokenType.Colon */);\n            if (ifValue) {\n                const elseValue = this._until(4 /* TokenType.CurlyClose */);\n                if (elseValue) {\n                    parent.appendChild(new FormatString(Number(index), undefined, ifValue, elseValue));\n                    return true;\n                }\n            }\n        }\n        else {\n            // ${1:<else>}\n            const elseValue = this._until(4 /* TokenType.CurlyClose */);\n            if (elseValue) {\n                parent.appendChild(new FormatString(Number(index), undefined, undefined, elseValue));\n                return true;\n            }\n        }\n        this._backTo(token);\n        return false;\n    }\n    _parseAnything(marker) {\n        if (this._token.type !== 14 /* TokenType.EOF */) {\n            marker.appendChild(new Text(this._scanner.tokenText(this._token)));\n            this._accept(undefined);\n            return true;\n        }\n        return false;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}