{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new ( /*#__PURE__*/function (_EditorCommand) {\n  function _class() {\n    _classCallCheck(this, _class);\n    return _callSuper(this, _class, [{\n      id: changePasteTypeCommandId,\n      precondition: pasteWidgetVisibleCtx,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */\n      }\n    }]);\n  }\n  _inherits(_class, _EditorCommand);\n  return _createClass(_class, [{\n    key: \"runEditorCommand\",\n    value: function runEditorCommand(_accessor, editor) {\n      var _b;\n      return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.changePasteType();\n    }\n  }]);\n}(EditorCommand))());\nregisterEditorCommand(new ( /*#__PURE__*/function (_EditorCommand2) {\n  function _class2() {\n    _classCallCheck(this, _class2);\n    return _callSuper(this, _class2, [{\n      id: 'editor.hidePasteWidget',\n      precondition: pasteWidgetVisibleCtx,\n      kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */,\n        primary: 9 /* KeyCode.Escape */\n      }\n    }]);\n  }\n  _inherits(_class2, _EditorCommand2);\n  return _createClass(_class2, [{\n    key: \"runEditorCommand\",\n    value: function runEditorCommand(_accessor, editor) {\n      var _b;\n      (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.clearWidgets();\n    }\n  }]);\n}(EditorCommand))());\nregisterEditorAction((_a = /*#__PURE__*/function (_EditorAction) {\n  function PasteAsAction() {\n    _classCallCheck(this, PasteAsAction);\n    return _callSuper(this, PasteAsAction, [{\n      id: 'editor.action.pasteAs',\n      label: nls.localize('pasteAs', \"Paste As...\"),\n      alias: 'Paste As...',\n      precondition: EditorContextKeys.writable,\n      metadata: {\n        description: 'Paste as',\n        args: [{\n          name: 'args',\n          schema: _a.argsSchema\n        }]\n      }\n    }]);\n  }\n  _inherits(PasteAsAction, _EditorAction);\n  return _createClass(PasteAsAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor, args) {\n      var _b;\n      var kind = typeof (args === null || args === void 0 ? void 0 : args.kind) === 'string' ? args.kind : undefined;\n      if (!kind && args) {\n        // Support old id property\n        // TODO: remove this in the future\n        kind = typeof args.id === 'string' ? args.id : undefined;\n      }\n      return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.pasteAs(kind ? new HierarchicalKind(kind) : undefined);\n    }\n  }]);\n}(EditorAction), _a.argsSchema = {\n  type: 'object',\n  properties: {\n    kind: {\n      type: 'string',\n      description: nls.localize('pasteAs.kind', \"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\")\n    }\n  }\n}, _a));\nregisterEditorAction( /*#__PURE__*/function (_EditorAction2) {\n  function _class3() {\n    _classCallCheck(this, _class3);\n    return _callSuper(this, _class3, [{\n      id: 'editor.action.pasteAsText',\n      label: nls.localize('pasteAsText', \"Paste as Text\"),\n      alias: 'Paste as Text',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(_class3, _EditorAction2);\n  return _createClass(_class3, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      var _b;\n      return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.pasteAs({\n        providerId: DefaultTextPasteOrDropEditProvider.id\n      });\n    }\n  }]);\n}(EditorAction));","map":{"version":3,"names":["_a","HierarchicalKind","EditorAction","EditorCommand","registerEditorAction","registerEditorCommand","registerEditorContribution","EditorContextKeys","registerEditorFeature","CopyPasteController","changePasteTypeCommandId","pasteWidgetVisibleCtx","DefaultPasteProvidersFeature","DefaultTextPasteOrDropEditProvider","nls","ID","_EditorCommand","_class","_classCallCheck","_callSuper","id","precondition","kbOpts","weight","primary","_inherits","_createClass","key","value","runEditorCommand","_accessor","editor","_b","get","changePasteType","_EditorCommand2","_class2","clearWidgets","_EditorAction","PasteAsAction","label","localize","alias","writable","metadata","description","args","name","schema","argsSchema","run","kind","undefined","pasteAs","type","properties","_EditorAction2","_class3","providerId"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar _a;\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { EditorAction, EditorCommand, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\nimport * as nls from '../../../../nls.js';\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, 0 /* EditorContributionInstantiation.Eager */); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: changePasteTypeCommandId,\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor) {\n        var _b;\n        return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.changePasteType();\n    }\n});\nregisterEditorCommand(new class extends EditorCommand {\n    constructor() {\n        super({\n            id: 'editor.hidePasteWidget',\n            precondition: pasteWidgetVisibleCtx,\n            kbOpts: {\n                weight: 100 /* KeybindingWeight.EditorContrib */,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    runEditorCommand(_accessor, editor) {\n        var _b;\n        (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.clearWidgets();\n    }\n});\nregisterEditorAction((_a = class PasteAsAction extends EditorAction {\n        constructor() {\n            super({\n                id: 'editor.action.pasteAs',\n                label: nls.localize('pasteAs', \"Paste As...\"),\n                alias: 'Paste As...',\n                precondition: EditorContextKeys.writable,\n                metadata: {\n                    description: 'Paste as',\n                    args: [{\n                            name: 'args',\n                            schema: _a.argsSchema\n                        }]\n                }\n            });\n        }\n        run(_accessor, editor, args) {\n            var _b;\n            let kind = typeof (args === null || args === void 0 ? void 0 : args.kind) === 'string' ? args.kind : undefined;\n            if (!kind && args) {\n                // Support old id property\n                // TODO: remove this in the future\n                kind = typeof args.id === 'string' ? args.id : undefined;\n            }\n            return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.pasteAs(kind ? new HierarchicalKind(kind) : undefined);\n        }\n    },\n    _a.argsSchema = {\n        type: 'object',\n        properties: {\n            kind: {\n                type: 'string',\n                description: nls.localize('pasteAs.kind', \"The kind of the paste edit to try applying. If not provided or there are multiple edits for this kind, the editor will show a picker.\"),\n            }\n        },\n    },\n    _a));\nregisterEditorAction(class extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.pasteAsText',\n            label: nls.localize('pasteAsText', \"Paste as Text\"),\n            alias: 'Paste as Text',\n            precondition: EditorContextKeys.writable,\n        });\n    }\n    run(_accessor, editor) {\n        var _b;\n        return (_b = CopyPasteController.get(editor)) === null || _b === void 0 ? void 0 : _b.pasteAs({ providerId: DefaultTextPasteOrDropEditProvider.id });\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}