{"ast":null,"code":"import _toConsumableArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _get from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\nexport var LanguageIdCodec = /*#__PURE__*/function () {\n  function LanguageIdCodec() {\n    _classCallCheck(this, LanguageIdCodec);\n    this._languageIdToLanguage = [];\n    this._languageToLanguageId = new Map();\n    this._register(NULL_LANGUAGE_ID, 0 /* LanguageId.Null */);\n    this._register(PLAINTEXT_LANGUAGE_ID, 1 /* LanguageId.PlainText */);\n    this._nextLanguageId = 2;\n  }\n  return _createClass(LanguageIdCodec, [{\n    key: \"_register\",\n    value: function _register(language, languageId) {\n      this._languageIdToLanguage[languageId] = language;\n      this._languageToLanguageId.set(language, languageId);\n    }\n  }, {\n    key: \"register\",\n    value: function register(language) {\n      if (this._languageToLanguageId.has(language)) {\n        return;\n      }\n      var languageId = this._nextLanguageId++;\n      this._register(language, languageId);\n    }\n  }, {\n    key: \"encodeLanguageId\",\n    value: function encodeLanguageId(languageId) {\n      return this._languageToLanguageId.get(languageId) || 0 /* LanguageId.Null */;\n    }\n  }, {\n    key: \"decodeLanguageId\",\n    value: function decodeLanguageId(languageId) {\n      return this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n    }\n  }]);\n}();\nexport var LanguagesRegistry = /*#__PURE__*/function (_Disposable) {\n  function LanguagesRegistry() {\n    var _this;\n    var useModesRegistry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var warnOnOverwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    _classCallCheck(this, LanguagesRegistry);\n    _this = _callSuper(this, LanguagesRegistry);\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    LanguagesRegistry.instanceCount++;\n    _this._warnOnOverwrite = warnOnOverwrite;\n    _this.languageIdCodec = new LanguageIdCodec();\n    _this._dynamicLanguages = [];\n    _this._languages = {};\n    _this._mimeTypesMap = {};\n    _this._nameMap = {};\n    _this._lowercaseNameMap = {};\n    if (useModesRegistry) {\n      _this._initializeFromRegistry();\n      _this._register(ModesRegistry.onDidChangeLanguages(function (m) {\n        _this._initializeFromRegistry();\n      }));\n    }\n    return _this;\n  }\n  _inherits(LanguagesRegistry, _Disposable);\n  return _createClass(LanguagesRegistry, [{\n    key: \"dispose\",\n    value: function dispose() {\n      LanguagesRegistry.instanceCount--;\n      _get(_getPrototypeOf(LanguagesRegistry.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"_initializeFromRegistry\",\n    value: function _initializeFromRegistry() {\n      this._languages = {};\n      this._mimeTypesMap = {};\n      this._nameMap = {};\n      this._lowercaseNameMap = {};\n      clearPlatformLanguageAssociations();\n      var desc = [].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n      this._registerLanguages(desc);\n    }\n  }, {\n    key: \"_registerLanguages\",\n    value: function _registerLanguages(desc) {\n      var _this2 = this;\n      var _iterator = _createForOfIteratorHelper(desc),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var d = _step.value;\n          this._registerLanguage(d);\n        }\n        // Rebuild fast path maps\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this._mimeTypesMap = {};\n      this._nameMap = {};\n      this._lowercaseNameMap = {};\n      Object.keys(this._languages).forEach(function (langId) {\n        var language = _this2._languages[langId];\n        if (language.name) {\n          _this2._nameMap[language.name] = language.identifier;\n        }\n        language.aliases.forEach(function (alias) {\n          _this2._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n        });\n        language.mimetypes.forEach(function (mimetype) {\n          _this2._mimeTypesMap[mimetype] = language.identifier;\n        });\n      });\n      Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n      this._onDidChange.fire();\n    }\n  }, {\n    key: \"_registerLanguage\",\n    value: function _registerLanguage(lang) {\n      var langId = lang.id;\n      var resolvedLanguage;\n      if (hasOwnProperty.call(this._languages, langId)) {\n        resolvedLanguage = this._languages[langId];\n      } else {\n        this.languageIdCodec.register(langId);\n        resolvedLanguage = {\n          identifier: langId,\n          name: null,\n          mimetypes: [],\n          aliases: [],\n          extensions: [],\n          filenames: [],\n          configurationFiles: [],\n          icons: []\n        };\n        this._languages[langId] = resolvedLanguage;\n      }\n      this._mergeLanguage(resolvedLanguage, lang);\n    }\n  }, {\n    key: \"_mergeLanguage\",\n    value: function _mergeLanguage(resolvedLanguage, lang) {\n      var langId = lang.id;\n      var primaryMime = null;\n      if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n        var _resolvedLanguage$mim;\n        (_resolvedLanguage$mim = resolvedLanguage.mimetypes).push.apply(_resolvedLanguage$mim, _toConsumableArray(lang.mimetypes));\n        primaryMime = lang.mimetypes[0];\n      }\n      if (!primaryMime) {\n        primaryMime = \"text/x-\".concat(langId);\n        resolvedLanguage.mimetypes.push(primaryMime);\n      }\n      if (Array.isArray(lang.extensions)) {\n        if (lang.configuration) {\n          // insert first as this appears to be the 'primary' language definition\n          resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n        } else {\n          resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n        }\n        var _iterator2 = _createForOfIteratorHelper(lang.extensions),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var extension = _step2.value;\n            registerPlatformLanguageAssociation({\n              id: langId,\n              mime: primaryMime,\n              extension: extension\n            }, this._warnOnOverwrite);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      if (Array.isArray(lang.filenames)) {\n        var _iterator3 = _createForOfIteratorHelper(lang.filenames),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var filename = _step3.value;\n            registerPlatformLanguageAssociation({\n              id: langId,\n              mime: primaryMime,\n              filename: filename\n            }, this._warnOnOverwrite);\n            resolvedLanguage.filenames.push(filename);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      if (Array.isArray(lang.filenamePatterns)) {\n        var _iterator4 = _createForOfIteratorHelper(lang.filenamePatterns),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var filenamePattern = _step4.value;\n            registerPlatformLanguageAssociation({\n              id: langId,\n              mime: primaryMime,\n              filepattern: filenamePattern\n            }, this._warnOnOverwrite);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n      if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n        var firstLineRegexStr = lang.firstLine;\n        if (firstLineRegexStr.charAt(0) !== '^') {\n          firstLineRegexStr = '^' + firstLineRegexStr;\n        }\n        try {\n          var firstLineRegex = new RegExp(firstLineRegexStr);\n          if (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n            registerPlatformLanguageAssociation({\n              id: langId,\n              mime: primaryMime,\n              firstline: firstLineRegex\n            }, this._warnOnOverwrite);\n          }\n        } catch (err) {\n          // Most likely, the regex was bad\n          console.warn(\"[\".concat(lang.id, \"]: Invalid regular expression `\").concat(firstLineRegexStr, \"`: \"), err);\n        }\n      }\n      resolvedLanguage.aliases.push(langId);\n      var langAliases = null;\n      if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n        if (lang.aliases.length === 0) {\n          // signal that this language should not get a name\n          langAliases = [null];\n        } else {\n          langAliases = lang.aliases;\n        }\n      }\n      if (langAliases !== null) {\n        var _iterator5 = _createForOfIteratorHelper(langAliases),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var langAlias = _step5.value;\n            if (!langAlias || langAlias.length === 0) {\n              continue;\n            }\n            resolvedLanguage.aliases.push(langAlias);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n      var containsAliases = langAliases !== null && langAliases.length > 0;\n      if (containsAliases && langAliases[0] === null) {\n        // signal that this language should not get a name\n      } else {\n        var bestName = (containsAliases ? langAliases[0] : null) || langId;\n        if (containsAliases || !resolvedLanguage.name) {\n          resolvedLanguage.name = bestName;\n        }\n      }\n      if (lang.configuration) {\n        resolvedLanguage.configurationFiles.push(lang.configuration);\n      }\n      if (lang.icon) {\n        resolvedLanguage.icons.push(lang.icon);\n      }\n    }\n  }, {\n    key: \"isRegisteredLanguageId\",\n    value: function isRegisteredLanguageId(languageId) {\n      if (!languageId) {\n        return false;\n      }\n      return hasOwnProperty.call(this._languages, languageId);\n    }\n  }, {\n    key: \"getRegisteredLanguageIds\",\n    value: function getRegisteredLanguageIds() {\n      return Object.keys(this._languages);\n    }\n  }, {\n    key: \"getLanguageIdByLanguageName\",\n    value: function getLanguageIdByLanguageName(languageName) {\n      var languageNameLower = languageName.toLowerCase();\n      if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n        return null;\n      }\n      return this._lowercaseNameMap[languageNameLower];\n    }\n  }, {\n    key: \"getLanguageIdByMimeType\",\n    value: function getLanguageIdByMimeType(mimeType) {\n      if (!mimeType) {\n        return null;\n      }\n      if (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n        return this._mimeTypesMap[mimeType];\n      }\n      return null;\n    }\n  }, {\n    key: \"guessLanguageIdByFilepathOrFirstLine\",\n    value: function guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n      if (!resource && !firstLine) {\n        return [];\n      }\n      return getLanguageIds(resource, firstLine);\n    }\n  }]);\n}(Disposable);\nLanguagesRegistry.instanceCount = 0;","map":{"version":3,"names":["Emitter","Disposable","regExpLeadsToEndlessLoop","clearPlatformLanguageAssociations","getLanguageIds","registerPlatformLanguageAssociation","ModesRegistry","PLAINTEXT_LANGUAGE_ID","Extensions","Registry","hasOwnProperty","Object","prototype","NULL_LANGUAGE_ID","LanguageIdCodec","_classCallCheck","_languageIdToLanguage","_languageToLanguageId","Map","_register","_nextLanguageId","_createClass","key","value","language","languageId","set","register","has","encodeLanguageId","get","decodeLanguageId","LanguagesRegistry","_Disposable","_this","useModesRegistry","arguments","length","undefined","warnOnOverwrite","_callSuper","_onDidChange","onDidChange","event","instanceCount","_warnOnOverwrite","languageIdCodec","_dynamicLanguages","_languages","_mimeTypesMap","_nameMap","_lowercaseNameMap","_initializeFromRegistry","onDidChangeLanguages","m","_inherits","dispose","_get","_getPrototypeOf","call","desc","concat","getLanguages","_registerLanguages","_this2","_iterator","_createForOfIteratorHelper","_step","s","n","done","d","_registerLanguage","err","e","f","keys","forEach","langId","name","identifier","aliases","alias","toLowerCase","mimetypes","mimetype","as","Configuration","registerOverrideIdentifiers","getRegisteredLanguageIds","fire","lang","id","resolvedLanguage","extensions","filenames","configurationFiles","icons","_mergeLanguage","primaryMime","Array","isArray","_resolvedLanguage$mim","push","apply","_toConsumableArray","configuration","_iterator2","_step2","extension","mime","_iterator3","_step3","filename","filenamePatterns","_iterator4","_step4","filenamePattern","filepattern","firstLine","firstLineRegexStr","charAt","firstLineRegex","RegExp","firstline","console","warn","langAliases","_iterator5","_step5","langAlias","containsAliases","bestName","icon","isRegisteredLanguageId","getLanguageIdByLanguageName","languageName","languageNameLower","getLanguageIdByMimeType","mimeType","guessLanguageIdByFilepathOrFirstLine","resource"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/services/languagesRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\nimport { clearPlatformLanguageAssociations, getLanguageIds, registerPlatformLanguageAssociation } from './languagesAssociations.js';\nimport { ModesRegistry, PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { Extensions } from '../../../platform/configuration/common/configurationRegistry.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst NULL_LANGUAGE_ID = 'vs.editor.nullLanguage';\nexport class LanguageIdCodec {\n    constructor() {\n        this._languageIdToLanguage = [];\n        this._languageToLanguageId = new Map();\n        this._register(NULL_LANGUAGE_ID, 0 /* LanguageId.Null */);\n        this._register(PLAINTEXT_LANGUAGE_ID, 1 /* LanguageId.PlainText */);\n        this._nextLanguageId = 2;\n    }\n    _register(language, languageId) {\n        this._languageIdToLanguage[languageId] = language;\n        this._languageToLanguageId.set(language, languageId);\n    }\n    register(language) {\n        if (this._languageToLanguageId.has(language)) {\n            return;\n        }\n        const languageId = this._nextLanguageId++;\n        this._register(language, languageId);\n    }\n    encodeLanguageId(languageId) {\n        return this._languageToLanguageId.get(languageId) || 0 /* LanguageId.Null */;\n    }\n    decodeLanguageId(languageId) {\n        return this._languageIdToLanguage[languageId] || NULL_LANGUAGE_ID;\n    }\n}\nexport class LanguagesRegistry extends Disposable {\n    constructor(useModesRegistry = true, warnOnOverwrite = false) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        LanguagesRegistry.instanceCount++;\n        this._warnOnOverwrite = warnOnOverwrite;\n        this.languageIdCodec = new LanguageIdCodec();\n        this._dynamicLanguages = [];\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        if (useModesRegistry) {\n            this._initializeFromRegistry();\n            this._register(ModesRegistry.onDidChangeLanguages((m) => {\n                this._initializeFromRegistry();\n            }));\n        }\n    }\n    dispose() {\n        LanguagesRegistry.instanceCount--;\n        super.dispose();\n    }\n    _initializeFromRegistry() {\n        this._languages = {};\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        clearPlatformLanguageAssociations();\n        const desc = [].concat(ModesRegistry.getLanguages()).concat(this._dynamicLanguages);\n        this._registerLanguages(desc);\n    }\n    _registerLanguages(desc) {\n        for (const d of desc) {\n            this._registerLanguage(d);\n        }\n        // Rebuild fast path maps\n        this._mimeTypesMap = {};\n        this._nameMap = {};\n        this._lowercaseNameMap = {};\n        Object.keys(this._languages).forEach((langId) => {\n            const language = this._languages[langId];\n            if (language.name) {\n                this._nameMap[language.name] = language.identifier;\n            }\n            language.aliases.forEach((alias) => {\n                this._lowercaseNameMap[alias.toLowerCase()] = language.identifier;\n            });\n            language.mimetypes.forEach((mimetype) => {\n                this._mimeTypesMap[mimetype] = language.identifier;\n            });\n        });\n        Registry.as(Extensions.Configuration).registerOverrideIdentifiers(this.getRegisteredLanguageIds());\n        this._onDidChange.fire();\n    }\n    _registerLanguage(lang) {\n        const langId = lang.id;\n        let resolvedLanguage;\n        if (hasOwnProperty.call(this._languages, langId)) {\n            resolvedLanguage = this._languages[langId];\n        }\n        else {\n            this.languageIdCodec.register(langId);\n            resolvedLanguage = {\n                identifier: langId,\n                name: null,\n                mimetypes: [],\n                aliases: [],\n                extensions: [],\n                filenames: [],\n                configurationFiles: [],\n                icons: []\n            };\n            this._languages[langId] = resolvedLanguage;\n        }\n        this._mergeLanguage(resolvedLanguage, lang);\n    }\n    _mergeLanguage(resolvedLanguage, lang) {\n        const langId = lang.id;\n        let primaryMime = null;\n        if (Array.isArray(lang.mimetypes) && lang.mimetypes.length > 0) {\n            resolvedLanguage.mimetypes.push(...lang.mimetypes);\n            primaryMime = lang.mimetypes[0];\n        }\n        if (!primaryMime) {\n            primaryMime = `text/x-${langId}`;\n            resolvedLanguage.mimetypes.push(primaryMime);\n        }\n        if (Array.isArray(lang.extensions)) {\n            if (lang.configuration) {\n                // insert first as this appears to be the 'primary' language definition\n                resolvedLanguage.extensions = lang.extensions.concat(resolvedLanguage.extensions);\n            }\n            else {\n                resolvedLanguage.extensions = resolvedLanguage.extensions.concat(lang.extensions);\n            }\n            for (const extension of lang.extensions) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, extension: extension }, this._warnOnOverwrite);\n            }\n        }\n        if (Array.isArray(lang.filenames)) {\n            for (const filename of lang.filenames) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filename: filename }, this._warnOnOverwrite);\n                resolvedLanguage.filenames.push(filename);\n            }\n        }\n        if (Array.isArray(lang.filenamePatterns)) {\n            for (const filenamePattern of lang.filenamePatterns) {\n                registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, filepattern: filenamePattern }, this._warnOnOverwrite);\n            }\n        }\n        if (typeof lang.firstLine === 'string' && lang.firstLine.length > 0) {\n            let firstLineRegexStr = lang.firstLine;\n            if (firstLineRegexStr.charAt(0) !== '^') {\n                firstLineRegexStr = '^' + firstLineRegexStr;\n            }\n            try {\n                const firstLineRegex = new RegExp(firstLineRegexStr);\n                if (!regExpLeadsToEndlessLoop(firstLineRegex)) {\n                    registerPlatformLanguageAssociation({ id: langId, mime: primaryMime, firstline: firstLineRegex }, this._warnOnOverwrite);\n                }\n            }\n            catch (err) {\n                // Most likely, the regex was bad\n                console.warn(`[${lang.id}]: Invalid regular expression \\`${firstLineRegexStr}\\`: `, err);\n            }\n        }\n        resolvedLanguage.aliases.push(langId);\n        let langAliases = null;\n        if (typeof lang.aliases !== 'undefined' && Array.isArray(lang.aliases)) {\n            if (lang.aliases.length === 0) {\n                // signal that this language should not get a name\n                langAliases = [null];\n            }\n            else {\n                langAliases = lang.aliases;\n            }\n        }\n        if (langAliases !== null) {\n            for (const langAlias of langAliases) {\n                if (!langAlias || langAlias.length === 0) {\n                    continue;\n                }\n                resolvedLanguage.aliases.push(langAlias);\n            }\n        }\n        const containsAliases = (langAliases !== null && langAliases.length > 0);\n        if (containsAliases && langAliases[0] === null) {\n            // signal that this language should not get a name\n        }\n        else {\n            const bestName = (containsAliases ? langAliases[0] : null) || langId;\n            if (containsAliases || !resolvedLanguage.name) {\n                resolvedLanguage.name = bestName;\n            }\n        }\n        if (lang.configuration) {\n            resolvedLanguage.configurationFiles.push(lang.configuration);\n        }\n        if (lang.icon) {\n            resolvedLanguage.icons.push(lang.icon);\n        }\n    }\n    isRegisteredLanguageId(languageId) {\n        if (!languageId) {\n            return false;\n        }\n        return hasOwnProperty.call(this._languages, languageId);\n    }\n    getRegisteredLanguageIds() {\n        return Object.keys(this._languages);\n    }\n    getLanguageIdByLanguageName(languageName) {\n        const languageNameLower = languageName.toLowerCase();\n        if (!hasOwnProperty.call(this._lowercaseNameMap, languageNameLower)) {\n            return null;\n        }\n        return this._lowercaseNameMap[languageNameLower];\n    }\n    getLanguageIdByMimeType(mimeType) {\n        if (!mimeType) {\n            return null;\n        }\n        if (hasOwnProperty.call(this._mimeTypesMap, mimeType)) {\n            return this._mimeTypesMap[mimeType];\n        }\n        return null;\n    }\n    guessLanguageIdByFilepathOrFirstLine(resource, firstLine) {\n        if (!resource && !firstLine) {\n            return [];\n        }\n        return getLanguageIds(resource, firstLine);\n    }\n}\nLanguagesRegistry.instanceCount = 0;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}