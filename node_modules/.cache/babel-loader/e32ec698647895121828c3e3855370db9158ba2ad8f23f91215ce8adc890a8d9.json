{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport var BracketElectricCharacterSupport = /*#__PURE__*/function () {\n  function BracketElectricCharacterSupport(richEditBrackets) {\n    _classCallCheck(this, BracketElectricCharacterSupport);\n    this._richEditBrackets = richEditBrackets;\n  }\n  return _createClass(BracketElectricCharacterSupport, [{\n    key: \"getElectricCharacters\",\n    value: function getElectricCharacters() {\n      var result = [];\n      if (this._richEditBrackets) {\n        var _iterator = _createForOfIteratorHelper(this._richEditBrackets.brackets),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var bracket = _step.value;\n            var _iterator2 = _createForOfIteratorHelper(bracket.close),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var close = _step2.value;\n                var lastChar = close.charAt(close.length - 1);\n                result.push(lastChar);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return distinct(result);\n    }\n  }, {\n    key: \"onElectricCharacter\",\n    value: function onElectricCharacter(character, context, column) {\n      if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n        return null;\n      }\n      var tokenIndex = context.findTokenIndexAtOffset(column - 1);\n      if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n        return null;\n      }\n      var reversedBracketRegex = this._richEditBrackets.reversedRegex;\n      var text = context.getLineContent().substring(0, column - 1) + character;\n      var r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n      if (!r) {\n        return null;\n      }\n      var bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n      var isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n      if (isOpen) {\n        return null;\n      }\n      var textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n      if (!/^\\s*$/.test(textBeforeBracket)) {\n        // There is other text on the line before the bracket\n        return null;\n      }\n      return {\n        matchOpenBracket: bracketText\n      };\n    }\n  }]);\n}();","map":{"version":3,"names":["distinct","ignoreBracketsInToken","BracketsUtils","BracketElectricCharacterSupport","richEditBrackets","_classCallCheck","_richEditBrackets","_createClass","key","value","getElectricCharacters","result","_iterator","_createForOfIteratorHelper","brackets","_step","s","n","done","bracket","_iterator2","close","_step2","lastChar","charAt","length","push","err","e","f","onElectricCharacter","character","context","column","tokenIndex","findTokenIndexAtOffset","getStandardTokenType","reversedBracketRegex","reversedRegex","text","getLineContent","substring","r","findPrevBracketInRange","bracketText","startColumn","endColumn","toLowerCase","isOpen","textIsOpenBracket","textBeforeBracket","getActualLineContentBefore","test","matchOpenBracket"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/electricCharacter.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../../base/common/arrays.js';\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\nexport class BracketElectricCharacterSupport {\n    constructor(richEditBrackets) {\n        this._richEditBrackets = richEditBrackets;\n    }\n    getElectricCharacters() {\n        const result = [];\n        if (this._richEditBrackets) {\n            for (const bracket of this._richEditBrackets.brackets) {\n                for (const close of bracket.close) {\n                    const lastChar = close.charAt(close.length - 1);\n                    result.push(lastChar);\n                }\n            }\n        }\n        return distinct(result);\n    }\n    onElectricCharacter(character, context, column) {\n        if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n            return null;\n        }\n        const tokenIndex = context.findTokenIndexAtOffset(column - 1);\n        if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n            return null;\n        }\n        const reversedBracketRegex = this._richEditBrackets.reversedRegex;\n        const text = context.getLineContent().substring(0, column - 1) + character;\n        const r = BracketsUtils.findPrevBracketInRange(reversedBracketRegex, 1, text, 0, text.length);\n        if (!r) {\n            return null;\n        }\n        const bracketText = text.substring(r.startColumn - 1, r.endColumn - 1).toLowerCase();\n        const isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n        if (isOpen) {\n            return null;\n        }\n        const textBeforeBracket = context.getActualLineContentBefore(r.startColumn - 1);\n        if (!/^\\s*$/.test(textBeforeBracket)) {\n            // There is other text on the line before the bracket\n            return null;\n        }\n        return {\n            matchOpenBracket: bracketText\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}