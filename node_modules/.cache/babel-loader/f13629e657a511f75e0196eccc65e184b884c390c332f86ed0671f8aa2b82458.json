{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { compare, compareIgnoreCase, compareSubstring, compareSubstringIgnoreCase } from './strings.js';\nexport var StringIterator = /*#__PURE__*/function () {\n  function StringIterator() {\n    _classCallCheck(this, StringIterator);\n    this._value = '';\n    this._pos = 0;\n  }\n  return _createClass(StringIterator, [{\n    key: \"reset\",\n    value: function reset(key) {\n      this._value = key;\n      this._pos = 0;\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this._pos += 1;\n      return this;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this._pos < this._value.length - 1;\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(a) {\n      var aCode = a.charCodeAt(0);\n      var thisCode = this._value.charCodeAt(this._pos);\n      return aCode - thisCode;\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return this._value[this._pos];\n    }\n  }]);\n}();\nexport var ConfigKeysIterator = /*#__PURE__*/function () {\n  function ConfigKeysIterator() {\n    var _caseSensitive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    _classCallCheck(this, ConfigKeysIterator);\n    this._caseSensitive = _caseSensitive;\n  }\n  return _createClass(ConfigKeysIterator, [{\n    key: \"reset\",\n    value: function reset(key) {\n      this._value = key;\n      this._from = 0;\n      this._to = 0;\n      return this.next();\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this._to < this._value.length;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // this._data = key.split(/[\\\\/]/).filter(s => !!s);\n      this._from = this._to;\n      var justSeps = true;\n      for (; this._to < this._value.length; this._to++) {\n        var ch = this._value.charCodeAt(this._to);\n        if (ch === 46 /* CharCode.Period */) {\n          if (justSeps) {\n            this._from++;\n          } else {\n            break;\n          }\n        } else {\n          justSeps = false;\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(a) {\n      return this._caseSensitive ? compareSubstring(a, this._value, 0, a.length, this._from, this._to) : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return this._value.substring(this._from, this._to);\n    }\n  }]);\n}();\nexport var PathIterator = /*#__PURE__*/function () {\n  function PathIterator() {\n    var _splitOnBackslash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var _caseSensitive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    _classCallCheck(this, PathIterator);\n    this._splitOnBackslash = _splitOnBackslash;\n    this._caseSensitive = _caseSensitive;\n  }\n  return _createClass(PathIterator, [{\n    key: \"reset\",\n    value: function reset(key) {\n      this._from = 0;\n      this._to = 0;\n      this._value = key;\n      this._valueLen = key.length;\n      for (var pos = key.length - 1; pos >= 0; pos--, this._valueLen--) {\n        var ch = this._value.charCodeAt(pos);\n        if (!(ch === 47 /* CharCode.Slash */ || this._splitOnBackslash && ch === 92 /* CharCode.Backslash */)) {\n          break;\n        }\n      }\n      return this.next();\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this._to < this._valueLen;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // this._data = key.split(/[\\\\/]/).filter(s => !!s);\n      this._from = this._to;\n      var justSeps = true;\n      for (; this._to < this._valueLen; this._to++) {\n        var ch = this._value.charCodeAt(this._to);\n        if (ch === 47 /* CharCode.Slash */ || this._splitOnBackslash && ch === 92 /* CharCode.Backslash */) {\n          if (justSeps) {\n            this._from++;\n          } else {\n            break;\n          }\n        } else {\n          justSeps = false;\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(a) {\n      return this._caseSensitive ? compareSubstring(a, this._value, 0, a.length, this._from, this._to) : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return this._value.substring(this._from, this._to);\n    }\n  }]);\n}();\nexport var UriIterator = /*#__PURE__*/function () {\n  function UriIterator(_ignorePathCasing, _ignoreQueryAndFragment) {\n    _classCallCheck(this, UriIterator);\n    this._ignorePathCasing = _ignorePathCasing;\n    this._ignoreQueryAndFragment = _ignoreQueryAndFragment;\n    this._states = [];\n    this._stateIdx = 0;\n  }\n  return _createClass(UriIterator, [{\n    key: \"reset\",\n    value: function reset(key) {\n      this._value = key;\n      this._states = [];\n      if (this._value.scheme) {\n        this._states.push(1 /* UriIteratorState.Scheme */);\n      }\n      if (this._value.authority) {\n        this._states.push(2 /* UriIteratorState.Authority */);\n      }\n      if (this._value.path) {\n        this._pathIterator = new PathIterator(false, !this._ignorePathCasing(key));\n        this._pathIterator.reset(key.path);\n        if (this._pathIterator.value()) {\n          this._states.push(3 /* UriIteratorState.Path */);\n        }\n      }\n      if (!this._ignoreQueryAndFragment(key)) {\n        if (this._value.query) {\n          this._states.push(4 /* UriIteratorState.Query */);\n        }\n        if (this._value.fragment) {\n          this._states.push(5 /* UriIteratorState.Fragment */);\n        }\n      }\n      this._stateIdx = 0;\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (this._states[this._stateIdx] === 3 /* UriIteratorState.Path */ && this._pathIterator.hasNext()) {\n        this._pathIterator.next();\n      } else {\n        this._stateIdx += 1;\n      }\n      return this;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this._states[this._stateIdx] === 3 /* UriIteratorState.Path */ && this._pathIterator.hasNext() || this._stateIdx < this._states.length - 1;\n    }\n  }, {\n    key: \"cmp\",\n    value: function cmp(a) {\n      if (this._states[this._stateIdx] === 1 /* UriIteratorState.Scheme */) {\n        return compareIgnoreCase(a, this._value.scheme);\n      } else if (this._states[this._stateIdx] === 2 /* UriIteratorState.Authority */) {\n        return compareIgnoreCase(a, this._value.authority);\n      } else if (this._states[this._stateIdx] === 3 /* UriIteratorState.Path */) {\n        return this._pathIterator.cmp(a);\n      } else if (this._states[this._stateIdx] === 4 /* UriIteratorState.Query */) {\n        return compare(a, this._value.query);\n      } else if (this._states[this._stateIdx] === 5 /* UriIteratorState.Fragment */) {\n        return compare(a, this._value.fragment);\n      }\n      throw new Error();\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      if (this._states[this._stateIdx] === 1 /* UriIteratorState.Scheme */) {\n        return this._value.scheme;\n      } else if (this._states[this._stateIdx] === 2 /* UriIteratorState.Authority */) {\n        return this._value.authority;\n      } else if (this._states[this._stateIdx] === 3 /* UriIteratorState.Path */) {\n        return this._pathIterator.value();\n      } else if (this._states[this._stateIdx] === 4 /* UriIteratorState.Query */) {\n        return this._value.query;\n      } else if (this._states[this._stateIdx] === 5 /* UriIteratorState.Fragment */) {\n        return this._value.fragment;\n      }\n      throw new Error();\n    }\n  }]);\n}();\nvar TernarySearchTreeNode = /*#__PURE__*/function () {\n  function TernarySearchTreeNode() {\n    _classCallCheck(this, TernarySearchTreeNode);\n    this.height = 1;\n  }\n  return _createClass(TernarySearchTreeNode, [{\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var tmp = this.right;\n      this.right = tmp.left;\n      tmp.left = this;\n      this.updateHeight();\n      tmp.updateHeight();\n      return tmp;\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var tmp = this.left;\n      this.left = tmp.right;\n      tmp.right = this;\n      this.updateHeight();\n      tmp.updateHeight();\n      return tmp;\n    }\n  }, {\n    key: \"updateHeight\",\n    value: function updateHeight() {\n      this.height = 1 + Math.max(this.heightLeft, this.heightRight);\n    }\n  }, {\n    key: \"balanceFactor\",\n    value: function balanceFactor() {\n      return this.heightRight - this.heightLeft;\n    }\n  }, {\n    key: \"heightLeft\",\n    get: function get() {\n      var _a, _b;\n      return (_b = (_a = this.left) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0;\n    }\n  }, {\n    key: \"heightRight\",\n    get: function get() {\n      var _a, _b;\n      return (_b = (_a = this.right) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0;\n    }\n  }]);\n}();\nexport var TernarySearchTree = /*#__PURE__*/function () {\n  function TernarySearchTree(segments) {\n    _classCallCheck(this, TernarySearchTree);\n    this._iter = segments;\n  }\n  return _createClass(TernarySearchTree, [{\n    key: \"clear\",\n    value: function clear() {\n      this._root = undefined;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, element) {\n      var iter = this._iter.reset(key);\n      var node;\n      if (!this._root) {\n        this._root = new TernarySearchTreeNode();\n        this._root.segment = iter.value();\n      }\n      var stack = [];\n      // find insert_node\n      node = this._root;\n      while (true) {\n        var val = iter.cmp(node.segment);\n        if (val > 0) {\n          // left\n          if (!node.left) {\n            node.left = new TernarySearchTreeNode();\n            node.left.segment = iter.value();\n          }\n          stack.push([-1 /* Dir.Left */, node]);\n          node = node.left;\n        } else if (val < 0) {\n          // right\n          if (!node.right) {\n            node.right = new TernarySearchTreeNode();\n            node.right.segment = iter.value();\n          }\n          stack.push([1 /* Dir.Right */, node]);\n          node = node.right;\n        } else if (iter.hasNext()) {\n          // mid\n          iter.next();\n          if (!node.mid) {\n            node.mid = new TernarySearchTreeNode();\n            node.mid.segment = iter.value();\n          }\n          stack.push([0 /* Dir.Mid */, node]);\n          node = node.mid;\n        } else {\n          break;\n        }\n      }\n      // set value\n      var oldElement = node.value;\n      node.value = element;\n      node.key = key;\n      // balance\n      for (var i = stack.length - 1; i >= 0; i--) {\n        var _node = stack[i][1];\n        _node.updateHeight();\n        var bf = _node.balanceFactor();\n        if (bf < -1 || bf > 1) {\n          // needs rotate\n          var d1 = stack[i][0];\n          var d2 = stack[i + 1][0];\n          if (d1 === 1 /* Dir.Right */ && d2 === 1 /* Dir.Right */) {\n            //right, right -> rotate left\n            stack[i][1] = _node.rotateLeft();\n          } else if (d1 === -1 /* Dir.Left */ && d2 === -1 /* Dir.Left */) {\n            // left, left -> rotate right\n            stack[i][1] = _node.rotateRight();\n          } else if (d1 === 1 /* Dir.Right */ && d2 === -1 /* Dir.Left */) {\n            // right, left -> double rotate right, left\n            _node.right = stack[i + 1][1] = stack[i + 1][1].rotateRight();\n            stack[i][1] = _node.rotateLeft();\n          } else if (d1 === -1 /* Dir.Left */ && d2 === 1 /* Dir.Right */) {\n            // left, right -> double rotate left, right\n            _node.left = stack[i + 1][1] = stack[i + 1][1].rotateLeft();\n            stack[i][1] = _node.rotateRight();\n          } else {\n            throw new Error();\n          }\n          // patch path to parent\n          if (i > 0) {\n            switch (stack[i - 1][0]) {\n              case -1 /* Dir.Left */:\n                stack[i - 1][1].left = stack[i][1];\n                break;\n              case 1 /* Dir.Right */:\n                stack[i - 1][1].right = stack[i][1];\n                break;\n              case 0 /* Dir.Mid */:\n                stack[i - 1][1].mid = stack[i][1];\n                break;\n            }\n          } else {\n            this._root = stack[0][1];\n          }\n        }\n      }\n      return oldElement;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var _a;\n      return (_a = this._getNode(key)) === null || _a === void 0 ? void 0 : _a.value;\n    }\n  }, {\n    key: \"_getNode\",\n    value: function _getNode(key) {\n      var iter = this._iter.reset(key);\n      var node = this._root;\n      while (node) {\n        var val = iter.cmp(node.segment);\n        if (val > 0) {\n          // left\n          node = node.left;\n        } else if (val < 0) {\n          // right\n          node = node.right;\n        } else if (iter.hasNext()) {\n          // mid\n          iter.next();\n          node = node.mid;\n        } else {\n          break;\n        }\n      }\n      return node;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      var node = this._getNode(key);\n      return !((node === null || node === void 0 ? void 0 : node.value) === undefined && (node === null || node === void 0 ? void 0 : node.mid) === undefined);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      return this._delete(key, false);\n    }\n  }, {\n    key: \"deleteSuperstr\",\n    value: function deleteSuperstr(key) {\n      return this._delete(key, true);\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete(key, superStr) {\n      var _a;\n      var iter = this._iter.reset(key);\n      var stack = [];\n      var node = this._root;\n      // find node\n      while (node) {\n        var val = iter.cmp(node.segment);\n        if (val > 0) {\n          // left\n          stack.push([-1 /* Dir.Left */, node]);\n          node = node.left;\n        } else if (val < 0) {\n          // right\n          stack.push([1 /* Dir.Right */, node]);\n          node = node.right;\n        } else if (iter.hasNext()) {\n          // mid\n          iter.next();\n          stack.push([0 /* Dir.Mid */, node]);\n          node = node.mid;\n        } else {\n          break;\n        }\n      }\n      if (!node) {\n        // node not found\n        return;\n      }\n      if (superStr) {\n        // removing children, reset height\n        node.left = undefined;\n        node.mid = undefined;\n        node.right = undefined;\n        node.height = 1;\n      } else {\n        // removing element\n        node.key = undefined;\n        node.value = undefined;\n      }\n      // BST node removal\n      if (!node.mid && !node.value) {\n        if (node.left && node.right) {\n          // full node\n          // replace deleted-node with the min-node of the right branch.\n          // If there is no true min-node leave things as they are\n          var min = this._min(node.right);\n          if (min.key) {\n            var _key = min.key,\n              value = min.value,\n              segment = min.segment;\n            this._delete(min.key, false);\n            node.key = _key;\n            node.value = value;\n            node.segment = segment;\n          }\n        } else {\n          // empty or half empty\n          var newChild = (_a = node.left) !== null && _a !== void 0 ? _a : node.right;\n          if (stack.length > 0) {\n            var _stack = _slicedToArray(stack[stack.length - 1], 2),\n              dir = _stack[0],\n              parent = _stack[1];\n            switch (dir) {\n              case -1 /* Dir.Left */:\n                parent.left = newChild;\n                break;\n              case 0 /* Dir.Mid */:\n                parent.mid = newChild;\n                break;\n              case 1 /* Dir.Right */:\n                parent.right = newChild;\n                break;\n            }\n          } else {\n            this._root = newChild;\n          }\n        }\n      }\n      // AVL balance\n      for (var i = stack.length - 1; i >= 0; i--) {\n        var _node2 = stack[i][1];\n        _node2.updateHeight();\n        var bf = _node2.balanceFactor();\n        if (bf > 1) {\n          // right heavy\n          if (_node2.right.balanceFactor() >= 0) {\n            // right, right -> rotate left\n            stack[i][1] = _node2.rotateLeft();\n          } else {\n            // right, left -> double rotate\n            _node2.right = _node2.right.rotateRight();\n            stack[i][1] = _node2.rotateLeft();\n          }\n        } else if (bf < -1) {\n          // left heavy\n          if (_node2.left.balanceFactor() <= 0) {\n            // left, left -> rotate right\n            stack[i][1] = _node2.rotateRight();\n          } else {\n            // left, right -> double rotate\n            _node2.left = _node2.left.rotateLeft();\n            stack[i][1] = _node2.rotateRight();\n          }\n        }\n        // patch path to parent\n        if (i > 0) {\n          switch (stack[i - 1][0]) {\n            case -1 /* Dir.Left */:\n              stack[i - 1][1].left = stack[i][1];\n              break;\n            case 1 /* Dir.Right */:\n              stack[i - 1][1].right = stack[i][1];\n              break;\n            case 0 /* Dir.Mid */:\n              stack[i - 1][1].mid = stack[i][1];\n              break;\n          }\n        } else {\n          this._root = stack[0][1];\n        }\n      }\n    }\n  }, {\n    key: \"_min\",\n    value: function _min(node) {\n      while (node.left) {\n        node = node.left;\n      }\n      return node;\n    }\n  }, {\n    key: \"findSubstr\",\n    value: function findSubstr(key) {\n      var iter = this._iter.reset(key);\n      var node = this._root;\n      var candidate = undefined;\n      while (node) {\n        var val = iter.cmp(node.segment);\n        if (val > 0) {\n          // left\n          node = node.left;\n        } else if (val < 0) {\n          // right\n          node = node.right;\n        } else if (iter.hasNext()) {\n          // mid\n          iter.next();\n          candidate = node.value || candidate;\n          node = node.mid;\n        } else {\n          break;\n        }\n      }\n      return node && node.value || candidate;\n    }\n  }, {\n    key: \"findSuperstr\",\n    value: function findSuperstr(key) {\n      return this._findSuperstrOrElement(key, false);\n    }\n  }, {\n    key: \"_findSuperstrOrElement\",\n    value: function _findSuperstrOrElement(key, allowValue) {\n      var iter = this._iter.reset(key);\n      var node = this._root;\n      while (node) {\n        var val = iter.cmp(node.segment);\n        if (val > 0) {\n          // left\n          node = node.left;\n        } else if (val < 0) {\n          // right\n          node = node.right;\n        } else if (iter.hasNext()) {\n          // mid\n          iter.next();\n          node = node.mid;\n        } else {\n          // collect\n          if (!node.mid) {\n            if (allowValue) {\n              return node.value;\n            } else {\n              return undefined;\n            }\n          } else {\n            return this._entries(node.mid);\n          }\n        }\n      }\n      return undefined;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      var _iterator = _createForOfIteratorHelper(this),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            key = _step$value[0],\n            value = _step$value[1];\n          callback(value, key);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            return _context.delegateYield(this._entries(this._root), \"t0\", 1);\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"_entries\",\n    value: function _entries(node) {\n      var result = [];\n      this._dfsEntries(node, result);\n      return result[Symbol.iterator]();\n    }\n  }, {\n    key: \"_dfsEntries\",\n    value: function _dfsEntries(node, bucket) {\n      // DFS\n      if (!node) {\n        return;\n      }\n      if (node.left) {\n        this._dfsEntries(node.left, bucket);\n      }\n      if (node.value) {\n        bucket.push([node.key, node.value]);\n      }\n      if (node.mid) {\n        this._dfsEntries(node.mid, bucket);\n      }\n      if (node.right) {\n        this._dfsEntries(node.right, bucket);\n      }\n    }\n  }], [{\n    key: \"forUris\",\n    value: function forUris() {\n      var ignorePathCasing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {\n        return false;\n      };\n      var ignoreQueryAndFragment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return false;\n      };\n      return new TernarySearchTree(new UriIterator(ignorePathCasing, ignoreQueryAndFragment));\n    }\n  }, {\n    key: \"forStrings\",\n    value: function forStrings() {\n      return new TernarySearchTree(new StringIterator());\n    }\n  }, {\n    key: \"forConfigKeys\",\n    value: function forConfigKeys() {\n      return new TernarySearchTree(new ConfigKeysIterator());\n    }\n  }]);\n}();","map":{"version":3,"names":["compare","compareIgnoreCase","compareSubstring","compareSubstringIgnoreCase","StringIterator","_classCallCheck","_value","_pos","_createClass","key","value","reset","next","hasNext","length","cmp","a","aCode","charCodeAt","thisCode","ConfigKeysIterator","_caseSensitive","arguments","undefined","_from","_to","justSeps","ch","substring","PathIterator","_splitOnBackslash","_valueLen","pos","UriIterator","_ignorePathCasing","_ignoreQueryAndFragment","_states","_stateIdx","scheme","push","authority","path","_pathIterator","query","fragment","Error","TernarySearchTreeNode","height","rotateLeft","tmp","right","left","updateHeight","rotateRight","Math","max","heightLeft","heightRight","balanceFactor","get","_a","_b","TernarySearchTree","segments","_iter","clear","_root","set","element","iter","node","segment","stack","val","mid","oldElement","i","bf","d1","d2","_getNode","has","_delete","deleteSuperstr","superStr","min","_min","newChild","_stack","_slicedToArray","dir","parent","findSubstr","candidate","findSuperstr","_findSuperstrOrElement","allowValue","_entries","forEach","callback","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","err","e","f","Symbol","iterator","_regeneratorRuntime","mark","wrap","value$","_context","prev","delegateYield","stop","result","_dfsEntries","bucket","forUris","ignorePathCasing","ignoreQueryAndFragment","forStrings","forConfigKeys"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/base/common/ternarySearchTree.js"],"sourcesContent":["import { compare, compareIgnoreCase, compareSubstring, compareSubstringIgnoreCase } from './strings.js';\nexport class StringIterator {\n    constructor() {\n        this._value = '';\n        this._pos = 0;\n    }\n    reset(key) {\n        this._value = key;\n        this._pos = 0;\n        return this;\n    }\n    next() {\n        this._pos += 1;\n        return this;\n    }\n    hasNext() {\n        return this._pos < this._value.length - 1;\n    }\n    cmp(a) {\n        const aCode = a.charCodeAt(0);\n        const thisCode = this._value.charCodeAt(this._pos);\n        return aCode - thisCode;\n    }\n    value() {\n        return this._value[this._pos];\n    }\n}\nexport class ConfigKeysIterator {\n    constructor(_caseSensitive = true) {\n        this._caseSensitive = _caseSensitive;\n    }\n    reset(key) {\n        this._value = key;\n        this._from = 0;\n        this._to = 0;\n        return this.next();\n    }\n    hasNext() {\n        return this._to < this._value.length;\n    }\n    next() {\n        // this._data = key.split(/[\\\\/]/).filter(s => !!s);\n        this._from = this._to;\n        let justSeps = true;\n        for (; this._to < this._value.length; this._to++) {\n            const ch = this._value.charCodeAt(this._to);\n            if (ch === 46 /* CharCode.Period */) {\n                if (justSeps) {\n                    this._from++;\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                justSeps = false;\n            }\n        }\n        return this;\n    }\n    cmp(a) {\n        return this._caseSensitive\n            ? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n            : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n    }\n    value() {\n        return this._value.substring(this._from, this._to);\n    }\n}\nexport class PathIterator {\n    constructor(_splitOnBackslash = true, _caseSensitive = true) {\n        this._splitOnBackslash = _splitOnBackslash;\n        this._caseSensitive = _caseSensitive;\n    }\n    reset(key) {\n        this._from = 0;\n        this._to = 0;\n        this._value = key;\n        this._valueLen = key.length;\n        for (let pos = key.length - 1; pos >= 0; pos--, this._valueLen--) {\n            const ch = this._value.charCodeAt(pos);\n            if (!(ch === 47 /* CharCode.Slash */ || this._splitOnBackslash && ch === 92 /* CharCode.Backslash */)) {\n                break;\n            }\n        }\n        return this.next();\n    }\n    hasNext() {\n        return this._to < this._valueLen;\n    }\n    next() {\n        // this._data = key.split(/[\\\\/]/).filter(s => !!s);\n        this._from = this._to;\n        let justSeps = true;\n        for (; this._to < this._valueLen; this._to++) {\n            const ch = this._value.charCodeAt(this._to);\n            if (ch === 47 /* CharCode.Slash */ || this._splitOnBackslash && ch === 92 /* CharCode.Backslash */) {\n                if (justSeps) {\n                    this._from++;\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                justSeps = false;\n            }\n        }\n        return this;\n    }\n    cmp(a) {\n        return this._caseSensitive\n            ? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n            : compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n    }\n    value() {\n        return this._value.substring(this._from, this._to);\n    }\n}\nexport class UriIterator {\n    constructor(_ignorePathCasing, _ignoreQueryAndFragment) {\n        this._ignorePathCasing = _ignorePathCasing;\n        this._ignoreQueryAndFragment = _ignoreQueryAndFragment;\n        this._states = [];\n        this._stateIdx = 0;\n    }\n    reset(key) {\n        this._value = key;\n        this._states = [];\n        if (this._value.scheme) {\n            this._states.push(1 /* UriIteratorState.Scheme */);\n        }\n        if (this._value.authority) {\n            this._states.push(2 /* UriIteratorState.Authority */);\n        }\n        if (this._value.path) {\n            this._pathIterator = new PathIterator(false, !this._ignorePathCasing(key));\n            this._pathIterator.reset(key.path);\n            if (this._pathIterator.value()) {\n                this._states.push(3 /* UriIteratorState.Path */);\n            }\n        }\n        if (!this._ignoreQueryAndFragment(key)) {\n            if (this._value.query) {\n                this._states.push(4 /* UriIteratorState.Query */);\n            }\n            if (this._value.fragment) {\n                this._states.push(5 /* UriIteratorState.Fragment */);\n            }\n        }\n        this._stateIdx = 0;\n        return this;\n    }\n    next() {\n        if (this._states[this._stateIdx] === 3 /* UriIteratorState.Path */ && this._pathIterator.hasNext()) {\n            this._pathIterator.next();\n        }\n        else {\n            this._stateIdx += 1;\n        }\n        return this;\n    }\n    hasNext() {\n        return (this._states[this._stateIdx] === 3 /* UriIteratorState.Path */ && this._pathIterator.hasNext())\n            || this._stateIdx < this._states.length - 1;\n    }\n    cmp(a) {\n        if (this._states[this._stateIdx] === 1 /* UriIteratorState.Scheme */) {\n            return compareIgnoreCase(a, this._value.scheme);\n        }\n        else if (this._states[this._stateIdx] === 2 /* UriIteratorState.Authority */) {\n            return compareIgnoreCase(a, this._value.authority);\n        }\n        else if (this._states[this._stateIdx] === 3 /* UriIteratorState.Path */) {\n            return this._pathIterator.cmp(a);\n        }\n        else if (this._states[this._stateIdx] === 4 /* UriIteratorState.Query */) {\n            return compare(a, this._value.query);\n        }\n        else if (this._states[this._stateIdx] === 5 /* UriIteratorState.Fragment */) {\n            return compare(a, this._value.fragment);\n        }\n        throw new Error();\n    }\n    value() {\n        if (this._states[this._stateIdx] === 1 /* UriIteratorState.Scheme */) {\n            return this._value.scheme;\n        }\n        else if (this._states[this._stateIdx] === 2 /* UriIteratorState.Authority */) {\n            return this._value.authority;\n        }\n        else if (this._states[this._stateIdx] === 3 /* UriIteratorState.Path */) {\n            return this._pathIterator.value();\n        }\n        else if (this._states[this._stateIdx] === 4 /* UriIteratorState.Query */) {\n            return this._value.query;\n        }\n        else if (this._states[this._stateIdx] === 5 /* UriIteratorState.Fragment */) {\n            return this._value.fragment;\n        }\n        throw new Error();\n    }\n}\nclass TernarySearchTreeNode {\n    constructor() {\n        this.height = 1;\n    }\n    rotateLeft() {\n        const tmp = this.right;\n        this.right = tmp.left;\n        tmp.left = this;\n        this.updateHeight();\n        tmp.updateHeight();\n        return tmp;\n    }\n    rotateRight() {\n        const tmp = this.left;\n        this.left = tmp.right;\n        tmp.right = this;\n        this.updateHeight();\n        tmp.updateHeight();\n        return tmp;\n    }\n    updateHeight() {\n        this.height = 1 + Math.max(this.heightLeft, this.heightRight);\n    }\n    balanceFactor() {\n        return this.heightRight - this.heightLeft;\n    }\n    get heightLeft() {\n        var _a, _b;\n        return (_b = (_a = this.left) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0;\n    }\n    get heightRight() {\n        var _a, _b;\n        return (_b = (_a = this.right) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0;\n    }\n}\nexport class TernarySearchTree {\n    static forUris(ignorePathCasing = () => false, ignoreQueryAndFragment = () => false) {\n        return new TernarySearchTree(new UriIterator(ignorePathCasing, ignoreQueryAndFragment));\n    }\n    static forStrings() {\n        return new TernarySearchTree(new StringIterator());\n    }\n    static forConfigKeys() {\n        return new TernarySearchTree(new ConfigKeysIterator());\n    }\n    constructor(segments) {\n        this._iter = segments;\n    }\n    clear() {\n        this._root = undefined;\n    }\n    set(key, element) {\n        const iter = this._iter.reset(key);\n        let node;\n        if (!this._root) {\n            this._root = new TernarySearchTreeNode();\n            this._root.segment = iter.value();\n        }\n        const stack = [];\n        // find insert_node\n        node = this._root;\n        while (true) {\n            const val = iter.cmp(node.segment);\n            if (val > 0) {\n                // left\n                if (!node.left) {\n                    node.left = new TernarySearchTreeNode();\n                    node.left.segment = iter.value();\n                }\n                stack.push([-1 /* Dir.Left */, node]);\n                node = node.left;\n            }\n            else if (val < 0) {\n                // right\n                if (!node.right) {\n                    node.right = new TernarySearchTreeNode();\n                    node.right.segment = iter.value();\n                }\n                stack.push([1 /* Dir.Right */, node]);\n                node = node.right;\n            }\n            else if (iter.hasNext()) {\n                // mid\n                iter.next();\n                if (!node.mid) {\n                    node.mid = new TernarySearchTreeNode();\n                    node.mid.segment = iter.value();\n                }\n                stack.push([0 /* Dir.Mid */, node]);\n                node = node.mid;\n            }\n            else {\n                break;\n            }\n        }\n        // set value\n        const oldElement = node.value;\n        node.value = element;\n        node.key = key;\n        // balance\n        for (let i = stack.length - 1; i >= 0; i--) {\n            const node = stack[i][1];\n            node.updateHeight();\n            const bf = node.balanceFactor();\n            if (bf < -1 || bf > 1) {\n                // needs rotate\n                const d1 = stack[i][0];\n                const d2 = stack[i + 1][0];\n                if (d1 === 1 /* Dir.Right */ && d2 === 1 /* Dir.Right */) {\n                    //right, right -> rotate left\n                    stack[i][1] = node.rotateLeft();\n                }\n                else if (d1 === -1 /* Dir.Left */ && d2 === -1 /* Dir.Left */) {\n                    // left, left -> rotate right\n                    stack[i][1] = node.rotateRight();\n                }\n                else if (d1 === 1 /* Dir.Right */ && d2 === -1 /* Dir.Left */) {\n                    // right, left -> double rotate right, left\n                    node.right = stack[i + 1][1] = stack[i + 1][1].rotateRight();\n                    stack[i][1] = node.rotateLeft();\n                }\n                else if (d1 === -1 /* Dir.Left */ && d2 === 1 /* Dir.Right */) {\n                    // left, right -> double rotate left, right\n                    node.left = stack[i + 1][1] = stack[i + 1][1].rotateLeft();\n                    stack[i][1] = node.rotateRight();\n                }\n                else {\n                    throw new Error();\n                }\n                // patch path to parent\n                if (i > 0) {\n                    switch (stack[i - 1][0]) {\n                        case -1 /* Dir.Left */:\n                            stack[i - 1][1].left = stack[i][1];\n                            break;\n                        case 1 /* Dir.Right */:\n                            stack[i - 1][1].right = stack[i][1];\n                            break;\n                        case 0 /* Dir.Mid */:\n                            stack[i - 1][1].mid = stack[i][1];\n                            break;\n                    }\n                }\n                else {\n                    this._root = stack[0][1];\n                }\n            }\n        }\n        return oldElement;\n    }\n    get(key) {\n        var _a;\n        return (_a = this._getNode(key)) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    _getNode(key) {\n        const iter = this._iter.reset(key);\n        let node = this._root;\n        while (node) {\n            const val = iter.cmp(node.segment);\n            if (val > 0) {\n                // left\n                node = node.left;\n            }\n            else if (val < 0) {\n                // right\n                node = node.right;\n            }\n            else if (iter.hasNext()) {\n                // mid\n                iter.next();\n                node = node.mid;\n            }\n            else {\n                break;\n            }\n        }\n        return node;\n    }\n    has(key) {\n        const node = this._getNode(key);\n        return !((node === null || node === void 0 ? void 0 : node.value) === undefined && (node === null || node === void 0 ? void 0 : node.mid) === undefined);\n    }\n    delete(key) {\n        return this._delete(key, false);\n    }\n    deleteSuperstr(key) {\n        return this._delete(key, true);\n    }\n    _delete(key, superStr) {\n        var _a;\n        const iter = this._iter.reset(key);\n        const stack = [];\n        let node = this._root;\n        // find node\n        while (node) {\n            const val = iter.cmp(node.segment);\n            if (val > 0) {\n                // left\n                stack.push([-1 /* Dir.Left */, node]);\n                node = node.left;\n            }\n            else if (val < 0) {\n                // right\n                stack.push([1 /* Dir.Right */, node]);\n                node = node.right;\n            }\n            else if (iter.hasNext()) {\n                // mid\n                iter.next();\n                stack.push([0 /* Dir.Mid */, node]);\n                node = node.mid;\n            }\n            else {\n                break;\n            }\n        }\n        if (!node) {\n            // node not found\n            return;\n        }\n        if (superStr) {\n            // removing children, reset height\n            node.left = undefined;\n            node.mid = undefined;\n            node.right = undefined;\n            node.height = 1;\n        }\n        else {\n            // removing element\n            node.key = undefined;\n            node.value = undefined;\n        }\n        // BST node removal\n        if (!node.mid && !node.value) {\n            if (node.left && node.right) {\n                // full node\n                // replace deleted-node with the min-node of the right branch.\n                // If there is no true min-node leave things as they are\n                const min = this._min(node.right);\n                if (min.key) {\n                    const { key, value, segment } = min;\n                    this._delete(min.key, false);\n                    node.key = key;\n                    node.value = value;\n                    node.segment = segment;\n                }\n            }\n            else {\n                // empty or half empty\n                const newChild = (_a = node.left) !== null && _a !== void 0 ? _a : node.right;\n                if (stack.length > 0) {\n                    const [dir, parent] = stack[stack.length - 1];\n                    switch (dir) {\n                        case -1 /* Dir.Left */:\n                            parent.left = newChild;\n                            break;\n                        case 0 /* Dir.Mid */:\n                            parent.mid = newChild;\n                            break;\n                        case 1 /* Dir.Right */:\n                            parent.right = newChild;\n                            break;\n                    }\n                }\n                else {\n                    this._root = newChild;\n                }\n            }\n        }\n        // AVL balance\n        for (let i = stack.length - 1; i >= 0; i--) {\n            const node = stack[i][1];\n            node.updateHeight();\n            const bf = node.balanceFactor();\n            if (bf > 1) {\n                // right heavy\n                if (node.right.balanceFactor() >= 0) {\n                    // right, right -> rotate left\n                    stack[i][1] = node.rotateLeft();\n                }\n                else {\n                    // right, left -> double rotate\n                    node.right = node.right.rotateRight();\n                    stack[i][1] = node.rotateLeft();\n                }\n            }\n            else if (bf < -1) {\n                // left heavy\n                if (node.left.balanceFactor() <= 0) {\n                    // left, left -> rotate right\n                    stack[i][1] = node.rotateRight();\n                }\n                else {\n                    // left, right -> double rotate\n                    node.left = node.left.rotateLeft();\n                    stack[i][1] = node.rotateRight();\n                }\n            }\n            // patch path to parent\n            if (i > 0) {\n                switch (stack[i - 1][0]) {\n                    case -1 /* Dir.Left */:\n                        stack[i - 1][1].left = stack[i][1];\n                        break;\n                    case 1 /* Dir.Right */:\n                        stack[i - 1][1].right = stack[i][1];\n                        break;\n                    case 0 /* Dir.Mid */:\n                        stack[i - 1][1].mid = stack[i][1];\n                        break;\n                }\n            }\n            else {\n                this._root = stack[0][1];\n            }\n        }\n    }\n    _min(node) {\n        while (node.left) {\n            node = node.left;\n        }\n        return node;\n    }\n    findSubstr(key) {\n        const iter = this._iter.reset(key);\n        let node = this._root;\n        let candidate = undefined;\n        while (node) {\n            const val = iter.cmp(node.segment);\n            if (val > 0) {\n                // left\n                node = node.left;\n            }\n            else if (val < 0) {\n                // right\n                node = node.right;\n            }\n            else if (iter.hasNext()) {\n                // mid\n                iter.next();\n                candidate = node.value || candidate;\n                node = node.mid;\n            }\n            else {\n                break;\n            }\n        }\n        return node && node.value || candidate;\n    }\n    findSuperstr(key) {\n        return this._findSuperstrOrElement(key, false);\n    }\n    _findSuperstrOrElement(key, allowValue) {\n        const iter = this._iter.reset(key);\n        let node = this._root;\n        while (node) {\n            const val = iter.cmp(node.segment);\n            if (val > 0) {\n                // left\n                node = node.left;\n            }\n            else if (val < 0) {\n                // right\n                node = node.right;\n            }\n            else if (iter.hasNext()) {\n                // mid\n                iter.next();\n                node = node.mid;\n            }\n            else {\n                // collect\n                if (!node.mid) {\n                    if (allowValue) {\n                        return node.value;\n                    }\n                    else {\n                        return undefined;\n                    }\n                }\n                else {\n                    return this._entries(node.mid);\n                }\n            }\n        }\n        return undefined;\n    }\n    forEach(callback) {\n        for (const [key, value] of this) {\n            callback(value, key);\n        }\n    }\n    *[Symbol.iterator]() {\n        yield* this._entries(this._root);\n    }\n    _entries(node) {\n        const result = [];\n        this._dfsEntries(node, result);\n        return result[Symbol.iterator]();\n    }\n    _dfsEntries(node, bucket) {\n        // DFS\n        if (!node) {\n            return;\n        }\n        if (node.left) {\n            this._dfsEntries(node.left, bucket);\n        }\n        if (node.value) {\n            bucket.push([node.key, node.value]);\n        }\n        if (node.mid) {\n            this._dfsEntries(node.mid, bucket);\n        }\n        if (node.right) {\n            this._dfsEntries(node.right, bucket);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}