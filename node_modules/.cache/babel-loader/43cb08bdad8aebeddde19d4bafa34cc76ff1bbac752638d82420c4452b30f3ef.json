{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE } from '../../../base/common/keyCodes.js';\nimport { KeyCodeChord } from '../../../base/common/keybindings.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\nimport { toEmptyArrayIfContainsNull } from './resolvedKeybindingItem.js';\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nexport var USLayoutResolvedKeybinding = /*#__PURE__*/function (_BaseResolvedKeybindi) {\n  function USLayoutResolvedKeybinding(chords, os) {\n    _classCallCheck(this, USLayoutResolvedKeybinding);\n    return _callSuper(this, USLayoutResolvedKeybinding, [os, chords]);\n  }\n  _inherits(USLayoutResolvedKeybinding, _BaseResolvedKeybindi);\n  return _createClass(USLayoutResolvedKeybinding, [{\n    key: \"_keyCodeToUILabel\",\n    value: function _keyCodeToUILabel(keyCode) {\n      if (this._os === 2 /* OperatingSystem.Macintosh */) {\n        switch (keyCode) {\n          case 15 /* KeyCode.LeftArrow */:\n            return '←';\n          case 16 /* KeyCode.UpArrow */:\n            return '↑';\n          case 17 /* KeyCode.RightArrow */:\n            return '→';\n          case 18 /* KeyCode.DownArrow */:\n            return '↓';\n        }\n      }\n      return KeyCodeUtils.toString(keyCode);\n    }\n  }, {\n    key: \"_getLabel\",\n    value: function _getLabel(chord) {\n      if (chord.isDuplicateModifierCase()) {\n        return '';\n      }\n      return this._keyCodeToUILabel(chord.keyCode);\n    }\n  }, {\n    key: \"_getAriaLabel\",\n    value: function _getAriaLabel(chord) {\n      if (chord.isDuplicateModifierCase()) {\n        return '';\n      }\n      return KeyCodeUtils.toString(chord.keyCode);\n    }\n  }, {\n    key: \"_getElectronAccelerator\",\n    value: function _getElectronAccelerator(chord) {\n      return KeyCodeUtils.toElectronAccelerator(chord.keyCode);\n    }\n  }, {\n    key: \"_getUserSettingsLabel\",\n    value: function _getUserSettingsLabel(chord) {\n      if (chord.isDuplicateModifierCase()) {\n        return '';\n      }\n      var result = KeyCodeUtils.toUserSettingsUS(chord.keyCode);\n      return result ? result.toLowerCase() : result;\n    }\n  }, {\n    key: \"_getChordDispatch\",\n    value: function _getChordDispatch(chord) {\n      return USLayoutResolvedKeybinding.getDispatchStr(chord);\n    }\n  }, {\n    key: \"_getSingleModifierChordDispatch\",\n    value: function _getSingleModifierChordDispatch(keybinding) {\n      if (keybinding.keyCode === 5 /* KeyCode.Ctrl */ && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n        return 'ctrl';\n      }\n      if (keybinding.keyCode === 4 /* KeyCode.Shift */ && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n        return 'shift';\n      }\n      if (keybinding.keyCode === 6 /* KeyCode.Alt */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n        return 'alt';\n      }\n      if (keybinding.keyCode === 57 /* KeyCode.Meta */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n        return 'meta';\n      }\n      return null;\n    }\n    /**\n     * *NOTE*: Check return value for `KeyCode.Unknown`.\n     */\n  }], [{\n    key: \"getDispatchStr\",\n    value: function getDispatchStr(chord) {\n      if (chord.isModifierKey()) {\n        return null;\n      }\n      var result = '';\n      if (chord.ctrlKey) {\n        result += 'ctrl+';\n      }\n      if (chord.shiftKey) {\n        result += 'shift+';\n      }\n      if (chord.altKey) {\n        result += 'alt+';\n      }\n      if (chord.metaKey) {\n        result += 'meta+';\n      }\n      result += KeyCodeUtils.toString(chord.keyCode);\n      return result;\n    }\n  }, {\n    key: \"_scanCodeToKeyCode\",\n    value: function _scanCodeToKeyCode(scanCode) {\n      var immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n      if (immutableKeyCode !== -1 /* KeyCode.DependsOnKbLayout */) {\n        return immutableKeyCode;\n      }\n      switch (scanCode) {\n        case 10 /* ScanCode.KeyA */:\n          return 31 /* KeyCode.KeyA */;\n        case 11 /* ScanCode.KeyB */:\n          return 32 /* KeyCode.KeyB */;\n        case 12 /* ScanCode.KeyC */:\n          return 33 /* KeyCode.KeyC */;\n        case 13 /* ScanCode.KeyD */:\n          return 34 /* KeyCode.KeyD */;\n        case 14 /* ScanCode.KeyE */:\n          return 35 /* KeyCode.KeyE */;\n        case 15 /* ScanCode.KeyF */:\n          return 36 /* KeyCode.KeyF */;\n        case 16 /* ScanCode.KeyG */:\n          return 37 /* KeyCode.KeyG */;\n        case 17 /* ScanCode.KeyH */:\n          return 38 /* KeyCode.KeyH */;\n        case 18 /* ScanCode.KeyI */:\n          return 39 /* KeyCode.KeyI */;\n        case 19 /* ScanCode.KeyJ */:\n          return 40 /* KeyCode.KeyJ */;\n        case 20 /* ScanCode.KeyK */:\n          return 41 /* KeyCode.KeyK */;\n        case 21 /* ScanCode.KeyL */:\n          return 42 /* KeyCode.KeyL */;\n        case 22 /* ScanCode.KeyM */:\n          return 43 /* KeyCode.KeyM */;\n        case 23 /* ScanCode.KeyN */:\n          return 44 /* KeyCode.KeyN */;\n        case 24 /* ScanCode.KeyO */:\n          return 45 /* KeyCode.KeyO */;\n        case 25 /* ScanCode.KeyP */:\n          return 46 /* KeyCode.KeyP */;\n        case 26 /* ScanCode.KeyQ */:\n          return 47 /* KeyCode.KeyQ */;\n        case 27 /* ScanCode.KeyR */:\n          return 48 /* KeyCode.KeyR */;\n        case 28 /* ScanCode.KeyS */:\n          return 49 /* KeyCode.KeyS */;\n        case 29 /* ScanCode.KeyT */:\n          return 50 /* KeyCode.KeyT */;\n        case 30 /* ScanCode.KeyU */:\n          return 51 /* KeyCode.KeyU */;\n        case 31 /* ScanCode.KeyV */:\n          return 52 /* KeyCode.KeyV */;\n        case 32 /* ScanCode.KeyW */:\n          return 53 /* KeyCode.KeyW */;\n        case 33 /* ScanCode.KeyX */:\n          return 54 /* KeyCode.KeyX */;\n        case 34 /* ScanCode.KeyY */:\n          return 55 /* KeyCode.KeyY */;\n        case 35 /* ScanCode.KeyZ */:\n          return 56 /* KeyCode.KeyZ */;\n        case 36 /* ScanCode.Digit1 */:\n          return 22 /* KeyCode.Digit1 */;\n        case 37 /* ScanCode.Digit2 */:\n          return 23 /* KeyCode.Digit2 */;\n        case 38 /* ScanCode.Digit3 */:\n          return 24 /* KeyCode.Digit3 */;\n        case 39 /* ScanCode.Digit4 */:\n          return 25 /* KeyCode.Digit4 */;\n        case 40 /* ScanCode.Digit5 */:\n          return 26 /* KeyCode.Digit5 */;\n        case 41 /* ScanCode.Digit6 */:\n          return 27 /* KeyCode.Digit6 */;\n        case 42 /* ScanCode.Digit7 */:\n          return 28 /* KeyCode.Digit7 */;\n        case 43 /* ScanCode.Digit8 */:\n          return 29 /* KeyCode.Digit8 */;\n        case 44 /* ScanCode.Digit9 */:\n          return 30 /* KeyCode.Digit9 */;\n        case 45 /* ScanCode.Digit0 */:\n          return 21 /* KeyCode.Digit0 */;\n        case 51 /* ScanCode.Minus */:\n          return 88 /* KeyCode.Minus */;\n        case 52 /* ScanCode.Equal */:\n          return 86 /* KeyCode.Equal */;\n        case 53 /* ScanCode.BracketLeft */:\n          return 92 /* KeyCode.BracketLeft */;\n        case 54 /* ScanCode.BracketRight */:\n          return 94 /* KeyCode.BracketRight */;\n        case 55 /* ScanCode.Backslash */:\n          return 93 /* KeyCode.Backslash */;\n        case 56 /* ScanCode.IntlHash */:\n          return 0 /* KeyCode.Unknown */;\n        // missing\n        case 57 /* ScanCode.Semicolon */:\n          return 85 /* KeyCode.Semicolon */;\n        case 58 /* ScanCode.Quote */:\n          return 95 /* KeyCode.Quote */;\n        case 59 /* ScanCode.Backquote */:\n          return 91 /* KeyCode.Backquote */;\n        case 60 /* ScanCode.Comma */:\n          return 87 /* KeyCode.Comma */;\n        case 61 /* ScanCode.Period */:\n          return 89 /* KeyCode.Period */;\n        case 62 /* ScanCode.Slash */:\n          return 90 /* KeyCode.Slash */;\n        case 106 /* ScanCode.IntlBackslash */:\n          return 97 /* KeyCode.IntlBackslash */;\n      }\n      return 0 /* KeyCode.Unknown */;\n    }\n  }, {\n    key: \"_toKeyCodeChord\",\n    value: function _toKeyCodeChord(chord) {\n      if (!chord) {\n        return null;\n      }\n      if (chord instanceof KeyCodeChord) {\n        return chord;\n      }\n      var keyCode = this._scanCodeToKeyCode(chord.scanCode);\n      if (keyCode === 0 /* KeyCode.Unknown */) {\n        return null;\n      }\n      return new KeyCodeChord(chord.ctrlKey, chord.shiftKey, chord.altKey, chord.metaKey, keyCode);\n    }\n  }, {\n    key: \"resolveKeybinding\",\n    value: function resolveKeybinding(keybinding, os) {\n      var _this = this;\n      var chords = toEmptyArrayIfContainsNull(keybinding.chords.map(function (chord) {\n        return _this._toKeyCodeChord(chord);\n      }));\n      if (chords.length > 0) {\n        return [new USLayoutResolvedKeybinding(chords, os)];\n      }\n      return [];\n    }\n  }]);\n}(BaseResolvedKeybinding);","map":{"version":3,"names":["KeyCodeUtils","IMMUTABLE_CODE_TO_KEY_CODE","KeyCodeChord","BaseResolvedKeybinding","toEmptyArrayIfContainsNull","USLayoutResolvedKeybinding","_BaseResolvedKeybindi","chords","os","_classCallCheck","_callSuper","_inherits","_createClass","key","value","_keyCodeToUILabel","keyCode","_os","toString","_getLabel","chord","isDuplicateModifierCase","_getAriaLabel","_getElectronAccelerator","toElectronAccelerator","_getUserSettingsLabel","result","toUserSettingsUS","toLowerCase","_getChordDispatch","getDispatchStr","_getSingleModifierChordDispatch","keybinding","shiftKey","altKey","metaKey","ctrlKey","isModifierKey","_scanCodeToKeyCode","scanCode","immutableKeyCode","_toKeyCodeChord","resolveKeybinding","_this","map","length"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/platform/keybinding/common/usLayoutResolvedKeybinding.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE } from '../../../base/common/keyCodes.js';\nimport { KeyCodeChord } from '../../../base/common/keybindings.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\nimport { toEmptyArrayIfContainsNull } from './resolvedKeybindingItem.js';\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\nexport class USLayoutResolvedKeybinding extends BaseResolvedKeybinding {\n    constructor(chords, os) {\n        super(os, chords);\n    }\n    _keyCodeToUILabel(keyCode) {\n        if (this._os === 2 /* OperatingSystem.Macintosh */) {\n            switch (keyCode) {\n                case 15 /* KeyCode.LeftArrow */:\n                    return '←';\n                case 16 /* KeyCode.UpArrow */:\n                    return '↑';\n                case 17 /* KeyCode.RightArrow */:\n                    return '→';\n                case 18 /* KeyCode.DownArrow */:\n                    return '↓';\n            }\n        }\n        return KeyCodeUtils.toString(keyCode);\n    }\n    _getLabel(chord) {\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        return this._keyCodeToUILabel(chord.keyCode);\n    }\n    _getAriaLabel(chord) {\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        return KeyCodeUtils.toString(chord.keyCode);\n    }\n    _getElectronAccelerator(chord) {\n        return KeyCodeUtils.toElectronAccelerator(chord.keyCode);\n    }\n    _getUserSettingsLabel(chord) {\n        if (chord.isDuplicateModifierCase()) {\n            return '';\n        }\n        const result = KeyCodeUtils.toUserSettingsUS(chord.keyCode);\n        return (result ? result.toLowerCase() : result);\n    }\n    _getChordDispatch(chord) {\n        return USLayoutResolvedKeybinding.getDispatchStr(chord);\n    }\n    static getDispatchStr(chord) {\n        if (chord.isModifierKey()) {\n            return null;\n        }\n        let result = '';\n        if (chord.ctrlKey) {\n            result += 'ctrl+';\n        }\n        if (chord.shiftKey) {\n            result += 'shift+';\n        }\n        if (chord.altKey) {\n            result += 'alt+';\n        }\n        if (chord.metaKey) {\n            result += 'meta+';\n        }\n        result += KeyCodeUtils.toString(chord.keyCode);\n        return result;\n    }\n    _getSingleModifierChordDispatch(keybinding) {\n        if (keybinding.keyCode === 5 /* KeyCode.Ctrl */ && !keybinding.shiftKey && !keybinding.altKey && !keybinding.metaKey) {\n            return 'ctrl';\n        }\n        if (keybinding.keyCode === 4 /* KeyCode.Shift */ && !keybinding.ctrlKey && !keybinding.altKey && !keybinding.metaKey) {\n            return 'shift';\n        }\n        if (keybinding.keyCode === 6 /* KeyCode.Alt */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.metaKey) {\n            return 'alt';\n        }\n        if (keybinding.keyCode === 57 /* KeyCode.Meta */ && !keybinding.ctrlKey && !keybinding.shiftKey && !keybinding.altKey) {\n            return 'meta';\n        }\n        return null;\n    }\n    /**\n     * *NOTE*: Check return value for `KeyCode.Unknown`.\n     */\n    static _scanCodeToKeyCode(scanCode) {\n        const immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n        if (immutableKeyCode !== -1 /* KeyCode.DependsOnKbLayout */) {\n            return immutableKeyCode;\n        }\n        switch (scanCode) {\n            case 10 /* ScanCode.KeyA */: return 31 /* KeyCode.KeyA */;\n            case 11 /* ScanCode.KeyB */: return 32 /* KeyCode.KeyB */;\n            case 12 /* ScanCode.KeyC */: return 33 /* KeyCode.KeyC */;\n            case 13 /* ScanCode.KeyD */: return 34 /* KeyCode.KeyD */;\n            case 14 /* ScanCode.KeyE */: return 35 /* KeyCode.KeyE */;\n            case 15 /* ScanCode.KeyF */: return 36 /* KeyCode.KeyF */;\n            case 16 /* ScanCode.KeyG */: return 37 /* KeyCode.KeyG */;\n            case 17 /* ScanCode.KeyH */: return 38 /* KeyCode.KeyH */;\n            case 18 /* ScanCode.KeyI */: return 39 /* KeyCode.KeyI */;\n            case 19 /* ScanCode.KeyJ */: return 40 /* KeyCode.KeyJ */;\n            case 20 /* ScanCode.KeyK */: return 41 /* KeyCode.KeyK */;\n            case 21 /* ScanCode.KeyL */: return 42 /* KeyCode.KeyL */;\n            case 22 /* ScanCode.KeyM */: return 43 /* KeyCode.KeyM */;\n            case 23 /* ScanCode.KeyN */: return 44 /* KeyCode.KeyN */;\n            case 24 /* ScanCode.KeyO */: return 45 /* KeyCode.KeyO */;\n            case 25 /* ScanCode.KeyP */: return 46 /* KeyCode.KeyP */;\n            case 26 /* ScanCode.KeyQ */: return 47 /* KeyCode.KeyQ */;\n            case 27 /* ScanCode.KeyR */: return 48 /* KeyCode.KeyR */;\n            case 28 /* ScanCode.KeyS */: return 49 /* KeyCode.KeyS */;\n            case 29 /* ScanCode.KeyT */: return 50 /* KeyCode.KeyT */;\n            case 30 /* ScanCode.KeyU */: return 51 /* KeyCode.KeyU */;\n            case 31 /* ScanCode.KeyV */: return 52 /* KeyCode.KeyV */;\n            case 32 /* ScanCode.KeyW */: return 53 /* KeyCode.KeyW */;\n            case 33 /* ScanCode.KeyX */: return 54 /* KeyCode.KeyX */;\n            case 34 /* ScanCode.KeyY */: return 55 /* KeyCode.KeyY */;\n            case 35 /* ScanCode.KeyZ */: return 56 /* KeyCode.KeyZ */;\n            case 36 /* ScanCode.Digit1 */: return 22 /* KeyCode.Digit1 */;\n            case 37 /* ScanCode.Digit2 */: return 23 /* KeyCode.Digit2 */;\n            case 38 /* ScanCode.Digit3 */: return 24 /* KeyCode.Digit3 */;\n            case 39 /* ScanCode.Digit4 */: return 25 /* KeyCode.Digit4 */;\n            case 40 /* ScanCode.Digit5 */: return 26 /* KeyCode.Digit5 */;\n            case 41 /* ScanCode.Digit6 */: return 27 /* KeyCode.Digit6 */;\n            case 42 /* ScanCode.Digit7 */: return 28 /* KeyCode.Digit7 */;\n            case 43 /* ScanCode.Digit8 */: return 29 /* KeyCode.Digit8 */;\n            case 44 /* ScanCode.Digit9 */: return 30 /* KeyCode.Digit9 */;\n            case 45 /* ScanCode.Digit0 */: return 21 /* KeyCode.Digit0 */;\n            case 51 /* ScanCode.Minus */: return 88 /* KeyCode.Minus */;\n            case 52 /* ScanCode.Equal */: return 86 /* KeyCode.Equal */;\n            case 53 /* ScanCode.BracketLeft */: return 92 /* KeyCode.BracketLeft */;\n            case 54 /* ScanCode.BracketRight */: return 94 /* KeyCode.BracketRight */;\n            case 55 /* ScanCode.Backslash */: return 93 /* KeyCode.Backslash */;\n            case 56 /* ScanCode.IntlHash */: return 0 /* KeyCode.Unknown */; // missing\n            case 57 /* ScanCode.Semicolon */: return 85 /* KeyCode.Semicolon */;\n            case 58 /* ScanCode.Quote */: return 95 /* KeyCode.Quote */;\n            case 59 /* ScanCode.Backquote */: return 91 /* KeyCode.Backquote */;\n            case 60 /* ScanCode.Comma */: return 87 /* KeyCode.Comma */;\n            case 61 /* ScanCode.Period */: return 89 /* KeyCode.Period */;\n            case 62 /* ScanCode.Slash */: return 90 /* KeyCode.Slash */;\n            case 106 /* ScanCode.IntlBackslash */: return 97 /* KeyCode.IntlBackslash */;\n        }\n        return 0 /* KeyCode.Unknown */;\n    }\n    static _toKeyCodeChord(chord) {\n        if (!chord) {\n            return null;\n        }\n        if (chord instanceof KeyCodeChord) {\n            return chord;\n        }\n        const keyCode = this._scanCodeToKeyCode(chord.scanCode);\n        if (keyCode === 0 /* KeyCode.Unknown */) {\n            return null;\n        }\n        return new KeyCodeChord(chord.ctrlKey, chord.shiftKey, chord.altKey, chord.metaKey, keyCode);\n    }\n    static resolveKeybinding(keybinding, os) {\n        const chords = toEmptyArrayIfContainsNull(keybinding.chords.map(chord => this._toKeyCodeChord(chord)));\n        if (chords.length > 0) {\n            return [new USLayoutResolvedKeybinding(chords, os)];\n        }\n        return [];\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}