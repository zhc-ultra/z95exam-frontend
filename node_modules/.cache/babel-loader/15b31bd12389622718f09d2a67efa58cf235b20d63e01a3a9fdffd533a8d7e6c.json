{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.function.name.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { localize } from '../../../nls.js';\nimport { basename } from '../../../base/common/path.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport var IWorkspaceContextService = createDecorator('contextService');\nexport function isSingleFolderWorkspaceIdentifier(obj) {\n  var singleFolderIdentifier = obj;\n  return typeof (singleFolderIdentifier === null || singleFolderIdentifier === void 0 ? void 0 : singleFolderIdentifier.id) === 'string' && URI.isUri(singleFolderIdentifier.uri);\n}\nexport function isEmptyWorkspaceIdentifier(obj) {\n  var emptyWorkspaceIdentifier = obj;\n  return typeof (emptyWorkspaceIdentifier === null || emptyWorkspaceIdentifier === void 0 ? void 0 : emptyWorkspaceIdentifier.id) === 'string' && !isSingleFolderWorkspaceIdentifier(obj) && !isWorkspaceIdentifier(obj);\n}\nexport var EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE = {\n  id: 'ext-dev'\n};\nexport var UNKNOWN_EMPTY_WINDOW_WORKSPACE = {\n  id: 'empty-window'\n};\nexport function toWorkspaceIdentifier(arg0, isExtensionDevelopment) {\n  // Empty workspace\n  if (typeof arg0 === 'string' || typeof arg0 === 'undefined') {\n    // With a backupPath, the basename is the empty workspace identifier\n    if (typeof arg0 === 'string') {\n      return {\n        id: basename(arg0)\n      };\n    }\n    // Extension development empty windows have backups disabled\n    // so we return a constant workspace identifier for extension\n    // authors to allow to restore their workspace state even then.\n    if (isExtensionDevelopment) {\n      return EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE;\n    }\n    return UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n  }\n  // Multi root\n  var workspace = arg0;\n  if (workspace.configuration) {\n    return {\n      id: workspace.id,\n      configPath: workspace.configuration\n    };\n  }\n  // Single folder\n  if (workspace.folders.length === 1) {\n    return {\n      id: workspace.id,\n      uri: workspace.folders[0].uri\n    };\n  }\n  // Empty window\n  return {\n    id: workspace.id\n  };\n}\nexport function isWorkspaceIdentifier(obj) {\n  var workspaceIdentifier = obj;\n  return typeof (workspaceIdentifier === null || workspaceIdentifier === void 0 ? void 0 : workspaceIdentifier.id) === 'string' && URI.isUri(workspaceIdentifier.configPath);\n}\nexport var Workspace = /*#__PURE__*/function () {\n  function Workspace(_id, folders, _transient, _configuration, _ignorePathCasing) {\n    _classCallCheck(this, Workspace);\n    this._id = _id;\n    this._transient = _transient;\n    this._configuration = _configuration;\n    this._ignorePathCasing = _ignorePathCasing;\n    this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, function () {\n      return true;\n    });\n    this.folders = folders;\n  }\n  return _createClass(Workspace, [{\n    key: \"folders\",\n    get: function get() {\n      return this._folders;\n    },\n    set: function set(folders) {\n      this._folders = folders;\n      this.updateFoldersMap();\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }, {\n    key: \"transient\",\n    get: function get() {\n      return this._transient;\n    }\n  }, {\n    key: \"configuration\",\n    get: function get() {\n      return this._configuration;\n    },\n    set: function set(configuration) {\n      this._configuration = configuration;\n    }\n  }, {\n    key: \"getFolder\",\n    value: function getFolder(resource) {\n      if (!resource) {\n        return null;\n      }\n      return this._foldersMap.findSubstr(resource) || null;\n    }\n  }, {\n    key: \"updateFoldersMap\",\n    value: function updateFoldersMap() {\n      this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, function () {\n        return true;\n      });\n      var _iterator = _createForOfIteratorHelper(this.folders),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var folder = _step.value;\n          this._foldersMap.set(folder.uri, folder);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        id: this.id,\n        folders: this.folders,\n        \"transient\": this[\"transient\"],\n        configuration: this.configuration\n      };\n    }\n  }]);\n}();\nexport var WorkspaceFolder = /*#__PURE__*/function () {\n  function WorkspaceFolder(data,\n  /**\n   * Provides access to the original metadata for this workspace\n   * folder. This can be different from the metadata provided in\n   * this class:\n   * - raw paths can be relative\n   * - raw paths are not normalized\n   */\n  raw) {\n    _classCallCheck(this, WorkspaceFolder);\n    this.raw = raw;\n    this.uri = data.uri;\n    this.index = data.index;\n    this.name = data.name;\n  }\n  return _createClass(WorkspaceFolder, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        uri: this.uri,\n        name: this.name,\n        index: this.index\n      };\n    }\n  }]);\n}();\nexport var WORKSPACE_EXTENSION = 'code-workspace';\nexport var WORKSPACE_FILTER = [{\n  name: localize('codeWorkspace', \"Code Workspace\"),\n  extensions: [WORKSPACE_EXTENSION]\n}];\nexport var STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';\nexport function isStandaloneEditorWorkspace(workspace) {\n  return workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;\n}","map":{"version":3,"names":["localize","basename","TernarySearchTree","URI","createDecorator","IWorkspaceContextService","isSingleFolderWorkspaceIdentifier","obj","singleFolderIdentifier","id","isUri","uri","isEmptyWorkspaceIdentifier","emptyWorkspaceIdentifier","isWorkspaceIdentifier","EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE","UNKNOWN_EMPTY_WINDOW_WORKSPACE","toWorkspaceIdentifier","arg0","isExtensionDevelopment","workspace","configuration","configPath","folders","length","workspaceIdentifier","Workspace","_id","_transient","_configuration","_ignorePathCasing","_classCallCheck","_foldersMap","forUris","_createClass","key","get","_folders","set","updateFoldersMap","value","getFolder","resource","findSubstr","_iterator","_createForOfIteratorHelper","_step","s","n","done","folder","err","e","f","toJSON","WorkspaceFolder","data","raw","index","name","WORKSPACE_EXTENSION","WORKSPACE_FILTER","extensions","STANDALONE_EDITOR_WORKSPACE_ID","isStandaloneEditorWorkspace"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/platform/workspace/common/workspace.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { localize } from '../../../nls.js';\nimport { basename } from '../../../base/common/path.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nexport const IWorkspaceContextService = createDecorator('contextService');\nexport function isSingleFolderWorkspaceIdentifier(obj) {\n    const singleFolderIdentifier = obj;\n    return typeof (singleFolderIdentifier === null || singleFolderIdentifier === void 0 ? void 0 : singleFolderIdentifier.id) === 'string' && URI.isUri(singleFolderIdentifier.uri);\n}\nexport function isEmptyWorkspaceIdentifier(obj) {\n    const emptyWorkspaceIdentifier = obj;\n    return typeof (emptyWorkspaceIdentifier === null || emptyWorkspaceIdentifier === void 0 ? void 0 : emptyWorkspaceIdentifier.id) === 'string'\n        && !isSingleFolderWorkspaceIdentifier(obj)\n        && !isWorkspaceIdentifier(obj);\n}\nexport const EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE = { id: 'ext-dev' };\nexport const UNKNOWN_EMPTY_WINDOW_WORKSPACE = { id: 'empty-window' };\nexport function toWorkspaceIdentifier(arg0, isExtensionDevelopment) {\n    // Empty workspace\n    if (typeof arg0 === 'string' || typeof arg0 === 'undefined') {\n        // With a backupPath, the basename is the empty workspace identifier\n        if (typeof arg0 === 'string') {\n            return {\n                id: basename(arg0)\n            };\n        }\n        // Extension development empty windows have backups disabled\n        // so we return a constant workspace identifier for extension\n        // authors to allow to restore their workspace state even then.\n        if (isExtensionDevelopment) {\n            return EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE;\n        }\n        return UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n    }\n    // Multi root\n    const workspace = arg0;\n    if (workspace.configuration) {\n        return {\n            id: workspace.id,\n            configPath: workspace.configuration\n        };\n    }\n    // Single folder\n    if (workspace.folders.length === 1) {\n        return {\n            id: workspace.id,\n            uri: workspace.folders[0].uri\n        };\n    }\n    // Empty window\n    return {\n        id: workspace.id\n    };\n}\nexport function isWorkspaceIdentifier(obj) {\n    const workspaceIdentifier = obj;\n    return typeof (workspaceIdentifier === null || workspaceIdentifier === void 0 ? void 0 : workspaceIdentifier.id) === 'string' && URI.isUri(workspaceIdentifier.configPath);\n}\nexport class Workspace {\n    constructor(_id, folders, _transient, _configuration, _ignorePathCasing) {\n        this._id = _id;\n        this._transient = _transient;\n        this._configuration = _configuration;\n        this._ignorePathCasing = _ignorePathCasing;\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n        this.folders = folders;\n    }\n    get folders() {\n        return this._folders;\n    }\n    set folders(folders) {\n        this._folders = folders;\n        this.updateFoldersMap();\n    }\n    get id() {\n        return this._id;\n    }\n    get transient() {\n        return this._transient;\n    }\n    get configuration() {\n        return this._configuration;\n    }\n    set configuration(configuration) {\n        this._configuration = configuration;\n    }\n    getFolder(resource) {\n        if (!resource) {\n            return null;\n        }\n        return this._foldersMap.findSubstr(resource) || null;\n    }\n    updateFoldersMap() {\n        this._foldersMap = TernarySearchTree.forUris(this._ignorePathCasing, () => true);\n        for (const folder of this.folders) {\n            this._foldersMap.set(folder.uri, folder);\n        }\n    }\n    toJSON() {\n        return { id: this.id, folders: this.folders, transient: this.transient, configuration: this.configuration };\n    }\n}\nexport class WorkspaceFolder {\n    constructor(data, \n    /**\n     * Provides access to the original metadata for this workspace\n     * folder. This can be different from the metadata provided in\n     * this class:\n     * - raw paths can be relative\n     * - raw paths are not normalized\n     */\n    raw) {\n        this.raw = raw;\n        this.uri = data.uri;\n        this.index = data.index;\n        this.name = data.name;\n    }\n    toJSON() {\n        return { uri: this.uri, name: this.name, index: this.index };\n    }\n}\nexport const WORKSPACE_EXTENSION = 'code-workspace';\nexport const WORKSPACE_FILTER = [{ name: localize('codeWorkspace', \"Code Workspace\"), extensions: [WORKSPACE_EXTENSION] }];\nexport const STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';\nexport function isStandaloneEditorWorkspace(workspace) {\n    return workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}