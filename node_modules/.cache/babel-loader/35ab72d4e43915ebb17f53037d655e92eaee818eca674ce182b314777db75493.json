{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.parse-float.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var BasicInplaceReplace = /*#__PURE__*/function () {\n  function BasicInplaceReplace() {\n    _classCallCheck(this, BasicInplaceReplace);\n    this._defaultValueSet = [['true', 'false'], ['True', 'False'], ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'], ['public', 'protected', 'private']];\n  }\n  return _createClass(BasicInplaceReplace, [{\n    key: \"navigateValueSet\",\n    value: function navigateValueSet(range1, text1, range2, text2, up) {\n      if (range1 && text1) {\n        var result = this.doNavigateValueSet(text1, up);\n        if (result) {\n          return {\n            range: range1,\n            value: result\n          };\n        }\n      }\n      if (range2 && text2) {\n        var _result = this.doNavigateValueSet(text2, up);\n        if (_result) {\n          return {\n            range: range2,\n            value: _result\n          };\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"doNavigateValueSet\",\n    value: function doNavigateValueSet(text, up) {\n      var numberResult = this.numberReplace(text, up);\n      if (numberResult !== null) {\n        return numberResult;\n      }\n      return this.textReplace(text, up);\n    }\n  }, {\n    key: \"numberReplace\",\n    value: function numberReplace(value, up) {\n      var precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n      var n1 = Number(value);\n      var n2 = parseFloat(value);\n      if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n        if (n1 === 0 && !up) {\n          return null; // don't do negative\n          //\t\t\t} else if(n1 === 9 && up) {\n          //\t\t\t\treturn null; // don't insert 10 into a number\n        } else {\n          n1 = Math.floor(n1 * precision);\n          n1 += up ? precision : -precision;\n          return String(n1 / precision);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"textReplace\",\n    value: function textReplace(value, up) {\n      return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n  }, {\n    key: \"valueSetsReplace\",\n    value: function valueSetsReplace(valueSets, value, up) {\n      var result = null;\n      for (var i = 0, len = valueSets.length; result === null && i < len; i++) {\n        result = this.valueSetReplace(valueSets[i], value, up);\n      }\n      return result;\n    }\n  }, {\n    key: \"valueSetReplace\",\n    value: function valueSetReplace(valueSet, value, up) {\n      var idx = valueSet.indexOf(value);\n      if (idx >= 0) {\n        idx += up ? +1 : -1;\n        if (idx < 0) {\n          idx = valueSet.length - 1;\n        } else {\n          idx %= valueSet.length;\n        }\n        return valueSet[idx];\n      }\n      return null;\n    }\n  }]);\n}();\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();","map":{"version":3,"names":["BasicInplaceReplace","_classCallCheck","_defaultValueSet","_createClass","key","value","navigateValueSet","range1","text1","range2","text2","up","result","doNavigateValueSet","range","text","numberResult","numberReplace","textReplace","precision","Math","pow","length","lastIndexOf","n1","Number","n2","parseFloat","isNaN","floor","String","valueSetsReplace","valueSets","i","len","valueSetReplace","valueSet","idx","indexOf","INSTANCE"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/inplaceReplaceSupport.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport class BasicInplaceReplace {\n    constructor() {\n        this._defaultValueSet = [\n            ['true', 'false'],\n            ['True', 'False'],\n            ['Private', 'Public', 'Friend', 'ReadOnly', 'Partial', 'Protected', 'WriteOnly'],\n            ['public', 'protected', 'private'],\n        ];\n    }\n    navigateValueSet(range1, text1, range2, text2, up) {\n        if (range1 && text1) {\n            const result = this.doNavigateValueSet(text1, up);\n            if (result) {\n                return {\n                    range: range1,\n                    value: result\n                };\n            }\n        }\n        if (range2 && text2) {\n            const result = this.doNavigateValueSet(text2, up);\n            if (result) {\n                return {\n                    range: range2,\n                    value: result\n                };\n            }\n        }\n        return null;\n    }\n    doNavigateValueSet(text, up) {\n        const numberResult = this.numberReplace(text, up);\n        if (numberResult !== null) {\n            return numberResult;\n        }\n        return this.textReplace(text, up);\n    }\n    numberReplace(value, up) {\n        const precision = Math.pow(10, value.length - (value.lastIndexOf('.') + 1));\n        let n1 = Number(value);\n        const n2 = parseFloat(value);\n        if (!isNaN(n1) && !isNaN(n2) && n1 === n2) {\n            if (n1 === 0 && !up) {\n                return null; // don't do negative\n                //\t\t\t} else if(n1 === 9 && up) {\n                //\t\t\t\treturn null; // don't insert 10 into a number\n            }\n            else {\n                n1 = Math.floor(n1 * precision);\n                n1 += up ? precision : -precision;\n                return String(n1 / precision);\n            }\n        }\n        return null;\n    }\n    textReplace(value, up) {\n        return this.valueSetsReplace(this._defaultValueSet, value, up);\n    }\n    valueSetsReplace(valueSets, value, up) {\n        let result = null;\n        for (let i = 0, len = valueSets.length; result === null && i < len; i++) {\n            result = this.valueSetReplace(valueSets[i], value, up);\n        }\n        return result;\n    }\n    valueSetReplace(valueSet, value, up) {\n        let idx = valueSet.indexOf(value);\n        if (idx >= 0) {\n            idx += up ? +1 : -1;\n            if (idx < 0) {\n                idx = valueSet.length - 1;\n            }\n            else {\n                idx %= valueSet.length;\n            }\n            return valueSet[idx];\n        }\n        return null;\n    }\n}\nBasicInplaceReplace.INSTANCE = new BasicInplaceReplace();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}