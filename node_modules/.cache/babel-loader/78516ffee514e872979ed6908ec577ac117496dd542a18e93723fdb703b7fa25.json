{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _get from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.sort.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nimport { Range } from '../../../common/core/range.js';\nexport var DecorationsOverlay = /*#__PURE__*/function (_DynamicViewOverlay) {\n  function DecorationsOverlay(context) {\n    var _this;\n    _classCallCheck(this, DecorationsOverlay);\n    _this = _callSuper(this, DecorationsOverlay);\n    _this._context = context;\n    var options = _this._context.configuration.options;\n    _this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n    _this._renderResult = null;\n    _this._context.addEventHandler(_this);\n    return _this;\n  }\n  _inherits(DecorationsOverlay, _DynamicViewOverlay);\n  return _createClass(DecorationsOverlay, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._context.removeEventHandler(this);\n      this._renderResult = null;\n      _get(_getPrototypeOf(DecorationsOverlay.prototype), \"dispose\", this).call(this);\n    }\n    // --- begin event handlers\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._context.configuration.options;\n      this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n      return true;\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesChanged\",\n    value: function onLinesChanged(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(e) {\n      return true;\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(e) {\n      return true;\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return true;\n    }\n    // --- end event handlers\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      var _decorations = ctx.getDecorationsInViewport();\n      // Keep only decorations with `className`\n      var decorations = [];\n      var decorationsLen = 0;\n      for (var i = 0, len = _decorations.length; i < len; i++) {\n        var d = _decorations[i];\n        if (d.options.className) {\n          decorations[decorationsLen++] = d;\n        }\n      }\n      // Sort decorations for consistent render output\n      decorations = decorations.sort(function (a, b) {\n        if (a.options.zIndex < b.options.zIndex) {\n          return -1;\n        }\n        if (a.options.zIndex > b.options.zIndex) {\n          return 1;\n        }\n        var aClassName = a.options.className;\n        var bClassName = b.options.className;\n        if (aClassName < bClassName) {\n          return -1;\n        }\n        if (aClassName > bClassName) {\n          return 1;\n        }\n        return Range.compareRangesUsingStarts(a.range, b.range);\n      });\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n      var output = [];\n      for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n        var lineIndex = lineNumber - visibleStartLineNumber;\n        output[lineIndex] = '';\n      }\n      // Render first whole line decorations and then regular decorations\n      this._renderWholeLineDecorations(ctx, decorations, output);\n      this._renderNormalDecorations(ctx, decorations, output);\n      this._renderResult = output;\n    }\n  }, {\n    key: \"_renderWholeLineDecorations\",\n    value: function _renderWholeLineDecorations(ctx, decorations, output) {\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n      for (var i = 0, lenI = decorations.length; i < lenI; i++) {\n        var d = decorations[i];\n        if (!d.options.isWholeLine) {\n          continue;\n        }\n        var decorationOutput = '<div class=\"cdr ' + d.options.className + '\" style=\"left:0;width:100%;\"></div>';\n        var startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n        var endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n        for (var j = startLineNumber; j <= endLineNumber; j++) {\n          var lineIndex = j - visibleStartLineNumber;\n          output[lineIndex] += decorationOutput;\n        }\n      }\n    }\n  }, {\n    key: \"_renderNormalDecorations\",\n    value: function _renderNormalDecorations(ctx, decorations, output) {\n      var _a;\n      var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n      var prevClassName = null;\n      var prevShowIfCollapsed = false;\n      var prevRange = null;\n      var prevShouldFillLineOnLineBreak = false;\n      for (var i = 0, lenI = decorations.length; i < lenI; i++) {\n        var d = decorations[i];\n        if (d.options.isWholeLine) {\n          continue;\n        }\n        var className = d.options.className;\n        var showIfCollapsed = Boolean(d.options.showIfCollapsed);\n        var range = d.range;\n        if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n          range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n        }\n        if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n          // merge into previous decoration\n          prevRange = Range.plusRange(prevRange, range);\n          continue;\n        }\n        // flush previous decoration\n        if (prevClassName !== null) {\n          this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n        }\n        prevClassName = className;\n        prevShowIfCollapsed = showIfCollapsed;\n        prevRange = range;\n        prevShouldFillLineOnLineBreak = (_a = d.options.shouldFillLineOnLineBreak) !== null && _a !== void 0 ? _a : false;\n      }\n      if (prevClassName !== null) {\n        this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n      }\n    }\n  }, {\n    key: \"_renderNormalDecoration\",\n    value: function _renderNormalDecoration(ctx, range, className, shouldFillLineOnLineBreak, showIfCollapsed, visibleStartLineNumber, output) {\n      var linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/className === 'findMatch');\n      if (!linesVisibleRanges) {\n        return;\n      }\n      for (var j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n        var lineVisibleRanges = linesVisibleRanges[j];\n        if (lineVisibleRanges.outsideRenderedLine) {\n          continue;\n        }\n        var lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n        if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n          var singleVisibleRange = lineVisibleRanges.ranges[0];\n          if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n            // collapsed/very small range case => make the decoration visible by expanding its width\n            // expand its size on both sides (both to the left and to the right, keeping it centered)\n            var center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n            var left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n            lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n          }\n        }\n        for (var k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n          var expandToLeft = shouldFillLineOnLineBreak && lineVisibleRanges.continuesOnNextLine && lenK === 1;\n          var visibleRange = lineVisibleRanges.ranges[k];\n          var decorationOutput = '<div class=\"cdr ' + className + '\" style=\"left:' + String(visibleRange.left) + 'px;width:' + (expandToLeft ? '100%;' : String(visibleRange.width) + 'px;') + '\"></div>';\n          output[lineIndex] += decorationOutput;\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render(startLineNumber, lineNumber) {\n      if (!this._renderResult) {\n        return '';\n      }\n      var lineIndex = lineNumber - startLineNumber;\n      if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n        return '';\n      }\n      return this._renderResult[lineIndex];\n    }\n  }]);\n}(DynamicViewOverlay);","map":{"version":3,"names":["DynamicViewOverlay","HorizontalRange","Range","DecorationsOverlay","_DynamicViewOverlay","context","_this","_classCallCheck","_callSuper","_context","options","configuration","_typicalHalfwidthCharacterWidth","get","typicalHalfwidthCharacterWidth","_renderResult","addEventHandler","_inherits","_createClass","key","value","dispose","removeEventHandler","_get","_getPrototypeOf","prototype","call","onConfigurationChanged","e","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","scrollWidthChanged","onZonesChanged","prepareRender","ctx","_decorations","getDecorationsInViewport","decorations","decorationsLen","i","len","length","d","className","sort","a","b","zIndex","aClassName","bClassName","compareRangesUsingStarts","range","visibleStartLineNumber","visibleRange","startLineNumber","visibleEndLineNumber","endLineNumber","output","lineNumber","lineIndex","_renderWholeLineDecorations","_renderNormalDecorations","lenI","isWholeLine","decorationOutput","Math","max","min","j","_a","prevClassName","prevShowIfCollapsed","prevRange","prevShouldFillLineOnLineBreak","showIfCollapsed","Boolean","endColumn","startColumn","viewModel","getLineMaxColumn","areIntersectingOrTouching","plusRange","_renderNormalDecoration","shouldFillLineOnLineBreak","linesVisibleRanges","linesVisibleRangesForRange","lenJ","lineVisibleRanges","outsideRenderedLine","ranges","singleVisibleRange","width","center","round","left","k","lenK","expandToLeft","continuesOnNextLine","String","render"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/decorations/decorations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { HorizontalRange } from '../../view/renderingContext.js';\nimport { Range } from '../../../common/core/range.js';\nexport class DecorationsOverlay extends DynamicViewOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        this._typicalHalfwidthCharacterWidth = options.get(50 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged || e.scrollWidthChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    prepareRender(ctx) {\n        const _decorations = ctx.getDecorationsInViewport();\n        // Keep only decorations with `className`\n        let decorations = [];\n        let decorationsLen = 0;\n        for (let i = 0, len = _decorations.length; i < len; i++) {\n            const d = _decorations[i];\n            if (d.options.className) {\n                decorations[decorationsLen++] = d;\n            }\n        }\n        // Sort decorations for consistent render output\n        decorations = decorations.sort((a, b) => {\n            if (a.options.zIndex < b.options.zIndex) {\n                return -1;\n            }\n            if (a.options.zIndex > b.options.zIndex) {\n                return 1;\n            }\n            const aClassName = a.options.className;\n            const bClassName = b.options.className;\n            if (aClassName < bClassName) {\n                return -1;\n            }\n            if (aClassName > bClassName) {\n                return 1;\n            }\n            return Range.compareRangesUsingStarts(a.range, b.range);\n        });\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = '';\n        }\n        // Render first whole line decorations and then regular decorations\n        this._renderWholeLineDecorations(ctx, decorations, output);\n        this._renderNormalDecorations(ctx, decorations, output);\n        this._renderResult = output;\n    }\n    _renderWholeLineDecorations(ctx, decorations, output) {\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (!d.options.isWholeLine) {\n                continue;\n            }\n            const decorationOutput = ('<div class=\"cdr '\n                + d.options.className\n                + '\" style=\"left:0;width:100%;\"></div>');\n            const startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n            const endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n            for (let j = startLineNumber; j <= endLineNumber; j++) {\n                const lineIndex = j - visibleStartLineNumber;\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    _renderNormalDecorations(ctx, decorations, output) {\n        var _a;\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        let prevClassName = null;\n        let prevShowIfCollapsed = false;\n        let prevRange = null;\n        let prevShouldFillLineOnLineBreak = false;\n        for (let i = 0, lenI = decorations.length; i < lenI; i++) {\n            const d = decorations[i];\n            if (d.options.isWholeLine) {\n                continue;\n            }\n            const className = d.options.className;\n            const showIfCollapsed = Boolean(d.options.showIfCollapsed);\n            let range = d.range;\n            if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n                range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.viewModel.getLineMaxColumn(range.endLineNumber - 1));\n            }\n            if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n                // merge into previous decoration\n                prevRange = Range.plusRange(prevRange, range);\n                continue;\n            }\n            // flush previous decoration\n            if (prevClassName !== null) {\n                this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n            }\n            prevClassName = className;\n            prevShowIfCollapsed = showIfCollapsed;\n            prevRange = range;\n            prevShouldFillLineOnLineBreak = (_a = d.options.shouldFillLineOnLineBreak) !== null && _a !== void 0 ? _a : false;\n        }\n        if (prevClassName !== null) {\n            this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShouldFillLineOnLineBreak, prevShowIfCollapsed, visibleStartLineNumber, output);\n        }\n    }\n    _renderNormalDecoration(ctx, range, className, shouldFillLineOnLineBreak, showIfCollapsed, visibleStartLineNumber, output) {\n        const linesVisibleRanges = ctx.linesVisibleRangesForRange(range, /*TODO@Alex*/ className === 'findMatch');\n        if (!linesVisibleRanges) {\n            return;\n        }\n        for (let j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n            const lineVisibleRanges = linesVisibleRanges[j];\n            if (lineVisibleRanges.outsideRenderedLine) {\n                continue;\n            }\n            const lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n            if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n                const singleVisibleRange = lineVisibleRanges.ranges[0];\n                if (singleVisibleRange.width < this._typicalHalfwidthCharacterWidth) {\n                    // collapsed/very small range case => make the decoration visible by expanding its width\n                    // expand its size on both sides (both to the left and to the right, keeping it centered)\n                    const center = Math.round(singleVisibleRange.left + singleVisibleRange.width / 2);\n                    const left = Math.max(0, Math.round(center - this._typicalHalfwidthCharacterWidth / 2));\n                    lineVisibleRanges.ranges[0] = new HorizontalRange(left, this._typicalHalfwidthCharacterWidth);\n                }\n            }\n            for (let k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n                const expandToLeft = shouldFillLineOnLineBreak && lineVisibleRanges.continuesOnNextLine && lenK === 1;\n                const visibleRange = lineVisibleRanges.ranges[k];\n                const decorationOutput = ('<div class=\"cdr '\n                    + className\n                    + '\" style=\"left:'\n                    + String(visibleRange.left)\n                    + 'px;width:'\n                    + (expandToLeft ?\n                        '100%;' :\n                        (String(visibleRange.width) + 'px;'))\n                    + '\"></div>');\n                output[lineIndex] += decorationOutput;\n            }\n        }\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}