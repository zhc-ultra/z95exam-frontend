{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SequenceDiff } from './algorithms/diffAlgorithm.js';\nimport { LineRangeMapping } from '../rangeMapping.js';\nimport { pushMany, compareBy, numberComparator, reverseOrder } from '../../../../base/common/arrays.js';\nimport { MonotonousArray, findLastMonotonous } from '../../../../base/common/arraysFind.js';\nimport { SetMap } from '../../../../base/common/map.js';\nimport { LineRange, LineRangeSet } from '../../core/lineRange.js';\nimport { OffsetRange } from '../../core/offsetRange.js';\nimport { LinesSliceCharSequence } from './linesSliceCharSequence.js';\nimport { LineRangeFragment, isSpace } from './utils.js';\nimport { MyersDiffAlgorithm } from './algorithms/myersDiffAlgorithm.js';\nexport function computeMovedLines(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout) {\n  var _computeMovesFromSimp = computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout),\n    moves = _computeMovesFromSimp.moves,\n    excludedChanges = _computeMovesFromSimp.excludedChanges;\n  if (!timeout.isValid()) {\n    return [];\n  }\n  var filteredChanges = changes.filter(function (c) {\n    return !excludedChanges.has(c);\n  });\n  var unchangedMoves = computeUnchangedMoves(filteredChanges, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout);\n  pushMany(moves, unchangedMoves);\n  moves = joinCloseConsecutiveMoves(moves);\n  // Ignore too short moves\n  moves = moves.filter(function (current) {\n    var lines = current.original.toOffsetRange().slice(originalLines).map(function (l) {\n      return l.trim();\n    });\n    var originalText = lines.join('\\n');\n    return originalText.length >= 15 && countWhere(lines, function (l) {\n      return l.length >= 2;\n    }) >= 2;\n  });\n  moves = removeMovesInSameDiff(changes, moves);\n  return moves;\n}\nfunction countWhere(arr, predicate) {\n  var count = 0;\n  var _iterator = _createForOfIteratorHelper(arr),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var t = _step.value;\n      if (predicate(t)) {\n        count++;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return count;\n}\nfunction computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout) {\n  var moves = [];\n  var deletions = changes.filter(function (c) {\n    return c.modified.isEmpty && c.original.length >= 3;\n  }).map(function (d) {\n    return new LineRangeFragment(d.original, originalLines, d);\n  });\n  var insertions = new Set(changes.filter(function (c) {\n    return c.original.isEmpty && c.modified.length >= 3;\n  }).map(function (d) {\n    return new LineRangeFragment(d.modified, modifiedLines, d);\n  }));\n  var excludedChanges = new Set();\n  var _iterator2 = _createForOfIteratorHelper(deletions),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var deletion = _step2.value;\n      var highestSimilarity = -1;\n      var best = void 0;\n      var _iterator3 = _createForOfIteratorHelper(insertions),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var insertion = _step3.value;\n          var similarity = deletion.computeSimilarity(insertion);\n          if (similarity > highestSimilarity) {\n            highestSimilarity = similarity;\n            best = insertion;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      if (highestSimilarity > 0.90 && best) {\n        insertions[\"delete\"](best);\n        moves.push(new LineRangeMapping(deletion.range, best.range));\n        excludedChanges.add(deletion.source);\n        excludedChanges.add(best.source);\n      }\n      if (!timeout.isValid()) {\n        return {\n          moves: moves,\n          excludedChanges: excludedChanges\n        };\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return {\n    moves: moves,\n    excludedChanges: excludedChanges\n  };\n}\nfunction computeUnchangedMoves(changes, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout) {\n  var moves = [];\n  var original3LineHashes = new SetMap();\n  var _iterator4 = _createForOfIteratorHelper(changes),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var change = _step4.value;\n      for (var _i2 = change.original.startLineNumber; _i2 < change.original.endLineNumberExclusive - 2; _i2++) {\n        var key = \"\".concat(hashedOriginalLines[_i2 - 1], \":\").concat(hashedOriginalLines[_i2 + 1 - 1], \":\").concat(hashedOriginalLines[_i2 + 2 - 1]);\n        original3LineHashes.add(key, {\n          range: new LineRange(_i2, _i2 + 3)\n        });\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  var possibleMappings = [];\n  changes.sort(compareBy(function (c) {\n    return c.modified.startLineNumber;\n  }, numberComparator));\n  var _iterator5 = _createForOfIteratorHelper(changes),\n    _step5;\n  try {\n    var _loop2 = function _loop2() {\n        var change = _step5.value;\n        var lastMappings = [];\n        var _loop3 = function _loop3() {\n          var key = \"\".concat(hashedModifiedLines[_i3 - 1], \":\").concat(hashedModifiedLines[_i3 + 1 - 1], \":\").concat(hashedModifiedLines[_i3 + 2 - 1]);\n          var currentModifiedRange = new LineRange(_i3, _i3 + 3);\n          var nextMappings = [];\n          original3LineHashes.forEach(key, function (_ref) {\n            var range = _ref.range;\n            for (var _i4 = 0, _lastMappings = lastMappings; _i4 < _lastMappings.length; _i4++) {\n              var lastMapping = _lastMappings[_i4];\n              // does this match extend some last match?\n              if (lastMapping.originalLineRange.endLineNumberExclusive + 1 === range.endLineNumberExclusive && lastMapping.modifiedLineRange.endLineNumberExclusive + 1 === currentModifiedRange.endLineNumberExclusive) {\n                lastMapping.originalLineRange = new LineRange(lastMapping.originalLineRange.startLineNumber, range.endLineNumberExclusive);\n                lastMapping.modifiedLineRange = new LineRange(lastMapping.modifiedLineRange.startLineNumber, currentModifiedRange.endLineNumberExclusive);\n                nextMappings.push(lastMapping);\n                return;\n              }\n            }\n            var mapping = {\n              modifiedLineRange: currentModifiedRange,\n              originalLineRange: range\n            };\n            possibleMappings.push(mapping);\n            nextMappings.push(mapping);\n          });\n          lastMappings = nextMappings;\n        };\n        for (var _i3 = change.modified.startLineNumber; _i3 < change.modified.endLineNumberExclusive - 2; _i3++) {\n          _loop3();\n        }\n        if (!timeout.isValid()) {\n          return {\n            v: []\n          };\n        }\n      },\n      _ret;\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      _ret = _loop2();\n      if (_ret) return _ret.v;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  possibleMappings.sort(reverseOrder(compareBy(function (m) {\n    return m.modifiedLineRange.length;\n  }, numberComparator)));\n  var modifiedSet = new LineRangeSet();\n  var originalSet = new LineRangeSet();\n  for (var _i = 0, _possibleMappings = possibleMappings; _i < _possibleMappings.length; _i++) {\n    var mapping = _possibleMappings[_i];\n    var diffOrigToMod = mapping.modifiedLineRange.startLineNumber - mapping.originalLineRange.startLineNumber;\n    var modifiedSections = modifiedSet.subtractFrom(mapping.modifiedLineRange);\n    var originalTranslatedSections = originalSet.subtractFrom(mapping.originalLineRange).getWithDelta(diffOrigToMod);\n    var modifiedIntersectedSections = modifiedSections.getIntersection(originalTranslatedSections);\n    var _iterator6 = _createForOfIteratorHelper(modifiedIntersectedSections.ranges),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var s = _step6.value;\n        if (s.length < 3) {\n          continue;\n        }\n        var modifiedLineRange = s;\n        var originalLineRange = s.delta(-diffOrigToMod);\n        moves.push(new LineRangeMapping(originalLineRange, modifiedLineRange));\n        modifiedSet.addRange(modifiedLineRange);\n        originalSet.addRange(originalLineRange);\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  }\n  moves.sort(compareBy(function (m) {\n    return m.original.startLineNumber;\n  }, numberComparator));\n  var monotonousChanges = new MonotonousArray(changes);\n  var _loop = function _loop() {\n    var move = moves[i];\n    var firstTouchingChangeOrig = monotonousChanges.findLastMonotonous(function (c) {\n      return c.original.startLineNumber <= move.original.startLineNumber;\n    });\n    var firstTouchingChangeMod = findLastMonotonous(changes, function (c) {\n      return c.modified.startLineNumber <= move.modified.startLineNumber;\n    });\n    var linesAbove = Math.max(move.original.startLineNumber - firstTouchingChangeOrig.original.startLineNumber, move.modified.startLineNumber - firstTouchingChangeMod.modified.startLineNumber);\n    var lastTouchingChangeOrig = monotonousChanges.findLastMonotonous(function (c) {\n      return c.original.startLineNumber < move.original.endLineNumberExclusive;\n    });\n    var lastTouchingChangeMod = findLastMonotonous(changes, function (c) {\n      return c.modified.startLineNumber < move.modified.endLineNumberExclusive;\n    });\n    var linesBelow = Math.max(lastTouchingChangeOrig.original.endLineNumberExclusive - move.original.endLineNumberExclusive, lastTouchingChangeMod.modified.endLineNumberExclusive - move.modified.endLineNumberExclusive);\n    var extendToTop;\n    for (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {\n      var origLine = move.original.startLineNumber - extendToTop - 1;\n      var modLine = move.modified.startLineNumber - extendToTop - 1;\n      if (origLine > originalLines.length || modLine > modifiedLines.length) {\n        break;\n      }\n      if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n        break;\n      }\n      if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n        break;\n      }\n    }\n    if (extendToTop > 0) {\n      originalSet.addRange(new LineRange(move.original.startLineNumber - extendToTop, move.original.startLineNumber));\n      modifiedSet.addRange(new LineRange(move.modified.startLineNumber - extendToTop, move.modified.startLineNumber));\n    }\n    var extendToBottom;\n    for (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n      var _origLine = move.original.endLineNumberExclusive + extendToBottom;\n      var _modLine = move.modified.endLineNumberExclusive + extendToBottom;\n      if (_origLine > originalLines.length || _modLine > modifiedLines.length) {\n        break;\n      }\n      if (modifiedSet.contains(_modLine) || originalSet.contains(_origLine)) {\n        break;\n      }\n      if (!areLinesSimilar(originalLines[_origLine - 1], modifiedLines[_modLine - 1], timeout)) {\n        break;\n      }\n    }\n    if (extendToBottom > 0) {\n      originalSet.addRange(new LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));\n      modifiedSet.addRange(new LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));\n    }\n    if (extendToTop > 0 || extendToBottom > 0) {\n      moves[i] = new LineRangeMapping(new LineRange(move.original.startLineNumber - extendToTop, move.original.endLineNumberExclusive + extendToBottom), new LineRange(move.modified.startLineNumber - extendToTop, move.modified.endLineNumberExclusive + extendToBottom));\n    }\n  };\n  for (var i = 0; i < moves.length; i++) {\n    _loop();\n  }\n  return moves;\n}\nfunction areLinesSimilar(line1, line2, timeout) {\n  if (line1.trim() === line2.trim()) {\n    return true;\n  }\n  if (line1.length > 300 && line2.length > 300) {\n    return false;\n  }\n  var myersDiffingAlgorithm = new MyersDiffAlgorithm();\n  var result = myersDiffingAlgorithm.compute(new LinesSliceCharSequence([line1], new OffsetRange(0, 1), false), new LinesSliceCharSequence([line2], new OffsetRange(0, 1), false), timeout);\n  var commonNonSpaceCharCount = 0;\n  var inverted = SequenceDiff.invert(result.diffs, line1.length);\n  var _iterator7 = _createForOfIteratorHelper(inverted),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var seq = _step7.value;\n      seq.seq1Range.forEach(function (idx) {\n        if (!isSpace(line1.charCodeAt(idx))) {\n          commonNonSpaceCharCount++;\n        }\n      });\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  function countNonWsChars(str) {\n    var count = 0;\n    for (var i = 0; i < line1.length; i++) {\n      if (!isSpace(str.charCodeAt(i))) {\n        count++;\n      }\n    }\n    return count;\n  }\n  var longerLineLength = countNonWsChars(line1.length > line2.length ? line1 : line2);\n  var r = commonNonSpaceCharCount / longerLineLength > 0.6 && longerLineLength > 10;\n  return r;\n}\nfunction joinCloseConsecutiveMoves(moves) {\n  if (moves.length === 0) {\n    return moves;\n  }\n  moves.sort(compareBy(function (m) {\n    return m.original.startLineNumber;\n  }, numberComparator));\n  var result = [moves[0]];\n  for (var i = 1; i < moves.length; i++) {\n    var last = result[result.length - 1];\n    var current = moves[i];\n    var originalDist = current.original.startLineNumber - last.original.endLineNumberExclusive;\n    var modifiedDist = current.modified.startLineNumber - last.modified.endLineNumberExclusive;\n    var currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;\n    if (currentMoveAfterLast && originalDist + modifiedDist <= 2) {\n      result[result.length - 1] = last.join(current);\n      continue;\n    }\n    result.push(current);\n  }\n  return result;\n}\nfunction removeMovesInSameDiff(changes, moves) {\n  var changesMonotonous = new MonotonousArray(changes);\n  moves = moves.filter(function (m) {\n    var diffBeforeEndOfMoveOriginal = changesMonotonous.findLastMonotonous(function (c) {\n      return c.original.startLineNumber < m.original.endLineNumberExclusive;\n    }) || new LineRangeMapping(new LineRange(1, 1), new LineRange(1, 1));\n    var diffBeforeEndOfMoveModified = findLastMonotonous(changes, function (c) {\n      return c.modified.startLineNumber < m.modified.endLineNumberExclusive;\n    });\n    var differentDiffs = diffBeforeEndOfMoveOriginal !== diffBeforeEndOfMoveModified;\n    return differentDiffs;\n  });\n  return moves;\n}","map":{"version":3,"names":["SequenceDiff","LineRangeMapping","pushMany","compareBy","numberComparator","reverseOrder","MonotonousArray","findLastMonotonous","SetMap","LineRange","LineRangeSet","OffsetRange","LinesSliceCharSequence","LineRangeFragment","isSpace","MyersDiffAlgorithm","computeMovedLines","changes","originalLines","modifiedLines","hashedOriginalLines","hashedModifiedLines","timeout","_computeMovesFromSimp","computeMovesFromSimpleDeletionsToSimpleInsertions","moves","excludedChanges","isValid","filteredChanges","filter","c","has","unchangedMoves","computeUnchangedMoves","joinCloseConsecutiveMoves","current","lines","original","toOffsetRange","slice","map","l","trim","originalText","join","length","countWhere","removeMovesInSameDiff","arr","predicate","count","_iterator","_createForOfIteratorHelper","_step","s","n","done","t","value","err","e","f","deletions","modified","isEmpty","d","insertions","Set","_iterator2","_step2","deletion","highestSimilarity","best","_iterator3","_step3","insertion","similarity","computeSimilarity","push","range","add","source","original3LineHashes","_iterator4","_step4","change","i","startLineNumber","endLineNumberExclusive","key","concat","possibleMappings","sort","_iterator5","_step5","_loop2","lastMappings","_loop3","currentModifiedRange","nextMappings","forEach","_ref","_i4","_lastMappings","lastMapping","originalLineRange","modifiedLineRange","mapping","v","_ret","m","modifiedSet","originalSet","_i","_possibleMappings","diffOrigToMod","modifiedSections","subtractFrom","originalTranslatedSections","getWithDelta","modifiedIntersectedSections","getIntersection","_iterator6","ranges","_step6","delta","addRange","monotonousChanges","_loop","move","firstTouchingChangeOrig","firstTouchingChangeMod","linesAbove","Math","max","lastTouchingChangeOrig","lastTouchingChangeMod","linesBelow","extendToTop","origLine","modLine","contains","areLinesSimilar","extendToBottom","line1","line2","myersDiffingAlgorithm","result","compute","commonNonSpaceCharCount","inverted","invert","diffs","_iterator7","_step7","seq","seq1Range","idx","charCodeAt","countNonWsChars","str","longerLineLength","r","last","originalDist","modifiedDist","currentMoveAfterLast","changesMonotonous","diffBeforeEndOfMoveOriginal","diffBeforeEndOfMoveModified","differentDiffs"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SequenceDiff } from './algorithms/diffAlgorithm.js';\nimport { LineRangeMapping } from '../rangeMapping.js';\nimport { pushMany, compareBy, numberComparator, reverseOrder } from '../../../../base/common/arrays.js';\nimport { MonotonousArray, findLastMonotonous } from '../../../../base/common/arraysFind.js';\nimport { SetMap } from '../../../../base/common/map.js';\nimport { LineRange, LineRangeSet } from '../../core/lineRange.js';\nimport { OffsetRange } from '../../core/offsetRange.js';\nimport { LinesSliceCharSequence } from './linesSliceCharSequence.js';\nimport { LineRangeFragment, isSpace } from './utils.js';\nimport { MyersDiffAlgorithm } from './algorithms/myersDiffAlgorithm.js';\nexport function computeMovedLines(changes, originalLines, modifiedLines, hashedOriginalLines, hashedModifiedLines, timeout) {\n    let { moves, excludedChanges } = computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout);\n    if (!timeout.isValid()) {\n        return [];\n    }\n    const filteredChanges = changes.filter(c => !excludedChanges.has(c));\n    const unchangedMoves = computeUnchangedMoves(filteredChanges, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout);\n    pushMany(moves, unchangedMoves);\n    moves = joinCloseConsecutiveMoves(moves);\n    // Ignore too short moves\n    moves = moves.filter(current => {\n        const lines = current.original.toOffsetRange().slice(originalLines).map(l => l.trim());\n        const originalText = lines.join('\\n');\n        return originalText.length >= 15 && countWhere(lines, l => l.length >= 2) >= 2;\n    });\n    moves = removeMovesInSameDiff(changes, moves);\n    return moves;\n}\nfunction countWhere(arr, predicate) {\n    let count = 0;\n    for (const t of arr) {\n        if (predicate(t)) {\n            count++;\n        }\n    }\n    return count;\n}\nfunction computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout) {\n    const moves = [];\n    const deletions = changes\n        .filter(c => c.modified.isEmpty && c.original.length >= 3)\n        .map(d => new LineRangeFragment(d.original, originalLines, d));\n    const insertions = new Set(changes\n        .filter(c => c.original.isEmpty && c.modified.length >= 3)\n        .map(d => new LineRangeFragment(d.modified, modifiedLines, d)));\n    const excludedChanges = new Set();\n    for (const deletion of deletions) {\n        let highestSimilarity = -1;\n        let best;\n        for (const insertion of insertions) {\n            const similarity = deletion.computeSimilarity(insertion);\n            if (similarity > highestSimilarity) {\n                highestSimilarity = similarity;\n                best = insertion;\n            }\n        }\n        if (highestSimilarity > 0.90 && best) {\n            insertions.delete(best);\n            moves.push(new LineRangeMapping(deletion.range, best.range));\n            excludedChanges.add(deletion.source);\n            excludedChanges.add(best.source);\n        }\n        if (!timeout.isValid()) {\n            return { moves, excludedChanges };\n        }\n    }\n    return { moves, excludedChanges };\n}\nfunction computeUnchangedMoves(changes, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout) {\n    const moves = [];\n    const original3LineHashes = new SetMap();\n    for (const change of changes) {\n        for (let i = change.original.startLineNumber; i < change.original.endLineNumberExclusive - 2; i++) {\n            const key = `${hashedOriginalLines[i - 1]}:${hashedOriginalLines[i + 1 - 1]}:${hashedOriginalLines[i + 2 - 1]}`;\n            original3LineHashes.add(key, { range: new LineRange(i, i + 3) });\n        }\n    }\n    const possibleMappings = [];\n    changes.sort(compareBy(c => c.modified.startLineNumber, numberComparator));\n    for (const change of changes) {\n        let lastMappings = [];\n        for (let i = change.modified.startLineNumber; i < change.modified.endLineNumberExclusive - 2; i++) {\n            const key = `${hashedModifiedLines[i - 1]}:${hashedModifiedLines[i + 1 - 1]}:${hashedModifiedLines[i + 2 - 1]}`;\n            const currentModifiedRange = new LineRange(i, i + 3);\n            const nextMappings = [];\n            original3LineHashes.forEach(key, ({ range }) => {\n                for (const lastMapping of lastMappings) {\n                    // does this match extend some last match?\n                    if (lastMapping.originalLineRange.endLineNumberExclusive + 1 === range.endLineNumberExclusive &&\n                        lastMapping.modifiedLineRange.endLineNumberExclusive + 1 === currentModifiedRange.endLineNumberExclusive) {\n                        lastMapping.originalLineRange = new LineRange(lastMapping.originalLineRange.startLineNumber, range.endLineNumberExclusive);\n                        lastMapping.modifiedLineRange = new LineRange(lastMapping.modifiedLineRange.startLineNumber, currentModifiedRange.endLineNumberExclusive);\n                        nextMappings.push(lastMapping);\n                        return;\n                    }\n                }\n                const mapping = {\n                    modifiedLineRange: currentModifiedRange,\n                    originalLineRange: range,\n                };\n                possibleMappings.push(mapping);\n                nextMappings.push(mapping);\n            });\n            lastMappings = nextMappings;\n        }\n        if (!timeout.isValid()) {\n            return [];\n        }\n    }\n    possibleMappings.sort(reverseOrder(compareBy(m => m.modifiedLineRange.length, numberComparator)));\n    const modifiedSet = new LineRangeSet();\n    const originalSet = new LineRangeSet();\n    for (const mapping of possibleMappings) {\n        const diffOrigToMod = mapping.modifiedLineRange.startLineNumber - mapping.originalLineRange.startLineNumber;\n        const modifiedSections = modifiedSet.subtractFrom(mapping.modifiedLineRange);\n        const originalTranslatedSections = originalSet.subtractFrom(mapping.originalLineRange).getWithDelta(diffOrigToMod);\n        const modifiedIntersectedSections = modifiedSections.getIntersection(originalTranslatedSections);\n        for (const s of modifiedIntersectedSections.ranges) {\n            if (s.length < 3) {\n                continue;\n            }\n            const modifiedLineRange = s;\n            const originalLineRange = s.delta(-diffOrigToMod);\n            moves.push(new LineRangeMapping(originalLineRange, modifiedLineRange));\n            modifiedSet.addRange(modifiedLineRange);\n            originalSet.addRange(originalLineRange);\n        }\n    }\n    moves.sort(compareBy(m => m.original.startLineNumber, numberComparator));\n    const monotonousChanges = new MonotonousArray(changes);\n    for (let i = 0; i < moves.length; i++) {\n        const move = moves[i];\n        const firstTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber <= move.original.startLineNumber);\n        const firstTouchingChangeMod = findLastMonotonous(changes, c => c.modified.startLineNumber <= move.modified.startLineNumber);\n        const linesAbove = Math.max(move.original.startLineNumber - firstTouchingChangeOrig.original.startLineNumber, move.modified.startLineNumber - firstTouchingChangeMod.modified.startLineNumber);\n        const lastTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber < move.original.endLineNumberExclusive);\n        const lastTouchingChangeMod = findLastMonotonous(changes, c => c.modified.startLineNumber < move.modified.endLineNumberExclusive);\n        const linesBelow = Math.max(lastTouchingChangeOrig.original.endLineNumberExclusive - move.original.endLineNumberExclusive, lastTouchingChangeMod.modified.endLineNumberExclusive - move.modified.endLineNumberExclusive);\n        let extendToTop;\n        for (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {\n            const origLine = move.original.startLineNumber - extendToTop - 1;\n            const modLine = move.modified.startLineNumber - extendToTop - 1;\n            if (origLine > originalLines.length || modLine > modifiedLines.length) {\n                break;\n            }\n            if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n                break;\n            }\n            if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n                break;\n            }\n        }\n        if (extendToTop > 0) {\n            originalSet.addRange(new LineRange(move.original.startLineNumber - extendToTop, move.original.startLineNumber));\n            modifiedSet.addRange(new LineRange(move.modified.startLineNumber - extendToTop, move.modified.startLineNumber));\n        }\n        let extendToBottom;\n        for (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n            const origLine = move.original.endLineNumberExclusive + extendToBottom;\n            const modLine = move.modified.endLineNumberExclusive + extendToBottom;\n            if (origLine > originalLines.length || modLine > modifiedLines.length) {\n                break;\n            }\n            if (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n                break;\n            }\n            if (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n                break;\n            }\n        }\n        if (extendToBottom > 0) {\n            originalSet.addRange(new LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));\n            modifiedSet.addRange(new LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));\n        }\n        if (extendToTop > 0 || extendToBottom > 0) {\n            moves[i] = new LineRangeMapping(new LineRange(move.original.startLineNumber - extendToTop, move.original.endLineNumberExclusive + extendToBottom), new LineRange(move.modified.startLineNumber - extendToTop, move.modified.endLineNumberExclusive + extendToBottom));\n        }\n    }\n    return moves;\n}\nfunction areLinesSimilar(line1, line2, timeout) {\n    if (line1.trim() === line2.trim()) {\n        return true;\n    }\n    if (line1.length > 300 && line2.length > 300) {\n        return false;\n    }\n    const myersDiffingAlgorithm = new MyersDiffAlgorithm();\n    const result = myersDiffingAlgorithm.compute(new LinesSliceCharSequence([line1], new OffsetRange(0, 1), false), new LinesSliceCharSequence([line2], new OffsetRange(0, 1), false), timeout);\n    let commonNonSpaceCharCount = 0;\n    const inverted = SequenceDiff.invert(result.diffs, line1.length);\n    for (const seq of inverted) {\n        seq.seq1Range.forEach(idx => {\n            if (!isSpace(line1.charCodeAt(idx))) {\n                commonNonSpaceCharCount++;\n            }\n        });\n    }\n    function countNonWsChars(str) {\n        let count = 0;\n        for (let i = 0; i < line1.length; i++) {\n            if (!isSpace(str.charCodeAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n    const longerLineLength = countNonWsChars(line1.length > line2.length ? line1 : line2);\n    const r = commonNonSpaceCharCount / longerLineLength > 0.6 && longerLineLength > 10;\n    return r;\n}\nfunction joinCloseConsecutiveMoves(moves) {\n    if (moves.length === 0) {\n        return moves;\n    }\n    moves.sort(compareBy(m => m.original.startLineNumber, numberComparator));\n    const result = [moves[0]];\n    for (let i = 1; i < moves.length; i++) {\n        const last = result[result.length - 1];\n        const current = moves[i];\n        const originalDist = current.original.startLineNumber - last.original.endLineNumberExclusive;\n        const modifiedDist = current.modified.startLineNumber - last.modified.endLineNumberExclusive;\n        const currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;\n        if (currentMoveAfterLast && originalDist + modifiedDist <= 2) {\n            result[result.length - 1] = last.join(current);\n            continue;\n        }\n        result.push(current);\n    }\n    return result;\n}\nfunction removeMovesInSameDiff(changes, moves) {\n    const changesMonotonous = new MonotonousArray(changes);\n    moves = moves.filter(m => {\n        const diffBeforeEndOfMoveOriginal = changesMonotonous.findLastMonotonous(c => c.original.startLineNumber < m.original.endLineNumberExclusive)\n            || new LineRangeMapping(new LineRange(1, 1), new LineRange(1, 1));\n        const diffBeforeEndOfMoveModified = findLastMonotonous(changes, c => c.modified.startLineNumber < m.modified.endLineNumberExclusive);\n        const differentDiffs = diffBeforeEndOfMoveOriginal !== diffBeforeEndOfMoveModified;\n        return differentDiffs;\n    });\n    return moves;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}