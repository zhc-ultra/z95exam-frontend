{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint16-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as buffer from '../../../base/common/buffer.js';\nvar _utf16LE_TextDecoder;\nfunction getUTF16LE_TextDecoder() {\n  if (!_utf16LE_TextDecoder) {\n    _utf16LE_TextDecoder = new TextDecoder('UTF-16LE');\n  }\n  return _utf16LE_TextDecoder;\n}\nvar _utf16BE_TextDecoder;\nfunction getUTF16BE_TextDecoder() {\n  if (!_utf16BE_TextDecoder) {\n    _utf16BE_TextDecoder = new TextDecoder('UTF-16BE');\n  }\n  return _utf16BE_TextDecoder;\n}\nvar _platformTextDecoder;\nexport function getPlatformTextDecoder() {\n  if (!_platformTextDecoder) {\n    _platformTextDecoder = platform.isLittleEndian() ? getUTF16LE_TextDecoder() : getUTF16BE_TextDecoder();\n  }\n  return _platformTextDecoder;\n}\nexport function decodeUTF16LE(source, offset, len) {\n  var view = new Uint16Array(source.buffer, offset, len);\n  if (len > 0 && (view[0] === 0xFEFF || view[0] === 0xFFFE)) {\n    // UTF16 sometimes starts with a BOM https://de.wikipedia.org/wiki/Byte_Order_Mark\n    // It looks like TextDecoder.decode will eat up a leading BOM (0xFEFF or 0xFFFE)\n    // We don't want that behavior because we know the string is UTF16LE and the BOM should be maintained\n    // So we use the manual decoder\n    return compatDecodeUTF16LE(source, offset, len);\n  }\n  return getUTF16LE_TextDecoder().decode(view);\n}\nfunction compatDecodeUTF16LE(source, offset, len) {\n  var result = [];\n  var resultLen = 0;\n  for (var i = 0; i < len; i++) {\n    var charCode = buffer.readUInt16LE(source, offset);\n    offset += 2;\n    result[resultLen++] = String.fromCharCode(charCode);\n  }\n  return result.join('');\n}\nexport var StringBuilder = /*#__PURE__*/function () {\n  function StringBuilder(capacity) {\n    _classCallCheck(this, StringBuilder);\n    this._capacity = capacity | 0;\n    this._buffer = new Uint16Array(this._capacity);\n    this._completedStrings = null;\n    this._bufferLength = 0;\n  }\n  return _createClass(StringBuilder, [{\n    key: \"reset\",\n    value: function reset() {\n      this._completedStrings = null;\n      this._bufferLength = 0;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      if (this._completedStrings !== null) {\n        this._flushBuffer();\n        return this._completedStrings.join('');\n      }\n      return this._buildBuffer();\n    }\n  }, {\n    key: \"_buildBuffer\",\n    value: function _buildBuffer() {\n      if (this._bufferLength === 0) {\n        return '';\n      }\n      var view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n      return getPlatformTextDecoder().decode(view);\n    }\n  }, {\n    key: \"_flushBuffer\",\n    value: function _flushBuffer() {\n      var bufferString = this._buildBuffer();\n      this._bufferLength = 0;\n      if (this._completedStrings === null) {\n        this._completedStrings = [bufferString];\n      } else {\n        this._completedStrings[this._completedStrings.length] = bufferString;\n      }\n    }\n    /**\n     * Append a char code (<2^16)\n     */\n  }, {\n    key: \"appendCharCode\",\n    value: function appendCharCode(charCode) {\n      var remainingSpace = this._capacity - this._bufferLength;\n      if (remainingSpace <= 1) {\n        if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n          this._flushBuffer();\n        }\n      }\n      this._buffer[this._bufferLength++] = charCode;\n    }\n    /**\n     * Append an ASCII char code (<2^8)\n     */\n  }, {\n    key: \"appendASCIICharCode\",\n    value: function appendASCIICharCode(charCode) {\n      if (this._bufferLength === this._capacity) {\n        // buffer is full\n        this._flushBuffer();\n      }\n      this._buffer[this._bufferLength++] = charCode;\n    }\n  }, {\n    key: \"appendString\",\n    value: function appendString(str) {\n      var strLen = str.length;\n      if (this._bufferLength + strLen >= this._capacity) {\n        // This string does not fit in the remaining buffer space\n        this._flushBuffer();\n        this._completedStrings[this._completedStrings.length] = str;\n        return;\n      }\n      for (var i = 0; i < strLen; i++) {\n        this._buffer[this._bufferLength++] = str.charCodeAt(i);\n      }\n    }\n  }]);\n}();","map":{"version":3,"names":["strings","platform","buffer","_utf16LE_TextDecoder","getUTF16LE_TextDecoder","TextDecoder","_utf16BE_TextDecoder","getUTF16BE_TextDecoder","_platformTextDecoder","getPlatformTextDecoder","isLittleEndian","decodeUTF16LE","source","offset","len","view","Uint16Array","compatDecodeUTF16LE","decode","result","resultLen","i","charCode","readUInt16LE","String","fromCharCode","join","StringBuilder","capacity","_classCallCheck","_capacity","_buffer","_completedStrings","_bufferLength","_createClass","key","value","reset","build","_flushBuffer","_buildBuffer","bufferString","length","appendCharCode","remainingSpace","isHighSurrogate","appendASCIICharCode","appendString","str","strLen","charCodeAt"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/core/stringBuilder.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as buffer from '../../../base/common/buffer.js';\nlet _utf16LE_TextDecoder;\nfunction getUTF16LE_TextDecoder() {\n    if (!_utf16LE_TextDecoder) {\n        _utf16LE_TextDecoder = new TextDecoder('UTF-16LE');\n    }\n    return _utf16LE_TextDecoder;\n}\nlet _utf16BE_TextDecoder;\nfunction getUTF16BE_TextDecoder() {\n    if (!_utf16BE_TextDecoder) {\n        _utf16BE_TextDecoder = new TextDecoder('UTF-16BE');\n    }\n    return _utf16BE_TextDecoder;\n}\nlet _platformTextDecoder;\nexport function getPlatformTextDecoder() {\n    if (!_platformTextDecoder) {\n        _platformTextDecoder = platform.isLittleEndian() ? getUTF16LE_TextDecoder() : getUTF16BE_TextDecoder();\n    }\n    return _platformTextDecoder;\n}\nexport function decodeUTF16LE(source, offset, len) {\n    const view = new Uint16Array(source.buffer, offset, len);\n    if (len > 0 && (view[0] === 0xFEFF || view[0] === 0xFFFE)) {\n        // UTF16 sometimes starts with a BOM https://de.wikipedia.org/wiki/Byte_Order_Mark\n        // It looks like TextDecoder.decode will eat up a leading BOM (0xFEFF or 0xFFFE)\n        // We don't want that behavior because we know the string is UTF16LE and the BOM should be maintained\n        // So we use the manual decoder\n        return compatDecodeUTF16LE(source, offset, len);\n    }\n    return getUTF16LE_TextDecoder().decode(view);\n}\nfunction compatDecodeUTF16LE(source, offset, len) {\n    const result = [];\n    let resultLen = 0;\n    for (let i = 0; i < len; i++) {\n        const charCode = buffer.readUInt16LE(source, offset);\n        offset += 2;\n        result[resultLen++] = String.fromCharCode(charCode);\n    }\n    return result.join('');\n}\nexport class StringBuilder {\n    constructor(capacity) {\n        this._capacity = capacity | 0;\n        this._buffer = new Uint16Array(this._capacity);\n        this._completedStrings = null;\n        this._bufferLength = 0;\n    }\n    reset() {\n        this._completedStrings = null;\n        this._bufferLength = 0;\n    }\n    build() {\n        if (this._completedStrings !== null) {\n            this._flushBuffer();\n            return this._completedStrings.join('');\n        }\n        return this._buildBuffer();\n    }\n    _buildBuffer() {\n        if (this._bufferLength === 0) {\n            return '';\n        }\n        const view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n        return getPlatformTextDecoder().decode(view);\n    }\n    _flushBuffer() {\n        const bufferString = this._buildBuffer();\n        this._bufferLength = 0;\n        if (this._completedStrings === null) {\n            this._completedStrings = [bufferString];\n        }\n        else {\n            this._completedStrings[this._completedStrings.length] = bufferString;\n        }\n    }\n    /**\n     * Append a char code (<2^16)\n     */\n    appendCharCode(charCode) {\n        const remainingSpace = this._capacity - this._bufferLength;\n        if (remainingSpace <= 1) {\n            if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n                this._flushBuffer();\n            }\n        }\n        this._buffer[this._bufferLength++] = charCode;\n    }\n    /**\n     * Append an ASCII char code (<2^8)\n     */\n    appendASCIICharCode(charCode) {\n        if (this._bufferLength === this._capacity) {\n            // buffer is full\n            this._flushBuffer();\n        }\n        this._buffer[this._bufferLength++] = charCode;\n    }\n    appendString(str) {\n        const strLen = str.length;\n        if (this._bufferLength + strLen >= this._capacity) {\n            // This string does not fit in the remaining buffer space\n            this._flushBuffer();\n            this._completedStrings[this._completedStrings.length] = str;\n            return;\n        }\n        for (let i = 0; i < strLen; i++) {\n            this._buffer[this._bufferLength++] = str.charCodeAt(i);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}