{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nexport var OvertypingCapturer = /*#__PURE__*/function () {\n  function OvertypingCapturer(editor, suggestModel) {\n    var _this = this;\n    _classCallCheck(this, OvertypingCapturer);\n    this._disposables = new DisposableStore();\n    this._lastOvertyped = [];\n    this._locked = false;\n    this._disposables.add(editor.onWillType(function () {\n      if (_this._locked || !editor.hasModel()) {\n        return;\n      }\n      var selections = editor.getSelections();\n      var selectionsLength = selections.length;\n      // Check if it will overtype any selections\n      var willOvertype = false;\n      for (var i = 0; i < selectionsLength; i++) {\n        if (!selections[i].isEmpty()) {\n          willOvertype = true;\n          break;\n        }\n      }\n      if (!willOvertype) {\n        if (_this._lastOvertyped.length !== 0) {\n          _this._lastOvertyped.length = 0;\n        }\n        return;\n      }\n      _this._lastOvertyped = [];\n      var model = editor.getModel();\n      for (var _i = 0; _i < selectionsLength; _i++) {\n        var selection = selections[_i];\n        // Check for overtyping capturer restrictions\n        if (model.getValueLengthInRange(selection) > OvertypingCapturer._maxSelectionLength) {\n          return;\n        }\n        _this._lastOvertyped[_i] = {\n          value: model.getValueInRange(selection),\n          multiline: selection.startLineNumber !== selection.endLineNumber\n        };\n      }\n    }));\n    this._disposables.add(suggestModel.onDidTrigger(function (e) {\n      _this._locked = true;\n    }));\n    this._disposables.add(suggestModel.onDidCancel(function (e) {\n      _this._locked = false;\n    }));\n  }\n  return _createClass(OvertypingCapturer, [{\n    key: \"getLastOvertypedInfo\",\n    value: function getLastOvertypedInfo(idx) {\n      if (idx >= 0 && idx < this._lastOvertyped.length) {\n        return this._lastOvertyped[idx];\n      }\n      return undefined;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._disposables.dispose();\n    }\n  }]);\n}();\nOvertypingCapturer._maxSelectionLength = 51200;","map":{"version":3,"names":["DisposableStore","OvertypingCapturer","editor","suggestModel","_this","_classCallCheck","_disposables","_lastOvertyped","_locked","add","onWillType","hasModel","selections","getSelections","selectionsLength","length","willOvertype","i","isEmpty","model","getModel","selection","getValueLengthInRange","_maxSelectionLength","value","getValueInRange","multiline","startLineNumber","endLineNumber","onDidTrigger","e","onDidCancel","_createClass","key","getLastOvertypedInfo","idx","undefined","dispose"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestOvertypingCapturer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nexport class OvertypingCapturer {\n    constructor(editor, suggestModel) {\n        this._disposables = new DisposableStore();\n        this._lastOvertyped = [];\n        this._locked = false;\n        this._disposables.add(editor.onWillType(() => {\n            if (this._locked || !editor.hasModel()) {\n                return;\n            }\n            const selections = editor.getSelections();\n            const selectionsLength = selections.length;\n            // Check if it will overtype any selections\n            let willOvertype = false;\n            for (let i = 0; i < selectionsLength; i++) {\n                if (!selections[i].isEmpty()) {\n                    willOvertype = true;\n                    break;\n                }\n            }\n            if (!willOvertype) {\n                if (this._lastOvertyped.length !== 0) {\n                    this._lastOvertyped.length = 0;\n                }\n                return;\n            }\n            this._lastOvertyped = [];\n            const model = editor.getModel();\n            for (let i = 0; i < selectionsLength; i++) {\n                const selection = selections[i];\n                // Check for overtyping capturer restrictions\n                if (model.getValueLengthInRange(selection) > OvertypingCapturer._maxSelectionLength) {\n                    return;\n                }\n                this._lastOvertyped[i] = { value: model.getValueInRange(selection), multiline: selection.startLineNumber !== selection.endLineNumber };\n            }\n        }));\n        this._disposables.add(suggestModel.onDidTrigger(e => {\n            this._locked = true;\n        }));\n        this._disposables.add(suggestModel.onDidCancel(e => {\n            this._locked = false;\n        }));\n    }\n    getLastOvertypedInfo(idx) {\n        if (idx >= 0 && idx < this._lastOvertyped.length) {\n            return this._lastOvertyped[idx];\n        }\n        return undefined;\n    }\n    dispose() {\n        this._disposables.dispose();\n    }\n}\nOvertypingCapturer._maxSelectionLength = 51200;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA,SAASA,eAAe,QAAQ,sCAAsC;AACtE,WAAaC,kBAAkB;EAC3B,SAAAA,mBAAYC,MAAM,EAAEC,YAAY,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAJ,kBAAA;IAC9B,IAAI,CAACK,YAAY,GAAG,IAAIN,eAAe,CAAC,CAAC;IACzC,IAAI,CAACO,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB,IAAI,CAACF,YAAY,CAACG,GAAG,CAACP,MAAM,CAACQ,UAAU,CAAC,YAAM;MAC1C,IAAIN,KAAI,CAACI,OAAO,IAAI,CAACN,MAAM,CAACS,QAAQ,CAAC,CAAC,EAAE;QACpC;MACJ;MACA,IAAMC,UAAU,GAAGV,MAAM,CAACW,aAAa,CAAC,CAAC;MACzC,IAAMC,gBAAgB,GAAGF,UAAU,CAACG,MAAM;MAC1C;MACA,IAAIC,YAAY,GAAG,KAAK;MACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,gBAAgB,EAAEG,CAAC,EAAE,EAAE;QACvC,IAAI,CAACL,UAAU,CAACK,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE;UAC1BF,YAAY,GAAG,IAAI;UACnB;QACJ;MACJ;MACA,IAAI,CAACA,YAAY,EAAE;QACf,IAAIZ,KAAI,CAACG,cAAc,CAACQ,MAAM,KAAK,CAAC,EAAE;UAClCX,KAAI,CAACG,cAAc,CAACQ,MAAM,GAAG,CAAC;QAClC;QACA;MACJ;MACAX,KAAI,CAACG,cAAc,GAAG,EAAE;MACxB,IAAMY,KAAK,GAAGjB,MAAM,CAACkB,QAAQ,CAAC,CAAC;MAC/B,KAAK,IAAIH,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGH,gBAAgB,EAAEG,EAAC,EAAE,EAAE;QACvC,IAAMI,SAAS,GAAGT,UAAU,CAACK,EAAC,CAAC;QAC/B;QACA,IAAIE,KAAK,CAACG,qBAAqB,CAACD,SAAS,CAAC,GAAGpB,kBAAkB,CAACsB,mBAAmB,EAAE;UACjF;QACJ;QACAnB,KAAI,CAACG,cAAc,CAACU,EAAC,CAAC,GAAG;UAAEO,KAAK,EAAEL,KAAK,CAACM,eAAe,CAACJ,SAAS,CAAC;UAAEK,SAAS,EAAEL,SAAS,CAACM,eAAe,KAAKN,SAAS,CAACO;QAAc,CAAC;MAC1I;IACJ,CAAC,CAAC,CAAC;IACH,IAAI,CAACtB,YAAY,CAACG,GAAG,CAACN,YAAY,CAAC0B,YAAY,CAAC,UAAAC,CAAC,EAAI;MACjD1B,KAAI,CAACI,OAAO,GAAG,IAAI;IACvB,CAAC,CAAC,CAAC;IACH,IAAI,CAACF,YAAY,CAACG,GAAG,CAACN,YAAY,CAAC4B,WAAW,CAAC,UAAAD,CAAC,EAAI;MAChD1B,KAAI,CAACI,OAAO,GAAG,KAAK;IACxB,CAAC,CAAC,CAAC;EACP;EAAC,OAAAwB,YAAA,CAAA/B,kBAAA;IAAAgC,GAAA;IAAAT,KAAA,EACD,SAAAU,qBAAqBC,GAAG,EAAE;MACtB,IAAIA,GAAG,IAAI,CAAC,IAAIA,GAAG,GAAG,IAAI,CAAC5B,cAAc,CAACQ,MAAM,EAAE;QAC9C,OAAO,IAAI,CAACR,cAAc,CAAC4B,GAAG,CAAC;MACnC;MACA,OAAOC,SAAS;IACpB;EAAC;IAAAH,GAAA;IAAAT,KAAA,EACD,SAAAa,QAAA,EAAU;MACN,IAAI,CAAC/B,YAAY,CAAC+B,OAAO,CAAC,CAAC;IAC/B;EAAC;AAAA;AAELpC,kBAAkB,CAACsB,mBAAmB,GAAG,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}