{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LanguageAgnosticBracketTokens } from './bracketPairsTree/brackets.js';\nimport { lengthAdd, lengthGetColumnCountIfZeroLineCount, lengthZero } from './bracketPairsTree/length.js';\nimport { parseDocument } from './bracketPairsTree/parser.js';\nimport { DenseKeyProvider } from './bracketPairsTree/smallImmutableSet.js';\nimport { TextBufferTokenizer } from './bracketPairsTree/tokenizer.js';\nexport function fixBracketsInLine(tokens, languageConfigurationService) {\n  var denseKeyProvider = new DenseKeyProvider();\n  var bracketTokens = new LanguageAgnosticBracketTokens(denseKeyProvider, function (languageId) {\n    return languageConfigurationService.getLanguageConfiguration(languageId);\n  });\n  var tokenizer = new TextBufferTokenizer(new StaticTokenizerSource([tokens]), bracketTokens);\n  var node = parseDocument(tokenizer, [], undefined, true);\n  var str = '';\n  var line = tokens.getLineContent();\n  function processNode(node, offset) {\n    if (node.kind === 2 /* AstNodeKind.Pair */) {\n      processNode(node.openingBracket, offset);\n      offset = lengthAdd(offset, node.openingBracket.length);\n      if (node.child) {\n        processNode(node.child, offset);\n        offset = lengthAdd(offset, node.child.length);\n      }\n      if (node.closingBracket) {\n        processNode(node.closingBracket, offset);\n        offset = lengthAdd(offset, node.closingBracket.length);\n      } else {\n        var singleLangBracketTokens = bracketTokens.getSingleLanguageBracketTokens(node.openingBracket.languageId);\n        var closingTokenText = singleLangBracketTokens.findClosingTokenText(node.openingBracket.bracketIds);\n        str += closingTokenText;\n      }\n    } else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n      // remove the bracket\n    } else if (node.kind === 0 /* AstNodeKind.Text */ || node.kind === 1 /* AstNodeKind.Bracket */) {\n      str += line.substring(lengthGetColumnCountIfZeroLineCount(offset), lengthGetColumnCountIfZeroLineCount(lengthAdd(offset, node.length)));\n    } else if (node.kind === 4 /* AstNodeKind.List */) {\n      var _iterator = _createForOfIteratorHelper(node.children),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          processNode(child, offset);\n          offset = lengthAdd(offset, child.length);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n  processNode(node, lengthZero);\n  return str;\n}\nvar StaticTokenizerSource = /*#__PURE__*/function () {\n  function StaticTokenizerSource(lines) {\n    var _this = this;\n    _classCallCheck(this, StaticTokenizerSource);\n    this.lines = lines;\n    this.tokenization = {\n      getLineTokens: function getLineTokens(lineNumber) {\n        return _this.lines[lineNumber - 1];\n      }\n    };\n  }\n  return _createClass(StaticTokenizerSource, [{\n    key: \"getLineCount\",\n    value: function getLineCount() {\n      return this.lines.length;\n    }\n  }, {\n    key: \"getLineLength\",\n    value: function getLineLength(lineNumber) {\n      return this.lines[lineNumber - 1].getLineContent().length;\n    }\n  }]);\n}();","map":{"version":3,"names":["LanguageAgnosticBracketTokens","lengthAdd","lengthGetColumnCountIfZeroLineCount","lengthZero","parseDocument","DenseKeyProvider","TextBufferTokenizer","fixBracketsInLine","tokens","languageConfigurationService","denseKeyProvider","bracketTokens","languageId","getLanguageConfiguration","tokenizer","StaticTokenizerSource","node","undefined","str","line","getLineContent","processNode","offset","kind","openingBracket","length","child","closingBracket","singleLangBracketTokens","getSingleLanguageBracketTokens","closingTokenText","findClosingTokenText","bracketIds","substring","_iterator","_createForOfIteratorHelper","children","_step","s","n","done","value","err","e","f","lines","_this","_classCallCheck","tokenization","getLineTokens","lineNumber","_createClass","key","getLineCount","getLineLength"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/fixBrackets.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LanguageAgnosticBracketTokens } from './bracketPairsTree/brackets.js';\nimport { lengthAdd, lengthGetColumnCountIfZeroLineCount, lengthZero } from './bracketPairsTree/length.js';\nimport { parseDocument } from './bracketPairsTree/parser.js';\nimport { DenseKeyProvider } from './bracketPairsTree/smallImmutableSet.js';\nimport { TextBufferTokenizer } from './bracketPairsTree/tokenizer.js';\nexport function fixBracketsInLine(tokens, languageConfigurationService) {\n    const denseKeyProvider = new DenseKeyProvider();\n    const bracketTokens = new LanguageAgnosticBracketTokens(denseKeyProvider, (languageId) => languageConfigurationService.getLanguageConfiguration(languageId));\n    const tokenizer = new TextBufferTokenizer(new StaticTokenizerSource([tokens]), bracketTokens);\n    const node = parseDocument(tokenizer, [], undefined, true);\n    let str = '';\n    const line = tokens.getLineContent();\n    function processNode(node, offset) {\n        if (node.kind === 2 /* AstNodeKind.Pair */) {\n            processNode(node.openingBracket, offset);\n            offset = lengthAdd(offset, node.openingBracket.length);\n            if (node.child) {\n                processNode(node.child, offset);\n                offset = lengthAdd(offset, node.child.length);\n            }\n            if (node.closingBracket) {\n                processNode(node.closingBracket, offset);\n                offset = lengthAdd(offset, node.closingBracket.length);\n            }\n            else {\n                const singleLangBracketTokens = bracketTokens.getSingleLanguageBracketTokens(node.openingBracket.languageId);\n                const closingTokenText = singleLangBracketTokens.findClosingTokenText(node.openingBracket.bracketIds);\n                str += closingTokenText;\n            }\n        }\n        else if (node.kind === 3 /* AstNodeKind.UnexpectedClosingBracket */) {\n            // remove the bracket\n        }\n        else if (node.kind === 0 /* AstNodeKind.Text */ || node.kind === 1 /* AstNodeKind.Bracket */) {\n            str += line.substring(lengthGetColumnCountIfZeroLineCount(offset), lengthGetColumnCountIfZeroLineCount(lengthAdd(offset, node.length)));\n        }\n        else if (node.kind === 4 /* AstNodeKind.List */) {\n            for (const child of node.children) {\n                processNode(child, offset);\n                offset = lengthAdd(offset, child.length);\n            }\n        }\n    }\n    processNode(node, lengthZero);\n    return str;\n}\nclass StaticTokenizerSource {\n    constructor(lines) {\n        this.lines = lines;\n        this.tokenization = {\n            getLineTokens: (lineNumber) => {\n                return this.lines[lineNumber - 1];\n            }\n        };\n    }\n    getLineCount() {\n        return this.lines.length;\n    }\n    getLineLength(lineNumber) {\n        return this.lines[lineNumber - 1].getLineContent().length;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}