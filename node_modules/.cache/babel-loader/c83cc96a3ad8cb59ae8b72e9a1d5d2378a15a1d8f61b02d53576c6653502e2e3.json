{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { CoreEditingCommands } from '../../../browser/coreCommands.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../../common/commands/replaceCommand.js';\nimport { TrimTrailingWhitespaceCommand } from '../../../common/commands/trimTrailingWhitespaceCommand.js';\nimport { TypeOperations } from '../../../common/cursor/cursorTypeOperations.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyLinesCommand } from './copyLinesCommand.js';\nimport { MoveLinesCommand } from './moveLinesCommand.js';\nimport { SortLinesCommand } from './sortLinesCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n// copy lines\nvar AbstractCopyLinesAction = /*#__PURE__*/function (_EditorAction) {\n  function AbstractCopyLinesAction(down, opts) {\n    var _this;\n    _classCallCheck(this, AbstractCopyLinesAction);\n    _this = _callSuper(this, AbstractCopyLinesAction, [opts]);\n    _this.down = down;\n    return _this;\n  }\n  _inherits(AbstractCopyLinesAction, _EditorAction);\n  return _createClass(AbstractCopyLinesAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      if (!editor.hasModel()) {\n        return;\n      }\n      var selections = editor.getSelections().map(function (selection, index) {\n        return {\n          selection: selection,\n          index: index,\n          ignore: false\n        };\n      });\n      selections.sort(function (a, b) {\n        return Range.compareRangesUsingStarts(a.selection, b.selection);\n      });\n      // Remove selections that would result in copying the same line\n      var prev = selections[0];\n      for (var i = 1; i < selections.length; i++) {\n        var curr = selections[i];\n        if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n          // these two selections would copy the same line\n          if (prev.index < curr.index) {\n            // prev wins\n            curr.ignore = true;\n          } else {\n            // curr wins\n            prev.ignore = true;\n            prev = curr;\n          }\n        }\n      }\n      var commands = [];\n      var _iterator = _createForOfIteratorHelper(selections),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var selection = _step.value;\n          commands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, commands);\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\nvar CopyLinesUpAction = /*#__PURE__*/function (_AbstractCopyLinesAct) {\n  function CopyLinesUpAction() {\n    _classCallCheck(this, CopyLinesUpAction);\n    return _callSuper(this, CopyLinesUpAction, [false, {\n      id: 'editor.action.copyLinesUpAction',\n      label: nls.localize('lines.copyUp', \"Copy Line Up\"),\n      alias: 'Copy Line Up',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n        linux: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miCopyLinesUp',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Copy Line Up\"),\n        order: 1\n      }\n    }]);\n  }\n  _inherits(CopyLinesUpAction, _AbstractCopyLinesAct);\n  return _createClass(CopyLinesUpAction);\n}(AbstractCopyLinesAction);\nvar CopyLinesDownAction = /*#__PURE__*/function (_AbstractCopyLinesAct2) {\n  function CopyLinesDownAction() {\n    _classCallCheck(this, CopyLinesDownAction);\n    return _callSuper(this, CopyLinesDownAction, [true, {\n      id: 'editor.action.copyLinesDownAction',\n      label: nls.localize('lines.copyDown', \"Copy Line Down\"),\n      alias: 'Copy Line Down',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n        linux: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miCopyLinesDown',\n          comment: ['&& denotes a mnemonic']\n        }, \"Co&&py Line Down\"),\n        order: 2\n      }\n    }]);\n  }\n  _inherits(CopyLinesDownAction, _AbstractCopyLinesAct2);\n  return _createClass(CopyLinesDownAction);\n}(AbstractCopyLinesAction);\nexport var DuplicateSelectionAction = /*#__PURE__*/function (_EditorAction2) {\n  function DuplicateSelectionAction() {\n    _classCallCheck(this, DuplicateSelectionAction);\n    return _callSuper(this, DuplicateSelectionAction, [{\n      id: 'editor.action.duplicateSelection',\n      label: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n      alias: 'Duplicate Selection',\n      precondition: EditorContextKeys.writable,\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miDuplicateSelection',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Duplicate Selection\"),\n        order: 5\n      }\n    }]);\n  }\n  _inherits(DuplicateSelectionAction, _EditorAction2);\n  return _createClass(DuplicateSelectionAction, [{\n    key: \"run\",\n    value: function run(accessor, editor, args) {\n      if (!editor.hasModel()) {\n        return;\n      }\n      var commands = [];\n      var selections = editor.getSelections();\n      var model = editor.getModel();\n      var _iterator2 = _createForOfIteratorHelper(selections),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var selection = _step2.value;\n          if (selection.isEmpty()) {\n            commands.push(new CopyLinesCommand(selection, true));\n          } else {\n            var insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n            commands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, commands);\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\n// move lines\nvar AbstractMoveLinesAction = /*#__PURE__*/function (_EditorAction3) {\n  function AbstractMoveLinesAction(down, opts) {\n    var _this2;\n    _classCallCheck(this, AbstractMoveLinesAction);\n    _this2 = _callSuper(this, AbstractMoveLinesAction, [opts]);\n    _this2.down = down;\n    return _this2;\n  }\n  _inherits(AbstractMoveLinesAction, _EditorAction3);\n  return _createClass(AbstractMoveLinesAction, [{\n    key: \"run\",\n    value: function run(accessor, editor) {\n      var languageConfigurationService = accessor.get(ILanguageConfigurationService);\n      var commands = [];\n      var selections = editor.getSelections() || [];\n      var autoIndent = editor.getOption(12 /* EditorOption.autoIndent */);\n      var _iterator3 = _createForOfIteratorHelper(selections),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var selection = _step3.value;\n          commands.push(new MoveLinesCommand(selection, this.down, autoIndent, languageConfigurationService));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, commands);\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\nvar MoveLinesUpAction = /*#__PURE__*/function (_AbstractMoveLinesAct) {\n  function MoveLinesUpAction() {\n    _classCallCheck(this, MoveLinesUpAction);\n    return _callSuper(this, MoveLinesUpAction, [false, {\n      id: 'editor.action.moveLinesUpAction',\n      label: nls.localize('lines.moveUp', \"Move Line Up\"),\n      alias: 'Move Line Up',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n        linux: {\n          primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miMoveLinesUp',\n          comment: ['&& denotes a mnemonic']\n        }, \"Mo&&ve Line Up\"),\n        order: 3\n      }\n    }]);\n  }\n  _inherits(MoveLinesUpAction, _AbstractMoveLinesAct);\n  return _createClass(MoveLinesUpAction);\n}(AbstractMoveLinesAction);\nvar MoveLinesDownAction = /*#__PURE__*/function (_AbstractMoveLinesAct2) {\n  function MoveLinesDownAction() {\n    _classCallCheck(this, MoveLinesDownAction);\n    return _callSuper(this, MoveLinesDownAction, [true, {\n      id: 'editor.action.moveLinesDownAction',\n      label: nls.localize('lines.moveDown', \"Move Line Down\"),\n      alias: 'Move Line Down',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n        linux: {\n          primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      menuOpts: {\n        menuId: MenuId.MenubarSelectionMenu,\n        group: '2_line',\n        title: nls.localize({\n          key: 'miMoveLinesDown',\n          comment: ['&& denotes a mnemonic']\n        }, \"Move &&Line Down\"),\n        order: 4\n      }\n    }]);\n  }\n  _inherits(MoveLinesDownAction, _AbstractMoveLinesAct2);\n  return _createClass(MoveLinesDownAction);\n}(AbstractMoveLinesAction);\nexport var AbstractSortLinesAction = /*#__PURE__*/function (_EditorAction4) {\n  function AbstractSortLinesAction(descending, opts) {\n    var _this3;\n    _classCallCheck(this, AbstractSortLinesAction);\n    _this3 = _callSuper(this, AbstractSortLinesAction, [opts]);\n    _this3.descending = descending;\n    return _this3;\n  }\n  _inherits(AbstractSortLinesAction, _EditorAction4);\n  return _createClass(AbstractSortLinesAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      if (!editor.hasModel()) {\n        return;\n      }\n      var model = editor.getModel();\n      var selections = editor.getSelections();\n      if (selections.length === 1 && selections[0].isEmpty()) {\n        // Apply to whole document.\n        selections = [new Selection(1, 1, model.getLineCount(), model.getLineMaxColumn(model.getLineCount()))];\n      }\n      var _iterator4 = _createForOfIteratorHelper(selections),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var selection = _step4.value;\n          if (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var commands = [];\n      for (var i = 0, len = selections.length; i < len; i++) {\n        commands[i] = new SortLinesCommand(selections[i], this.descending);\n      }\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, commands);\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\nexport var SortLinesAscendingAction = /*#__PURE__*/function (_AbstractSortLinesAct) {\n  function SortLinesAscendingAction() {\n    _classCallCheck(this, SortLinesAscendingAction);\n    return _callSuper(this, SortLinesAscendingAction, [false, {\n      id: 'editor.action.sortLinesAscending',\n      label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n      alias: 'Sort Lines Ascending',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(SortLinesAscendingAction, _AbstractSortLinesAct);\n  return _createClass(SortLinesAscendingAction);\n}(AbstractSortLinesAction);\nexport var SortLinesDescendingAction = /*#__PURE__*/function (_AbstractSortLinesAct2) {\n  function SortLinesDescendingAction() {\n    _classCallCheck(this, SortLinesDescendingAction);\n    return _callSuper(this, SortLinesDescendingAction, [true, {\n      id: 'editor.action.sortLinesDescending',\n      label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n      alias: 'Sort Lines Descending',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(SortLinesDescendingAction, _AbstractSortLinesAct2);\n  return _createClass(SortLinesDescendingAction);\n}(AbstractSortLinesAction);\nexport var DeleteDuplicateLinesAction = /*#__PURE__*/function (_EditorAction5) {\n  function DeleteDuplicateLinesAction() {\n    _classCallCheck(this, DeleteDuplicateLinesAction);\n    return _callSuper(this, DeleteDuplicateLinesAction, [{\n      id: 'editor.action.removeDuplicateLines',\n      label: nls.localize('lines.deleteDuplicates', \"Delete Duplicate Lines\"),\n      alias: 'Delete Duplicate Lines',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(DeleteDuplicateLinesAction, _EditorAction5);\n  return _createClass(DeleteDuplicateLinesAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      if (!editor.hasModel()) {\n        return;\n      }\n      var model = editor.getModel();\n      if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n        return;\n      }\n      var edits = [];\n      var endCursorState = [];\n      var linesDeleted = 0;\n      var updateSelection = true;\n      var selections = editor.getSelections();\n      if (selections.length === 1 && selections[0].isEmpty()) {\n        // Apply to whole document.\n        selections = [new Selection(1, 1, model.getLineCount(), model.getLineMaxColumn(model.getLineCount()))];\n        updateSelection = false;\n      }\n      var _iterator5 = _createForOfIteratorHelper(selections),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var selection = _step5.value;\n          var uniqueLines = new Set();\n          var lines = [];\n          for (var i = selection.startLineNumber; i <= selection.endLineNumber; i++) {\n            var line = model.getLineContent(i);\n            if (uniqueLines.has(line)) {\n              continue;\n            }\n            lines.push(line);\n            uniqueLines.add(line);\n          }\n          var selectionToReplace = new Selection(selection.startLineNumber, 1, selection.endLineNumber, model.getLineMaxColumn(selection.endLineNumber));\n          var adjustedSelectionStart = selection.startLineNumber - linesDeleted;\n          var finalSelection = new Selection(adjustedSelectionStart, 1, adjustedSelectionStart + lines.length - 1, lines[lines.length - 1].length);\n          edits.push(EditOperation.replace(selectionToReplace, lines.join('\\n')));\n          endCursorState.push(finalSelection);\n          linesDeleted += selection.endLineNumber - selection.startLineNumber + 1 - lines.length;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      editor.pushUndoStop();\n      editor.executeEdits(this.id, edits, updateSelection ? endCursorState : undefined);\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\nexport var TrimTrailingWhitespaceAction = /*#__PURE__*/function (_EditorAction6) {\n  function TrimTrailingWhitespaceAction() {\n    _classCallCheck(this, TrimTrailingWhitespaceAction);\n    return _callSuper(this, TrimTrailingWhitespaceAction, [{\n      id: TrimTrailingWhitespaceAction.ID,\n      label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n      alias: 'Trim Trailing Whitespace',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(TrimTrailingWhitespaceAction, _EditorAction6);\n  return _createClass(TrimTrailingWhitespaceAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor, args) {\n      var cursors = [];\n      if (args.reason === 'auto-save') {\n        // See https://github.com/editorconfig/editorconfig-vscode/issues/47\n        // It is very convenient for the editor config extension to invoke this action.\n        // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n        cursors = (editor.getSelections() || []).map(function (s) {\n          return new Position(s.positionLineNumber, s.positionColumn);\n        });\n      }\n      var selection = editor.getSelection();\n      if (selection === null) {\n        return;\n      }\n      var config = _accessor.get(IConfigurationService);\n      var model = editor.getModel();\n      var trimInRegexAndStrings = config.getValue('files.trimTrailingWhitespaceInRegexAndStrings', {\n        overrideIdentifier: model === null || model === void 0 ? void 0 : model.getLanguageId(),\n        resource: model === null || model === void 0 ? void 0 : model.uri\n      });\n      var command = new TrimTrailingWhitespaceCommand(selection, cursors, trimInRegexAndStrings);\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, [command]);\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\nTrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';\nexport var DeleteLinesAction = /*#__PURE__*/function (_EditorAction7) {\n  function DeleteLinesAction() {\n    _classCallCheck(this, DeleteLinesAction);\n    return _callSuper(this, DeleteLinesAction, [{\n      id: 'editor.action.deleteLines',\n      label: nls.localize('lines.delete', \"Delete Line\"),\n      alias: 'Delete Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 41 /* KeyCode.KeyK */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(DeleteLinesAction, _EditorAction7);\n  return _createClass(DeleteLinesAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      if (!editor.hasModel()) {\n        return;\n      }\n      var ops = this._getLinesToRemove(editor);\n      var model = editor.getModel();\n      if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n        // Model is empty\n        return;\n      }\n      var linesDeleted = 0;\n      var edits = [];\n      var cursorState = [];\n      for (var i = 0, len = ops.length; i < len; i++) {\n        var op = ops[i];\n        var startLineNumber = op.startLineNumber;\n        var endLineNumber = op.endLineNumber;\n        var startColumn = 1;\n        var endColumn = model.getLineMaxColumn(endLineNumber);\n        if (endLineNumber < model.getLineCount()) {\n          endLineNumber += 1;\n          endColumn = 1;\n        } else if (startLineNumber > 1) {\n          startLineNumber -= 1;\n          startColumn = model.getLineMaxColumn(startLineNumber);\n        }\n        edits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n        cursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n        linesDeleted += op.endLineNumber - op.startLineNumber + 1;\n      }\n      editor.pushUndoStop();\n      editor.executeEdits(this.id, edits, cursorState);\n      editor.pushUndoStop();\n    }\n  }, {\n    key: \"_getLinesToRemove\",\n    value: function _getLinesToRemove(editor) {\n      // Construct delete operations\n      var operations = editor.getSelections().map(function (s) {\n        var endLineNumber = s.endLineNumber;\n        if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n          endLineNumber -= 1;\n        }\n        return {\n          startLineNumber: s.startLineNumber,\n          selectionStartColumn: s.selectionStartColumn,\n          endLineNumber: endLineNumber,\n          positionColumn: s.positionColumn\n        };\n      });\n      // Sort delete operations\n      operations.sort(function (a, b) {\n        if (a.startLineNumber === b.startLineNumber) {\n          return a.endLineNumber - b.endLineNumber;\n        }\n        return a.startLineNumber - b.startLineNumber;\n      });\n      // Merge delete operations which are adjacent or overlapping\n      var mergedOperations = [];\n      var previousOperation = operations[0];\n      for (var i = 1; i < operations.length; i++) {\n        if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n          // Merge current operations into the previous one\n          previousOperation.endLineNumber = operations[i].endLineNumber;\n        } else {\n          // Push previous operation\n          mergedOperations.push(previousOperation);\n          previousOperation = operations[i];\n        }\n      }\n      // Push the last operation\n      mergedOperations.push(previousOperation);\n      return mergedOperations;\n    }\n  }]);\n}(EditorAction);\nexport var IndentLinesAction = /*#__PURE__*/function (_EditorAction8) {\n  function IndentLinesAction() {\n    _classCallCheck(this, IndentLinesAction);\n    return _callSuper(this, IndentLinesAction, [{\n      id: 'editor.action.indentLines',\n      label: nls.localize('lines.indent', \"Indent Line\"),\n      alias: 'Indent Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(IndentLinesAction, _EditorAction8);\n  return _createClass(IndentLinesAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      var viewModel = editor._getViewModel();\n      if (!viewModel) {\n        return;\n      }\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\nvar OutdentLinesAction = /*#__PURE__*/function (_EditorAction9) {\n  function OutdentLinesAction() {\n    _classCallCheck(this, OutdentLinesAction);\n    return _callSuper(this, OutdentLinesAction, [{\n      id: 'editor.action.outdentLines',\n      label: nls.localize('lines.outdent', \"Outdent Line\"),\n      alias: 'Outdent Line',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(OutdentLinesAction, _EditorAction9);\n  return _createClass(OutdentLinesAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n    }\n  }]);\n}(EditorAction);\nexport var InsertLineBeforeAction = /*#__PURE__*/function (_EditorAction10) {\n  function InsertLineBeforeAction() {\n    _classCallCheck(this, InsertLineBeforeAction);\n    return _callSuper(this, InsertLineBeforeAction, [{\n      id: 'editor.action.insertLineBefore',\n      label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n      alias: 'Insert Line Above',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 3 /* KeyCode.Enter */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(InsertLineBeforeAction, _EditorAction10);\n  return _createClass(InsertLineBeforeAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      var viewModel = editor._getViewModel();\n      if (!viewModel) {\n        return;\n      }\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n  }]);\n}(EditorAction);\nexport var InsertLineAfterAction = /*#__PURE__*/function (_EditorAction11) {\n  function InsertLineAfterAction() {\n    _classCallCheck(this, InsertLineAfterAction);\n    return _callSuper(this, InsertLineAfterAction, [{\n      id: 'editor.action.insertLineAfter',\n      label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n      alias: 'Insert Line Below',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 3 /* KeyCode.Enter */,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(InsertLineAfterAction, _EditorAction11);\n  return _createClass(InsertLineAfterAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      var viewModel = editor._getViewModel();\n      if (!viewModel) {\n        return;\n      }\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n  }]);\n}(EditorAction);\nexport var AbstractDeleteAllToBoundaryAction = /*#__PURE__*/function (_EditorAction12) {\n  function AbstractDeleteAllToBoundaryAction() {\n    _classCallCheck(this, AbstractDeleteAllToBoundaryAction);\n    return _callSuper(this, AbstractDeleteAllToBoundaryAction, arguments);\n  }\n  _inherits(AbstractDeleteAllToBoundaryAction, _EditorAction12);\n  return _createClass(AbstractDeleteAllToBoundaryAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      if (!editor.hasModel()) {\n        return;\n      }\n      var primaryCursor = editor.getSelection();\n      var rangesToDelete = this._getRangesToDelete(editor);\n      // merge overlapping selections\n      var effectiveRanges = [];\n      for (var i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n        var range = rangesToDelete[i];\n        var nextRange = rangesToDelete[i + 1];\n        if (Range.intersectRanges(range, nextRange) === null) {\n          effectiveRanges.push(range);\n        } else {\n          rangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n        }\n      }\n      effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n      var endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n      var edits = effectiveRanges.map(function (range) {\n        return EditOperation.replace(range, '');\n      });\n      editor.pushUndoStop();\n      editor.executeEdits(this.id, edits, endCursorState);\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\nexport var DeleteAllLeftAction = /*#__PURE__*/function (_AbstractDeleteAllToB) {\n  function DeleteAllLeftAction() {\n    _classCallCheck(this, DeleteAllLeftAction);\n    return _callSuper(this, DeleteAllLeftAction, [{\n      id: 'deleteAllLeft',\n      label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n      alias: 'Delete All Left',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 1 /* KeyCode.Backspace */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(DeleteAllLeftAction, _AbstractDeleteAllToB);\n  return _createClass(DeleteAllLeftAction, [{\n    key: \"_getEndCursorState\",\n    value: function _getEndCursorState(primaryCursor, rangesToDelete) {\n      var endPrimaryCursor = null;\n      var endCursorState = [];\n      var deletedLines = 0;\n      rangesToDelete.forEach(function (range) {\n        var endCursor;\n        if (range.endColumn === 1 && deletedLines > 0) {\n          var newStartLine = range.startLineNumber - deletedLines;\n          endCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n        } else {\n          endCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n        }\n        deletedLines += range.endLineNumber - range.startLineNumber;\n        if (range.intersectRanges(primaryCursor)) {\n          endPrimaryCursor = endCursor;\n        } else {\n          endCursorState.push(endCursor);\n        }\n      });\n      if (endPrimaryCursor) {\n        endCursorState.unshift(endPrimaryCursor);\n      }\n      return endCursorState;\n    }\n  }, {\n    key: \"_getRangesToDelete\",\n    value: function _getRangesToDelete(editor) {\n      var selections = editor.getSelections();\n      if (selections === null) {\n        return [];\n      }\n      var rangesToDelete = selections;\n      var model = editor.getModel();\n      if (model === null) {\n        return [];\n      }\n      rangesToDelete.sort(Range.compareRangesUsingStarts);\n      rangesToDelete = rangesToDelete.map(function (selection) {\n        if (selection.isEmpty()) {\n          if (selection.startColumn === 1) {\n            var deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n            var deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineLength(deleteFromLine) + 1;\n            return new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n          } else {\n            return new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n          }\n        } else {\n          return new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n        }\n      });\n      return rangesToDelete;\n    }\n  }]);\n}(AbstractDeleteAllToBoundaryAction);\nexport var DeleteAllRightAction = /*#__PURE__*/function (_AbstractDeleteAllToB2) {\n  function DeleteAllRightAction() {\n    _classCallCheck(this, DeleteAllRightAction);\n    return _callSuper(this, DeleteAllRightAction, [{\n      id: 'deleteAllRight',\n      label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n      alias: 'Delete All Right',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256 /* KeyMod.WinCtrl */ | 41 /* KeyCode.KeyK */,\n          secondary: [2048 /* KeyMod.CtrlCmd */ | 20 /* KeyCode.Delete */]\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(DeleteAllRightAction, _AbstractDeleteAllToB2);\n  return _createClass(DeleteAllRightAction, [{\n    key: \"_getEndCursorState\",\n    value: function _getEndCursorState(primaryCursor, rangesToDelete) {\n      var endPrimaryCursor = null;\n      var endCursorState = [];\n      for (var i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n        var range = rangesToDelete[i];\n        var endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n        if (range.intersectRanges(primaryCursor)) {\n          endPrimaryCursor = endCursor;\n        } else {\n          endCursorState.push(endCursor);\n        }\n      }\n      if (endPrimaryCursor) {\n        endCursorState.unshift(endPrimaryCursor);\n      }\n      return endCursorState;\n    }\n  }, {\n    key: \"_getRangesToDelete\",\n    value: function _getRangesToDelete(editor) {\n      var model = editor.getModel();\n      if (model === null) {\n        return [];\n      }\n      var selections = editor.getSelections();\n      if (selections === null) {\n        return [];\n      }\n      var rangesToDelete = selections.map(function (sel) {\n        if (sel.isEmpty()) {\n          var maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n          if (sel.startColumn === maxColumn) {\n            return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n          } else {\n            return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n          }\n        }\n        return sel;\n      });\n      rangesToDelete.sort(Range.compareRangesUsingStarts);\n      return rangesToDelete;\n    }\n  }]);\n}(AbstractDeleteAllToBoundaryAction);\nexport var JoinLinesAction = /*#__PURE__*/function (_EditorAction13) {\n  function JoinLinesAction() {\n    _classCallCheck(this, JoinLinesAction);\n    return _callSuper(this, JoinLinesAction, [{\n      id: 'editor.action.joinLines',\n      label: nls.localize('lines.joinLines', \"Join Lines\"),\n      alias: 'Join Lines',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 0,\n        mac: {\n          primary: 256 /* KeyMod.WinCtrl */ | 40 /* KeyCode.KeyJ */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(JoinLinesAction, _EditorAction13);\n  return _createClass(JoinLinesAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      var selections = editor.getSelections();\n      if (selections === null) {\n        return;\n      }\n      var primaryCursor = editor.getSelection();\n      if (primaryCursor === null) {\n        return;\n      }\n      selections.sort(Range.compareRangesUsingStarts);\n      var reducedSelections = [];\n      var lastSelection = selections.reduce(function (previousValue, currentValue) {\n        if (previousValue.isEmpty()) {\n          if (previousValue.endLineNumber === currentValue.startLineNumber) {\n            if (primaryCursor.equalsSelection(previousValue)) {\n              primaryCursor = currentValue;\n            }\n            return currentValue;\n          }\n          if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n            reducedSelections.push(previousValue);\n            return currentValue;\n          } else {\n            return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n          }\n        } else {\n          if (currentValue.startLineNumber > previousValue.endLineNumber) {\n            reducedSelections.push(previousValue);\n            return currentValue;\n          } else {\n            return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n          }\n        }\n      });\n      reducedSelections.push(lastSelection);\n      var model = editor.getModel();\n      if (model === null) {\n        return;\n      }\n      var edits = [];\n      var endCursorState = [];\n      var endPrimaryCursor = primaryCursor;\n      var lineOffset = 0;\n      for (var i = 0, len = reducedSelections.length; i < len; i++) {\n        var selection = reducedSelections[i];\n        var startLineNumber = selection.startLineNumber;\n        var startColumn = 1;\n        var columnDeltaOffset = 0;\n        var endLineNumber = void 0,\n          endColumn = void 0;\n        var selectionEndPositionOffset = model.getLineLength(selection.endLineNumber) - selection.endColumn;\n        if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n          var position = selection.getStartPosition();\n          if (position.lineNumber < model.getLineCount()) {\n            endLineNumber = startLineNumber + 1;\n            endColumn = model.getLineMaxColumn(endLineNumber);\n          } else {\n            endLineNumber = position.lineNumber;\n            endColumn = model.getLineMaxColumn(position.lineNumber);\n          }\n        } else {\n          endLineNumber = selection.endLineNumber;\n          endColumn = model.getLineMaxColumn(endLineNumber);\n        }\n        var trimmedLinesContent = model.getLineContent(startLineNumber);\n        for (var _i = startLineNumber + 1; _i <= endLineNumber; _i++) {\n          var lineText = model.getLineContent(_i);\n          var firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(_i);\n          if (firstNonWhitespaceIdx >= 1) {\n            var insertSpace = true;\n            if (trimmedLinesContent === '') {\n              insertSpace = false;\n            }\n            if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' || trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n              insertSpace = false;\n              trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n            }\n            var lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n            trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n            if (insertSpace) {\n              columnDeltaOffset = lineTextWithoutIndent.length + 1;\n            } else {\n              columnDeltaOffset = lineTextWithoutIndent.length;\n            }\n          } else {\n            columnDeltaOffset = 0;\n          }\n        }\n        var deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        if (!deleteSelection.isEmpty()) {\n          var resultSelection = void 0;\n          if (selection.isEmpty()) {\n            edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n            resultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n          } else {\n            if (selection.startLineNumber === selection.endLineNumber) {\n              edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n              resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\n            } else {\n              edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n              resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n            }\n          }\n          if (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n            endPrimaryCursor = resultSelection;\n          } else {\n            endCursorState.push(resultSelection);\n          }\n        }\n        lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n      }\n      endCursorState.unshift(endPrimaryCursor);\n      editor.pushUndoStop();\n      editor.executeEdits(this.id, edits, endCursorState);\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\nexport var TransposeAction = /*#__PURE__*/function (_EditorAction14) {\n  function TransposeAction() {\n    _classCallCheck(this, TransposeAction);\n    return _callSuper(this, TransposeAction, [{\n      id: 'editor.action.transpose',\n      label: nls.localize('editor.transpose', \"Transpose Characters around the Cursor\"),\n      alias: 'Transpose Characters around the Cursor',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(TransposeAction, _EditorAction14);\n  return _createClass(TransposeAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      var selections = editor.getSelections();\n      if (selections === null) {\n        return;\n      }\n      var model = editor.getModel();\n      if (model === null) {\n        return;\n      }\n      var commands = [];\n      for (var i = 0, len = selections.length; i < len; i++) {\n        var selection = selections[i];\n        if (!selection.isEmpty()) {\n          continue;\n        }\n        var cursor = selection.getStartPosition();\n        var maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n        if (cursor.column >= maxColumn) {\n          if (cursor.lineNumber === model.getLineCount()) {\n            continue;\n          }\n          // The cursor is at the end of current line and current line is not empty\n          // then we transpose the character before the cursor and the line break if there is any following line.\n          var deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n          var chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n          commands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n        } else {\n          var _deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n          var _chars = model.getValueInRange(_deleteSelection).split('').reverse().join('');\n          commands.push(new ReplaceCommandThatPreservesSelection(_deleteSelection, _chars, new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n        }\n      }\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, commands);\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\nexport var AbstractCaseAction = /*#__PURE__*/function (_EditorAction15) {\n  function AbstractCaseAction() {\n    _classCallCheck(this, AbstractCaseAction);\n    return _callSuper(this, AbstractCaseAction, arguments);\n  }\n  _inherits(AbstractCaseAction, _EditorAction15);\n  return _createClass(AbstractCaseAction, [{\n    key: \"run\",\n    value: function run(_accessor, editor) {\n      var selections = editor.getSelections();\n      if (selections === null) {\n        return;\n      }\n      var model = editor.getModel();\n      if (model === null) {\n        return;\n      }\n      var wordSeparators = editor.getOption(131 /* EditorOption.wordSeparators */);\n      var textEdits = [];\n      var _iterator6 = _createForOfIteratorHelper(selections),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var selection = _step6.value;\n          if (selection.isEmpty()) {\n            var cursor = selection.getStartPosition();\n            var word = editor.getConfiguredWordAtPosition(cursor);\n            if (!word) {\n              continue;\n            }\n            var wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n            var text = model.getValueInRange(wordRange);\n            textEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n          } else {\n            var _text = model.getValueInRange(selection);\n            textEdits.push(EditOperation.replace(selection, this._modifyText(_text, wordSeparators)));\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      editor.pushUndoStop();\n      editor.executeEdits(this.id, textEdits);\n      editor.pushUndoStop();\n    }\n  }]);\n}(EditorAction);\nexport var UpperCaseAction = /*#__PURE__*/function (_AbstractCaseAction) {\n  function UpperCaseAction() {\n    _classCallCheck(this, UpperCaseAction);\n    return _callSuper(this, UpperCaseAction, [{\n      id: 'editor.action.transformToUppercase',\n      label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n      alias: 'Transform to Uppercase',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(UpperCaseAction, _AbstractCaseAction);\n  return _createClass(UpperCaseAction, [{\n    key: \"_modifyText\",\n    value: function _modifyText(text, wordSeparators) {\n      return text.toLocaleUpperCase();\n    }\n  }]);\n}(AbstractCaseAction);\nexport var LowerCaseAction = /*#__PURE__*/function (_AbstractCaseAction2) {\n  function LowerCaseAction() {\n    _classCallCheck(this, LowerCaseAction);\n    return _callSuper(this, LowerCaseAction, [{\n      id: 'editor.action.transformToLowercase',\n      label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n      alias: 'Transform to Lowercase',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(LowerCaseAction, _AbstractCaseAction2);\n  return _createClass(LowerCaseAction, [{\n    key: \"_modifyText\",\n    value: function _modifyText(text, wordSeparators) {\n      return text.toLocaleLowerCase();\n    }\n  }]);\n}(AbstractCaseAction);\nvar BackwardsCompatibleRegExp = /*#__PURE__*/function () {\n  function BackwardsCompatibleRegExp(_pattern, _flags) {\n    _classCallCheck(this, BackwardsCompatibleRegExp);\n    this._pattern = _pattern;\n    this._flags = _flags;\n    this._actual = null;\n    this._evaluated = false;\n  }\n  return _createClass(BackwardsCompatibleRegExp, [{\n    key: \"get\",\n    value: function get() {\n      if (!this._evaluated) {\n        this._evaluated = true;\n        try {\n          this._actual = new RegExp(this._pattern, this._flags);\n        } catch (err) {\n          // this browser does not support this regular expression\n        }\n      }\n      return this._actual;\n    }\n  }, {\n    key: \"isSupported\",\n    value: function isSupported() {\n      return this.get() !== null;\n    }\n  }]);\n}();\nexport var TitleCaseAction = /*#__PURE__*/function (_AbstractCaseAction3) {\n  function TitleCaseAction() {\n    _classCallCheck(this, TitleCaseAction);\n    return _callSuper(this, TitleCaseAction, [{\n      id: 'editor.action.transformToTitlecase',\n      label: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n      alias: 'Transform to Title Case',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(TitleCaseAction, _AbstractCaseAction3);\n  return _createClass(TitleCaseAction, [{\n    key: \"_modifyText\",\n    value: function _modifyText(text, wordSeparators) {\n      var titleBoundary = TitleCaseAction.titleBoundary.get();\n      if (!titleBoundary) {\n        // cannot support this\n        return text;\n      }\n      return text.toLocaleLowerCase().replace(titleBoundary, function (b) {\n        return b.toLocaleUpperCase();\n      });\n    }\n  }]);\n}(AbstractCaseAction);\nTitleCaseAction.titleBoundary = new BackwardsCompatibleRegExp('(^|[^\\\\p{L}\\\\p{N}\\']|((^|\\\\P{L})\\'))\\\\p{L}', 'gmu');\nexport var SnakeCaseAction = /*#__PURE__*/function (_AbstractCaseAction4) {\n  function SnakeCaseAction() {\n    _classCallCheck(this, SnakeCaseAction);\n    return _callSuper(this, SnakeCaseAction, [{\n      id: 'editor.action.transformToSnakecase',\n      label: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n      alias: 'Transform to Snake Case',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(SnakeCaseAction, _AbstractCaseAction4);\n  return _createClass(SnakeCaseAction, [{\n    key: \"_modifyText\",\n    value: function _modifyText(text, wordSeparators) {\n      var caseBoundary = SnakeCaseAction.caseBoundary.get();\n      var singleLetters = SnakeCaseAction.singleLetters.get();\n      if (!caseBoundary || !singleLetters) {\n        // cannot support this\n        return text;\n      }\n      return text.replace(caseBoundary, '$1_$2').replace(singleLetters, '$1_$2$3').toLocaleLowerCase();\n    }\n  }]);\n}(AbstractCaseAction);\nSnakeCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nSnakeCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu})(\\\\p{Ll})', 'gmu');\nexport var CamelCaseAction = /*#__PURE__*/function (_AbstractCaseAction5) {\n  function CamelCaseAction() {\n    _classCallCheck(this, CamelCaseAction);\n    return _callSuper(this, CamelCaseAction, [{\n      id: 'editor.action.transformToCamelcase',\n      label: nls.localize('editor.transformToCamelcase', \"Transform to Camel Case\"),\n      alias: 'Transform to Camel Case',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(CamelCaseAction, _AbstractCaseAction5);\n  return _createClass(CamelCaseAction, [{\n    key: \"_modifyText\",\n    value: function _modifyText(text, wordSeparators) {\n      var wordBoundary = CamelCaseAction.wordBoundary.get();\n      if (!wordBoundary) {\n        // cannot support this\n        return text;\n      }\n      var words = text.split(wordBoundary);\n      var firstWord = words.shift();\n      return firstWord + words.map(function (word) {\n        return word.substring(0, 1).toLocaleUpperCase() + word.substring(1);\n      }).join('');\n    }\n  }]);\n}(AbstractCaseAction);\nCamelCaseAction.wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm');\nexport var PascalCaseAction = /*#__PURE__*/function (_AbstractCaseAction6) {\n  function PascalCaseAction() {\n    _classCallCheck(this, PascalCaseAction);\n    return _callSuper(this, PascalCaseAction, [{\n      id: 'editor.action.transformToPascalcase',\n      label: nls.localize('editor.transformToPascalcase', \"Transform to Pascal Case\"),\n      alias: 'Transform to Pascal Case',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(PascalCaseAction, _AbstractCaseAction6);\n  return _createClass(PascalCaseAction, [{\n    key: \"_modifyText\",\n    value: function _modifyText(text, wordSeparators) {\n      var wordBoundary = PascalCaseAction.wordBoundary.get();\n      var wordBoundaryToMaintain = PascalCaseAction.wordBoundaryToMaintain.get();\n      if (!wordBoundary || !wordBoundaryToMaintain) {\n        // cannot support this\n        return text;\n      }\n      var wordsWithMaintainBoundaries = text.split(wordBoundaryToMaintain);\n      var words = wordsWithMaintainBoundaries.map(function (word) {\n        return word.split(wordBoundary);\n      }).flat();\n      return words.map(function (word) {\n        return word.substring(0, 1).toLocaleUpperCase() + word.substring(1);\n      }).join('');\n    }\n  }]);\n}(AbstractCaseAction);\nPascalCaseAction.wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm');\nPascalCaseAction.wordBoundaryToMaintain = new BackwardsCompatibleRegExp('(?<=\\\\.)', 'gm');\nexport var KebabCaseAction = /*#__PURE__*/function (_AbstractCaseAction7) {\n  function KebabCaseAction() {\n    _classCallCheck(this, KebabCaseAction);\n    return _callSuper(this, KebabCaseAction, [{\n      id: 'editor.action.transformToKebabcase',\n      label: nls.localize('editor.transformToKebabcase', 'Transform to Kebab Case'),\n      alias: 'Transform to Kebab Case',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(KebabCaseAction, _AbstractCaseAction7);\n  return _createClass(KebabCaseAction, [{\n    key: \"_modifyText\",\n    value: function _modifyText(text, _) {\n      var caseBoundary = KebabCaseAction.caseBoundary.get();\n      var singleLetters = KebabCaseAction.singleLetters.get();\n      var underscoreBoundary = KebabCaseAction.underscoreBoundary.get();\n      if (!caseBoundary || !singleLetters || !underscoreBoundary) {\n        // one or more regexps aren't supported\n        return text;\n      }\n      return text.replace(underscoreBoundary, '$1-$3').replace(caseBoundary, '$1-$2').replace(singleLetters, '$1-$2').toLocaleLowerCase();\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      var areAllRegexpsSupported = [this.caseBoundary, this.singleLetters, this.underscoreBoundary].every(function (regexp) {\n        return regexp.isSupported();\n      });\n      return areAllRegexpsSupported;\n    }\n  }]);\n}(AbstractCaseAction);\nKebabCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nKebabCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu}\\\\p{Ll})', 'gmu');\nKebabCaseAction.underscoreBoundary = new BackwardsCompatibleRegExp('(\\\\S)(_)(\\\\S)', 'gm');\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(DeleteDuplicateLinesAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\nif (SnakeCaseAction.caseBoundary.isSupported() && SnakeCaseAction.singleLetters.isSupported()) {\n  registerEditorAction(SnakeCaseAction);\n}\nif (CamelCaseAction.wordBoundary.isSupported()) {\n  registerEditorAction(CamelCaseAction);\n}\nif (PascalCaseAction.wordBoundary.isSupported()) {\n  registerEditorAction(PascalCaseAction);\n}\nif (TitleCaseAction.titleBoundary.isSupported()) {\n  registerEditorAction(TitleCaseAction);\n}\nif (KebabCaseAction.isSupported()) {\n  registerEditorAction(KebabCaseAction);\n}","map":{"version":3,"names":["KeyChord","CoreEditingCommands","EditorAction","registerEditorAction","ReplaceCommand","ReplaceCommandThatPreservesSelection","ReplaceCommandThatSelectsText","TrimTrailingWhitespaceCommand","TypeOperations","EditOperation","Position","Range","Selection","EditorContextKeys","CopyLinesCommand","MoveLinesCommand","SortLinesCommand","nls","MenuId","ILanguageConfigurationService","IConfigurationService","AbstractCopyLinesAction","_EditorAction","down","opts","_this","_classCallCheck","_callSuper","_inherits","_createClass","key","value","run","_accessor","editor","hasModel","selections","getSelections","map","selection","index","ignore","sort","a","b","compareRangesUsingStarts","prev","i","length","curr","endLineNumber","startLineNumber","commands","_iterator","_createForOfIteratorHelper","_step","s","n","done","push","err","e","f","pushUndoStop","executeCommands","id","CopyLinesUpAction","_AbstractCopyLinesAct","label","localize","alias","precondition","writable","kbOpts","kbExpr","editorTextFocus","primary","linux","weight","menuOpts","menuId","MenubarSelectionMenu","group","title","comment","order","CopyLinesDownAction","_AbstractCopyLinesAct2","DuplicateSelectionAction","_EditorAction2","accessor","args","model","getModel","_iterator2","_step2","isEmpty","insertSelection","endColumn","getValueInRange","AbstractMoveLinesAction","_EditorAction3","_this2","languageConfigurationService","get","autoIndent","getOption","_iterator3","_step3","MoveLinesUpAction","_AbstractMoveLinesAct","MoveLinesDownAction","_AbstractMoveLinesAct2","AbstractSortLinesAction","_EditorAction4","descending","_this3","getLineCount","getLineMaxColumn","_iterator4","_step4","canRun","len","SortLinesAscendingAction","_AbstractSortLinesAct","SortLinesDescendingAction","_AbstractSortLinesAct2","DeleteDuplicateLinesAction","_EditorAction5","edits","endCursorState","linesDeleted","updateSelection","_iterator5","_step5","uniqueLines","Set","lines","line","getLineContent","has","add","selectionToReplace","adjustedSelectionStart","finalSelection","replace","join","executeEdits","undefined","TrimTrailingWhitespaceAction","_EditorAction6","ID","cursors","reason","positionLineNumber","positionColumn","getSelection","config","trimInRegexAndStrings","getValue","overrideIdentifier","getLanguageId","resource","uri","command","DeleteLinesAction","_EditorAction7","textInputFocus","ops","_getLinesToRemove","cursorState","op","startColumn","operations","selectionStartColumn","mergedOperations","previousOperation","IndentLinesAction","_EditorAction8","viewModel","_getViewModel","indent","cursorConfig","OutdentLinesAction","_EditorAction9","Outdent","runEditorCommand","InsertLineBeforeAction","_EditorAction10","lineInsertBefore","InsertLineAfterAction","_EditorAction11","lineInsertAfter","AbstractDeleteAllToBoundaryAction","_EditorAction12","arguments","primaryCursor","rangesToDelete","_getRangesToDelete","effectiveRanges","count","range","nextRange","intersectRanges","plusRange","_getEndCursorState","DeleteAllLeftAction","_AbstractDeleteAllToB","mac","endPrimaryCursor","deletedLines","forEach","endCursor","newStartLine","unshift","deleteFromLine","Math","max","deleteFromColumn","getLineLength","DeleteAllRightAction","_AbstractDeleteAllToB2","secondary","offset","sel","maxColumn","JoinLinesAction","_EditorAction13","reducedSelections","lastSelection","reduce","previousValue","currentValue","equalsSelection","lineOffset","columnDeltaOffset","selectionEndPositionOffset","position","getStartPosition","lineNumber","trimmedLinesContent","lineText","firstNonWhitespaceIdx","getLineFirstNonWhitespaceColumn","insertSpace","charAt","lineTextWithoutIndent","substr","deleteSelection","resultSelection","TransposeAction","_EditorAction14","cursor","column","chars","split","reverse","AbstractCaseAction","_EditorAction15","wordSeparators","textEdits","_iterator6","_step6","word","getConfiguredWordAtPosition","wordRange","text","_modifyText","UpperCaseAction","_AbstractCaseAction","toLocaleUpperCase","LowerCaseAction","_AbstractCaseAction2","toLocaleLowerCase","BackwardsCompatibleRegExp","_pattern","_flags","_actual","_evaluated","RegExp","isSupported","TitleCaseAction","_AbstractCaseAction3","titleBoundary","SnakeCaseAction","_AbstractCaseAction4","caseBoundary","singleLetters","CamelCaseAction","_AbstractCaseAction5","wordBoundary","words","firstWord","shift","substring","PascalCaseAction","_AbstractCaseAction6","wordBoundaryToMaintain","wordsWithMaintainBoundaries","flat","KebabCaseAction","_AbstractCaseAction7","_","underscoreBoundary","areAllRegexpsSupported","every","regexp"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/contrib/linesOperations/browser/linesOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { CoreEditingCommands } from '../../../browser/coreCommands.js';\nimport { EditorAction, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ReplaceCommand, ReplaceCommandThatPreservesSelection, ReplaceCommandThatSelectsText } from '../../../common/commands/replaceCommand.js';\nimport { TrimTrailingWhitespaceCommand } from '../../../common/commands/trimTrailingWhitespaceCommand.js';\nimport { TypeOperations } from '../../../common/cursor/cursorTypeOperations.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyLinesCommand } from './copyLinesCommand.js';\nimport { MoveLinesCommand } from './moveLinesCommand.js';\nimport { SortLinesCommand } from './sortLinesCommand.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n// copy lines\nclass AbstractCopyLinesAction extends EditorAction {\n    constructor(down, opts) {\n        super(opts);\n        this.down = down;\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const selections = editor.getSelections().map((selection, index) => ({ selection, index, ignore: false }));\n        selections.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n        // Remove selections that would result in copying the same line\n        let prev = selections[0];\n        for (let i = 1; i < selections.length; i++) {\n            const curr = selections[i];\n            if (prev.selection.endLineNumber === curr.selection.startLineNumber) {\n                // these two selections would copy the same line\n                if (prev.index < curr.index) {\n                    // prev wins\n                    curr.ignore = true;\n                }\n                else {\n                    // curr wins\n                    prev.ignore = true;\n                    prev = curr;\n                }\n            }\n        }\n        const commands = [];\n        for (const selection of selections) {\n            commands.push(new CopyLinesCommand(selection.selection, this.down, selection.ignore));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass CopyLinesUpAction extends AbstractCopyLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.copyLinesUpAction',\n            label: nls.localize('lines.copyUp', \"Copy Line Up\"),\n            alias: 'Copy Line Up',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n                linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesUp', comment: ['&& denotes a mnemonic'] }, \"&&Copy Line Up\"),\n                order: 1\n            }\n        });\n    }\n}\nclass CopyLinesDownAction extends AbstractCopyLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.copyLinesDownAction',\n            label: nls.localize('lines.copyDown', \"Copy Line Down\"),\n            alias: 'Copy Line Down',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n                linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miCopyLinesDown', comment: ['&& denotes a mnemonic'] }, \"Co&&py Line Down\"),\n                order: 2\n            }\n        });\n    }\n}\nexport class DuplicateSelectionAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.duplicateSelection',\n            label: nls.localize('duplicateSelection', \"Duplicate Selection\"),\n            alias: 'Duplicate Selection',\n            precondition: EditorContextKeys.writable,\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miDuplicateSelection', comment: ['&& denotes a mnemonic'] }, \"&&Duplicate Selection\"),\n                order: 5\n            }\n        });\n    }\n    run(accessor, editor, args) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const commands = [];\n        const selections = editor.getSelections();\n        const model = editor.getModel();\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                commands.push(new CopyLinesCommand(selection, true));\n            }\n            else {\n                const insertSelection = new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn);\n                commands.push(new ReplaceCommandThatSelectsText(insertSelection, model.getValueInRange(selection)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\n// move lines\nclass AbstractMoveLinesAction extends EditorAction {\n    constructor(down, opts) {\n        super(opts);\n        this.down = down;\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const commands = [];\n        const selections = editor.getSelections() || [];\n        const autoIndent = editor.getOption(12 /* EditorOption.autoIndent */);\n        for (const selection of selections) {\n            commands.push(new MoveLinesCommand(selection, this.down, autoIndent, languageConfigurationService));\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nclass MoveLinesUpAction extends AbstractMoveLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.moveLinesUpAction',\n            label: nls.localize('lines.moveUp', \"Move Line Up\"),\n            alias: 'Move Line Up',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n                linux: { primary: 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesUp', comment: ['&& denotes a mnemonic'] }, \"Mo&&ve Line Up\"),\n                order: 3\n            }\n        });\n    }\n}\nclass MoveLinesDownAction extends AbstractMoveLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.moveLinesDownAction',\n            label: nls.localize('lines.moveDown', \"Move Line Down\"),\n            alias: 'Move Line Down',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n                linux: { primary: 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            menuOpts: {\n                menuId: MenuId.MenubarSelectionMenu,\n                group: '2_line',\n                title: nls.localize({ key: 'miMoveLinesDown', comment: ['&& denotes a mnemonic'] }, \"Move &&Line Down\"),\n                order: 4\n            }\n        });\n    }\n}\nexport class AbstractSortLinesAction extends EditorAction {\n    constructor(descending, opts) {\n        super(opts);\n        this.descending = descending;\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        let selections = editor.getSelections();\n        if (selections.length === 1 && selections[0].isEmpty()) {\n            // Apply to whole document.\n            selections = [new Selection(1, 1, model.getLineCount(), model.getLineMaxColumn(model.getLineCount()))];\n        }\n        for (const selection of selections) {\n            if (!SortLinesCommand.canRun(editor.getModel(), selection, this.descending)) {\n                return;\n            }\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new SortLinesCommand(selections[i], this.descending);\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class SortLinesAscendingAction extends AbstractSortLinesAction {\n    constructor() {\n        super(false, {\n            id: 'editor.action.sortLinesAscending',\n            label: nls.localize('lines.sortAscending', \"Sort Lines Ascending\"),\n            alias: 'Sort Lines Ascending',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class SortLinesDescendingAction extends AbstractSortLinesAction {\n    constructor() {\n        super(true, {\n            id: 'editor.action.sortLinesDescending',\n            label: nls.localize('lines.sortDescending', \"Sort Lines Descending\"),\n            alias: 'Sort Lines Descending',\n            precondition: EditorContextKeys.writable\n        });\n    }\n}\nexport class DeleteDuplicateLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.removeDuplicateLines',\n            label: nls.localize('lines.deleteDuplicates', \"Delete Duplicate Lines\"),\n            alias: 'Delete Duplicate Lines',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            return;\n        }\n        const edits = [];\n        const endCursorState = [];\n        let linesDeleted = 0;\n        let updateSelection = true;\n        let selections = editor.getSelections();\n        if (selections.length === 1 && selections[0].isEmpty()) {\n            // Apply to whole document.\n            selections = [new Selection(1, 1, model.getLineCount(), model.getLineMaxColumn(model.getLineCount()))];\n            updateSelection = false;\n        }\n        for (const selection of selections) {\n            const uniqueLines = new Set();\n            const lines = [];\n            for (let i = selection.startLineNumber; i <= selection.endLineNumber; i++) {\n                const line = model.getLineContent(i);\n                if (uniqueLines.has(line)) {\n                    continue;\n                }\n                lines.push(line);\n                uniqueLines.add(line);\n            }\n            const selectionToReplace = new Selection(selection.startLineNumber, 1, selection.endLineNumber, model.getLineMaxColumn(selection.endLineNumber));\n            const adjustedSelectionStart = selection.startLineNumber - linesDeleted;\n            const finalSelection = new Selection(adjustedSelectionStart, 1, adjustedSelectionStart + lines.length - 1, lines[lines.length - 1].length);\n            edits.push(EditOperation.replace(selectionToReplace, lines.join('\\n')));\n            endCursorState.push(finalSelection);\n            linesDeleted += (selection.endLineNumber - selection.startLineNumber + 1) - lines.length;\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, updateSelection ? endCursorState : undefined);\n        editor.pushUndoStop();\n    }\n}\nexport class TrimTrailingWhitespaceAction extends EditorAction {\n    constructor() {\n        super({\n            id: TrimTrailingWhitespaceAction.ID,\n            label: nls.localize('lines.trimTrailingWhitespace', \"Trim Trailing Whitespace\"),\n            alias: 'Trim Trailing Whitespace',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor, args) {\n        let cursors = [];\n        if (args.reason === 'auto-save') {\n            // See https://github.com/editorconfig/editorconfig-vscode/issues/47\n            // It is very convenient for the editor config extension to invoke this action.\n            // So, if we get a reason:'auto-save' passed in, let's preserve cursor positions.\n            cursors = (editor.getSelections() || []).map(s => new Position(s.positionLineNumber, s.positionColumn));\n        }\n        const selection = editor.getSelection();\n        if (selection === null) {\n            return;\n        }\n        const config = _accessor.get(IConfigurationService);\n        const model = editor.getModel();\n        const trimInRegexAndStrings = config.getValue('files.trimTrailingWhitespaceInRegexAndStrings', { overrideIdentifier: model === null || model === void 0 ? void 0 : model.getLanguageId(), resource: model === null || model === void 0 ? void 0 : model.uri });\n        const command = new TrimTrailingWhitespaceCommand(selection, cursors, trimInRegexAndStrings);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n    }\n}\nTrimTrailingWhitespaceAction.ID = 'editor.action.trimTrailingWhitespace';\nexport class DeleteLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.deleteLines',\n            label: nls.localize('lines.delete', \"Delete Line\"),\n            alias: 'Delete Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 41 /* KeyCode.KeyK */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const ops = this._getLinesToRemove(editor);\n        const model = editor.getModel();\n        if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n            // Model is empty\n            return;\n        }\n        let linesDeleted = 0;\n        const edits = [];\n        const cursorState = [];\n        for (let i = 0, len = ops.length; i < len; i++) {\n            const op = ops[i];\n            let startLineNumber = op.startLineNumber;\n            let endLineNumber = op.endLineNumber;\n            let startColumn = 1;\n            let endColumn = model.getLineMaxColumn(endLineNumber);\n            if (endLineNumber < model.getLineCount()) {\n                endLineNumber += 1;\n                endColumn = 1;\n            }\n            else if (startLineNumber > 1) {\n                startLineNumber -= 1;\n                startColumn = model.getLineMaxColumn(startLineNumber);\n            }\n            edits.push(EditOperation.replace(new Selection(startLineNumber, startColumn, endLineNumber, endColumn), ''));\n            cursorState.push(new Selection(startLineNumber - linesDeleted, op.positionColumn, startLineNumber - linesDeleted, op.positionColumn));\n            linesDeleted += (op.endLineNumber - op.startLineNumber + 1);\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, cursorState);\n        editor.pushUndoStop();\n    }\n    _getLinesToRemove(editor) {\n        // Construct delete operations\n        const operations = editor.getSelections().map((s) => {\n            let endLineNumber = s.endLineNumber;\n            if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n                endLineNumber -= 1;\n            }\n            return {\n                startLineNumber: s.startLineNumber,\n                selectionStartColumn: s.selectionStartColumn,\n                endLineNumber: endLineNumber,\n                positionColumn: s.positionColumn\n            };\n        });\n        // Sort delete operations\n        operations.sort((a, b) => {\n            if (a.startLineNumber === b.startLineNumber) {\n                return a.endLineNumber - b.endLineNumber;\n            }\n            return a.startLineNumber - b.startLineNumber;\n        });\n        // Merge delete operations which are adjacent or overlapping\n        const mergedOperations = [];\n        let previousOperation = operations[0];\n        for (let i = 1; i < operations.length; i++) {\n            if (previousOperation.endLineNumber + 1 >= operations[i].startLineNumber) {\n                // Merge current operations into the previous one\n                previousOperation.endLineNumber = operations[i].endLineNumber;\n            }\n            else {\n                // Push previous operation\n                mergedOperations.push(previousOperation);\n                previousOperation = operations[i];\n            }\n        }\n        // Push the last operation\n        mergedOperations.push(previousOperation);\n        return mergedOperations;\n    }\n}\nexport class IndentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.indentLines',\n            label: nls.localize('lines.indent', \"Indent Line\"),\n            alias: 'Indent Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.indent(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n        editor.pushUndoStop();\n    }\n}\nclass OutdentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.outdentLines',\n            label: nls.localize('lines.outdent', \"Outdent Line\"),\n            alias: 'Outdent Line',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        CoreEditingCommands.Outdent.runEditorCommand(_accessor, editor, null);\n    }\n}\nexport class InsertLineBeforeAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertLineBefore',\n            label: nls.localize('lines.insertBefore', \"Insert Line Above\"),\n            alias: 'Insert Line Above',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 3 /* KeyCode.Enter */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.lineInsertBefore(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n}\nexport class InsertLineAfterAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.insertLineAfter',\n            label: nls.localize('lines.insertAfter', \"Insert Line Below\"),\n            alias: 'Insert Line Below',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 3 /* KeyCode.Enter */,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            return;\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.lineInsertAfter(viewModel.cursorConfig, editor.getModel(), editor.getSelections()));\n    }\n}\nexport class AbstractDeleteAllToBoundaryAction extends EditorAction {\n    run(_accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const primaryCursor = editor.getSelection();\n        const rangesToDelete = this._getRangesToDelete(editor);\n        // merge overlapping selections\n        const effectiveRanges = [];\n        for (let i = 0, count = rangesToDelete.length - 1; i < count; i++) {\n            const range = rangesToDelete[i];\n            const nextRange = rangesToDelete[i + 1];\n            if (Range.intersectRanges(range, nextRange) === null) {\n                effectiveRanges.push(range);\n            }\n            else {\n                rangesToDelete[i + 1] = Range.plusRange(range, nextRange);\n            }\n        }\n        effectiveRanges.push(rangesToDelete[rangesToDelete.length - 1]);\n        const endCursorState = this._getEndCursorState(primaryCursor, effectiveRanges);\n        const edits = effectiveRanges.map(range => {\n            return EditOperation.replace(range, '');\n        });\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class DeleteAllLeftAction extends AbstractDeleteAllToBoundaryAction {\n    constructor() {\n        super({\n            id: 'deleteAllLeft',\n            label: nls.localize('lines.deleteAllLeft', \"Delete All Left\"),\n            alias: 'Delete All Left',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1 /* KeyCode.Backspace */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    _getEndCursorState(primaryCursor, rangesToDelete) {\n        let endPrimaryCursor = null;\n        const endCursorState = [];\n        let deletedLines = 0;\n        rangesToDelete.forEach(range => {\n            let endCursor;\n            if (range.endColumn === 1 && deletedLines > 0) {\n                const newStartLine = range.startLineNumber - deletedLines;\n                endCursor = new Selection(newStartLine, range.startColumn, newStartLine, range.startColumn);\n            }\n            else {\n                endCursor = new Selection(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\n            }\n            deletedLines += range.endLineNumber - range.startLineNumber;\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        });\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    }\n    _getRangesToDelete(editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        let rangesToDelete = selections;\n        const model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\n        rangesToDelete = rangesToDelete.map(selection => {\n            if (selection.isEmpty()) {\n                if (selection.startColumn === 1) {\n                    const deleteFromLine = Math.max(1, selection.startLineNumber - 1);\n                    const deleteFromColumn = selection.startLineNumber === 1 ? 1 : model.getLineLength(deleteFromLine) + 1;\n                    return new Range(deleteFromLine, deleteFromColumn, selection.startLineNumber, 1);\n                }\n                else {\n                    return new Range(selection.startLineNumber, 1, selection.startLineNumber, selection.startColumn);\n                }\n            }\n            else {\n                return new Range(selection.startLineNumber, 1, selection.endLineNumber, selection.endColumn);\n            }\n        });\n        return rangesToDelete;\n    }\n}\nexport class DeleteAllRightAction extends AbstractDeleteAllToBoundaryAction {\n    constructor() {\n        super({\n            id: 'deleteAllRight',\n            label: nls.localize('lines.deleteAllRight', \"Delete All Right\"),\n            alias: 'Delete All Right',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                mac: { primary: 256 /* KeyMod.WinCtrl */ | 41 /* KeyCode.KeyK */, secondary: [2048 /* KeyMod.CtrlCmd */ | 20 /* KeyCode.Delete */] },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    _getEndCursorState(primaryCursor, rangesToDelete) {\n        let endPrimaryCursor = null;\n        const endCursorState = [];\n        for (let i = 0, len = rangesToDelete.length, offset = 0; i < len; i++) {\n            const range = rangesToDelete[i];\n            const endCursor = new Selection(range.startLineNumber - offset, range.startColumn, range.startLineNumber - offset, range.startColumn);\n            if (range.intersectRanges(primaryCursor)) {\n                endPrimaryCursor = endCursor;\n            }\n            else {\n                endCursorState.push(endCursor);\n            }\n        }\n        if (endPrimaryCursor) {\n            endCursorState.unshift(endPrimaryCursor);\n        }\n        return endCursorState;\n    }\n    _getRangesToDelete(editor) {\n        const model = editor.getModel();\n        if (model === null) {\n            return [];\n        }\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return [];\n        }\n        const rangesToDelete = selections.map((sel) => {\n            if (sel.isEmpty()) {\n                const maxColumn = model.getLineMaxColumn(sel.startLineNumber);\n                if (sel.startColumn === maxColumn) {\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber + 1, 1);\n                }\n                else {\n                    return new Range(sel.startLineNumber, sel.startColumn, sel.startLineNumber, maxColumn);\n                }\n            }\n            return sel;\n        });\n        rangesToDelete.sort(Range.compareRangesUsingStarts);\n        return rangesToDelete;\n    }\n}\nexport class JoinLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.joinLines',\n            label: nls.localize('lines.joinLines', \"Join Lines\"),\n            alias: 'Join Lines',\n            precondition: EditorContextKeys.writable,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 0,\n                mac: { primary: 256 /* KeyMod.WinCtrl */ | 40 /* KeyCode.KeyJ */ },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        let primaryCursor = editor.getSelection();\n        if (primaryCursor === null) {\n            return;\n        }\n        selections.sort(Range.compareRangesUsingStarts);\n        const reducedSelections = [];\n        const lastSelection = selections.reduce((previousValue, currentValue) => {\n            if (previousValue.isEmpty()) {\n                if (previousValue.endLineNumber === currentValue.startLineNumber) {\n                    if (primaryCursor.equalsSelection(previousValue)) {\n                        primaryCursor = currentValue;\n                    }\n                    return currentValue;\n                }\n                if (currentValue.startLineNumber > previousValue.endLineNumber + 1) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n            else {\n                if (currentValue.startLineNumber > previousValue.endLineNumber) {\n                    reducedSelections.push(previousValue);\n                    return currentValue;\n                }\n                else {\n                    return new Selection(previousValue.startLineNumber, previousValue.startColumn, currentValue.endLineNumber, currentValue.endColumn);\n                }\n            }\n        });\n        reducedSelections.push(lastSelection);\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const edits = [];\n        const endCursorState = [];\n        let endPrimaryCursor = primaryCursor;\n        let lineOffset = 0;\n        for (let i = 0, len = reducedSelections.length; i < len; i++) {\n            const selection = reducedSelections[i];\n            const startLineNumber = selection.startLineNumber;\n            const startColumn = 1;\n            let columnDeltaOffset = 0;\n            let endLineNumber, endColumn;\n            const selectionEndPositionOffset = model.getLineLength(selection.endLineNumber) - selection.endColumn;\n            if (selection.isEmpty() || selection.startLineNumber === selection.endLineNumber) {\n                const position = selection.getStartPosition();\n                if (position.lineNumber < model.getLineCount()) {\n                    endLineNumber = startLineNumber + 1;\n                    endColumn = model.getLineMaxColumn(endLineNumber);\n                }\n                else {\n                    endLineNumber = position.lineNumber;\n                    endColumn = model.getLineMaxColumn(position.lineNumber);\n                }\n            }\n            else {\n                endLineNumber = selection.endLineNumber;\n                endColumn = model.getLineMaxColumn(endLineNumber);\n            }\n            let trimmedLinesContent = model.getLineContent(startLineNumber);\n            for (let i = startLineNumber + 1; i <= endLineNumber; i++) {\n                const lineText = model.getLineContent(i);\n                const firstNonWhitespaceIdx = model.getLineFirstNonWhitespaceColumn(i);\n                if (firstNonWhitespaceIdx >= 1) {\n                    let insertSpace = true;\n                    if (trimmedLinesContent === '') {\n                        insertSpace = false;\n                    }\n                    if (insertSpace && (trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === ' ' ||\n                        trimmedLinesContent.charAt(trimmedLinesContent.length - 1) === '\\t')) {\n                        insertSpace = false;\n                        trimmedLinesContent = trimmedLinesContent.replace(/[\\s\\uFEFF\\xA0]+$/g, ' ');\n                    }\n                    const lineTextWithoutIndent = lineText.substr(firstNonWhitespaceIdx - 1);\n                    trimmedLinesContent += (insertSpace ? ' ' : '') + lineTextWithoutIndent;\n                    if (insertSpace) {\n                        columnDeltaOffset = lineTextWithoutIndent.length + 1;\n                    }\n                    else {\n                        columnDeltaOffset = lineTextWithoutIndent.length;\n                    }\n                }\n                else {\n                    columnDeltaOffset = 0;\n                }\n            }\n            const deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n            if (!deleteSelection.isEmpty()) {\n                let resultSelection;\n                if (selection.isEmpty()) {\n                    edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                    resultSelection = new Selection(deleteSelection.startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1, startLineNumber - lineOffset, trimmedLinesContent.length - columnDeltaOffset + 1);\n                }\n                else {\n                    if (selection.startLineNumber === selection.endLineNumber) {\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.endLineNumber - lineOffset, selection.endColumn);\n                    }\n                    else {\n                        edits.push(EditOperation.replace(deleteSelection, trimmedLinesContent));\n                        resultSelection = new Selection(selection.startLineNumber - lineOffset, selection.startColumn, selection.startLineNumber - lineOffset, trimmedLinesContent.length - selectionEndPositionOffset);\n                    }\n                }\n                if (Range.intersectRanges(deleteSelection, primaryCursor) !== null) {\n                    endPrimaryCursor = resultSelection;\n                }\n                else {\n                    endCursorState.push(resultSelection);\n                }\n            }\n            lineOffset += deleteSelection.endLineNumber - deleteSelection.startLineNumber;\n        }\n        endCursorState.unshift(endPrimaryCursor);\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits, endCursorState);\n        editor.pushUndoStop();\n    }\n}\nexport class TransposeAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.transpose',\n            label: nls.localize('editor.transpose', \"Transpose Characters around the Cursor\"),\n            alias: 'Transpose Characters around the Cursor',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            const selection = selections[i];\n            if (!selection.isEmpty()) {\n                continue;\n            }\n            const cursor = selection.getStartPosition();\n            const maxColumn = model.getLineMaxColumn(cursor.lineNumber);\n            if (cursor.column >= maxColumn) {\n                if (cursor.lineNumber === model.getLineCount()) {\n                    continue;\n                }\n                // The cursor is at the end of current line and current line is not empty\n                // then we transpose the character before the cursor and the line break if there is any following line.\n                const deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1);\n                const chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new ReplaceCommand(new Selection(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber + 1, 1), chars));\n            }\n            else {\n                const deleteSelection = new Range(cursor.lineNumber, Math.max(1, cursor.column - 1), cursor.lineNumber, cursor.column + 1);\n                const chars = model.getValueInRange(deleteSelection).split('').reverse().join('');\n                commands.push(new ReplaceCommandThatPreservesSelection(deleteSelection, chars, new Selection(cursor.lineNumber, cursor.column + 1, cursor.lineNumber, cursor.column + 1)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, commands);\n        editor.pushUndoStop();\n    }\n}\nexport class AbstractCaseAction extends EditorAction {\n    run(_accessor, editor) {\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const model = editor.getModel();\n        if (model === null) {\n            return;\n        }\n        const wordSeparators = editor.getOption(131 /* EditorOption.wordSeparators */);\n        const textEdits = [];\n        for (const selection of selections) {\n            if (selection.isEmpty()) {\n                const cursor = selection.getStartPosition();\n                const word = editor.getConfiguredWordAtPosition(cursor);\n                if (!word) {\n                    continue;\n                }\n                const wordRange = new Range(cursor.lineNumber, word.startColumn, cursor.lineNumber, word.endColumn);\n                const text = model.getValueInRange(wordRange);\n                textEdits.push(EditOperation.replace(wordRange, this._modifyText(text, wordSeparators)));\n            }\n            else {\n                const text = model.getValueInRange(selection);\n                textEdits.push(EditOperation.replace(selection, this._modifyText(text, wordSeparators)));\n            }\n        }\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, textEdits);\n        editor.pushUndoStop();\n    }\n}\nexport class UpperCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToUppercase',\n            label: nls.localize('editor.transformToUppercase', \"Transform to Uppercase\"),\n            alias: 'Transform to Uppercase',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        return text.toLocaleUpperCase();\n    }\n}\nexport class LowerCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToLowercase',\n            label: nls.localize('editor.transformToLowercase', \"Transform to Lowercase\"),\n            alias: 'Transform to Lowercase',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        return text.toLocaleLowerCase();\n    }\n}\nclass BackwardsCompatibleRegExp {\n    constructor(_pattern, _flags) {\n        this._pattern = _pattern;\n        this._flags = _flags;\n        this._actual = null;\n        this._evaluated = false;\n    }\n    get() {\n        if (!this._evaluated) {\n            this._evaluated = true;\n            try {\n                this._actual = new RegExp(this._pattern, this._flags);\n            }\n            catch (err) {\n                // this browser does not support this regular expression\n            }\n        }\n        return this._actual;\n    }\n    isSupported() {\n        return (this.get() !== null);\n    }\n}\nexport class TitleCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToTitlecase',\n            label: nls.localize('editor.transformToTitlecase', \"Transform to Title Case\"),\n            alias: 'Transform to Title Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const titleBoundary = TitleCaseAction.titleBoundary.get();\n        if (!titleBoundary) {\n            // cannot support this\n            return text;\n        }\n        return text\n            .toLocaleLowerCase()\n            .replace(titleBoundary, (b) => b.toLocaleUpperCase());\n    }\n}\nTitleCaseAction.titleBoundary = new BackwardsCompatibleRegExp('(^|[^\\\\p{L}\\\\p{N}\\']|((^|\\\\P{L})\\'))\\\\p{L}', 'gmu');\nexport class SnakeCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToSnakecase',\n            label: nls.localize('editor.transformToSnakecase', \"Transform to Snake Case\"),\n            alias: 'Transform to Snake Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const caseBoundary = SnakeCaseAction.caseBoundary.get();\n        const singleLetters = SnakeCaseAction.singleLetters.get();\n        if (!caseBoundary || !singleLetters) {\n            // cannot support this\n            return text;\n        }\n        return (text\n            .replace(caseBoundary, '$1_$2')\n            .replace(singleLetters, '$1_$2$3')\n            .toLocaleLowerCase());\n    }\n}\nSnakeCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nSnakeCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu})(\\\\p{Ll})', 'gmu');\nexport class CamelCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToCamelcase',\n            label: nls.localize('editor.transformToCamelcase', \"Transform to Camel Case\"),\n            alias: 'Transform to Camel Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const wordBoundary = CamelCaseAction.wordBoundary.get();\n        if (!wordBoundary) {\n            // cannot support this\n            return text;\n        }\n        const words = text.split(wordBoundary);\n        const firstWord = words.shift();\n        return firstWord + words.map((word) => word.substring(0, 1).toLocaleUpperCase() + word.substring(1))\n            .join('');\n    }\n}\nCamelCaseAction.wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm');\nexport class PascalCaseAction extends AbstractCaseAction {\n    constructor() {\n        super({\n            id: 'editor.action.transformToPascalcase',\n            label: nls.localize('editor.transformToPascalcase', \"Transform to Pascal Case\"),\n            alias: 'Transform to Pascal Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, wordSeparators) {\n        const wordBoundary = PascalCaseAction.wordBoundary.get();\n        const wordBoundaryToMaintain = PascalCaseAction.wordBoundaryToMaintain.get();\n        if (!wordBoundary || !wordBoundaryToMaintain) {\n            // cannot support this\n            return text;\n        }\n        const wordsWithMaintainBoundaries = text.split(wordBoundaryToMaintain);\n        const words = wordsWithMaintainBoundaries.map((word) => word.split(wordBoundary)).flat();\n        return words.map((word) => word.substring(0, 1).toLocaleUpperCase() + word.substring(1))\n            .join('');\n    }\n}\nPascalCaseAction.wordBoundary = new BackwardsCompatibleRegExp('[_\\\\s-]', 'gm');\nPascalCaseAction.wordBoundaryToMaintain = new BackwardsCompatibleRegExp('(?<=\\\\.)', 'gm');\nexport class KebabCaseAction extends AbstractCaseAction {\n    static isSupported() {\n        const areAllRegexpsSupported = [\n            this.caseBoundary,\n            this.singleLetters,\n            this.underscoreBoundary,\n        ].every((regexp) => regexp.isSupported());\n        return areAllRegexpsSupported;\n    }\n    constructor() {\n        super({\n            id: 'editor.action.transformToKebabcase',\n            label: nls.localize('editor.transformToKebabcase', 'Transform to Kebab Case'),\n            alias: 'Transform to Kebab Case',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    _modifyText(text, _) {\n        const caseBoundary = KebabCaseAction.caseBoundary.get();\n        const singleLetters = KebabCaseAction.singleLetters.get();\n        const underscoreBoundary = KebabCaseAction.underscoreBoundary.get();\n        if (!caseBoundary || !singleLetters || !underscoreBoundary) {\n            // one or more regexps aren't supported\n            return text;\n        }\n        return text\n            .replace(underscoreBoundary, '$1-$3')\n            .replace(caseBoundary, '$1-$2')\n            .replace(singleLetters, '$1-$2')\n            .toLocaleLowerCase();\n    }\n}\nKebabCaseAction.caseBoundary = new BackwardsCompatibleRegExp('(\\\\p{Ll})(\\\\p{Lu})', 'gmu');\nKebabCaseAction.singleLetters = new BackwardsCompatibleRegExp('(\\\\p{Lu}|\\\\p{N})(\\\\p{Lu}\\\\p{Ll})', 'gmu');\nKebabCaseAction.underscoreBoundary = new BackwardsCompatibleRegExp('(\\\\S)(_)(\\\\S)', 'gm');\nregisterEditorAction(CopyLinesUpAction);\nregisterEditorAction(CopyLinesDownAction);\nregisterEditorAction(DuplicateSelectionAction);\nregisterEditorAction(MoveLinesUpAction);\nregisterEditorAction(MoveLinesDownAction);\nregisterEditorAction(SortLinesAscendingAction);\nregisterEditorAction(SortLinesDescendingAction);\nregisterEditorAction(DeleteDuplicateLinesAction);\nregisterEditorAction(TrimTrailingWhitespaceAction);\nregisterEditorAction(DeleteLinesAction);\nregisterEditorAction(IndentLinesAction);\nregisterEditorAction(OutdentLinesAction);\nregisterEditorAction(InsertLineBeforeAction);\nregisterEditorAction(InsertLineAfterAction);\nregisterEditorAction(DeleteAllLeftAction);\nregisterEditorAction(DeleteAllRightAction);\nregisterEditorAction(JoinLinesAction);\nregisterEditorAction(TransposeAction);\nregisterEditorAction(UpperCaseAction);\nregisterEditorAction(LowerCaseAction);\nif (SnakeCaseAction.caseBoundary.isSupported() && SnakeCaseAction.singleLetters.isSupported()) {\n    registerEditorAction(SnakeCaseAction);\n}\nif (CamelCaseAction.wordBoundary.isSupported()) {\n    registerEditorAction(CamelCaseAction);\n}\nif (PascalCaseAction.wordBoundary.isSupported()) {\n    registerEditorAction(PascalCaseAction);\n}\nif (TitleCaseAction.titleBoundary.isSupported()) {\n    registerEditorAction(TitleCaseAction);\n}\nif (KebabCaseAction.isSupported()) {\n    registerEditorAction(KebabCaseAction);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}