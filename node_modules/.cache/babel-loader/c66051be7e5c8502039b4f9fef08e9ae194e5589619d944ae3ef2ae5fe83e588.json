{"ast":null,"code":"import _slicedToArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns } from '../core/cursorColumns.js';\nexport var AtomicTabMoveOperations = /*#__PURE__*/function () {\n  function AtomicTabMoveOperations() {\n    _classCallCheck(this, AtomicTabMoveOperations);\n  }\n  return _createClass(AtomicTabMoveOperations, null, [{\n    key: \"whitespaceVisibleColumn\",\n    value:\n    /**\n     * Get the visible column at the position. If we get to a non-whitespace character first\n     * or past the end of string then return -1.\n     *\n     * **Note** `position` and the return value are 0-based.\n     */\n    function whitespaceVisibleColumn(lineContent, position, tabSize) {\n      var lineLength = lineContent.length;\n      var visibleColumn = 0;\n      var prevTabStopPosition = -1;\n      var prevTabStopVisibleColumn = -1;\n      for (var i = 0; i < lineLength; i++) {\n        if (i === position) {\n          return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n        }\n        if (visibleColumn % tabSize === 0) {\n          prevTabStopPosition = i;\n          prevTabStopVisibleColumn = visibleColumn;\n        }\n        var chCode = lineContent.charCodeAt(i);\n        switch (chCode) {\n          case 32 /* CharCode.Space */:\n            visibleColumn += 1;\n            break;\n          case 9 /* CharCode.Tab */:\n            // Skip to the next multiple of tabSize.\n            visibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n            break;\n          default:\n            return [-1, -1, -1];\n        }\n      }\n      if (position === lineLength) {\n        return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n      }\n      return [-1, -1, -1];\n    }\n    /**\n     * Return the position that should result from a move left, right or to the\n     * nearest tab, if atomic tabs are enabled. Left and right are used for the\n     * arrow key movements, nearest is used for mouse selection. It returns\n     * -1 if atomic tabs are not relevant and you should fall back to normal\n     * behaviour.\n     *\n     * **Note**: `position` and the return value are 0-based.\n     */\n  }, {\n    key: \"atomicPosition\",\n    value: function atomicPosition(lineContent, position, tabSize, direction) {\n      var lineLength = lineContent.length;\n      // Get the 0-based visible column corresponding to the position, or return\n      // -1 if it is not in the initial whitespace.\n      var _AtomicTabMoveOperati = AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent, position, tabSize),\n        _AtomicTabMoveOperati2 = _slicedToArray(_AtomicTabMoveOperati, 3),\n        prevTabStopPosition = _AtomicTabMoveOperati2[0],\n        prevTabStopVisibleColumn = _AtomicTabMoveOperati2[1],\n        visibleColumn = _AtomicTabMoveOperati2[2];\n      if (visibleColumn === -1) {\n        return -1;\n      }\n      // Is the output left or right of the current position. The case for nearest\n      // where it is the same as the current position is handled in the switch.\n      var left;\n      switch (direction) {\n        case 0 /* Direction.Left */:\n          left = true;\n          break;\n        case 1 /* Direction.Right */:\n          left = false;\n          break;\n        case 2 /* Direction.Nearest */:\n          // The code below assumes the output position is either left or right\n          // of the input position. If it is the same, return immediately.\n          if (visibleColumn % tabSize === 0) {\n            return position;\n          }\n          // Go to the nearest indentation.\n          left = visibleColumn % tabSize <= tabSize / 2;\n          break;\n      }\n      // If going left, we can just use the info about the last tab stop position and\n      // last tab stop visible column that we computed in the first walk over the whitespace.\n      if (left) {\n        if (prevTabStopPosition === -1) {\n          return -1;\n        }\n        // If the direction is left, we need to keep scanning right to ensure\n        // that targetVisibleColumn + tabSize is before non-whitespace.\n        // This is so that when we press left at the end of a partial\n        // indentation it only goes one character. For example '      foo' with\n        // tabSize 4, should jump from position 6 to position 5, not 4.\n        var _currentVisibleColumn = prevTabStopVisibleColumn;\n        for (var i = prevTabStopPosition; i < lineLength; ++i) {\n          if (_currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n            // It is a full indentation.\n            return prevTabStopPosition;\n          }\n          var chCode = lineContent.charCodeAt(i);\n          switch (chCode) {\n            case 32 /* CharCode.Space */:\n              _currentVisibleColumn += 1;\n              break;\n            case 9 /* CharCode.Tab */:\n              _currentVisibleColumn = CursorColumns.nextRenderTabStop(_currentVisibleColumn, tabSize);\n              break;\n            default:\n              return -1;\n          }\n        }\n        if (_currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n          return prevTabStopPosition;\n        }\n        // It must have been a partial indentation.\n        return -1;\n      }\n      // We are going right.\n      var targetVisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n      // We can just continue from where whitespaceVisibleColumn got to.\n      var currentVisibleColumn = visibleColumn;\n      for (var _i = position; _i < lineLength; _i++) {\n        if (currentVisibleColumn === targetVisibleColumn) {\n          return _i;\n        }\n        var _chCode = lineContent.charCodeAt(_i);\n        switch (_chCode) {\n          case 32 /* CharCode.Space */:\n            currentVisibleColumn += 1;\n            break;\n          case 9 /* CharCode.Tab */:\n            currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n            break;\n          default:\n            return -1;\n        }\n      }\n      // This condition handles when the target column is at the end of the line.\n      if (currentVisibleColumn === targetVisibleColumn) {\n        return lineLength;\n      }\n      return -1;\n    }\n  }]);\n}();","map":{"version":3,"names":["CursorColumns","AtomicTabMoveOperations","_classCallCheck","_createClass","key","value","whitespaceVisibleColumn","lineContent","position","tabSize","lineLength","length","visibleColumn","prevTabStopPosition","prevTabStopVisibleColumn","i","chCode","charCodeAt","nextRenderTabStop","atomicPosition","direction","_AtomicTabMoveOperati","_AtomicTabMoveOperati2","_slicedToArray","left","currentVisibleColumn","targetVisibleColumn"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorAtomicMoveOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns } from '../core/cursorColumns.js';\nexport class AtomicTabMoveOperations {\n    /**\n     * Get the visible column at the position. If we get to a non-whitespace character first\n     * or past the end of string then return -1.\n     *\n     * **Note** `position` and the return value are 0-based.\n     */\n    static whitespaceVisibleColumn(lineContent, position, tabSize) {\n        const lineLength = lineContent.length;\n        let visibleColumn = 0;\n        let prevTabStopPosition = -1;\n        let prevTabStopVisibleColumn = -1;\n        for (let i = 0; i < lineLength; i++) {\n            if (i === position) {\n                return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n            }\n            if (visibleColumn % tabSize === 0) {\n                prevTabStopPosition = i;\n                prevTabStopVisibleColumn = visibleColumn;\n            }\n            const chCode = lineContent.charCodeAt(i);\n            switch (chCode) {\n                case 32 /* CharCode.Space */:\n                    visibleColumn += 1;\n                    break;\n                case 9 /* CharCode.Tab */:\n                    // Skip to the next multiple of tabSize.\n                    visibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n                    break;\n                default:\n                    return [-1, -1, -1];\n            }\n        }\n        if (position === lineLength) {\n            return [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n        }\n        return [-1, -1, -1];\n    }\n    /**\n     * Return the position that should result from a move left, right or to the\n     * nearest tab, if atomic tabs are enabled. Left and right are used for the\n     * arrow key movements, nearest is used for mouse selection. It returns\n     * -1 if atomic tabs are not relevant and you should fall back to normal\n     * behaviour.\n     *\n     * **Note**: `position` and the return value are 0-based.\n     */\n    static atomicPosition(lineContent, position, tabSize, direction) {\n        const lineLength = lineContent.length;\n        // Get the 0-based visible column corresponding to the position, or return\n        // -1 if it is not in the initial whitespace.\n        const [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn] = AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent, position, tabSize);\n        if (visibleColumn === -1) {\n            return -1;\n        }\n        // Is the output left or right of the current position. The case for nearest\n        // where it is the same as the current position is handled in the switch.\n        let left;\n        switch (direction) {\n            case 0 /* Direction.Left */:\n                left = true;\n                break;\n            case 1 /* Direction.Right */:\n                left = false;\n                break;\n            case 2 /* Direction.Nearest */:\n                // The code below assumes the output position is either left or right\n                // of the input position. If it is the same, return immediately.\n                if (visibleColumn % tabSize === 0) {\n                    return position;\n                }\n                // Go to the nearest indentation.\n                left = visibleColumn % tabSize <= (tabSize / 2);\n                break;\n        }\n        // If going left, we can just use the info about the last tab stop position and\n        // last tab stop visible column that we computed in the first walk over the whitespace.\n        if (left) {\n            if (prevTabStopPosition === -1) {\n                return -1;\n            }\n            // If the direction is left, we need to keep scanning right to ensure\n            // that targetVisibleColumn + tabSize is before non-whitespace.\n            // This is so that when we press left at the end of a partial\n            // indentation it only goes one character. For example '      foo' with\n            // tabSize 4, should jump from position 6 to position 5, not 4.\n            let currentVisibleColumn = prevTabStopVisibleColumn;\n            for (let i = prevTabStopPosition; i < lineLength; ++i) {\n                if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n                    // It is a full indentation.\n                    return prevTabStopPosition;\n                }\n                const chCode = lineContent.charCodeAt(i);\n                switch (chCode) {\n                    case 32 /* CharCode.Space */:\n                        currentVisibleColumn += 1;\n                        break;\n                    case 9 /* CharCode.Tab */:\n                        currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n                        break;\n                    default:\n                        return -1;\n                }\n            }\n            if (currentVisibleColumn === prevTabStopVisibleColumn + tabSize) {\n                return prevTabStopPosition;\n            }\n            // It must have been a partial indentation.\n            return -1;\n        }\n        // We are going right.\n        const targetVisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n        // We can just continue from where whitespaceVisibleColumn got to.\n        let currentVisibleColumn = visibleColumn;\n        for (let i = position; i < lineLength; i++) {\n            if (currentVisibleColumn === targetVisibleColumn) {\n                return i;\n            }\n            const chCode = lineContent.charCodeAt(i);\n            switch (chCode) {\n                case 32 /* CharCode.Space */:\n                    currentVisibleColumn += 1;\n                    break;\n                case 9 /* CharCode.Tab */:\n                    currentVisibleColumn = CursorColumns.nextRenderTabStop(currentVisibleColumn, tabSize);\n                    break;\n                default:\n                    return -1;\n            }\n        }\n        // This condition handles when the target column is at the end of the line.\n        if (currentVisibleColumn === targetVisibleColumn) {\n            return lineLength;\n        }\n        return -1;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}