{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.substr.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { IndentAction } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { getScopedLineTokens } from './languageConfigurationRegistry.js';\n/**\n * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.\n * Result:\n * -1: run into the boundary of embedded languages\n * 0: every line above are invalid\n * else: nearest preceding line of the same language\n */\nfunction getPrecedingValidLine(model, lineNumber, indentRulesSupport) {\n  var languageId = model.tokenization.getLanguageIdAtPosition(lineNumber, 0);\n  if (lineNumber > 1) {\n    var lastLineNumber;\n    var resultLineNumber = -1;\n    for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n      if (model.tokenization.getLanguageIdAtPosition(lastLineNumber, 0) !== languageId) {\n        return resultLineNumber;\n      }\n      var text = model.getLineContent(lastLineNumber);\n      if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n        resultLineNumber = lastLineNumber;\n        continue;\n      }\n      return lastLineNumber;\n    }\n  }\n  return -1;\n}\n/**\n * Get inherited indentation from above lines.\n * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\n * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\n * 3. If this line doesn't match any indent rules\n *   a. check whether the line above it matches indentNextLinePattern\n *   b. If not, the indent level of this line is the result\n *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\n * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\n *\n * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\n */\nexport function getInheritIndentForLine(autoIndent, model, lineNumber) {\n  var honorIntentialIndent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var languageConfigurationService = arguments.length > 4 ? arguments[4] : undefined;\n  if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n    return null;\n  }\n  var indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.tokenization.getLanguageId()).indentRulesSupport;\n  if (!indentRulesSupport) {\n    return null;\n  }\n  if (lineNumber <= 1) {\n    return {\n      indentation: '',\n      action: null\n    };\n  }\n  // Use no indent if this is the first non-blank line\n  for (var priorLineNumber = lineNumber - 1; priorLineNumber > 0; priorLineNumber--) {\n    if (model.getLineContent(priorLineNumber) !== '') {\n      break;\n    }\n    if (priorLineNumber === 1) {\n      return {\n        indentation: '',\n        action: null\n      };\n    }\n  }\n  var precedingUnIgnoredLine = getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n  if (precedingUnIgnoredLine < 0) {\n    return null;\n  } else if (precedingUnIgnoredLine < 1) {\n    return {\n      indentation: '',\n      action: null\n    };\n  }\n  var precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n  if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n    return {\n      indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n      action: IndentAction.Indent,\n      line: precedingUnIgnoredLine\n    };\n  } else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n    return {\n      indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n      action: null,\n      line: precedingUnIgnoredLine\n    };\n  } else {\n    // precedingUnIgnoredLine can not be ignored.\n    // it doesn't increase indent of following lines\n    // it doesn't increase just next line\n    // so current line is not affect by precedingUnIgnoredLine\n    // and then we should get a correct inheritted indentation from above lines\n    if (precedingUnIgnoredLine === 1) {\n      return {\n        indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n        action: null,\n        line: precedingUnIgnoredLine\n      };\n    }\n    var previousLine = precedingUnIgnoredLine - 1;\n    var previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n    if (!(previousLineIndentMetadata & (1 /* IndentConsts.INCREASE_MASK */ | 2 /* IndentConsts.DECREASE_MASK */)) && previousLineIndentMetadata & 4 /* IndentConsts.INDENT_NEXTLINE_MASK */) {\n      var stopLine = 0;\n      for (var i = previousLine - 1; i > 0; i--) {\n        if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n          continue;\n        }\n        stopLine = i;\n        break;\n      }\n      return {\n        indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n        action: null,\n        line: stopLine + 1\n      };\n    }\n    if (honorIntentialIndent) {\n      return {\n        indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n        action: null,\n        line: precedingUnIgnoredLine\n      };\n    } else {\n      // search from precedingUnIgnoredLine until we find one whose indent is not temporary\n      for (var _i = precedingUnIgnoredLine; _i > 0; _i--) {\n        var lineContent = model.getLineContent(_i);\n        if (indentRulesSupport.shouldIncrease(lineContent)) {\n          return {\n            indentation: strings.getLeadingWhitespace(lineContent),\n            action: IndentAction.Indent,\n            line: _i\n          };\n        } else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n          var _stopLine = 0;\n          for (var j = _i - 1; j > 0; j--) {\n            if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(_i))) {\n              continue;\n            }\n            _stopLine = j;\n            break;\n          }\n          return {\n            indentation: strings.getLeadingWhitespace(model.getLineContent(_stopLine + 1)),\n            action: null,\n            line: _stopLine + 1\n          };\n        } else if (indentRulesSupport.shouldDecrease(lineContent)) {\n          return {\n            indentation: strings.getLeadingWhitespace(lineContent),\n            action: null,\n            line: _i\n          };\n        }\n      }\n      return {\n        indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n        action: null,\n        line: 1\n      };\n    }\n  }\n}\nexport function getGoodIndentForLine(autoIndent, virtualModel, languageId, lineNumber, indentConverter, languageConfigurationService) {\n  if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n    return null;\n  }\n  var richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n  if (!richEditSupport) {\n    return null;\n  }\n  var indentRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n  if (!indentRulesSupport) {\n    return null;\n  }\n  var indent = getInheritIndentForLine(autoIndent, virtualModel, lineNumber, undefined, languageConfigurationService);\n  var lineContent = virtualModel.getLineContent(lineNumber);\n  if (indent) {\n    var inheritLine = indent.line;\n    if (inheritLine !== undefined) {\n      // Apply enter action as long as there are only whitespace lines between inherited line and this line.\n      var shouldApplyEnterRules = true;\n      for (var inBetweenLine = inheritLine; inBetweenLine < lineNumber - 1; inBetweenLine++) {\n        if (!/^\\s*$/.test(virtualModel.getLineContent(inBetweenLine))) {\n          shouldApplyEnterRules = false;\n          break;\n        }\n      }\n      if (shouldApplyEnterRules) {\n        var enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n        if (enterResult) {\n          var indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n          if (enterResult.removeText) {\n            indentation = indentation.substring(0, indentation.length - enterResult.removeText);\n          }\n          if (enterResult.indentAction === IndentAction.Indent || enterResult.indentAction === IndentAction.IndentOutdent) {\n            indentation = indentConverter.shiftIndent(indentation);\n          } else if (enterResult.indentAction === IndentAction.Outdent) {\n            indentation = indentConverter.unshiftIndent(indentation);\n          }\n          if (indentRulesSupport.shouldDecrease(lineContent)) {\n            indentation = indentConverter.unshiftIndent(indentation);\n          }\n          if (enterResult.appendText) {\n            indentation += enterResult.appendText;\n          }\n          return strings.getLeadingWhitespace(indentation);\n        }\n      }\n    }\n    if (indentRulesSupport.shouldDecrease(lineContent)) {\n      if (indent.action === IndentAction.Indent) {\n        return indent.indentation;\n      } else {\n        return indentConverter.unshiftIndent(indent.indentation);\n      }\n    } else {\n      if (indent.action === IndentAction.Indent) {\n        return indentConverter.shiftIndent(indent.indentation);\n      } else {\n        return indent.indentation;\n      }\n    }\n  }\n  return null;\n}\nexport function getIndentForEnter(autoIndent, model, range, indentConverter, languageConfigurationService) {\n  if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n    return null;\n  }\n  model.tokenization.forceTokenization(range.startLineNumber);\n  var lineTokens = model.tokenization.getLineTokens(range.startLineNumber);\n  var scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n  var scopedLineText = scopedLineTokens.getLineContent();\n  var embeddedLanguage = false;\n  var beforeEnterText;\n  if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n    // we are in the embeded language content\n    embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n    beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n  } else {\n    beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n  }\n  var afterEnterText;\n  if (range.isEmpty()) {\n    afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n  } else {\n    var endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n    afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n  }\n  var indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n  if (!indentRulesSupport) {\n    return null;\n  }\n  var beforeEnterResult = beforeEnterText;\n  var beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n  var virtualModel = {\n    tokenization: {\n      getLineTokens: function getLineTokens(lineNumber) {\n        return model.tokenization.getLineTokens(lineNumber);\n      },\n      getLanguageId: function getLanguageId() {\n        return model.getLanguageId();\n      },\n      getLanguageIdAtPosition: function getLanguageIdAtPosition(lineNumber, column) {\n        return model.getLanguageIdAtPosition(lineNumber, column);\n      }\n    },\n    getLineContent: function getLineContent(lineNumber) {\n      if (lineNumber === range.startLineNumber) {\n        return beforeEnterResult;\n      } else {\n        return model.getLineContent(lineNumber);\n      }\n    }\n  };\n  var currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n  var afterEnterAction = getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1, undefined, languageConfigurationService);\n  if (!afterEnterAction) {\n    var beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n    return {\n      beforeEnter: beforeEnter,\n      afterEnter: beforeEnter\n    };\n  }\n  var afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n  if (afterEnterAction.action === IndentAction.Indent) {\n    afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n  }\n  if (indentRulesSupport.shouldDecrease(afterEnterText)) {\n    afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n  }\n  return {\n    beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n    afterEnter: afterEnterIndent\n  };\n}\n/**\n * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\n * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\n */\nexport function getIndentActionForType(autoIndent, model, range, ch, indentConverter, languageConfigurationService) {\n  if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n    return null;\n  }\n  var scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n  if (scopedLineTokens.firstCharOffset) {\n    // this line has mixed languages and indentation rules will not work\n    return null;\n  }\n  var indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n  if (!indentRulesSupport) {\n    return null;\n  }\n  var scopedLineText = scopedLineTokens.getLineContent();\n  var beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n  // selection support\n  var afterTypeText;\n  if (range.isEmpty()) {\n    afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n  } else {\n    var endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n    afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n  }\n  // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n  // Users might change the indentation by purpose and we should honor that instead of readjusting.\n  if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n    // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n    // 1. Get inherited indent action\n    var r = getInheritIndentForLine(autoIndent, model, range.startLineNumber, false, languageConfigurationService);\n    if (!r) {\n      return null;\n    }\n    var indentation = r.indentation;\n    if (r.action !== IndentAction.Indent) {\n      indentation = indentConverter.unshiftIndent(indentation);\n    }\n    return indentation;\n  }\n  return null;\n}\nexport function getIndentMetadata(model, lineNumber, languageConfigurationService) {\n  var indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n  if (!indentRulesSupport) {\n    return null;\n  }\n  if (lineNumber < 1 || lineNumber > model.getLineCount()) {\n    return null;\n  }\n  return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n}","map":{"version":3,"names":["strings","IndentAction","createScopedLineTokens","getScopedLineTokens","getPrecedingValidLine","model","lineNumber","indentRulesSupport","languageId","tokenization","getLanguageIdAtPosition","lastLineNumber","resultLineNumber","text","getLineContent","shouldIgnore","test","getInheritIndentForLine","autoIndent","honorIntentialIndent","arguments","length","undefined","languageConfigurationService","getLanguageConfiguration","getLanguageId","indentation","action","priorLineNumber","precedingUnIgnoredLine","precedingUnIgnoredLineContent","shouldIncrease","shouldIndentNextLine","getLeadingWhitespace","Indent","line","shouldDecrease","previousLine","previousLineIndentMetadata","getIndentMetadata","stopLine","i","lineContent","j","getGoodIndentForLine","virtualModel","indentConverter","richEditSupport","indent","inheritLine","shouldApplyEnterRules","inBetweenLine","enterResult","onEnter","removeText","substring","indentAction","IndentOutdent","shiftIndent","Outdent","unshiftIndent","appendText","getIndentForEnter","range","forceTokenization","startLineNumber","lineTokens","getLineTokens","scopedLineTokens","startColumn","scopedLineText","embeddedLanguage","beforeEnterText","firstCharOffset","substr","afterEnterText","isEmpty","endScopedLineTokens","endLineNumber","endColumn","beforeEnterResult","beforeEnterIndent","column","currentLineIndent","afterEnterAction","beforeEnter","afterEnter","afterEnterIndent","getIndentActionForType","ch","beforeTypeText","afterTypeText","r","getLineCount"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/languages/autoIndent.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { IndentAction } from './languageConfiguration.js';\nimport { createScopedLineTokens } from './supports.js';\nimport { getScopedLineTokens } from './languageConfigurationRegistry.js';\n/**\n * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.\n * Result:\n * -1: run into the boundary of embedded languages\n * 0: every line above are invalid\n * else: nearest preceding line of the same language\n */\nfunction getPrecedingValidLine(model, lineNumber, indentRulesSupport) {\n    const languageId = model.tokenization.getLanguageIdAtPosition(lineNumber, 0);\n    if (lineNumber > 1) {\n        let lastLineNumber;\n        let resultLineNumber = -1;\n        for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n            if (model.tokenization.getLanguageIdAtPosition(lastLineNumber, 0) !== languageId) {\n                return resultLineNumber;\n            }\n            const text = model.getLineContent(lastLineNumber);\n            if (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n                resultLineNumber = lastLineNumber;\n                continue;\n            }\n            return lastLineNumber;\n        }\n    }\n    return -1;\n}\n/**\n * Get inherited indentation from above lines.\n * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\n * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\n * 3. If this line doesn't match any indent rules\n *   a. check whether the line above it matches indentNextLinePattern\n *   b. If not, the indent level of this line is the result\n *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\n * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\n *\n * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\n */\nexport function getInheritIndentForLine(autoIndent, model, lineNumber, honorIntentialIndent = true, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.tokenization.getLanguageId()).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    if (lineNumber <= 1) {\n        return {\n            indentation: '',\n            action: null\n        };\n    }\n    // Use no indent if this is the first non-blank line\n    for (let priorLineNumber = lineNumber - 1; priorLineNumber > 0; priorLineNumber--) {\n        if (model.getLineContent(priorLineNumber) !== '') {\n            break;\n        }\n        if (priorLineNumber === 1) {\n            return {\n                indentation: '',\n                action: null\n            };\n        }\n    }\n    const precedingUnIgnoredLine = getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n    if (precedingUnIgnoredLine < 0) {\n        return null;\n    }\n    else if (precedingUnIgnoredLine < 1) {\n        return {\n            indentation: '',\n            action: null\n        };\n    }\n    const precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n    if (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n        return {\n            indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n            action: IndentAction.Indent,\n            line: precedingUnIgnoredLine\n        };\n    }\n    else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n        return {\n            indentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n            action: null,\n            line: precedingUnIgnoredLine\n        };\n    }\n    else {\n        // precedingUnIgnoredLine can not be ignored.\n        // it doesn't increase indent of following lines\n        // it doesn't increase just next line\n        // so current line is not affect by precedingUnIgnoredLine\n        // and then we should get a correct inheritted indentation from above lines\n        if (precedingUnIgnoredLine === 1) {\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        const previousLine = precedingUnIgnoredLine - 1;\n        const previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n        if (!(previousLineIndentMetadata & (1 /* IndentConsts.INCREASE_MASK */ | 2 /* IndentConsts.DECREASE_MASK */)) &&\n            (previousLineIndentMetadata & 4 /* IndentConsts.INDENT_NEXTLINE_MASK */)) {\n            let stopLine = 0;\n            for (let i = previousLine - 1; i > 0; i--) {\n                if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                    continue;\n                }\n                stopLine = i;\n                break;\n            }\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                action: null,\n                line: stopLine + 1\n            };\n        }\n        if (honorIntentialIndent) {\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n                action: null,\n                line: precedingUnIgnoredLine\n            };\n        }\n        else {\n            // search from precedingUnIgnoredLine until we find one whose indent is not temporary\n            for (let i = precedingUnIgnoredLine; i > 0; i--) {\n                const lineContent = model.getLineContent(i);\n                if (indentRulesSupport.shouldIncrease(lineContent)) {\n                    return {\n                        indentation: strings.getLeadingWhitespace(lineContent),\n                        action: IndentAction.Indent,\n                        line: i\n                    };\n                }\n                else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n                    let stopLine = 0;\n                    for (let j = i - 1; j > 0; j--) {\n                        if (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n                            continue;\n                        }\n                        stopLine = j;\n                        break;\n                    }\n                    return {\n                        indentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n                        action: null,\n                        line: stopLine + 1\n                    };\n                }\n                else if (indentRulesSupport.shouldDecrease(lineContent)) {\n                    return {\n                        indentation: strings.getLeadingWhitespace(lineContent),\n                        action: null,\n                        line: i\n                    };\n                }\n            }\n            return {\n                indentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n                action: null,\n                line: 1\n            };\n        }\n    }\n}\nexport function getGoodIndentForLine(autoIndent, virtualModel, languageId, lineNumber, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n    if (!richEditSupport) {\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const indent = getInheritIndentForLine(autoIndent, virtualModel, lineNumber, undefined, languageConfigurationService);\n    const lineContent = virtualModel.getLineContent(lineNumber);\n    if (indent) {\n        const inheritLine = indent.line;\n        if (inheritLine !== undefined) {\n            // Apply enter action as long as there are only whitespace lines between inherited line and this line.\n            let shouldApplyEnterRules = true;\n            for (let inBetweenLine = inheritLine; inBetweenLine < lineNumber - 1; inBetweenLine++) {\n                if (!/^\\s*$/.test(virtualModel.getLineContent(inBetweenLine))) {\n                    shouldApplyEnterRules = false;\n                    break;\n                }\n            }\n            if (shouldApplyEnterRules) {\n                const enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n                if (enterResult) {\n                    let indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n                    if (enterResult.removeText) {\n                        indentation = indentation.substring(0, indentation.length - enterResult.removeText);\n                    }\n                    if ((enterResult.indentAction === IndentAction.Indent) ||\n                        (enterResult.indentAction === IndentAction.IndentOutdent)) {\n                        indentation = indentConverter.shiftIndent(indentation);\n                    }\n                    else if (enterResult.indentAction === IndentAction.Outdent) {\n                        indentation = indentConverter.unshiftIndent(indentation);\n                    }\n                    if (indentRulesSupport.shouldDecrease(lineContent)) {\n                        indentation = indentConverter.unshiftIndent(indentation);\n                    }\n                    if (enterResult.appendText) {\n                        indentation += enterResult.appendText;\n                    }\n                    return strings.getLeadingWhitespace(indentation);\n                }\n            }\n        }\n        if (indentRulesSupport.shouldDecrease(lineContent)) {\n            if (indent.action === IndentAction.Indent) {\n                return indent.indentation;\n            }\n            else {\n                return indentConverter.unshiftIndent(indent.indentation);\n            }\n        }\n        else {\n            if (indent.action === IndentAction.Indent) {\n                return indentConverter.shiftIndent(indent.indentation);\n            }\n            else {\n                return indent.indentation;\n            }\n        }\n    }\n    return null;\n}\nexport function getIndentForEnter(autoIndent, model, range, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    model.tokenization.forceTokenization(range.startLineNumber);\n    const lineTokens = model.tokenization.getLineTokens(range.startLineNumber);\n    const scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n    const scopedLineText = scopedLineTokens.getLineContent();\n    let embeddedLanguage = false;\n    let beforeEnterText;\n    if (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n        // we are in the embeded language content\n        embeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n        beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        beforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n    }\n    let afterEnterText;\n    if (range.isEmpty()) {\n        afterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const beforeEnterResult = beforeEnterText;\n    const beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n    const virtualModel = {\n        tokenization: {\n            getLineTokens: (lineNumber) => {\n                return model.tokenization.getLineTokens(lineNumber);\n            },\n            getLanguageId: () => {\n                return model.getLanguageId();\n            },\n            getLanguageIdAtPosition: (lineNumber, column) => {\n                return model.getLanguageIdAtPosition(lineNumber, column);\n            },\n        },\n        getLineContent: (lineNumber) => {\n            if (lineNumber === range.startLineNumber) {\n                return beforeEnterResult;\n            }\n            else {\n                return model.getLineContent(lineNumber);\n            }\n        }\n    };\n    const currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n    const afterEnterAction = getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1, undefined, languageConfigurationService);\n    if (!afterEnterAction) {\n        const beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n        return {\n            beforeEnter: beforeEnter,\n            afterEnter: beforeEnter\n        };\n    }\n    let afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n    if (afterEnterAction.action === IndentAction.Indent) {\n        afterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n    }\n    if (indentRulesSupport.shouldDecrease(afterEnterText)) {\n        afterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n    }\n    return {\n        beforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n        afterEnter: afterEnterIndent\n    };\n}\n/**\n * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\n * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\n */\nexport function getIndentActionForType(autoIndent, model, range, ch, indentConverter, languageConfigurationService) {\n    if (autoIndent < 4 /* EditorAutoIndentStrategy.Full */) {\n        return null;\n    }\n    const scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n    if (scopedLineTokens.firstCharOffset) {\n        // this line has mixed languages and indentation rules will not work\n        return null;\n    }\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    const scopedLineText = scopedLineTokens.getLineContent();\n    const beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    // selection support\n    let afterTypeText;\n    if (range.isEmpty()) {\n        afterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    else {\n        const endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n        afterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n    }\n    // If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n    // Users might change the indentation by purpose and we should honor that instead of readjusting.\n    if (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n        // after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n        // 1. Get inherited indent action\n        const r = getInheritIndentForLine(autoIndent, model, range.startLineNumber, false, languageConfigurationService);\n        if (!r) {\n            return null;\n        }\n        let indentation = r.indentation;\n        if (r.action !== IndentAction.Indent) {\n            indentation = indentConverter.unshiftIndent(indentation);\n        }\n        return indentation;\n    }\n    return null;\n}\nexport function getIndentMetadata(model, lineNumber, languageConfigurationService) {\n    const indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n    if (!indentRulesSupport) {\n        return null;\n    }\n    if (lineNumber < 1 || lineNumber > model.getLineCount()) {\n        return null;\n    }\n    return indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAO,MAAM,iCAAiC;AAC1D,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,sBAAsB,QAAQ,eAAe;AACtD,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,KAAK,EAAEC,UAAU,EAAEC,kBAAkB,EAAE;EAClE,IAAMC,UAAU,GAAGH,KAAK,CAACI,YAAY,CAACC,uBAAuB,CAACJ,UAAU,EAAE,CAAC,CAAC;EAC5E,IAAIA,UAAU,GAAG,CAAC,EAAE;IAChB,IAAIK,cAAc;IAClB,IAAIC,gBAAgB,GAAG,CAAC,CAAC;IACzB,KAAKD,cAAc,GAAGL,UAAU,GAAG,CAAC,EAAEK,cAAc,IAAI,CAAC,EAAEA,cAAc,EAAE,EAAE;MACzE,IAAIN,KAAK,CAACI,YAAY,CAACC,uBAAuB,CAACC,cAAc,EAAE,CAAC,CAAC,KAAKH,UAAU,EAAE;QAC9E,OAAOI,gBAAgB;MAC3B;MACA,IAAMC,IAAI,GAAGR,KAAK,CAACS,cAAc,CAACH,cAAc,CAAC;MACjD,IAAIJ,kBAAkB,CAACQ,YAAY,CAACF,IAAI,CAAC,IAAI,OAAO,CAACG,IAAI,CAACH,IAAI,CAAC,IAAIA,IAAI,KAAK,EAAE,EAAE;QAC5ED,gBAAgB,GAAGD,cAAc;QACjC;MACJ;MACA,OAAOA,cAAc;IACzB;EACJ;EACA,OAAO,CAAC,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,uBAAuBA,CAACC,UAAU,EAAEb,KAAK,EAAEC,UAAU,EAA6D;EAAA,IAA3Da,oBAAoB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAAA,IAAEG,4BAA4B,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC5H,IAAIJ,UAAU,GAAG,CAAC,CAAC,qCAAqC;IACpD,OAAO,IAAI;EACf;EACA,IAAMX,kBAAkB,GAAGgB,4BAA4B,CAACC,wBAAwB,CAACnB,KAAK,CAACI,YAAY,CAACgB,aAAa,CAAC,CAAC,CAAC,CAAClB,kBAAkB;EACvI,IAAI,CAACA,kBAAkB,EAAE;IACrB,OAAO,IAAI;EACf;EACA,IAAID,UAAU,IAAI,CAAC,EAAE;IACjB,OAAO;MACHoB,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE;IACZ,CAAC;EACL;EACA;EACA,KAAK,IAAIC,eAAe,GAAGtB,UAAU,GAAG,CAAC,EAAEsB,eAAe,GAAG,CAAC,EAAEA,eAAe,EAAE,EAAE;IAC/E,IAAIvB,KAAK,CAACS,cAAc,CAACc,eAAe,CAAC,KAAK,EAAE,EAAE;MAC9C;IACJ;IACA,IAAIA,eAAe,KAAK,CAAC,EAAE;MACvB,OAAO;QACHF,WAAW,EAAE,EAAE;QACfC,MAAM,EAAE;MACZ,CAAC;IACL;EACJ;EACA,IAAME,sBAAsB,GAAGzB,qBAAqB,CAACC,KAAK,EAAEC,UAAU,EAAEC,kBAAkB,CAAC;EAC3F,IAAIsB,sBAAsB,GAAG,CAAC,EAAE;IAC5B,OAAO,IAAI;EACf,CAAC,MACI,IAAIA,sBAAsB,GAAG,CAAC,EAAE;IACjC,OAAO;MACHH,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE;IACZ,CAAC;EACL;EACA,IAAMG,6BAA6B,GAAGzB,KAAK,CAACS,cAAc,CAACe,sBAAsB,CAAC;EAClF,IAAItB,kBAAkB,CAACwB,cAAc,CAACD,6BAA6B,CAAC,IAAIvB,kBAAkB,CAACyB,oBAAoB,CAACF,6BAA6B,CAAC,EAAE;IAC5I,OAAO;MACHJ,WAAW,EAAE1B,OAAO,CAACiC,oBAAoB,CAACH,6BAA6B,CAAC;MACxEH,MAAM,EAAE1B,YAAY,CAACiC,MAAM;MAC3BC,IAAI,EAAEN;IACV,CAAC;EACL,CAAC,MACI,IAAItB,kBAAkB,CAAC6B,cAAc,CAACN,6BAA6B,CAAC,EAAE;IACvE,OAAO;MACHJ,WAAW,EAAE1B,OAAO,CAACiC,oBAAoB,CAACH,6BAA6B,CAAC;MACxEH,MAAM,EAAE,IAAI;MACZQ,IAAI,EAAEN;IACV,CAAC;EACL,CAAC,MACI;IACD;IACA;IACA;IACA;IACA;IACA,IAAIA,sBAAsB,KAAK,CAAC,EAAE;MAC9B,OAAO;QACHH,WAAW,EAAE1B,OAAO,CAACiC,oBAAoB,CAAC5B,KAAK,CAACS,cAAc,CAACe,sBAAsB,CAAC,CAAC;QACvFF,MAAM,EAAE,IAAI;QACZQ,IAAI,EAAEN;MACV,CAAC;IACL;IACA,IAAMQ,YAAY,GAAGR,sBAAsB,GAAG,CAAC;IAC/C,IAAMS,0BAA0B,GAAG/B,kBAAkB,CAACgC,iBAAiB,CAAClC,KAAK,CAACS,cAAc,CAACuB,YAAY,CAAC,CAAC;IAC3G,IAAI,EAAEC,0BAA0B,IAAI,CAAC,CAAC,mCAAmC,CAAC,CAAC,iCAAiC,CAAC,IACxGA,0BAA0B,GAAG,CAAC,CAAC,uCAAwC,EAAE;MAC1E,IAAIE,QAAQ,GAAG,CAAC;MAChB,KAAK,IAAIC,CAAC,GAAGJ,YAAY,GAAG,CAAC,EAAEI,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACvC,IAAIlC,kBAAkB,CAACyB,oBAAoB,CAAC3B,KAAK,CAACS,cAAc,CAAC2B,CAAC,CAAC,CAAC,EAAE;UAClE;QACJ;QACAD,QAAQ,GAAGC,CAAC;QACZ;MACJ;MACA,OAAO;QACHf,WAAW,EAAE1B,OAAO,CAACiC,oBAAoB,CAAC5B,KAAK,CAACS,cAAc,CAAC0B,QAAQ,GAAG,CAAC,CAAC,CAAC;QAC7Eb,MAAM,EAAE,IAAI;QACZQ,IAAI,EAAEK,QAAQ,GAAG;MACrB,CAAC;IACL;IACA,IAAIrB,oBAAoB,EAAE;MACtB,OAAO;QACHO,WAAW,EAAE1B,OAAO,CAACiC,oBAAoB,CAAC5B,KAAK,CAACS,cAAc,CAACe,sBAAsB,CAAC,CAAC;QACvFF,MAAM,EAAE,IAAI;QACZQ,IAAI,EAAEN;MACV,CAAC;IACL,CAAC,MACI;MACD;MACA,KAAK,IAAIY,EAAC,GAAGZ,sBAAsB,EAAEY,EAAC,GAAG,CAAC,EAAEA,EAAC,EAAE,EAAE;QAC7C,IAAMC,WAAW,GAAGrC,KAAK,CAACS,cAAc,CAAC2B,EAAC,CAAC;QAC3C,IAAIlC,kBAAkB,CAACwB,cAAc,CAACW,WAAW,CAAC,EAAE;UAChD,OAAO;YACHhB,WAAW,EAAE1B,OAAO,CAACiC,oBAAoB,CAACS,WAAW,CAAC;YACtDf,MAAM,EAAE1B,YAAY,CAACiC,MAAM;YAC3BC,IAAI,EAAEM;UACV,CAAC;QACL,CAAC,MACI,IAAIlC,kBAAkB,CAACyB,oBAAoB,CAACU,WAAW,CAAC,EAAE;UAC3D,IAAIF,SAAQ,GAAG,CAAC;UAChB,KAAK,IAAIG,CAAC,GAAGF,EAAC,GAAG,CAAC,EAAEE,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;YAC5B,IAAIpC,kBAAkB,CAACyB,oBAAoB,CAAC3B,KAAK,CAACS,cAAc,CAAC2B,EAAC,CAAC,CAAC,EAAE;cAClE;YACJ;YACAD,SAAQ,GAAGG,CAAC;YACZ;UACJ;UACA,OAAO;YACHjB,WAAW,EAAE1B,OAAO,CAACiC,oBAAoB,CAAC5B,KAAK,CAACS,cAAc,CAAC0B,SAAQ,GAAG,CAAC,CAAC,CAAC;YAC7Eb,MAAM,EAAE,IAAI;YACZQ,IAAI,EAAEK,SAAQ,GAAG;UACrB,CAAC;QACL,CAAC,MACI,IAAIjC,kBAAkB,CAAC6B,cAAc,CAACM,WAAW,CAAC,EAAE;UACrD,OAAO;YACHhB,WAAW,EAAE1B,OAAO,CAACiC,oBAAoB,CAACS,WAAW,CAAC;YACtDf,MAAM,EAAE,IAAI;YACZQ,IAAI,EAAEM;UACV,CAAC;QACL;MACJ;MACA,OAAO;QACHf,WAAW,EAAE1B,OAAO,CAACiC,oBAAoB,CAAC5B,KAAK,CAACS,cAAc,CAAC,CAAC,CAAC,CAAC;QAClEa,MAAM,EAAE,IAAI;QACZQ,IAAI,EAAE;MACV,CAAC;IACL;EACJ;AACJ;AACA,OAAO,SAASS,oBAAoBA,CAAC1B,UAAU,EAAE2B,YAAY,EAAErC,UAAU,EAAEF,UAAU,EAAEwC,eAAe,EAAEvB,4BAA4B,EAAE;EAClI,IAAIL,UAAU,GAAG,CAAC,CAAC,qCAAqC;IACpD,OAAO,IAAI;EACf;EACA,IAAM6B,eAAe,GAAGxB,4BAA4B,CAACC,wBAAwB,CAAChB,UAAU,CAAC;EACzF,IAAI,CAACuC,eAAe,EAAE;IAClB,OAAO,IAAI;EACf;EACA,IAAMxC,kBAAkB,GAAGgB,4BAA4B,CAACC,wBAAwB,CAAChB,UAAU,CAAC,CAACD,kBAAkB;EAC/G,IAAI,CAACA,kBAAkB,EAAE;IACrB,OAAO,IAAI;EACf;EACA,IAAMyC,MAAM,GAAG/B,uBAAuB,CAACC,UAAU,EAAE2B,YAAY,EAAEvC,UAAU,EAAEgB,SAAS,EAAEC,4BAA4B,CAAC;EACrH,IAAMmB,WAAW,GAAGG,YAAY,CAAC/B,cAAc,CAACR,UAAU,CAAC;EAC3D,IAAI0C,MAAM,EAAE;IACR,IAAMC,WAAW,GAAGD,MAAM,CAACb,IAAI;IAC/B,IAAIc,WAAW,KAAK3B,SAAS,EAAE;MAC3B;MACA,IAAI4B,qBAAqB,GAAG,IAAI;MAChC,KAAK,IAAIC,aAAa,GAAGF,WAAW,EAAEE,aAAa,GAAG7C,UAAU,GAAG,CAAC,EAAE6C,aAAa,EAAE,EAAE;QACnF,IAAI,CAAC,OAAO,CAACnC,IAAI,CAAC6B,YAAY,CAAC/B,cAAc,CAACqC,aAAa,CAAC,CAAC,EAAE;UAC3DD,qBAAqB,GAAG,KAAK;UAC7B;QACJ;MACJ;MACA,IAAIA,qBAAqB,EAAE;QACvB,IAAME,WAAW,GAAGL,eAAe,CAACM,OAAO,CAACnC,UAAU,EAAE,EAAE,EAAE2B,YAAY,CAAC/B,cAAc,CAACmC,WAAW,CAAC,EAAE,EAAE,CAAC;QACzG,IAAIG,WAAW,EAAE;UACb,IAAI1B,WAAW,GAAG1B,OAAO,CAACiC,oBAAoB,CAACY,YAAY,CAAC/B,cAAc,CAACmC,WAAW,CAAC,CAAC;UACxF,IAAIG,WAAW,CAACE,UAAU,EAAE;YACxB5B,WAAW,GAAGA,WAAW,CAAC6B,SAAS,CAAC,CAAC,EAAE7B,WAAW,CAACL,MAAM,GAAG+B,WAAW,CAACE,UAAU,CAAC;UACvF;UACA,IAAKF,WAAW,CAACI,YAAY,KAAKvD,YAAY,CAACiC,MAAM,IAChDkB,WAAW,CAACI,YAAY,KAAKvD,YAAY,CAACwD,aAAc,EAAE;YAC3D/B,WAAW,GAAGoB,eAAe,CAACY,WAAW,CAAChC,WAAW,CAAC;UAC1D,CAAC,MACI,IAAI0B,WAAW,CAACI,YAAY,KAAKvD,YAAY,CAAC0D,OAAO,EAAE;YACxDjC,WAAW,GAAGoB,eAAe,CAACc,aAAa,CAAClC,WAAW,CAAC;UAC5D;UACA,IAAInB,kBAAkB,CAAC6B,cAAc,CAACM,WAAW,CAAC,EAAE;YAChDhB,WAAW,GAAGoB,eAAe,CAACc,aAAa,CAAClC,WAAW,CAAC;UAC5D;UACA,IAAI0B,WAAW,CAACS,UAAU,EAAE;YACxBnC,WAAW,IAAI0B,WAAW,CAACS,UAAU;UACzC;UACA,OAAO7D,OAAO,CAACiC,oBAAoB,CAACP,WAAW,CAAC;QACpD;MACJ;IACJ;IACA,IAAInB,kBAAkB,CAAC6B,cAAc,CAACM,WAAW,CAAC,EAAE;MAChD,IAAIM,MAAM,CAACrB,MAAM,KAAK1B,YAAY,CAACiC,MAAM,EAAE;QACvC,OAAOc,MAAM,CAACtB,WAAW;MAC7B,CAAC,MACI;QACD,OAAOoB,eAAe,CAACc,aAAa,CAACZ,MAAM,CAACtB,WAAW,CAAC;MAC5D;IACJ,CAAC,MACI;MACD,IAAIsB,MAAM,CAACrB,MAAM,KAAK1B,YAAY,CAACiC,MAAM,EAAE;QACvC,OAAOY,eAAe,CAACY,WAAW,CAACV,MAAM,CAACtB,WAAW,CAAC;MAC1D,CAAC,MACI;QACD,OAAOsB,MAAM,CAACtB,WAAW;MAC7B;IACJ;EACJ;EACA,OAAO,IAAI;AACf;AACA,OAAO,SAASoC,iBAAiBA,CAAC5C,UAAU,EAAEb,KAAK,EAAE0D,KAAK,EAAEjB,eAAe,EAAEvB,4BAA4B,EAAE;EACvG,IAAIL,UAAU,GAAG,CAAC,CAAC,qCAAqC;IACpD,OAAO,IAAI;EACf;EACAb,KAAK,CAACI,YAAY,CAACuD,iBAAiB,CAACD,KAAK,CAACE,eAAe,CAAC;EAC3D,IAAMC,UAAU,GAAG7D,KAAK,CAACI,YAAY,CAAC0D,aAAa,CAACJ,KAAK,CAACE,eAAe,CAAC;EAC1E,IAAMG,gBAAgB,GAAGlE,sBAAsB,CAACgE,UAAU,EAAEH,KAAK,CAACM,WAAW,GAAG,CAAC,CAAC;EAClF,IAAMC,cAAc,GAAGF,gBAAgB,CAACtD,cAAc,CAAC,CAAC;EACxD,IAAIyD,gBAAgB,GAAG,KAAK;EAC5B,IAAIC,eAAe;EACnB,IAAIJ,gBAAgB,CAACK,eAAe,GAAG,CAAC,IAAIP,UAAU,CAACzC,aAAa,CAAC,CAAC,CAAC,KAAK2C,gBAAgB,CAAC5D,UAAU,EAAE;IACrG;IACA+D,gBAAgB,GAAG,IAAI,CAAC,CAAC;IACzBC,eAAe,GAAGF,cAAc,CAACI,MAAM,CAAC,CAAC,EAAEX,KAAK,CAACM,WAAW,GAAG,CAAC,GAAGD,gBAAgB,CAACK,eAAe,CAAC;EACxG,CAAC,MACI;IACDD,eAAe,GAAGN,UAAU,CAACpD,cAAc,CAAC,CAAC,CAACyC,SAAS,CAAC,CAAC,EAAEQ,KAAK,CAACM,WAAW,GAAG,CAAC,CAAC;EACrF;EACA,IAAIM,cAAc;EAClB,IAAIZ,KAAK,CAACa,OAAO,CAAC,CAAC,EAAE;IACjBD,cAAc,GAAGL,cAAc,CAACI,MAAM,CAACX,KAAK,CAACM,WAAW,GAAG,CAAC,GAAGD,gBAAgB,CAACK,eAAe,CAAC;EACpG,CAAC,MACI;IACD,IAAMI,mBAAmB,GAAG1E,mBAAmB,CAACE,KAAK,EAAE0D,KAAK,CAACe,aAAa,EAAEf,KAAK,CAACgB,SAAS,CAAC;IAC5FJ,cAAc,GAAGE,mBAAmB,CAAC/D,cAAc,CAAC,CAAC,CAAC4D,MAAM,CAACX,KAAK,CAACgB,SAAS,GAAG,CAAC,GAAGX,gBAAgB,CAACK,eAAe,CAAC;EACxH;EACA,IAAMlE,kBAAkB,GAAGgB,4BAA4B,CAACC,wBAAwB,CAAC4C,gBAAgB,CAAC5D,UAAU,CAAC,CAACD,kBAAkB;EAChI,IAAI,CAACA,kBAAkB,EAAE;IACrB,OAAO,IAAI;EACf;EACA,IAAMyE,iBAAiB,GAAGR,eAAe;EACzC,IAAMS,iBAAiB,GAAGjF,OAAO,CAACiC,oBAAoB,CAACuC,eAAe,CAAC;EACvE,IAAM3B,YAAY,GAAG;IACjBpC,YAAY,EAAE;MACV0D,aAAa,EAAE,SAAAA,cAAC7D,UAAU,EAAK;QAC3B,OAAOD,KAAK,CAACI,YAAY,CAAC0D,aAAa,CAAC7D,UAAU,CAAC;MACvD,CAAC;MACDmB,aAAa,EAAE,SAAAA,cAAA,EAAM;QACjB,OAAOpB,KAAK,CAACoB,aAAa,CAAC,CAAC;MAChC,CAAC;MACDf,uBAAuB,EAAE,SAAAA,wBAACJ,UAAU,EAAE4E,MAAM,EAAK;QAC7C,OAAO7E,KAAK,CAACK,uBAAuB,CAACJ,UAAU,EAAE4E,MAAM,CAAC;MAC5D;IACJ,CAAC;IACDpE,cAAc,EAAE,SAAAA,eAACR,UAAU,EAAK;MAC5B,IAAIA,UAAU,KAAKyD,KAAK,CAACE,eAAe,EAAE;QACtC,OAAOe,iBAAiB;MAC5B,CAAC,MACI;QACD,OAAO3E,KAAK,CAACS,cAAc,CAACR,UAAU,CAAC;MAC3C;IACJ;EACJ,CAAC;EACD,IAAM6E,iBAAiB,GAAGnF,OAAO,CAACiC,oBAAoB,CAACiC,UAAU,CAACpD,cAAc,CAAC,CAAC,CAAC;EACnF,IAAMsE,gBAAgB,GAAGnE,uBAAuB,CAACC,UAAU,EAAE2B,YAAY,EAAEkB,KAAK,CAACE,eAAe,GAAG,CAAC,EAAE3C,SAAS,EAAEC,4BAA4B,CAAC;EAC9I,IAAI,CAAC6D,gBAAgB,EAAE;IACnB,IAAMC,WAAW,GAAGd,gBAAgB,GAAGY,iBAAiB,GAAGF,iBAAiB;IAC5E,OAAO;MACHI,WAAW,EAAEA,WAAW;MACxBC,UAAU,EAAED;IAChB,CAAC;EACL;EACA,IAAIE,gBAAgB,GAAGhB,gBAAgB,GAAGY,iBAAiB,GAAGC,gBAAgB,CAAC1D,WAAW;EAC1F,IAAI0D,gBAAgB,CAACzD,MAAM,KAAK1B,YAAY,CAACiC,MAAM,EAAE;IACjDqD,gBAAgB,GAAGzC,eAAe,CAACY,WAAW,CAAC6B,gBAAgB,CAAC;EACpE;EACA,IAAIhF,kBAAkB,CAAC6B,cAAc,CAACuC,cAAc,CAAC,EAAE;IACnDY,gBAAgB,GAAGzC,eAAe,CAACc,aAAa,CAAC2B,gBAAgB,CAAC;EACtE;EACA,OAAO;IACHF,WAAW,EAAEd,gBAAgB,GAAGY,iBAAiB,GAAGF,iBAAiB;IACrEK,UAAU,EAAEC;EAChB,CAAC;AACL;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAACtE,UAAU,EAAEb,KAAK,EAAE0D,KAAK,EAAE0B,EAAE,EAAE3C,eAAe,EAAEvB,4BAA4B,EAAE;EAChH,IAAIL,UAAU,GAAG,CAAC,CAAC,qCAAqC;IACpD,OAAO,IAAI;EACf;EACA,IAAMkD,gBAAgB,GAAGjE,mBAAmB,CAACE,KAAK,EAAE0D,KAAK,CAACE,eAAe,EAAEF,KAAK,CAACM,WAAW,CAAC;EAC7F,IAAID,gBAAgB,CAACK,eAAe,EAAE;IAClC;IACA,OAAO,IAAI;EACf;EACA,IAAMlE,kBAAkB,GAAGgB,4BAA4B,CAACC,wBAAwB,CAAC4C,gBAAgB,CAAC5D,UAAU,CAAC,CAACD,kBAAkB;EAChI,IAAI,CAACA,kBAAkB,EAAE;IACrB,OAAO,IAAI;EACf;EACA,IAAM+D,cAAc,GAAGF,gBAAgB,CAACtD,cAAc,CAAC,CAAC;EACxD,IAAM4E,cAAc,GAAGpB,cAAc,CAACI,MAAM,CAAC,CAAC,EAAEX,KAAK,CAACM,WAAW,GAAG,CAAC,GAAGD,gBAAgB,CAACK,eAAe,CAAC;EACzG;EACA,IAAIkB,aAAa;EACjB,IAAI5B,KAAK,CAACa,OAAO,CAAC,CAAC,EAAE;IACjBe,aAAa,GAAGrB,cAAc,CAACI,MAAM,CAACX,KAAK,CAACM,WAAW,GAAG,CAAC,GAAGD,gBAAgB,CAACK,eAAe,CAAC;EACnG,CAAC,MACI;IACD,IAAMI,mBAAmB,GAAG1E,mBAAmB,CAACE,KAAK,EAAE0D,KAAK,CAACe,aAAa,EAAEf,KAAK,CAACgB,SAAS,CAAC;IAC5FY,aAAa,GAAGd,mBAAmB,CAAC/D,cAAc,CAAC,CAAC,CAAC4D,MAAM,CAACX,KAAK,CAACgB,SAAS,GAAG,CAAC,GAAGX,gBAAgB,CAACK,eAAe,CAAC;EACvH;EACA;EACA;EACA,IAAI,CAAClE,kBAAkB,CAAC6B,cAAc,CAACsD,cAAc,GAAGC,aAAa,CAAC,IAAIpF,kBAAkB,CAAC6B,cAAc,CAACsD,cAAc,GAAGD,EAAE,GAAGE,aAAa,CAAC,EAAE;IAC9I;IACA;IACA,IAAMC,CAAC,GAAG3E,uBAAuB,CAACC,UAAU,EAAEb,KAAK,EAAE0D,KAAK,CAACE,eAAe,EAAE,KAAK,EAAE1C,4BAA4B,CAAC;IAChH,IAAI,CAACqE,CAAC,EAAE;MACJ,OAAO,IAAI;IACf;IACA,IAAIlE,WAAW,GAAGkE,CAAC,CAAClE,WAAW;IAC/B,IAAIkE,CAAC,CAACjE,MAAM,KAAK1B,YAAY,CAACiC,MAAM,EAAE;MAClCR,WAAW,GAAGoB,eAAe,CAACc,aAAa,CAAClC,WAAW,CAAC;IAC5D;IACA,OAAOA,WAAW;EACtB;EACA,OAAO,IAAI;AACf;AACA,OAAO,SAASa,iBAAiBA,CAAClC,KAAK,EAAEC,UAAU,EAAEiB,4BAA4B,EAAE;EAC/E,IAAMhB,kBAAkB,GAAGgB,4BAA4B,CAACC,wBAAwB,CAACnB,KAAK,CAACoB,aAAa,CAAC,CAAC,CAAC,CAAClB,kBAAkB;EAC1H,IAAI,CAACA,kBAAkB,EAAE;IACrB,OAAO,IAAI;EACf;EACA,IAAID,UAAU,GAAG,CAAC,IAAIA,UAAU,GAAGD,KAAK,CAACwF,YAAY,CAAC,CAAC,EAAE;IACrD,OAAO,IAAI;EACf;EACA,OAAOtF,kBAAkB,CAACgC,iBAAiB,CAAClC,KAAK,CAACS,cAAc,CAACR,UAAU,CAAC,CAAC;AACjF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}