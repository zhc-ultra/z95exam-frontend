{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Range } from '../../common/core/range.js';\nexport var _debugComposition = false;\nexport var TextAreaState = /*#__PURE__*/function () {\n  function TextAreaState(value, /** the offset where selection starts inside `value` */\n  selectionStart, /** the offset where selection ends inside `value` */\n  selectionEnd, /** the editor range in the view coordinate system that matches the selection inside `value` */\n  selection, /** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n  newlineCountBeforeSelection) {\n    _classCallCheck(this, TextAreaState);\n    this.value = value;\n    this.selectionStart = selectionStart;\n    this.selectionEnd = selectionEnd;\n    this.selection = selection;\n    this.newlineCountBeforeSelection = newlineCountBeforeSelection;\n  }\n  return _createClass(TextAreaState, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"[ <\".concat(this.value, \">, selectionStart: \").concat(this.selectionStart, \", selectionEnd: \").concat(this.selectionEnd, \"]\");\n    }\n  }, {\n    key: \"collapseSelection\",\n    value: function collapseSelection() {\n      if (this.selectionStart === this.value.length) {\n        return this;\n      }\n      return new TextAreaState(this.value, this.value.length, this.value.length, null, undefined);\n    }\n  }, {\n    key: \"writeToTextArea\",\n    value: function writeToTextArea(reason, textArea, select) {\n      if (_debugComposition) {\n        console.log(\"writeToTextArea \".concat(reason, \": \").concat(this.toString()));\n      }\n      textArea.setValue(reason, this.value);\n      if (select) {\n        textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n      }\n    }\n  }, {\n    key: \"deduceEditorPosition\",\n    value: function deduceEditorPosition(offset) {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n      if (offset <= this.selectionStart) {\n        var str = this.value.substring(offset, this.selectionStart);\n        return this._finishDeduceEditorPosition((_b = (_a = this.selection) === null || _a === void 0 ? void 0 : _a.getStartPosition()) !== null && _b !== void 0 ? _b : null, str, -1);\n      }\n      if (offset >= this.selectionEnd) {\n        var _str = this.value.substring(this.selectionEnd, offset);\n        return this._finishDeduceEditorPosition((_d = (_c = this.selection) === null || _c === void 0 ? void 0 : _c.getEndPosition()) !== null && _d !== void 0 ? _d : null, _str, 1);\n      }\n      var str1 = this.value.substring(this.selectionStart, offset);\n      if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n        return this._finishDeduceEditorPosition((_f = (_e = this.selection) === null || _e === void 0 ? void 0 : _e.getStartPosition()) !== null && _f !== void 0 ? _f : null, str1, 1);\n      }\n      var str2 = this.value.substring(offset, this.selectionEnd);\n      return this._finishDeduceEditorPosition((_h = (_g = this.selection) === null || _g === void 0 ? void 0 : _g.getEndPosition()) !== null && _h !== void 0 ? _h : null, str2, -1);\n    }\n  }, {\n    key: \"_finishDeduceEditorPosition\",\n    value: function _finishDeduceEditorPosition(anchor, deltaText, signum) {\n      var lineFeedCnt = 0;\n      var lastLineFeedIndex = -1;\n      while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n        lineFeedCnt++;\n      }\n      return [anchor, signum * deltaText.length, lineFeedCnt];\n    }\n  }], [{\n    key: \"readFromTextArea\",\n    value: function readFromTextArea(textArea, previousState) {\n      var value = textArea.getValue();\n      var selectionStart = textArea.getSelectionStart();\n      var selectionEnd = textArea.getSelectionEnd();\n      var newlineCountBeforeSelection = undefined;\n      if (previousState) {\n        var valueBeforeSelectionStart = value.substring(0, selectionStart);\n        var previousValueBeforeSelectionStart = previousState.value.substring(0, previousState.selectionStart);\n        if (valueBeforeSelectionStart === previousValueBeforeSelectionStart) {\n          newlineCountBeforeSelection = previousState.newlineCountBeforeSelection;\n        }\n      }\n      return new TextAreaState(value, selectionStart, selectionEnd, null, newlineCountBeforeSelection);\n    }\n  }, {\n    key: \"deduceInput\",\n    value: function deduceInput(previousState, currentState, couldBeEmojiInput) {\n      if (!previousState) {\n        // This is the EMPTY state\n        return {\n          text: '',\n          replacePrevCharCnt: 0,\n          replaceNextCharCnt: 0,\n          positionDelta: 0\n        };\n      }\n      if (_debugComposition) {\n        console.log('------------------------deduceInput');\n        console.log(\"PREVIOUS STATE: \".concat(previousState.toString()));\n        console.log(\"CURRENT STATE: \".concat(currentState.toString()));\n      }\n      var prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionStart, currentState.selectionStart);\n      var suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd, currentState.value.length - currentState.selectionEnd);\n      var previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n      var currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n      var previousSelectionStart = previousState.selectionStart - prefixLength;\n      var previousSelectionEnd = previousState.selectionEnd - prefixLength;\n      var currentSelectionStart = currentState.selectionStart - prefixLength;\n      var currentSelectionEnd = currentState.selectionEnd - prefixLength;\n      if (_debugComposition) {\n        console.log(\"AFTER DIFFING PREVIOUS STATE: <\".concat(previousValue, \">, selectionStart: \").concat(previousSelectionStart, \", selectionEnd: \").concat(previousSelectionEnd));\n        console.log(\"AFTER DIFFING CURRENT STATE: <\".concat(currentValue, \">, selectionStart: \").concat(currentSelectionStart, \", selectionEnd: \").concat(currentSelectionEnd));\n      }\n      if (currentSelectionStart === currentSelectionEnd) {\n        // no current selection\n        var _replacePreviousCharacters = previousState.selectionStart - prefixLength;\n        if (_debugComposition) {\n          console.log(\"REMOVE PREVIOUS: \".concat(_replacePreviousCharacters, \" chars\"));\n        }\n        return {\n          text: currentValue,\n          replacePrevCharCnt: _replacePreviousCharacters,\n          replaceNextCharCnt: 0,\n          positionDelta: 0\n        };\n      }\n      // there is a current selection => composition case\n      var replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n      return {\n        text: currentValue,\n        replacePrevCharCnt: replacePreviousCharacters,\n        replaceNextCharCnt: 0,\n        positionDelta: 0\n      };\n    }\n  }, {\n    key: \"deduceAndroidCompositionInput\",\n    value: function deduceAndroidCompositionInput(previousState, currentState) {\n      if (!previousState) {\n        // This is the EMPTY state\n        return {\n          text: '',\n          replacePrevCharCnt: 0,\n          replaceNextCharCnt: 0,\n          positionDelta: 0\n        };\n      }\n      if (_debugComposition) {\n        console.log('------------------------deduceAndroidCompositionInput');\n        console.log(\"PREVIOUS STATE: \".concat(previousState.toString()));\n        console.log(\"CURRENT STATE: \".concat(currentState.toString()));\n      }\n      if (previousState.value === currentState.value) {\n        return {\n          text: '',\n          replacePrevCharCnt: 0,\n          replaceNextCharCnt: 0,\n          positionDelta: currentState.selectionEnd - previousState.selectionEnd\n        };\n      }\n      var prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionEnd);\n      var suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd);\n      var previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n      var currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n      var previousSelectionStart = previousState.selectionStart - prefixLength;\n      var previousSelectionEnd = previousState.selectionEnd - prefixLength;\n      var currentSelectionStart = currentState.selectionStart - prefixLength;\n      var currentSelectionEnd = currentState.selectionEnd - prefixLength;\n      if (_debugComposition) {\n        console.log(\"AFTER DIFFING PREVIOUS STATE: <\".concat(previousValue, \">, selectionStart: \").concat(previousSelectionStart, \", selectionEnd: \").concat(previousSelectionEnd));\n        console.log(\"AFTER DIFFING CURRENT STATE: <\".concat(currentValue, \">, selectionStart: \").concat(currentSelectionStart, \", selectionEnd: \").concat(currentSelectionEnd));\n      }\n      return {\n        text: currentValue,\n        replacePrevCharCnt: previousSelectionEnd,\n        replaceNextCharCnt: previousValue.length - previousSelectionEnd,\n        positionDelta: currentSelectionEnd - currentValue.length\n      };\n    }\n  }]);\n}();\nTextAreaState.EMPTY = new TextAreaState('', 0, 0, null, undefined);\nexport var PagedScreenReaderStrategy = /*#__PURE__*/function () {\n  function PagedScreenReaderStrategy() {\n    _classCallCheck(this, PagedScreenReaderStrategy);\n  }\n  return _createClass(PagedScreenReaderStrategy, null, [{\n    key: \"_getPageOfLine\",\n    value: function _getPageOfLine(lineNumber, linesPerPage) {\n      return Math.floor((lineNumber - 1) / linesPerPage);\n    }\n  }, {\n    key: \"_getRangeForPage\",\n    value: function _getRangeForPage(page, linesPerPage) {\n      var offset = page * linesPerPage;\n      var startLineNumber = offset + 1;\n      var endLineNumber = offset + linesPerPage;\n      return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n    }\n  }, {\n    key: \"fromEditorSelection\",\n    value: function fromEditorSelection(model, selection, linesPerPage, trimLongText) {\n      // Chromium handles very poorly text even of a few thousand chars\n      // Cut text to avoid stalling the entire UI\n      var LIMIT_CHARS = 500;\n      var selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n      var selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n      var selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n      var selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n      var pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n      if (trimLongText && model.getValueLengthInRange(pretextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n        var pretextStart = model.modifyPosition(pretextRange.getEndPosition(), -LIMIT_CHARS);\n        pretextRange = Range.fromPositions(pretextStart, pretextRange.getEndPosition());\n      }\n      var pretext = model.getValueInRange(pretextRange, 1 /* EndOfLinePreference.LF */);\n      var lastLine = model.getLineCount();\n      var lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n      var posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n      if (trimLongText && model.getValueLengthInRange(posttextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n        var posttextEnd = model.modifyPosition(posttextRange.getStartPosition(), LIMIT_CHARS);\n        posttextRange = Range.fromPositions(posttextRange.getStartPosition(), posttextEnd);\n      }\n      var posttext = model.getValueInRange(posttextRange, 1 /* EndOfLinePreference.LF */);\n      var text;\n      if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n        // take full selection\n        text = model.getValueInRange(selection, 1 /* EndOfLinePreference.LF */);\n      } else {\n        var selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n        var selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n        text = model.getValueInRange(selectionRange1, 1 /* EndOfLinePreference.LF */) + String.fromCharCode(8230) + model.getValueInRange(selectionRange2, 1 /* EndOfLinePreference.LF */);\n      }\n      if (trimLongText && text.length > 2 * LIMIT_CHARS) {\n        text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n      }\n      return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, selection, pretextRange.endLineNumber - pretextRange.startLineNumber);\n    }\n  }]);\n}();","map":{"version":3,"names":["strings","Range","_debugComposition","TextAreaState","value","selectionStart","selectionEnd","selection","newlineCountBeforeSelection","_classCallCheck","_createClass","key","toString","concat","collapseSelection","length","undefined","writeToTextArea","reason","textArea","select","console","log","setValue","setSelectionRange","deduceEditorPosition","offset","_a","_b","_c","_d","_e","_f","_g","_h","str","substring","_finishDeduceEditorPosition","getStartPosition","getEndPosition","str1","indexOf","String","fromCharCode","str2","anchor","deltaText","signum","lineFeedCnt","lastLineFeedIndex","readFromTextArea","previousState","getValue","getSelectionStart","getSelectionEnd","valueBeforeSelectionStart","previousValueBeforeSelectionStart","deduceInput","currentState","couldBeEmojiInput","text","replacePrevCharCnt","replaceNextCharCnt","positionDelta","prefixLength","Math","min","commonPrefixLength","suffixLength","commonSuffixLength","previousValue","currentValue","previousSelectionStart","previousSelectionEnd","currentSelectionStart","currentSelectionEnd","replacePreviousCharacters","deduceAndroidCompositionInput","EMPTY","PagedScreenReaderStrategy","_getPageOfLine","lineNumber","linesPerPage","floor","_getRangeForPage","page","startLineNumber","endLineNumber","fromEditorSelection","model","trimLongText","LIMIT_CHARS","selectionStartPage","selectionStartPageRange","selectionEndPage","selectionEndPageRange","pretextRange","intersectRanges","startColumn","getValueLengthInRange","pretextStart","modifyPosition","fromPositions","pretext","getValueInRange","lastLine","getLineCount","lastLineMaxColumn","getLineMaxColumn","posttextRange","endColumn","posttextEnd","posttext","selectionRange1","selectionRange2"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaState.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Range } from '../../common/core/range.js';\nexport const _debugComposition = false;\nexport class TextAreaState {\n    constructor(value, \n    /** the offset where selection starts inside `value` */\n    selectionStart, \n    /** the offset where selection ends inside `value` */\n    selectionEnd, \n    /** the editor range in the view coordinate system that matches the selection inside `value` */\n    selection, \n    /** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n    newlineCountBeforeSelection) {\n        this.value = value;\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n        this.selection = selection;\n        this.newlineCountBeforeSelection = newlineCountBeforeSelection;\n    }\n    toString() {\n        return `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;\n    }\n    static readFromTextArea(textArea, previousState) {\n        const value = textArea.getValue();\n        const selectionStart = textArea.getSelectionStart();\n        const selectionEnd = textArea.getSelectionEnd();\n        let newlineCountBeforeSelection = undefined;\n        if (previousState) {\n            const valueBeforeSelectionStart = value.substring(0, selectionStart);\n            const previousValueBeforeSelectionStart = previousState.value.substring(0, previousState.selectionStart);\n            if (valueBeforeSelectionStart === previousValueBeforeSelectionStart) {\n                newlineCountBeforeSelection = previousState.newlineCountBeforeSelection;\n            }\n        }\n        return new TextAreaState(value, selectionStart, selectionEnd, null, newlineCountBeforeSelection);\n    }\n    collapseSelection() {\n        if (this.selectionStart === this.value.length) {\n            return this;\n        }\n        return new TextAreaState(this.value, this.value.length, this.value.length, null, undefined);\n    }\n    writeToTextArea(reason, textArea, select) {\n        if (_debugComposition) {\n            console.log(`writeToTextArea ${reason}: ${this.toString()}`);\n        }\n        textArea.setValue(reason, this.value);\n        if (select) {\n            textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n        }\n    }\n    deduceEditorPosition(offset) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (offset <= this.selectionStart) {\n            const str = this.value.substring(offset, this.selectionStart);\n            return this._finishDeduceEditorPosition((_b = (_a = this.selection) === null || _a === void 0 ? void 0 : _a.getStartPosition()) !== null && _b !== void 0 ? _b : null, str, -1);\n        }\n        if (offset >= this.selectionEnd) {\n            const str = this.value.substring(this.selectionEnd, offset);\n            return this._finishDeduceEditorPosition((_d = (_c = this.selection) === null || _c === void 0 ? void 0 : _c.getEndPosition()) !== null && _d !== void 0 ? _d : null, str, 1);\n        }\n        const str1 = this.value.substring(this.selectionStart, offset);\n        if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n            return this._finishDeduceEditorPosition((_f = (_e = this.selection) === null || _e === void 0 ? void 0 : _e.getStartPosition()) !== null && _f !== void 0 ? _f : null, str1, 1);\n        }\n        const str2 = this.value.substring(offset, this.selectionEnd);\n        return this._finishDeduceEditorPosition((_h = (_g = this.selection) === null || _g === void 0 ? void 0 : _g.getEndPosition()) !== null && _h !== void 0 ? _h : null, str2, -1);\n    }\n    _finishDeduceEditorPosition(anchor, deltaText, signum) {\n        let lineFeedCnt = 0;\n        let lastLineFeedIndex = -1;\n        while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n            lineFeedCnt++;\n        }\n        return [anchor, signum * deltaText.length, lineFeedCnt];\n    }\n    static deduceInput(previousState, currentState, couldBeEmojiInput) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionStart, currentState.selectionStart);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd, currentState.value.length - currentState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        if (currentSelectionStart === currentSelectionEnd) {\n            // no current selection\n            const replacePreviousCharacters = (previousState.selectionStart - prefixLength);\n            if (_debugComposition) {\n                console.log(`REMOVE PREVIOUS: ${replacePreviousCharacters} chars`);\n            }\n            return {\n                text: currentValue,\n                replacePrevCharCnt: replacePreviousCharacters,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        // there is a current selection => composition case\n        const replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n        return {\n            text: currentValue,\n            replacePrevCharCnt: replacePreviousCharacters,\n            replaceNextCharCnt: 0,\n            positionDelta: 0\n        };\n    }\n    static deduceAndroidCompositionInput(previousState, currentState) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceAndroidCompositionInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        if (previousState.value === currentState.value) {\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: currentState.selectionEnd - previousState.selectionEnd\n            };\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionEnd);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        return {\n            text: currentValue,\n            replacePrevCharCnt: previousSelectionEnd,\n            replaceNextCharCnt: previousValue.length - previousSelectionEnd,\n            positionDelta: currentSelectionEnd - currentValue.length\n        };\n    }\n}\nTextAreaState.EMPTY = new TextAreaState('', 0, 0, null, undefined);\nexport class PagedScreenReaderStrategy {\n    static _getPageOfLine(lineNumber, linesPerPage) {\n        return Math.floor((lineNumber - 1) / linesPerPage);\n    }\n    static _getRangeForPage(page, linesPerPage) {\n        const offset = page * linesPerPage;\n        const startLineNumber = offset + 1;\n        const endLineNumber = offset + linesPerPage;\n        return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n    }\n    static fromEditorSelection(model, selection, linesPerPage, trimLongText) {\n        // Chromium handles very poorly text even of a few thousand chars\n        // Cut text to avoid stalling the entire UI\n        const LIMIT_CHARS = 500;\n        const selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n        const selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n        const selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n        const selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n        let pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n        if (trimLongText && model.getValueLengthInRange(pretextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n            const pretextStart = model.modifyPosition(pretextRange.getEndPosition(), -LIMIT_CHARS);\n            pretextRange = Range.fromPositions(pretextStart, pretextRange.getEndPosition());\n        }\n        const pretext = model.getValueInRange(pretextRange, 1 /* EndOfLinePreference.LF */);\n        const lastLine = model.getLineCount();\n        const lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n        let posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n        if (trimLongText && model.getValueLengthInRange(posttextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n            const posttextEnd = model.modifyPosition(posttextRange.getStartPosition(), LIMIT_CHARS);\n            posttextRange = Range.fromPositions(posttextRange.getStartPosition(), posttextEnd);\n        }\n        const posttext = model.getValueInRange(posttextRange, 1 /* EndOfLinePreference.LF */);\n        let text;\n        if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n            // take full selection\n            text = model.getValueInRange(selection, 1 /* EndOfLinePreference.LF */);\n        }\n        else {\n            const selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n            const selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n            text = (model.getValueInRange(selectionRange1, 1 /* EndOfLinePreference.LF */)\n                + String.fromCharCode(8230)\n                + model.getValueInRange(selectionRange2, 1 /* EndOfLinePreference.LF */));\n        }\n        if (trimLongText && text.length > 2 * LIMIT_CHARS) {\n            text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n        }\n        return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, selection, pretextRange.endLineNumber - pretextRange.startLineNumber);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}