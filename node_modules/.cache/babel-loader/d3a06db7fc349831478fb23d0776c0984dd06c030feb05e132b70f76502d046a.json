{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').DocType} HastDoctype\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('hast').Comment} HastComment\n * @typedef {import('hast').Content} HastContent\n */\n\n/**\n * @typedef {HastContent | HastRoot} HastNode\n *\n * @callback AfterTransform\n *   Callback called when each node is transformed.\n * @param {Node} domNode\n *   DOM node that was handled.\n * @param {HastNode} hastNode\n *   Corresponding hast node.\n * @returns {void}\n *   Nothing.\n *\n * @typedef Options\n *   Configuration.\n * @property {AfterTransform | null | undefined} [afterTransform]\n *   Callback called when each node is transformed.\n */\n\nimport { webNamespaces } from 'web-namespaces';\nimport { h, s } from 'hastscript';\n\n/**\n * Transform a DOM tree to a hast tree.\n *\n * @param {Node} tree\n *   DOM tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNode}\n *   Equivalent hast node.\n */\nexport function fromDom(tree, options) {\n  var result = tree ? transform(tree, options || {}) : undefined;\n  return result || {\n    type: 'root',\n    children: []\n  };\n}\n\n/**\n * @param {Node} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastNode | undefined}\n *   Equivalent hast node.\n *\n *   Note that certain legacy DOM nodes (i.e., Attr nodes (2),  CDATA, processing instructions)\n */\nfunction transform(node, options) {\n  var transformed = one(node, options);\n  if (transformed && options.afterTransform) options.afterTransform(node, transformed);\n  return transformed;\n}\n\n/**\n * @param {Node} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastNode | undefined}\n *   Equivalent hast node.\n */\nfunction one(node, options) {\n  switch (node.nodeType) {\n    case 1 /* Element */:\n      {\n        // @ts-expect-error TypeScript is wrong.\n        return element(node, options);\n      }\n\n    // Ignore: Attr (2).\n\n    case 3 /* Text */:\n      {\n        // @ts-expect-error TypeScript is wrong.\n        return text(node);\n      }\n\n    // Ignore: CDATA (4).\n    // Removed: Entity reference (5)\n    // Removed: Entity (6)\n    // Ignore: Processing instruction (7).\n\n    case 8 /* Comment */:\n      {\n        // @ts-expect-error TypeScript is wrong.\n        return comment(node);\n      }\n    case 9 /* Document */:\n      {\n        // @ts-expect-error TypeScript is wrong.\n        return root(node, options);\n      }\n    case 10 /* Document type */:\n      {\n        return doctype();\n      }\n    case 11 /* Document fragment */:\n      {\n        // @ts-expect-error TypeScript is wrong.\n        return root(node, options);\n      }\n    default:\n      {\n        return undefined;\n      }\n  }\n}\n\n/**\n * Transform a document.\n *\n * @param {Document | DocumentFragment} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastRoot}\n *   Equivalent hast node.\n */\nfunction root(node, options) {\n  return {\n    type: 'root',\n    children: all(node, options)\n  };\n}\n\n/**\n * Transform a doctype.\n *\n * @returns {HastDoctype}\n *   Equivalent hast node.\n */\nfunction doctype() {\n  // @ts-expect-error hast types out of date.\n  return {\n    type: 'doctype'\n  };\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   DOM node to transform.\n * @returns {HastText}\n *   Equivalent hast node.\n */\nfunction text(node) {\n  return {\n    type: 'text',\n    value: node.nodeValue || ''\n  };\n}\n\n/**\n * Transform a comment.\n *\n * @param {Comment} node\n *   DOM node to transform.\n * @returns {HastComment}\n *   Equivalent hast node.\n */\nfunction comment(node) {\n  return {\n    type: 'comment',\n    value: node.nodeValue || ''\n  };\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastElement}\n *   Equivalent hast node.\n */\nfunction element(node, options) {\n  var space = node.namespaceURI;\n  var fn = space === webNamespaces.svg ? s : h;\n  var tagName = space === webNamespaces.html ? node.tagName.toLowerCase() : node.tagName;\n  /** @type {DocumentFragment | Element} */\n  var content =\n  // @ts-expect-error Types are wrong.\n  space === webNamespaces.html && tagName === 'template' ? node.content : node;\n  var attributes = node.getAttributeNames();\n  /** @type {Record<string, string>} */\n  var props = {};\n  var index = -1;\n  while (++index < attributes.length) {\n    props[attributes[index]] = node.getAttribute(attributes[index]) || '';\n  }\n  return fn(tagName, props, all(content, options));\n}\n\n/**\n * Transform child nodes in a parent.\n *\n * @param {Document | DocumentFragment | Element} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {Array<HastContent>}\n *   Equivalent hast nodes.\n */\nfunction all(node, options) {\n  var nodes = node.childNodes;\n  /** @type {Array<HastContent>} */\n  var children = [];\n  var index = -1;\n  while (++index < nodes.length) {\n    var child = transform(nodes[index], options);\n    if (child !== undefined) {\n      // @ts-expect-error Assume no document inside document.\n      children.push(child);\n    }\n  }\n  return children;\n}","map":{"version":3,"names":["webNamespaces","h","s","fromDom","tree","options","result","transform","undefined","type","children","node","transformed","one","afterTransform","nodeType","element","text","comment","root","doctype","all","value","nodeValue","space","namespaceURI","fn","svg","tagName","html","toLowerCase","content","attributes","getAttributeNames","props","index","length","getAttribute","nodes","childNodes","child","push"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/hast-util-from-dom/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').DocType} HastDoctype\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('hast').Comment} HastComment\n * @typedef {import('hast').Content} HastContent\n */\n\n/**\n * @typedef {HastContent | HastRoot} HastNode\n *\n * @callback AfterTransform\n *   Callback called when each node is transformed.\n * @param {Node} domNode\n *   DOM node that was handled.\n * @param {HastNode} hastNode\n *   Corresponding hast node.\n * @returns {void}\n *   Nothing.\n *\n * @typedef Options\n *   Configuration.\n * @property {AfterTransform | null | undefined} [afterTransform]\n *   Callback called when each node is transformed.\n */\n\nimport {webNamespaces} from 'web-namespaces'\nimport {h, s} from 'hastscript'\n\n/**\n * Transform a DOM tree to a hast tree.\n *\n * @param {Node} tree\n *   DOM tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNode}\n *   Equivalent hast node.\n */\nexport function fromDom(tree, options) {\n  const result = tree ? transform(tree, options || {}) : undefined\n  return result || {type: 'root', children: []}\n}\n\n/**\n * @param {Node} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastNode | undefined}\n *   Equivalent hast node.\n *\n *   Note that certain legacy DOM nodes (i.e., Attr nodes (2),  CDATA, processing instructions)\n */\nfunction transform(node, options) {\n  const transformed = one(node, options)\n  if (transformed && options.afterTransform)\n    options.afterTransform(node, transformed)\n  return transformed\n}\n\n/**\n * @param {Node} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastNode | undefined}\n *   Equivalent hast node.\n */\nfunction one(node, options) {\n  switch (node.nodeType) {\n    case 1 /* Element */: {\n      // @ts-expect-error TypeScript is wrong.\n      return element(node, options)\n    }\n\n    // Ignore: Attr (2).\n\n    case 3 /* Text */: {\n      // @ts-expect-error TypeScript is wrong.\n      return text(node)\n    }\n\n    // Ignore: CDATA (4).\n    // Removed: Entity reference (5)\n    // Removed: Entity (6)\n    // Ignore: Processing instruction (7).\n\n    case 8 /* Comment */: {\n      // @ts-expect-error TypeScript is wrong.\n      return comment(node)\n    }\n\n    case 9 /* Document */: {\n      // @ts-expect-error TypeScript is wrong.\n      return root(node, options)\n    }\n\n    case 10 /* Document type */: {\n      return doctype()\n    }\n\n    case 11 /* Document fragment */: {\n      // @ts-expect-error TypeScript is wrong.\n      return root(node, options)\n    }\n\n    default: {\n      return undefined\n    }\n  }\n}\n\n/**\n * Transform a document.\n *\n * @param {Document | DocumentFragment} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastRoot}\n *   Equivalent hast node.\n */\nfunction root(node, options) {\n  return {type: 'root', children: all(node, options)}\n}\n\n/**\n * Transform a doctype.\n *\n * @returns {HastDoctype}\n *   Equivalent hast node.\n */\nfunction doctype() {\n  // @ts-expect-error hast types out of date.\n  return {type: 'doctype'}\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   DOM node to transform.\n * @returns {HastText}\n *   Equivalent hast node.\n */\nfunction text(node) {\n  return {type: 'text', value: node.nodeValue || ''}\n}\n\n/**\n * Transform a comment.\n *\n * @param {Comment} node\n *   DOM node to transform.\n * @returns {HastComment}\n *   Equivalent hast node.\n */\nfunction comment(node) {\n  return {type: 'comment', value: node.nodeValue || ''}\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {HastElement}\n *   Equivalent hast node.\n */\nfunction element(node, options) {\n  const space = node.namespaceURI\n  const fn = space === webNamespaces.svg ? s : h\n  const tagName =\n    space === webNamespaces.html ? node.tagName.toLowerCase() : node.tagName\n  /** @type {DocumentFragment | Element} */\n  const content =\n    // @ts-expect-error Types are wrong.\n    space === webNamespaces.html && tagName === 'template' ? node.content : node\n  const attributes = node.getAttributeNames()\n  /** @type {Record<string, string>} */\n  const props = {}\n  let index = -1\n\n  while (++index < attributes.length) {\n    props[attributes[index]] = node.getAttribute(attributes[index]) || ''\n  }\n\n  return fn(tagName, props, all(content, options))\n}\n\n/**\n * Transform child nodes in a parent.\n *\n * @param {Document | DocumentFragment | Element} node\n *   DOM node to transform.\n * @param {Options} options\n *   Configuration.\n * @returns {Array<HastContent>}\n *   Equivalent hast nodes.\n */\nfunction all(node, options) {\n  const nodes = node.childNodes\n  /** @type {Array<HastContent>} */\n  const children = []\n  let index = -1\n\n  while (++index < nodes.length) {\n    const child = transform(nodes[index], options)\n\n    if (child !== undefined) {\n      // @ts-expect-error Assume no document inside document.\n      children.push(child)\n    }\n  }\n\n  return children\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}