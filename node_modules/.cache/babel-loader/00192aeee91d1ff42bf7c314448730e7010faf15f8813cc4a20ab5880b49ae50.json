{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.with.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nexport var Position = /*#__PURE__*/function () {\n  function Position(lineNumber, column) {\n    _classCallCheck(this, Position);\n    this.lineNumber = lineNumber;\n    this.column = column;\n  }\n  /**\n   * Create a new position from this position.\n   *\n   * @param newLineNumber new line number\n   * @param newColumn new column\n   */\n  return _createClass(Position, [{\n    key: \"with\",\n    value: function _with() {\n      var newLineNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lineNumber;\n      var newColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.column;\n      if (newLineNumber === this.lineNumber && newColumn === this.column) {\n        return this;\n      } else {\n        return new Position(newLineNumber, newColumn);\n      }\n    }\n    /**\n     * Derive a new position from this position.\n     *\n     * @param deltaLineNumber line number delta\n     * @param deltaColumn column delta\n     */\n  }, {\n    key: \"delta\",\n    value: function delta() {\n      var deltaLineNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var deltaColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return this[\"with\"](this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\n     * Test if this position equals other position\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return Position.equals(this, other);\n    }\n    /**\n     * Test if position `a` equals position `b`\n     */\n  }, {\n    key: \"isBefore\",\n    value:\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be false.\n     */\n    function isBefore(other) {\n      return Position.isBefore(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be false.\n     */\n  }, {\n    key: \"isBeforeOrEqual\",\n    value:\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be true.\n     */\n    function isBeforeOrEqual(other) {\n      return Position.isBeforeOrEqual(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be true.\n     */\n  }, {\n    key: \"clone\",\n    value:\n    /**\n     * Clone this position.\n     */\n    function clone() {\n      return new Position(this.lineNumber, this.column);\n    }\n    /**\n     * Convert to a human-readable representation.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return '(' + this.lineNumber + ',' + this.column + ')';\n    }\n    // ---\n    /**\n     * Create a `Position` from an `IPosition`.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        lineNumber: this.lineNumber,\n        column: this.column\n      };\n    }\n  }], [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      if (!a && !b) {\n        return true;\n      }\n      return !!a && !!b && a.lineNumber === b.lineNumber && a.column === b.column;\n    }\n  }, {\n    key: \"isBefore\",\n    value: function isBefore(a, b) {\n      if (a.lineNumber < b.lineNumber) {\n        return true;\n      }\n      if (b.lineNumber < a.lineNumber) {\n        return false;\n      }\n      return a.column < b.column;\n    }\n  }, {\n    key: \"isBeforeOrEqual\",\n    value: function isBeforeOrEqual(a, b) {\n      if (a.lineNumber < b.lineNumber) {\n        return true;\n      }\n      if (b.lineNumber < a.lineNumber) {\n        return false;\n      }\n      return a.column <= b.column;\n    }\n    /**\n     * A function that compares positions, useful for sorting\n     */\n  }, {\n    key: \"compare\",\n    value: function compare(a, b) {\n      var aLineNumber = a.lineNumber | 0;\n      var bLineNumber = b.lineNumber | 0;\n      if (aLineNumber === bLineNumber) {\n        var aColumn = a.column | 0;\n        var bColumn = b.column | 0;\n        return aColumn - bColumn;\n      }\n      return aLineNumber - bLineNumber;\n    }\n  }, {\n    key: \"lift\",\n    value: function lift(pos) {\n      return new Position(pos.lineNumber, pos.column);\n    }\n    /**\n     * Test if `obj` is an `IPosition`.\n     */\n  }, {\n    key: \"isIPosition\",\n    value: function isIPosition(obj) {\n      return obj && typeof obj.lineNumber === 'number' && typeof obj.column === 'number';\n    }\n  }]);\n}();","map":{"version":3,"names":["Position","lineNumber","column","_classCallCheck","_createClass","key","value","_with","newLineNumber","arguments","length","undefined","newColumn","delta","deltaLineNumber","deltaColumn","equals","other","isBefore","isBeforeOrEqual","clone","toString","toJSON","a","b","compare","aLineNumber","bLineNumber","aColumn","bColumn","lift","pos","isIPosition","obj"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/core/position.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/**\n * A position in the editor.\n */\nexport class Position {\n    constructor(lineNumber, column) {\n        this.lineNumber = lineNumber;\n        this.column = column;\n    }\n    /**\n     * Create a new position from this position.\n     *\n     * @param newLineNumber new line number\n     * @param newColumn new column\n     */\n    with(newLineNumber = this.lineNumber, newColumn = this.column) {\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\n            return this;\n        }\n        else {\n            return new Position(newLineNumber, newColumn);\n        }\n    }\n    /**\n     * Derive a new position from this position.\n     *\n     * @param deltaLineNumber line number delta\n     * @param deltaColumn column delta\n     */\n    delta(deltaLineNumber = 0, deltaColumn = 0) {\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\n    }\n    /**\n     * Test if this position equals other position\n     */\n    equals(other) {\n        return Position.equals(this, other);\n    }\n    /**\n     * Test if position `a` equals position `b`\n     */\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        return (!!a &&\n            !!b &&\n            a.lineNumber === b.lineNumber &&\n            a.column === b.column);\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be false.\n     */\n    isBefore(other) {\n        return Position.isBefore(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be false.\n     */\n    static isBefore(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column < b.column;\n    }\n    /**\n     * Test if this position is before other position.\n     * If the two positions are equal, the result will be true.\n     */\n    isBeforeOrEqual(other) {\n        return Position.isBeforeOrEqual(this, other);\n    }\n    /**\n     * Test if position `a` is before position `b`.\n     * If the two positions are equal, the result will be true.\n     */\n    static isBeforeOrEqual(a, b) {\n        if (a.lineNumber < b.lineNumber) {\n            return true;\n        }\n        if (b.lineNumber < a.lineNumber) {\n            return false;\n        }\n        return a.column <= b.column;\n    }\n    /**\n     * A function that compares positions, useful for sorting\n     */\n    static compare(a, b) {\n        const aLineNumber = a.lineNumber | 0;\n        const bLineNumber = b.lineNumber | 0;\n        if (aLineNumber === bLineNumber) {\n            const aColumn = a.column | 0;\n            const bColumn = b.column | 0;\n            return aColumn - bColumn;\n        }\n        return aLineNumber - bLineNumber;\n    }\n    /**\n     * Clone this position.\n     */\n    clone() {\n        return new Position(this.lineNumber, this.column);\n    }\n    /**\n     * Convert to a human-readable representation.\n     */\n    toString() {\n        return '(' + this.lineNumber + ',' + this.column + ')';\n    }\n    // ---\n    /**\n     * Create a `Position` from an `IPosition`.\n     */\n    static lift(pos) {\n        return new Position(pos.lineNumber, pos.column);\n    }\n    /**\n     * Test if `obj` is an `IPosition`.\n     */\n    static isIPosition(obj) {\n        return (obj\n            && (typeof obj.lineNumber === 'number')\n            && (typeof obj.column === 'number'));\n    }\n    toJSON() {\n        return {\n            lineNumber: this.lineNumber,\n            column: this.column\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}