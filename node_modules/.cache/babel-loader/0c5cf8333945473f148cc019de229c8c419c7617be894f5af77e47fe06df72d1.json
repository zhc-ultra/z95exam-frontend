{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _typeof from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, isDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport Severity from '../../../base/common/severity.js';\nimport * as nls from '../../../nls.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { registerSingleton } from '../../instantiation/common/extensions.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot, UndoRedoGroup, UndoRedoSource } from './undoRedo.js';\nvar DEBUG = false;\nfunction getResourceLabel(resource) {\n  return resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n}\nvar stackElementCounter = 0;\nvar ResourceStackElement = /*#__PURE__*/function () {\n  function ResourceStackElement(actual, resourceLabel, strResource, groupId, groupOrder, sourceId, sourceOrder) {\n    _classCallCheck(this, ResourceStackElement);\n    this.id = ++stackElementCounter;\n    this.type = 0 /* UndoRedoElementType.Resource */;\n    this.actual = actual;\n    this.label = actual.label;\n    this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n    this.resourceLabel = resourceLabel;\n    this.strResource = strResource;\n    this.resourceLabels = [this.resourceLabel];\n    this.strResources = [this.strResource];\n    this.groupId = groupId;\n    this.groupOrder = groupOrder;\n    this.sourceId = sourceId;\n    this.sourceOrder = sourceOrder;\n    this.isValid = true;\n  }\n  return _createClass(ResourceStackElement, [{\n    key: \"setValid\",\n    value: function setValid(isValid) {\n      this.isValid = isValid;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[id:\".concat(this.id, \"] [group:\").concat(this.groupId, \"] [\").concat(this.isValid ? '  VALID' : 'INVALID', \"] \").concat(this.actual.constructor.name, \" - \").concat(this.actual);\n    }\n  }]);\n}();\nvar ResourceReasonPair = /*#__PURE__*/_createClass(function ResourceReasonPair(resourceLabel, reason) {\n  _classCallCheck(this, ResourceReasonPair);\n  this.resourceLabel = resourceLabel;\n  this.reason = reason;\n});\nvar RemovedResources = /*#__PURE__*/function () {\n  function RemovedResources() {\n    _classCallCheck(this, RemovedResources);\n    this.elements = new Map();\n  }\n  return _createClass(RemovedResources, [{\n    key: \"createMessage\",\n    value: function createMessage() {\n      var externalRemoval = [];\n      var noParallelUniverses = [];\n      var _iterator = _createForOfIteratorHelper(this.elements),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            element = _step$value[1];\n          var dest = element.reason === 0 /* RemovedResourceReason.ExternalRemoval */ ? externalRemoval : noParallelUniverses;\n          dest.push(element.resourceLabel);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var messages = [];\n      if (externalRemoval.length > 0) {\n        messages.push(nls.localize({\n          key: 'externalRemoval',\n          comment: ['{0} is a list of filenames']\n        }, \"The following files have been closed and modified on disk: {0}.\", externalRemoval.join(', ')));\n      }\n      if (noParallelUniverses.length > 0) {\n        messages.push(nls.localize({\n          key: 'noParallelUniverses',\n          comment: ['{0} is a list of filenames']\n        }, \"The following files have been modified in an incompatible way: {0}.\", noParallelUniverses.join(', ')));\n      }\n      return messages.join('\\n');\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.elements.size;\n    }\n  }, {\n    key: \"has\",\n    value: function has(strResource) {\n      return this.elements.has(strResource);\n    }\n  }, {\n    key: \"set\",\n    value: function set(strResource, value) {\n      this.elements.set(strResource, value);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(strResource) {\n      return this.elements[\"delete\"](strResource);\n    }\n  }]);\n}();\nvar WorkspaceStackElement = /*#__PURE__*/function () {\n  function WorkspaceStackElement(actual, resourceLabels, strResources, groupId, groupOrder, sourceId, sourceOrder) {\n    _classCallCheck(this, WorkspaceStackElement);\n    this.id = ++stackElementCounter;\n    this.type = 1 /* UndoRedoElementType.Workspace */;\n    this.actual = actual;\n    this.label = actual.label;\n    this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n    this.resourceLabels = resourceLabels;\n    this.strResources = strResources;\n    this.groupId = groupId;\n    this.groupOrder = groupOrder;\n    this.sourceId = sourceId;\n    this.sourceOrder = sourceOrder;\n    this.removedResources = null;\n    this.invalidatedResources = null;\n  }\n  return _createClass(WorkspaceStackElement, [{\n    key: \"canSplit\",\n    value: function canSplit() {\n      return typeof this.actual.split === 'function';\n    }\n  }, {\n    key: \"removeResource\",\n    value: function removeResource(resourceLabel, strResource, reason) {\n      if (!this.removedResources) {\n        this.removedResources = new RemovedResources();\n      }\n      if (!this.removedResources.has(strResource)) {\n        this.removedResources.set(strResource, new ResourceReasonPair(resourceLabel, reason));\n      }\n    }\n  }, {\n    key: \"setValid\",\n    value: function setValid(resourceLabel, strResource, isValid) {\n      if (isValid) {\n        if (this.invalidatedResources) {\n          this.invalidatedResources[\"delete\"](strResource);\n          if (this.invalidatedResources.size === 0) {\n            this.invalidatedResources = null;\n          }\n        }\n      } else {\n        if (!this.invalidatedResources) {\n          this.invalidatedResources = new RemovedResources();\n        }\n        if (!this.invalidatedResources.has(strResource)) {\n          this.invalidatedResources.set(strResource, new ResourceReasonPair(resourceLabel, 0 /* RemovedResourceReason.ExternalRemoval */));\n        }\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[id:\".concat(this.id, \"] [group:\").concat(this.groupId, \"] [\").concat(this.invalidatedResources ? 'INVALID' : '  VALID', \"] \").concat(this.actual.constructor.name, \" - \").concat(this.actual);\n    }\n  }]);\n}();\nvar ResourceEditStack = /*#__PURE__*/function () {\n  function ResourceEditStack(resourceLabel, strResource) {\n    _classCallCheck(this, ResourceEditStack);\n    this.resourceLabel = resourceLabel;\n    this.strResource = strResource;\n    this._past = [];\n    this._future = [];\n    this.locked = false;\n    this.versionId = 1;\n  }\n  return _createClass(ResourceEditStack, [{\n    key: \"dispose\",\n    value: function dispose() {\n      var _iterator2 = _createForOfIteratorHelper(this._past),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var element = _step2.value;\n          if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n            element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var _iterator3 = _createForOfIteratorHelper(this._future),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _element2 = _step3.value;\n          if (_element2.type === 1 /* UndoRedoElementType.Workspace */) {\n            _element2.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this.versionId++;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var result = [];\n      result.push(\"* \".concat(this.strResource, \":\"));\n      for (var i = 0; i < this._past.length; i++) {\n        result.push(\"   * [UNDO] \".concat(this._past[i]));\n      }\n      for (var _i = this._future.length - 1; _i >= 0; _i--) {\n        result.push(\"   * [REDO] \".concat(this._future[_i]));\n      }\n      return result.join('\\n');\n    }\n  }, {\n    key: \"flushAllElements\",\n    value: function flushAllElements() {\n      this._past = [];\n      this._future = [];\n      this.versionId++;\n    }\n  }, {\n    key: \"_setElementValidFlag\",\n    value: function _setElementValidFlag(element, isValid) {\n      if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n        element.setValid(this.resourceLabel, this.strResource, isValid);\n      } else {\n        element.setValid(isValid);\n      }\n    }\n  }, {\n    key: \"setElementsValidFlag\",\n    value: function setElementsValidFlag(isValid, filter) {\n      var _iterator4 = _createForOfIteratorHelper(this._past),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var element = _step4.value;\n          if (filter(element.actual)) {\n            this._setElementValidFlag(element, isValid);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var _iterator5 = _createForOfIteratorHelper(this._future),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _element3 = _step5.value;\n          if (filter(_element3.actual)) {\n            this._setElementValidFlag(_element3, isValid);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"pushElement\",\n    value: function pushElement(element) {\n      // remove the future\n      var _iterator6 = _createForOfIteratorHelper(this._future),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var futureElement = _step6.value;\n          if (futureElement.type === 1 /* UndoRedoElementType.Workspace */) {\n            futureElement.removeResource(this.resourceLabel, this.strResource, 1 /* RemovedResourceReason.NoParallelUniverses */);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      this._future = [];\n      this._past.push(element);\n      this.versionId++;\n    }\n  }, {\n    key: \"createSnapshot\",\n    value: function createSnapshot(resource) {\n      var elements = [];\n      for (var i = 0, len = this._past.length; i < len; i++) {\n        elements.push(this._past[i].id);\n      }\n      for (var _i2 = this._future.length - 1; _i2 >= 0; _i2--) {\n        elements.push(this._future[_i2].id);\n      }\n      return new ResourceEditStackSnapshot(resource, elements);\n    }\n  }, {\n    key: \"restoreSnapshot\",\n    value: function restoreSnapshot(snapshot) {\n      var snapshotLength = snapshot.elements.length;\n      var isOK = true;\n      var snapshotIndex = 0;\n      var removePastAfter = -1;\n      for (var i = 0, len = this._past.length; i < len; i++, snapshotIndex++) {\n        var element = this._past[i];\n        if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n          isOK = false;\n          removePastAfter = 0;\n        }\n        if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n          element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n        }\n      }\n      var removeFutureBefore = -1;\n      for (var _i3 = this._future.length - 1; _i3 >= 0; _i3--, snapshotIndex++) {\n        var _element4 = this._future[_i3];\n        if (isOK && (snapshotIndex >= snapshotLength || _element4.id !== snapshot.elements[snapshotIndex])) {\n          isOK = false;\n          removeFutureBefore = _i3;\n        }\n        if (!isOK && _element4.type === 1 /* UndoRedoElementType.Workspace */) {\n          _element4.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n        }\n      }\n      if (removePastAfter !== -1) {\n        this._past = this._past.slice(0, removePastAfter);\n      }\n      if (removeFutureBefore !== -1) {\n        this._future = this._future.slice(removeFutureBefore + 1);\n      }\n      this.versionId++;\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements() {\n      var past = [];\n      var future = [];\n      var _iterator7 = _createForOfIteratorHelper(this._past),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var element = _step7.value;\n          past.push(element.actual);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      var _iterator8 = _createForOfIteratorHelper(this._future),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _element5 = _step8.value;\n          future.push(_element5.actual);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      return {\n        past: past,\n        future: future\n      };\n    }\n  }, {\n    key: \"getClosestPastElement\",\n    value: function getClosestPastElement() {\n      if (this._past.length === 0) {\n        return null;\n      }\n      return this._past[this._past.length - 1];\n    }\n  }, {\n    key: \"getSecondClosestPastElement\",\n    value: function getSecondClosestPastElement() {\n      if (this._past.length < 2) {\n        return null;\n      }\n      return this._past[this._past.length - 2];\n    }\n  }, {\n    key: \"getClosestFutureElement\",\n    value: function getClosestFutureElement() {\n      if (this._future.length === 0) {\n        return null;\n      }\n      return this._future[this._future.length - 1];\n    }\n  }, {\n    key: \"hasPastElements\",\n    value: function hasPastElements() {\n      return this._past.length > 0;\n    }\n  }, {\n    key: \"hasFutureElements\",\n    value: function hasFutureElements() {\n      return this._future.length > 0;\n    }\n  }, {\n    key: \"splitPastWorkspaceElement\",\n    value: function splitPastWorkspaceElement(toRemove, individualMap) {\n      for (var j = this._past.length - 1; j >= 0; j--) {\n        if (this._past[j] === toRemove) {\n          if (individualMap.has(this.strResource)) {\n            // gets replaced\n            this._past[j] = individualMap.get(this.strResource);\n          } else {\n            // gets deleted\n            this._past.splice(j, 1);\n          }\n          break;\n        }\n      }\n      this.versionId++;\n    }\n  }, {\n    key: \"splitFutureWorkspaceElement\",\n    value: function splitFutureWorkspaceElement(toRemove, individualMap) {\n      for (var j = this._future.length - 1; j >= 0; j--) {\n        if (this._future[j] === toRemove) {\n          if (individualMap.has(this.strResource)) {\n            // gets replaced\n            this._future[j] = individualMap.get(this.strResource);\n          } else {\n            // gets deleted\n            this._future.splice(j, 1);\n          }\n          break;\n        }\n      }\n      this.versionId++;\n    }\n  }, {\n    key: \"moveBackward\",\n    value: function moveBackward(element) {\n      this._past.pop();\n      this._future.push(element);\n      this.versionId++;\n    }\n  }, {\n    key: \"moveForward\",\n    value: function moveForward(element) {\n      this._future.pop();\n      this._past.push(element);\n      this.versionId++;\n    }\n  }]);\n}();\nvar EditStackSnapshot = /*#__PURE__*/function () {\n  function EditStackSnapshot(editStacks) {\n    _classCallCheck(this, EditStackSnapshot);\n    this.editStacks = editStacks;\n    this._versionIds = [];\n    for (var i = 0, len = this.editStacks.length; i < len; i++) {\n      this._versionIds[i] = this.editStacks[i].versionId;\n    }\n  }\n  return _createClass(EditStackSnapshot, [{\n    key: \"isValid\",\n    value: function isValid() {\n      for (var i = 0, len = this.editStacks.length; i < len; i++) {\n        if (this._versionIds[i] !== this.editStacks[i].versionId) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }]);\n}();\nvar missingEditStack = new ResourceEditStack('', '');\nmissingEditStack.locked = true;\nvar UndoRedoService = /*#__PURE__*/function () {\n  function UndoRedoService(_dialogService, _notificationService) {\n    _classCallCheck(this, UndoRedoService);\n    this._dialogService = _dialogService;\n    this._notificationService = _notificationService;\n    this._editStacks = new Map();\n    this._uriComparisonKeyComputers = [];\n  }\n  return _createClass(UndoRedoService, [{\n    key: \"getUriComparisonKey\",\n    value: function getUriComparisonKey(resource) {\n      var _iterator9 = _createForOfIteratorHelper(this._uriComparisonKeyComputers),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var uriComparisonKeyComputer = _step9.value;\n          if (uriComparisonKeyComputer[0] === resource.scheme) {\n            return uriComparisonKeyComputer[1].getComparisonKey(resource);\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return resource.toString();\n    }\n  }, {\n    key: \"_print\",\n    value: function _print(label) {\n      console.log(\"------------------------------------\");\n      console.log(\"AFTER \".concat(label, \": \"));\n      var str = [];\n      var _iterator10 = _createForOfIteratorHelper(this._editStacks),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var element = _step10.value;\n          str.push(element[1].toString());\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      console.log(str.join('\\n'));\n    }\n  }, {\n    key: \"pushElement\",\n    value: function pushElement(element) {\n      var group = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : UndoRedoGroup.None;\n      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : UndoRedoSource.None;\n      if (element.type === 0 /* UndoRedoElementType.Resource */) {\n        var resourceLabel = getResourceLabel(element.resource);\n        var strResource = this.getUriComparisonKey(element.resource);\n        this._pushElement(new ResourceStackElement(element, resourceLabel, strResource, group.id, group.nextOrder(), source.id, source.nextOrder()));\n      } else {\n        var seen = new Set();\n        var resourceLabels = [];\n        var strResources = [];\n        var _iterator11 = _createForOfIteratorHelper(element.resources),\n          _step11;\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var resource = _step11.value;\n            var _resourceLabel = getResourceLabel(resource);\n            var _strResource = this.getUriComparisonKey(resource);\n            if (seen.has(_strResource)) {\n              continue;\n            }\n            seen.add(_strResource);\n            resourceLabels.push(_resourceLabel);\n            strResources.push(_strResource);\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n        if (resourceLabels.length === 1) {\n          this._pushElement(new ResourceStackElement(element, resourceLabels[0], strResources[0], group.id, group.nextOrder(), source.id, source.nextOrder()));\n        } else {\n          this._pushElement(new WorkspaceStackElement(element, resourceLabels, strResources, group.id, group.nextOrder(), source.id, source.nextOrder()));\n        }\n      }\n      if (DEBUG) {\n        this._print('pushElement');\n      }\n    }\n  }, {\n    key: \"_pushElement\",\n    value: function _pushElement(element) {\n      for (var i = 0, len = element.strResources.length; i < len; i++) {\n        var resourceLabel = element.resourceLabels[i];\n        var strResource = element.strResources[i];\n        var editStack = void 0;\n        if (this._editStacks.has(strResource)) {\n          editStack = this._editStacks.get(strResource);\n        } else {\n          editStack = new ResourceEditStack(resourceLabel, strResource);\n          this._editStacks.set(strResource, editStack);\n        }\n        editStack.pushElement(element);\n      }\n    }\n  }, {\n    key: \"getLastElement\",\n    value: function getLastElement(resource) {\n      var strResource = this.getUriComparisonKey(resource);\n      if (this._editStacks.has(strResource)) {\n        var editStack = this._editStacks.get(strResource);\n        if (editStack.hasFutureElements()) {\n          return null;\n        }\n        var closestPastElement = editStack.getClosestPastElement();\n        return closestPastElement ? closestPastElement.actual : null;\n      }\n      return null;\n    }\n  }, {\n    key: \"_splitPastWorkspaceElement\",\n    value: function _splitPastWorkspaceElement(toRemove, ignoreResources) {\n      var individualArr = toRemove.actual.split();\n      var individualMap = new Map();\n      var _iterator12 = _createForOfIteratorHelper(individualArr),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var _element = _step12.value;\n          var resourceLabel = getResourceLabel(_element.resource);\n          var strResource = this.getUriComparisonKey(_element.resource);\n          var element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n          individualMap.set(element.strResource, element);\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      var _iterator13 = _createForOfIteratorHelper(toRemove.strResources),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var _strResource2 = _step13.value;\n          if (ignoreResources && ignoreResources.has(_strResource2)) {\n            continue;\n          }\n          var editStack = this._editStacks.get(_strResource2);\n          editStack.splitPastWorkspaceElement(toRemove, individualMap);\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n    }\n  }, {\n    key: \"_splitFutureWorkspaceElement\",\n    value: function _splitFutureWorkspaceElement(toRemove, ignoreResources) {\n      var individualArr = toRemove.actual.split();\n      var individualMap = new Map();\n      var _iterator14 = _createForOfIteratorHelper(individualArr),\n        _step14;\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var _element = _step14.value;\n          var resourceLabel = getResourceLabel(_element.resource);\n          var strResource = this.getUriComparisonKey(_element.resource);\n          var element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n          individualMap.set(element.strResource, element);\n        }\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n      var _iterator15 = _createForOfIteratorHelper(toRemove.strResources),\n        _step15;\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var _strResource3 = _step15.value;\n          if (ignoreResources && ignoreResources.has(_strResource3)) {\n            continue;\n          }\n          var editStack = this._editStacks.get(_strResource3);\n          editStack.splitFutureWorkspaceElement(toRemove, individualMap);\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n    }\n  }, {\n    key: \"removeElements\",\n    value: function removeElements(resource) {\n      var strResource = typeof resource === 'string' ? resource : this.getUriComparisonKey(resource);\n      if (this._editStacks.has(strResource)) {\n        var editStack = this._editStacks.get(strResource);\n        editStack.dispose();\n        this._editStacks[\"delete\"](strResource);\n      }\n      if (DEBUG) {\n        this._print('removeElements');\n      }\n    }\n  }, {\n    key: \"setElementsValidFlag\",\n    value: function setElementsValidFlag(resource, isValid, filter) {\n      var strResource = this.getUriComparisonKey(resource);\n      if (this._editStacks.has(strResource)) {\n        var editStack = this._editStacks.get(strResource);\n        editStack.setElementsValidFlag(isValid, filter);\n      }\n      if (DEBUG) {\n        this._print('setElementsValidFlag');\n      }\n    }\n  }, {\n    key: \"createSnapshot\",\n    value: function createSnapshot(resource) {\n      var strResource = this.getUriComparisonKey(resource);\n      if (this._editStacks.has(strResource)) {\n        var editStack = this._editStacks.get(strResource);\n        return editStack.createSnapshot(resource);\n      }\n      return new ResourceEditStackSnapshot(resource, []);\n    }\n  }, {\n    key: \"restoreSnapshot\",\n    value: function restoreSnapshot(snapshot) {\n      var strResource = this.getUriComparisonKey(snapshot.resource);\n      if (this._editStacks.has(strResource)) {\n        var editStack = this._editStacks.get(strResource);\n        editStack.restoreSnapshot(snapshot);\n        if (!editStack.hasPastElements() && !editStack.hasFutureElements()) {\n          // the edit stack is now empty, just remove it entirely\n          editStack.dispose();\n          this._editStacks[\"delete\"](strResource);\n        }\n      }\n      if (DEBUG) {\n        this._print('restoreSnapshot');\n      }\n    }\n  }, {\n    key: \"getElements\",\n    value: function getElements(resource) {\n      var strResource = this.getUriComparisonKey(resource);\n      if (this._editStacks.has(strResource)) {\n        var editStack = this._editStacks.get(strResource);\n        return editStack.getElements();\n      }\n      return {\n        past: [],\n        future: []\n      };\n    }\n  }, {\n    key: \"_findClosestUndoElementWithSource\",\n    value: function _findClosestUndoElementWithSource(sourceId) {\n      if (!sourceId) {\n        return [null, null];\n      }\n      // find an element with the sourceId and with the highest sourceOrder ready to be undone\n      var matchedElement = null;\n      var matchedStrResource = null;\n      var _iterator16 = _createForOfIteratorHelper(this._editStacks),\n        _step16;\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var _step16$value = _slicedToArray(_step16.value, 2),\n            strResource = _step16$value[0],\n            editStack = _step16$value[1];\n          var candidate = editStack.getClosestPastElement();\n          if (!candidate) {\n            continue;\n          }\n          if (candidate.sourceId === sourceId) {\n            if (!matchedElement || candidate.sourceOrder > matchedElement.sourceOrder) {\n              matchedElement = candidate;\n              matchedStrResource = strResource;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n      return [matchedElement, matchedStrResource];\n    }\n  }, {\n    key: \"canUndo\",\n    value: function canUndo(resourceOrSource) {\n      if (resourceOrSource instanceof UndoRedoSource) {\n        var _this$_findClosestUnd = this._findClosestUndoElementWithSource(resourceOrSource.id),\n          _this$_findClosestUnd2 = _slicedToArray(_this$_findClosestUnd, 2),\n          matchedStrResource = _this$_findClosestUnd2[1];\n        return matchedStrResource ? true : false;\n      }\n      var strResource = this.getUriComparisonKey(resourceOrSource);\n      if (this._editStacks.has(strResource)) {\n        var editStack = this._editStacks.get(strResource);\n        return editStack.hasPastElements();\n      }\n      return false;\n    }\n  }, {\n    key: \"_onError\",\n    value: function _onError(err, element) {\n      onUnexpectedError(err);\n      // An error occurred while undoing or redoing => drop the undo/redo stack for all affected resources\n      var _iterator17 = _createForOfIteratorHelper(element.strResources),\n        _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var strResource = _step17.value;\n          this.removeElements(strResource);\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n      this._notificationService.error(err);\n    }\n  }, {\n    key: \"_acquireLocks\",\n    value: function _acquireLocks(editStackSnapshot) {\n      // first, check if all locks can be acquired\n      var _iterator18 = _createForOfIteratorHelper(editStackSnapshot.editStacks),\n        _step18;\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var editStack = _step18.value;\n          if (editStack.locked) {\n            throw new Error('Cannot acquire edit stack lock');\n          }\n        }\n        // can acquire all locks\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n      var _iterator19 = _createForOfIteratorHelper(editStackSnapshot.editStacks),\n        _step19;\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var _editStack = _step19.value;\n          _editStack.locked = true;\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n      return function () {\n        // release all locks\n        var _iterator20 = _createForOfIteratorHelper(editStackSnapshot.editStacks),\n          _step20;\n        try {\n          for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n            var editStack = _step20.value;\n            editStack.locked = false;\n          }\n        } catch (err) {\n          _iterator20.e(err);\n        } finally {\n          _iterator20.f();\n        }\n      };\n    }\n  }, {\n    key: \"_safeInvokeWithLocks\",\n    value: function _safeInvokeWithLocks(element, invoke, editStackSnapshot, cleanup, continuation) {\n      var _this = this;\n      var releaseLocks = this._acquireLocks(editStackSnapshot);\n      var result;\n      try {\n        result = invoke();\n      } catch (err) {\n        releaseLocks();\n        cleanup.dispose();\n        return this._onError(err, element);\n      }\n      if (result) {\n        // result is Promise<void>\n        return result.then(function () {\n          releaseLocks();\n          cleanup.dispose();\n          return continuation();\n        }, function (err) {\n          releaseLocks();\n          cleanup.dispose();\n          return _this._onError(err, element);\n        });\n      } else {\n        // result is void\n        releaseLocks();\n        cleanup.dispose();\n        return continuation();\n      }\n    }\n  }, {\n    key: \"_invokeWorkspacePrepare\",\n    value: function () {\n      var _invokeWorkspacePrepare2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(element) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof element.actual.prepareUndoRedo === 'undefined')) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", Disposable.None);\n            case 2:\n              result = element.actual.prepareUndoRedo();\n              if (!(typeof result === 'undefined')) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\", Disposable.None);\n            case 5:\n              return _context.abrupt(\"return\", result);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function _invokeWorkspacePrepare(_x) {\n        return _invokeWorkspacePrepare2.apply(this, arguments);\n      }\n      return _invokeWorkspacePrepare;\n    }()\n  }, {\n    key: \"_invokeResourcePrepare\",\n    value: function _invokeResourcePrepare(element, callback) {\n      if (element.actual.type !== 1 /* UndoRedoElementType.Workspace */ || typeof element.actual.prepareUndoRedo === 'undefined') {\n        // no preparation needed\n        return callback(Disposable.None);\n      }\n      var r = element.actual.prepareUndoRedo();\n      if (!r) {\n        // nothing to clean up\n        return callback(Disposable.None);\n      }\n      if (isDisposable(r)) {\n        return callback(r);\n      }\n      return r.then(function (disposable) {\n        return callback(disposable);\n      });\n    }\n  }, {\n    key: \"_getAffectedEditStacks\",\n    value: function _getAffectedEditStacks(element) {\n      var affectedEditStacks = [];\n      var _iterator21 = _createForOfIteratorHelper(element.strResources),\n        _step21;\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var strResource = _step21.value;\n          affectedEditStacks.push(this._editStacks.get(strResource) || missingEditStack);\n        }\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n      return new EditStackSnapshot(affectedEditStacks);\n    }\n  }, {\n    key: \"_tryToSplitAndUndo\",\n    value: function _tryToSplitAndUndo(strResource, element, ignoreResources, message) {\n      if (element.canSplit()) {\n        this._splitPastWorkspaceElement(element, ignoreResources);\n        this._notificationService.warn(message);\n        return new WorkspaceVerificationError(this._undo(strResource, 0, true));\n      } else {\n        // Cannot safely split this workspace element => flush all undo/redo stacks\n        var _iterator22 = _createForOfIteratorHelper(element.strResources),\n          _step22;\n        try {\n          for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n            var _strResource4 = _step22.value;\n            this.removeElements(_strResource4);\n          }\n        } catch (err) {\n          _iterator22.e(err);\n        } finally {\n          _iterator22.f();\n        }\n        this._notificationService.warn(message);\n        return new WorkspaceVerificationError();\n      }\n    }\n  }, {\n    key: \"_checkWorkspaceUndo\",\n    value: function _checkWorkspaceUndo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n      if (element.removedResources) {\n        return this._tryToSplitAndUndo(strResource, element, element.removedResources, nls.localize({\n          key: 'cannotWorkspaceUndo',\n          comment: ['{0} is a label for an operation. {1} is another message.']\n        }, \"Could not undo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n      }\n      if (checkInvalidatedResources && element.invalidatedResources) {\n        return this._tryToSplitAndUndo(strResource, element, element.invalidatedResources, nls.localize({\n          key: 'cannotWorkspaceUndo',\n          comment: ['{0} is a label for an operation. {1} is another message.']\n        }, \"Could not undo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n      }\n      // this must be the last past element in all the impacted resources!\n      var cannotUndoDueToResources = [];\n      var _iterator23 = _createForOfIteratorHelper(editStackSnapshot.editStacks),\n        _step23;\n      try {\n        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n          var editStack = _step23.value;\n          if (editStack.getClosestPastElement() !== element) {\n            cannotUndoDueToResources.push(editStack.resourceLabel);\n          }\n        }\n      } catch (err) {\n        _iterator23.e(err);\n      } finally {\n        _iterator23.f();\n      }\n      if (cannotUndoDueToResources.length > 0) {\n        return this._tryToSplitAndUndo(strResource, element, null, nls.localize({\n          key: 'cannotWorkspaceUndoDueToChanges',\n          comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n        }, \"Could not undo '{0}' across all files because changes were made to {1}\", element.label, cannotUndoDueToResources.join(', ')));\n      }\n      var cannotLockDueToResources = [];\n      var _iterator24 = _createForOfIteratorHelper(editStackSnapshot.editStacks),\n        _step24;\n      try {\n        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n          var _editStack2 = _step24.value;\n          if (_editStack2.locked) {\n            cannotLockDueToResources.push(_editStack2.resourceLabel);\n          }\n        }\n      } catch (err) {\n        _iterator24.e(err);\n      } finally {\n        _iterator24.f();\n      }\n      if (cannotLockDueToResources.length > 0) {\n        return this._tryToSplitAndUndo(strResource, element, null, nls.localize({\n          key: 'cannotWorkspaceUndoDueToInProgressUndoRedo',\n          comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n        }, \"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n      }\n      // check if new stack elements were added in the meantime...\n      if (!editStackSnapshot.isValid()) {\n        return this._tryToSplitAndUndo(strResource, element, null, nls.localize({\n          key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo',\n          comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n        }, \"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n      }\n      return null;\n    }\n  }, {\n    key: \"_workspaceUndo\",\n    value: function _workspaceUndo(strResource, element, undoConfirmed) {\n      var affectedEditStacks = this._getAffectedEditStacks(element);\n      var verificationError = this._checkWorkspaceUndo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/false);\n      if (verificationError) {\n        return verificationError.returnValue;\n      }\n      return this._confirmAndExecuteWorkspaceUndo(strResource, element, affectedEditStacks, undoConfirmed);\n    }\n  }, {\n    key: \"_isPartOfUndoGroup\",\n    value: function _isPartOfUndoGroup(element) {\n      if (!element.groupId) {\n        return false;\n      }\n      // check that there is at least another element with the same groupId ready to be undone\n      var _iterator25 = _createForOfIteratorHelper(this._editStacks),\n        _step25;\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var _step25$value = _slicedToArray(_step25.value, 2),\n            editStack = _step25$value[1];\n          var pastElement = editStack.getClosestPastElement();\n          if (!pastElement) {\n            continue;\n          }\n          if (pastElement === element) {\n            var secondPastElement = editStack.getSecondClosestPastElement();\n            if (secondPastElement && secondPastElement.groupId === element.groupId) {\n              // there is another element with the same group id in the same stack!\n              return true;\n            }\n          }\n          if (pastElement.groupId === element.groupId) {\n            // there is another element with the same group id in another stack!\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"_confirmAndExecuteWorkspaceUndo\",\n    value: function () {\n      var _confirmAndExecuteWorkspaceUndo2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(strResource, element, editStackSnapshot, undoConfirmed) {\n        var _this2 = this;\n        var UndoChoice, _yield$this$_dialogSe, result, verificationError1, cleanup, verificationError2, _iterator26, _step26, editStack;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(element.canSplit() && !this._isPartOfUndoGroup(element))) {\n                _context2.next = 15;\n                break;\n              }\n              // this element can be split\n\n              (function (UndoChoice) {\n                UndoChoice[UndoChoice[\"All\"] = 0] = \"All\";\n                UndoChoice[UndoChoice[\"This\"] = 1] = \"This\";\n                UndoChoice[UndoChoice[\"Cancel\"] = 2] = \"Cancel\";\n              })(UndoChoice || (UndoChoice = {}));\n              _context2.next = 4;\n              return this._dialogService.prompt({\n                type: Severity.Info,\n                message: nls.localize('confirmWorkspace', \"Would you like to undo '{0}' across all files?\", element.label),\n                buttons: [{\n                  label: nls.localize({\n                    key: 'ok',\n                    comment: ['{0} denotes a number that is > 1, && denotes a mnemonic']\n                  }, \"&&Undo in {0} Files\", editStackSnapshot.editStacks.length),\n                  run: function run() {\n                    return UndoChoice.All;\n                  }\n                }, {\n                  label: nls.localize({\n                    key: 'nok',\n                    comment: ['&& denotes a mnemonic']\n                  }, \"Undo this &&File\"),\n                  run: function run() {\n                    return UndoChoice.This;\n                  }\n                }],\n                cancelButton: {\n                  run: function run() {\n                    return UndoChoice.Cancel;\n                  }\n                }\n              });\n            case 4:\n              _yield$this$_dialogSe = _context2.sent;\n              result = _yield$this$_dialogSe.result;\n              if (!(result === UndoChoice.Cancel)) {\n                _context2.next = 8;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 8:\n              if (!(result === UndoChoice.This)) {\n                _context2.next = 11;\n                break;\n              }\n              // choice: undo this file\n              this._splitPastWorkspaceElement(element, null);\n              return _context2.abrupt(\"return\", this._undo(strResource, 0, true));\n            case 11:\n              // choice: undo in all files\n              // At this point, it is possible that the element has been made invalid in the meantime (due to the confirmation await)\n              verificationError1 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*invalidated resources will be checked after the prepare call*/false);\n              if (!verificationError1) {\n                _context2.next = 14;\n                break;\n              }\n              return _context2.abrupt(\"return\", verificationError1.returnValue);\n            case 14:\n              undoConfirmed = true;\n            case 15:\n              _context2.prev = 15;\n              _context2.next = 18;\n              return this._invokeWorkspacePrepare(element);\n            case 18:\n              cleanup = _context2.sent;\n              _context2.next = 24;\n              break;\n            case 21:\n              _context2.prev = 21;\n              _context2.t0 = _context2[\"catch\"](15);\n              return _context2.abrupt(\"return\", this._onError(_context2.t0, element));\n            case 24:\n              // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n              verificationError2 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/true);\n              if (!verificationError2) {\n                _context2.next = 28;\n                break;\n              }\n              cleanup.dispose();\n              return _context2.abrupt(\"return\", verificationError2.returnValue);\n            case 28:\n              _iterator26 = _createForOfIteratorHelper(editStackSnapshot.editStacks);\n              try {\n                for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n                  editStack = _step26.value;\n                  editStack.moveBackward(element);\n                }\n              } catch (err) {\n                _iterator26.e(err);\n              } finally {\n                _iterator26.f();\n              }\n              return _context2.abrupt(\"return\", this._safeInvokeWithLocks(element, function () {\n                return element.actual.undo();\n              }, editStackSnapshot, cleanup, function () {\n                return _this2._continueUndoInGroup(element.groupId, undoConfirmed);\n              }));\n            case 31:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[15, 21]]);\n      }));\n      function _confirmAndExecuteWorkspaceUndo(_x2, _x3, _x4, _x5) {\n        return _confirmAndExecuteWorkspaceUndo2.apply(this, arguments);\n      }\n      return _confirmAndExecuteWorkspaceUndo;\n    }()\n  }, {\n    key: \"_resourceUndo\",\n    value: function _resourceUndo(editStack, element, undoConfirmed) {\n      var _this3 = this;\n      if (!element.isValid) {\n        // invalid element => immediately flush edit stack!\n        editStack.flushAllElements();\n        return;\n      }\n      if (editStack.locked) {\n        var message = nls.localize({\n          key: 'cannotResourceUndoDueToInProgressUndoRedo',\n          comment: ['{0} is a label for an operation.']\n        }, \"Could not undo '{0}' because there is already an undo or redo operation running.\", element.label);\n        this._notificationService.warn(message);\n        return;\n      }\n      return this._invokeResourcePrepare(element, function (cleanup) {\n        editStack.moveBackward(element);\n        return _this3._safeInvokeWithLocks(element, function () {\n          return element.actual.undo();\n        }, new EditStackSnapshot([editStack]), cleanup, function () {\n          return _this3._continueUndoInGroup(element.groupId, undoConfirmed);\n        });\n      });\n    }\n  }, {\n    key: \"_findClosestUndoElementInGroup\",\n    value: function _findClosestUndoElementInGroup(groupId) {\n      if (!groupId) {\n        return [null, null];\n      }\n      // find another element with the same groupId and with the highest groupOrder ready to be undone\n      var matchedElement = null;\n      var matchedStrResource = null;\n      var _iterator27 = _createForOfIteratorHelper(this._editStacks),\n        _step27;\n      try {\n        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n          var _step27$value = _slicedToArray(_step27.value, 2),\n            strResource = _step27$value[0],\n            editStack = _step27$value[1];\n          var candidate = editStack.getClosestPastElement();\n          if (!candidate) {\n            continue;\n          }\n          if (candidate.groupId === groupId) {\n            if (!matchedElement || candidate.groupOrder > matchedElement.groupOrder) {\n              matchedElement = candidate;\n              matchedStrResource = strResource;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator27.e(err);\n      } finally {\n        _iterator27.f();\n      }\n      return [matchedElement, matchedStrResource];\n    }\n  }, {\n    key: \"_continueUndoInGroup\",\n    value: function _continueUndoInGroup(groupId, undoConfirmed) {\n      if (!groupId) {\n        return;\n      }\n      var _this$_findClosestUnd3 = this._findClosestUndoElementInGroup(groupId),\n        _this$_findClosestUnd4 = _slicedToArray(_this$_findClosestUnd3, 2),\n        matchedStrResource = _this$_findClosestUnd4[1];\n      if (matchedStrResource) {\n        return this._undo(matchedStrResource, 0, undoConfirmed);\n      }\n    }\n  }, {\n    key: \"undo\",\n    value: function undo(resourceOrSource) {\n      if (resourceOrSource instanceof UndoRedoSource) {\n        var _this$_findClosestUnd5 = this._findClosestUndoElementWithSource(resourceOrSource.id),\n          _this$_findClosestUnd6 = _slicedToArray(_this$_findClosestUnd5, 2),\n          matchedStrResource = _this$_findClosestUnd6[1];\n        return matchedStrResource ? this._undo(matchedStrResource, resourceOrSource.id, false) : undefined;\n      }\n      if (typeof resourceOrSource === 'string') {\n        return this._undo(resourceOrSource, 0, false);\n      }\n      return this._undo(this.getUriComparisonKey(resourceOrSource), 0, false);\n    }\n  }, {\n    key: \"_undo\",\n    value: function _undo(strResource) {\n      var sourceId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var undoConfirmed = arguments.length > 2 ? arguments[2] : undefined;\n      if (!this._editStacks.has(strResource)) {\n        return;\n      }\n      var editStack = this._editStacks.get(strResource);\n      var element = editStack.getClosestPastElement();\n      if (!element) {\n        return;\n      }\n      if (element.groupId) {\n        // this element is a part of a group, we need to make sure undoing in a group is in order\n        var _this$_findClosestUnd7 = this._findClosestUndoElementInGroup(element.groupId),\n          _this$_findClosestUnd8 = _slicedToArray(_this$_findClosestUnd7, 2),\n          matchedElement = _this$_findClosestUnd8[0],\n          matchedStrResource = _this$_findClosestUnd8[1];\n        if (element !== matchedElement && matchedStrResource) {\n          // there is an element in the same group that should be undone before this one\n          return this._undo(matchedStrResource, sourceId, undoConfirmed);\n        }\n      }\n      var shouldPromptForConfirmation = element.sourceId !== sourceId || element.confirmBeforeUndo;\n      if (shouldPromptForConfirmation && !undoConfirmed) {\n        // Hit a different source or the element asks for prompt before undo, prompt for confirmation\n        return this._confirmAndContinueUndo(strResource, sourceId, element);\n      }\n      try {\n        if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n          return this._workspaceUndo(strResource, element, undoConfirmed);\n        } else {\n          return this._resourceUndo(editStack, element, undoConfirmed);\n        }\n      } finally {\n        if (DEBUG) {\n          this._print('undo');\n        }\n      }\n    }\n  }, {\n    key: \"_confirmAndContinueUndo\",\n    value: function () {\n      var _confirmAndContinueUndo2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(strResource, sourceId, element) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this._dialogService.confirm({\n                message: nls.localize('confirmDifferentSource', \"Would you like to undo '{0}'?\", element.label),\n                primaryButton: nls.localize({\n                  key: 'confirmDifferentSource.yes',\n                  comment: ['&& denotes a mnemonic']\n                }, \"&&Yes\"),\n                cancelButton: nls.localize('confirmDifferentSource.no', \"No\")\n              });\n            case 2:\n              result = _context3.sent;\n              if (result.confirmed) {\n                _context3.next = 5;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 5:\n              return _context3.abrupt(\"return\", this._undo(strResource, sourceId, true));\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _confirmAndContinueUndo(_x6, _x7, _x8) {\n        return _confirmAndContinueUndo2.apply(this, arguments);\n      }\n      return _confirmAndContinueUndo;\n    }()\n  }, {\n    key: \"_findClosestRedoElementWithSource\",\n    value: function _findClosestRedoElementWithSource(sourceId) {\n      if (!sourceId) {\n        return [null, null];\n      }\n      // find an element with sourceId and with the lowest sourceOrder ready to be redone\n      var matchedElement = null;\n      var matchedStrResource = null;\n      var _iterator28 = _createForOfIteratorHelper(this._editStacks),\n        _step28;\n      try {\n        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n          var _step28$value = _slicedToArray(_step28.value, 2),\n            strResource = _step28$value[0],\n            editStack = _step28$value[1];\n          var candidate = editStack.getClosestFutureElement();\n          if (!candidate) {\n            continue;\n          }\n          if (candidate.sourceId === sourceId) {\n            if (!matchedElement || candidate.sourceOrder < matchedElement.sourceOrder) {\n              matchedElement = candidate;\n              matchedStrResource = strResource;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator28.e(err);\n      } finally {\n        _iterator28.f();\n      }\n      return [matchedElement, matchedStrResource];\n    }\n  }, {\n    key: \"canRedo\",\n    value: function canRedo(resourceOrSource) {\n      if (resourceOrSource instanceof UndoRedoSource) {\n        var _this$_findClosestRed = this._findClosestRedoElementWithSource(resourceOrSource.id),\n          _this$_findClosestRed2 = _slicedToArray(_this$_findClosestRed, 2),\n          matchedStrResource = _this$_findClosestRed2[1];\n        return matchedStrResource ? true : false;\n      }\n      var strResource = this.getUriComparisonKey(resourceOrSource);\n      if (this._editStacks.has(strResource)) {\n        var editStack = this._editStacks.get(strResource);\n        return editStack.hasFutureElements();\n      }\n      return false;\n    }\n  }, {\n    key: \"_tryToSplitAndRedo\",\n    value: function _tryToSplitAndRedo(strResource, element, ignoreResources, message) {\n      if (element.canSplit()) {\n        this._splitFutureWorkspaceElement(element, ignoreResources);\n        this._notificationService.warn(message);\n        return new WorkspaceVerificationError(this._redo(strResource));\n      } else {\n        // Cannot safely split this workspace element => flush all undo/redo stacks\n        var _iterator29 = _createForOfIteratorHelper(element.strResources),\n          _step29;\n        try {\n          for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n            var _strResource5 = _step29.value;\n            this.removeElements(_strResource5);\n          }\n        } catch (err) {\n          _iterator29.e(err);\n        } finally {\n          _iterator29.f();\n        }\n        this._notificationService.warn(message);\n        return new WorkspaceVerificationError();\n      }\n    }\n  }, {\n    key: \"_checkWorkspaceRedo\",\n    value: function _checkWorkspaceRedo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n      if (element.removedResources) {\n        return this._tryToSplitAndRedo(strResource, element, element.removedResources, nls.localize({\n          key: 'cannotWorkspaceRedo',\n          comment: ['{0} is a label for an operation. {1} is another message.']\n        }, \"Could not redo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n      }\n      if (checkInvalidatedResources && element.invalidatedResources) {\n        return this._tryToSplitAndRedo(strResource, element, element.invalidatedResources, nls.localize({\n          key: 'cannotWorkspaceRedo',\n          comment: ['{0} is a label for an operation. {1} is another message.']\n        }, \"Could not redo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n      }\n      // this must be the last future element in all the impacted resources!\n      var cannotRedoDueToResources = [];\n      var _iterator30 = _createForOfIteratorHelper(editStackSnapshot.editStacks),\n        _step30;\n      try {\n        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n          var editStack = _step30.value;\n          if (editStack.getClosestFutureElement() !== element) {\n            cannotRedoDueToResources.push(editStack.resourceLabel);\n          }\n        }\n      } catch (err) {\n        _iterator30.e(err);\n      } finally {\n        _iterator30.f();\n      }\n      if (cannotRedoDueToResources.length > 0) {\n        return this._tryToSplitAndRedo(strResource, element, null, nls.localize({\n          key: 'cannotWorkspaceRedoDueToChanges',\n          comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n        }, \"Could not redo '{0}' across all files because changes were made to {1}\", element.label, cannotRedoDueToResources.join(', ')));\n      }\n      var cannotLockDueToResources = [];\n      var _iterator31 = _createForOfIteratorHelper(editStackSnapshot.editStacks),\n        _step31;\n      try {\n        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n          var _editStack3 = _step31.value;\n          if (_editStack3.locked) {\n            cannotLockDueToResources.push(_editStack3.resourceLabel);\n          }\n        }\n      } catch (err) {\n        _iterator31.e(err);\n      } finally {\n        _iterator31.f();\n      }\n      if (cannotLockDueToResources.length > 0) {\n        return this._tryToSplitAndRedo(strResource, element, null, nls.localize({\n          key: 'cannotWorkspaceRedoDueToInProgressUndoRedo',\n          comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n        }, \"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n      }\n      // check if new stack elements were added in the meantime...\n      if (!editStackSnapshot.isValid()) {\n        return this._tryToSplitAndRedo(strResource, element, null, nls.localize({\n          key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo',\n          comment: ['{0} is a label for an operation. {1} is a list of filenames.']\n        }, \"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n      }\n      return null;\n    }\n  }, {\n    key: \"_workspaceRedo\",\n    value: function _workspaceRedo(strResource, element) {\n      var affectedEditStacks = this._getAffectedEditStacks(element);\n      var verificationError = this._checkWorkspaceRedo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/false);\n      if (verificationError) {\n        return verificationError.returnValue;\n      }\n      return this._executeWorkspaceRedo(strResource, element, affectedEditStacks);\n    }\n  }, {\n    key: \"_executeWorkspaceRedo\",\n    value: function () {\n      var _executeWorkspaceRedo2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(strResource, element, editStackSnapshot) {\n        var _this4 = this;\n        var cleanup, verificationError, _iterator32, _step32, editStack;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return this._invokeWorkspacePrepare(element);\n            case 3:\n              cleanup = _context4.sent;\n              _context4.next = 9;\n              break;\n            case 6:\n              _context4.prev = 6;\n              _context4.t0 = _context4[\"catch\"](0);\n              return _context4.abrupt(\"return\", this._onError(_context4.t0, element));\n            case 9:\n              // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n              verificationError = this._checkWorkspaceRedo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/true);\n              if (!verificationError) {\n                _context4.next = 13;\n                break;\n              }\n              cleanup.dispose();\n              return _context4.abrupt(\"return\", verificationError.returnValue);\n            case 13:\n              _iterator32 = _createForOfIteratorHelper(editStackSnapshot.editStacks);\n              try {\n                for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n                  editStack = _step32.value;\n                  editStack.moveForward(element);\n                }\n              } catch (err) {\n                _iterator32.e(err);\n              } finally {\n                _iterator32.f();\n              }\n              return _context4.abrupt(\"return\", this._safeInvokeWithLocks(element, function () {\n                return element.actual.redo();\n              }, editStackSnapshot, cleanup, function () {\n                return _this4._continueRedoInGroup(element.groupId);\n              }));\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 6]]);\n      }));\n      function _executeWorkspaceRedo(_x9, _x10, _x11) {\n        return _executeWorkspaceRedo2.apply(this, arguments);\n      }\n      return _executeWorkspaceRedo;\n    }()\n  }, {\n    key: \"_resourceRedo\",\n    value: function _resourceRedo(editStack, element) {\n      var _this5 = this;\n      if (!element.isValid) {\n        // invalid element => immediately flush edit stack!\n        editStack.flushAllElements();\n        return;\n      }\n      if (editStack.locked) {\n        var message = nls.localize({\n          key: 'cannotResourceRedoDueToInProgressUndoRedo',\n          comment: ['{0} is a label for an operation.']\n        }, \"Could not redo '{0}' because there is already an undo or redo operation running.\", element.label);\n        this._notificationService.warn(message);\n        return;\n      }\n      return this._invokeResourcePrepare(element, function (cleanup) {\n        editStack.moveForward(element);\n        return _this5._safeInvokeWithLocks(element, function () {\n          return element.actual.redo();\n        }, new EditStackSnapshot([editStack]), cleanup, function () {\n          return _this5._continueRedoInGroup(element.groupId);\n        });\n      });\n    }\n  }, {\n    key: \"_findClosestRedoElementInGroup\",\n    value: function _findClosestRedoElementInGroup(groupId) {\n      if (!groupId) {\n        return [null, null];\n      }\n      // find another element with the same groupId and with the lowest groupOrder ready to be redone\n      var matchedElement = null;\n      var matchedStrResource = null;\n      var _iterator33 = _createForOfIteratorHelper(this._editStacks),\n        _step33;\n      try {\n        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n          var _step33$value = _slicedToArray(_step33.value, 2),\n            strResource = _step33$value[0],\n            editStack = _step33$value[1];\n          var candidate = editStack.getClosestFutureElement();\n          if (!candidate) {\n            continue;\n          }\n          if (candidate.groupId === groupId) {\n            if (!matchedElement || candidate.groupOrder < matchedElement.groupOrder) {\n              matchedElement = candidate;\n              matchedStrResource = strResource;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator33.e(err);\n      } finally {\n        _iterator33.f();\n      }\n      return [matchedElement, matchedStrResource];\n    }\n  }, {\n    key: \"_continueRedoInGroup\",\n    value: function _continueRedoInGroup(groupId) {\n      if (!groupId) {\n        return;\n      }\n      var _this$_findClosestRed3 = this._findClosestRedoElementInGroup(groupId),\n        _this$_findClosestRed4 = _slicedToArray(_this$_findClosestRed3, 2),\n        matchedStrResource = _this$_findClosestRed4[1];\n      if (matchedStrResource) {\n        return this._redo(matchedStrResource);\n      }\n    }\n  }, {\n    key: \"redo\",\n    value: function redo(resourceOrSource) {\n      if (resourceOrSource instanceof UndoRedoSource) {\n        var _this$_findClosestRed5 = this._findClosestRedoElementWithSource(resourceOrSource.id),\n          _this$_findClosestRed6 = _slicedToArray(_this$_findClosestRed5, 2),\n          matchedStrResource = _this$_findClosestRed6[1];\n        return matchedStrResource ? this._redo(matchedStrResource) : undefined;\n      }\n      if (typeof resourceOrSource === 'string') {\n        return this._redo(resourceOrSource);\n      }\n      return this._redo(this.getUriComparisonKey(resourceOrSource));\n    }\n  }, {\n    key: \"_redo\",\n    value: function _redo(strResource) {\n      if (!this._editStacks.has(strResource)) {\n        return;\n      }\n      var editStack = this._editStacks.get(strResource);\n      var element = editStack.getClosestFutureElement();\n      if (!element) {\n        return;\n      }\n      if (element.groupId) {\n        // this element is a part of a group, we need to make sure redoing in a group is in order\n        var _this$_findClosestRed7 = this._findClosestRedoElementInGroup(element.groupId),\n          _this$_findClosestRed8 = _slicedToArray(_this$_findClosestRed7, 2),\n          matchedElement = _this$_findClosestRed8[0],\n          matchedStrResource = _this$_findClosestRed8[1];\n        if (element !== matchedElement && matchedStrResource) {\n          // there is an element in the same group that should be redone before this one\n          return this._redo(matchedStrResource);\n        }\n      }\n      try {\n        if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n          return this._workspaceRedo(strResource, element);\n        } else {\n          return this._resourceRedo(editStack, element);\n        }\n      } finally {\n        if (DEBUG) {\n          this._print('redo');\n        }\n      }\n    }\n  }]);\n}();\nUndoRedoService = __decorate([__param(0, IDialogService), __param(1, INotificationService)], UndoRedoService);\nexport { UndoRedoService };\nvar WorkspaceVerificationError = /*#__PURE__*/_createClass(function WorkspaceVerificationError(returnValue) {\n  _classCallCheck(this, WorkspaceVerificationError);\n  this.returnValue = returnValue;\n});\nregisterSingleton(IUndoRedoService, UndoRedoService, 1 /* InstantiationType.Delayed */);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","_typeof","decorate","i","defineProperty","__param","paramIndex","decorator","onUnexpectedError","Disposable","isDisposable","Schemas","Severity","nls","IDialogService","registerSingleton","INotificationService","IUndoRedoService","ResourceEditStackSnapshot","UndoRedoGroup","UndoRedoSource","DEBUG","getResourceLabel","resource","scheme","file","fsPath","path","stackElementCounter","ResourceStackElement","actual","resourceLabel","strResource","groupId","groupOrder","sourceId","sourceOrder","_classCallCheck","id","type","label","confirmBeforeUndo","resourceLabels","strResources","isValid","_createClass","value","setValid","toString","concat","constructor","name","ResourceReasonPair","reason","RemovedResources","elements","Map","createMessage","externalRemoval","noParallelUniverses","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","element","dest","push","err","e","f","messages","localize","comment","join","get","size","has","set","_delete","WorkspaceStackElement","removedResources","invalidatedResources","canSplit","split","removeResource","ResourceEditStack","_past","_future","locked","versionId","dispose","_iterator2","_step2","_iterator3","_step3","result","flushAllElements","_setElementValidFlag","setElementsValidFlag","filter","_iterator4","_step4","_iterator5","_step5","pushElement","_iterator6","_step6","futureElement","createSnapshot","len","restoreSnapshot","snapshot","snapshotLength","isOK","snapshotIndex","removePastAfter","removeFutureBefore","slice","getElements","past","future","_iterator7","_step7","_iterator8","_step8","getClosestPastElement","getSecondClosestPastElement","getClosestFutureElement","hasPastElements","hasFutureElements","splitPastWorkspaceElement","toRemove","individualMap","j","splice","splitFutureWorkspaceElement","moveBackward","pop","moveForward","EditStackSnapshot","editStacks","_versionIds","missingEditStack","UndoRedoService","_dialogService","_notificationService","_editStacks","_uriComparisonKeyComputers","getUriComparisonKey","_iterator9","_step9","uriComparisonKeyComputer","getComparisonKey","_print","console","log","str","_iterator10","_step10","group","undefined","None","source","_pushElement","nextOrder","seen","Set","_iterator11","resources","_step11","add","editStack","getLastElement","closestPastElement","_splitPastWorkspaceElement","ignoreResources","individualArr","_iterator12","_step12","_element","_iterator13","_step13","_splitFutureWorkspaceElement","_iterator14","_step14","_iterator15","_step15","removeElements","_findClosestUndoElementWithSource","matchedElement","matchedStrResource","_iterator16","_step16","_step16$value","candidate","canUndo","resourceOrSource","_this$_findClosestUnd","_this$_findClosestUnd2","_onError","_iterator17","_step17","error","_acquireLocks","editStackSnapshot","_iterator18","_step18","Error","_iterator19","_step19","_iterator20","_step20","_safeInvokeWithLocks","invoke","cleanup","continuation","_this","releaseLocks","then","_invokeWorkspacePrepare2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","prepareUndoRedo","abrupt","stop","_invokeWorkspacePrepare","_x","apply","_invokeResourcePrepare","callback","disposable","_getAffectedEditStacks","affectedEditStacks","_iterator21","_step21","_tryToSplitAndUndo","message","warn","WorkspaceVerificationError","_undo","_iterator22","_step22","_checkWorkspaceUndo","checkInvalidatedResources","cannotUndoDueToResources","_iterator23","_step23","cannotLockDueToResources","_iterator24","_step24","_workspaceUndo","undoConfirmed","verificationError","returnValue","_confirmAndExecuteWorkspaceUndo","_isPartOfUndoGroup","_iterator25","_step25","_step25$value","pastElement","secondPastElement","_confirmAndExecuteWorkspaceUndo2","_callee2","_this2","UndoChoice","_yield$this$_dialogSe","verificationError1","verificationError2","_iterator26","_step26","_callee2$","_context2","prompt","Info","buttons","run","All","This","cancelButton","Cancel","sent","t0","undo","_continueUndoInGroup","_x2","_x3","_x4","_x5","_resourceUndo","_this3","_findClosestUndoElementInGroup","_iterator27","_step27","_step27$value","_this$_findClosestUnd3","_this$_findClosestUnd4","_this$_findClosestUnd5","_this$_findClosestUnd6","_this$_findClosestUnd7","_this$_findClosestUnd8","shouldPromptForConfirmation","_confirmAndContinueUndo","_confirmAndContinueUndo2","_callee3","_callee3$","_context3","confirm","primaryButton","confirmed","_x6","_x7","_x8","_findClosestRedoElementWithSource","_iterator28","_step28","_step28$value","canRedo","_this$_findClosestRed","_this$_findClosestRed2","_tryToSplitAndRedo","_redo","_iterator29","_step29","_checkWorkspaceRedo","cannotRedoDueToResources","_iterator30","_step30","_iterator31","_step31","_workspaceRedo","_executeWorkspaceRedo","_executeWorkspaceRedo2","_callee4","_this4","_iterator32","_step32","_callee4$","_context4","redo","_continueRedoInGroup","_x9","_x10","_x11","_resourceRedo","_this5","_findClosestRedoElementInGroup","_iterator33","_step33","_step33$value","_this$_findClosestRed3","_this$_findClosestRed4","_this$_findClosestRed5","_this$_findClosestRed6","_this$_findClosestRed7","_this$_findClosestRed8"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/platform/undoRedo/common/undoRedoService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Disposable, isDisposable } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport Severity from '../../../base/common/severity.js';\nimport * as nls from '../../../nls.js';\nimport { IDialogService } from '../../dialogs/common/dialogs.js';\nimport { registerSingleton } from '../../instantiation/common/extensions.js';\nimport { INotificationService } from '../../notification/common/notification.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot, UndoRedoGroup, UndoRedoSource } from './undoRedo.js';\nconst DEBUG = false;\nfunction getResourceLabel(resource) {\n    return resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n}\nlet stackElementCounter = 0;\nclass ResourceStackElement {\n    constructor(actual, resourceLabel, strResource, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 0 /* UndoRedoElementType.Resource */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this.resourceLabels = [this.resourceLabel];\n        this.strResources = [this.strResource];\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.isValid = true;\n    }\n    setValid(isValid) {\n        this.isValid = isValid;\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.isValid ? '  VALID' : 'INVALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceReasonPair {\n    constructor(resourceLabel, reason) {\n        this.resourceLabel = resourceLabel;\n        this.reason = reason;\n    }\n}\nclass RemovedResources {\n    constructor() {\n        this.elements = new Map();\n    }\n    createMessage() {\n        const externalRemoval = [];\n        const noParallelUniverses = [];\n        for (const [, element] of this.elements) {\n            const dest = (element.reason === 0 /* RemovedResourceReason.ExternalRemoval */\n                ? externalRemoval\n                : noParallelUniverses);\n            dest.push(element.resourceLabel);\n        }\n        const messages = [];\n        if (externalRemoval.length > 0) {\n            messages.push(nls.localize({ key: 'externalRemoval', comment: ['{0} is a list of filenames'] }, \"The following files have been closed and modified on disk: {0}.\", externalRemoval.join(', ')));\n        }\n        if (noParallelUniverses.length > 0) {\n            messages.push(nls.localize({ key: 'noParallelUniverses', comment: ['{0} is a list of filenames'] }, \"The following files have been modified in an incompatible way: {0}.\", noParallelUniverses.join(', ')));\n        }\n        return messages.join('\\n');\n    }\n    get size() {\n        return this.elements.size;\n    }\n    has(strResource) {\n        return this.elements.has(strResource);\n    }\n    set(strResource, value) {\n        this.elements.set(strResource, value);\n    }\n    delete(strResource) {\n        return this.elements.delete(strResource);\n    }\n}\nclass WorkspaceStackElement {\n    constructor(actual, resourceLabels, strResources, groupId, groupOrder, sourceId, sourceOrder) {\n        this.id = (++stackElementCounter);\n        this.type = 1 /* UndoRedoElementType.Workspace */;\n        this.actual = actual;\n        this.label = actual.label;\n        this.confirmBeforeUndo = actual.confirmBeforeUndo || false;\n        this.resourceLabels = resourceLabels;\n        this.strResources = strResources;\n        this.groupId = groupId;\n        this.groupOrder = groupOrder;\n        this.sourceId = sourceId;\n        this.sourceOrder = sourceOrder;\n        this.removedResources = null;\n        this.invalidatedResources = null;\n    }\n    canSplit() {\n        return (typeof this.actual.split === 'function');\n    }\n    removeResource(resourceLabel, strResource, reason) {\n        if (!this.removedResources) {\n            this.removedResources = new RemovedResources();\n        }\n        if (!this.removedResources.has(strResource)) {\n            this.removedResources.set(strResource, new ResourceReasonPair(resourceLabel, reason));\n        }\n    }\n    setValid(resourceLabel, strResource, isValid) {\n        if (isValid) {\n            if (this.invalidatedResources) {\n                this.invalidatedResources.delete(strResource);\n                if (this.invalidatedResources.size === 0) {\n                    this.invalidatedResources = null;\n                }\n            }\n        }\n        else {\n            if (!this.invalidatedResources) {\n                this.invalidatedResources = new RemovedResources();\n            }\n            if (!this.invalidatedResources.has(strResource)) {\n                this.invalidatedResources.set(strResource, new ResourceReasonPair(resourceLabel, 0 /* RemovedResourceReason.ExternalRemoval */));\n            }\n        }\n    }\n    toString() {\n        return `[id:${this.id}] [group:${this.groupId}] [${this.invalidatedResources ? 'INVALID' : '  VALID'}] ${this.actual.constructor.name} - ${this.actual}`;\n    }\n}\nclass ResourceEditStack {\n    constructor(resourceLabel, strResource) {\n        this.resourceLabel = resourceLabel;\n        this.strResource = strResource;\n        this._past = [];\n        this._future = [];\n        this.locked = false;\n        this.versionId = 1;\n    }\n    dispose() {\n        for (const element of this._past) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        for (const element of this._future) {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        this.versionId++;\n    }\n    toString() {\n        const result = [];\n        result.push(`* ${this.strResource}:`);\n        for (let i = 0; i < this._past.length; i++) {\n            result.push(`   * [UNDO] ${this._past[i]}`);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            result.push(`   * [REDO] ${this._future[i]}`);\n        }\n        return result.join('\\n');\n    }\n    flushAllElements() {\n        this._past = [];\n        this._future = [];\n        this.versionId++;\n    }\n    _setElementValidFlag(element, isValid) {\n        if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n            element.setValid(this.resourceLabel, this.strResource, isValid);\n        }\n        else {\n            element.setValid(isValid);\n        }\n    }\n    setElementsValidFlag(isValid, filter) {\n        for (const element of this._past) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n        for (const element of this._future) {\n            if (filter(element.actual)) {\n                this._setElementValidFlag(element, isValid);\n            }\n        }\n    }\n    pushElement(element) {\n        // remove the future\n        for (const futureElement of this._future) {\n            if (futureElement.type === 1 /* UndoRedoElementType.Workspace */) {\n                futureElement.removeResource(this.resourceLabel, this.strResource, 1 /* RemovedResourceReason.NoParallelUniverses */);\n            }\n        }\n        this._future = [];\n        this._past.push(element);\n        this.versionId++;\n    }\n    createSnapshot(resource) {\n        const elements = [];\n        for (let i = 0, len = this._past.length; i < len; i++) {\n            elements.push(this._past[i].id);\n        }\n        for (let i = this._future.length - 1; i >= 0; i--) {\n            elements.push(this._future[i].id);\n        }\n        return new ResourceEditStackSnapshot(resource, elements);\n    }\n    restoreSnapshot(snapshot) {\n        const snapshotLength = snapshot.elements.length;\n        let isOK = true;\n        let snapshotIndex = 0;\n        let removePastAfter = -1;\n        for (let i = 0, len = this._past.length; i < len; i++, snapshotIndex++) {\n            const element = this._past[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removePastAfter = 0;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        let removeFutureBefore = -1;\n        for (let i = this._future.length - 1; i >= 0; i--, snapshotIndex++) {\n            const element = this._future[i];\n            if (isOK && (snapshotIndex >= snapshotLength || element.id !== snapshot.elements[snapshotIndex])) {\n                isOK = false;\n                removeFutureBefore = i;\n            }\n            if (!isOK && element.type === 1 /* UndoRedoElementType.Workspace */) {\n                element.removeResource(this.resourceLabel, this.strResource, 0 /* RemovedResourceReason.ExternalRemoval */);\n            }\n        }\n        if (removePastAfter !== -1) {\n            this._past = this._past.slice(0, removePastAfter);\n        }\n        if (removeFutureBefore !== -1) {\n            this._future = this._future.slice(removeFutureBefore + 1);\n        }\n        this.versionId++;\n    }\n    getElements() {\n        const past = [];\n        const future = [];\n        for (const element of this._past) {\n            past.push(element.actual);\n        }\n        for (const element of this._future) {\n            future.push(element.actual);\n        }\n        return { past, future };\n    }\n    getClosestPastElement() {\n        if (this._past.length === 0) {\n            return null;\n        }\n        return this._past[this._past.length - 1];\n    }\n    getSecondClosestPastElement() {\n        if (this._past.length < 2) {\n            return null;\n        }\n        return this._past[this._past.length - 2];\n    }\n    getClosestFutureElement() {\n        if (this._future.length === 0) {\n            return null;\n        }\n        return this._future[this._future.length - 1];\n    }\n    hasPastElements() {\n        return (this._past.length > 0);\n    }\n    hasFutureElements() {\n        return (this._future.length > 0);\n    }\n    splitPastWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._past.length - 1; j >= 0; j--) {\n            if (this._past[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._past[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._past.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    splitFutureWorkspaceElement(toRemove, individualMap) {\n        for (let j = this._future.length - 1; j >= 0; j--) {\n            if (this._future[j] === toRemove) {\n                if (individualMap.has(this.strResource)) {\n                    // gets replaced\n                    this._future[j] = individualMap.get(this.strResource);\n                }\n                else {\n                    // gets deleted\n                    this._future.splice(j, 1);\n                }\n                break;\n            }\n        }\n        this.versionId++;\n    }\n    moveBackward(element) {\n        this._past.pop();\n        this._future.push(element);\n        this.versionId++;\n    }\n    moveForward(element) {\n        this._future.pop();\n        this._past.push(element);\n        this.versionId++;\n    }\n}\nclass EditStackSnapshot {\n    constructor(editStacks) {\n        this.editStacks = editStacks;\n        this._versionIds = [];\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            this._versionIds[i] = this.editStacks[i].versionId;\n        }\n    }\n    isValid() {\n        for (let i = 0, len = this.editStacks.length; i < len; i++) {\n            if (this._versionIds[i] !== this.editStacks[i].versionId) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nconst missingEditStack = new ResourceEditStack('', '');\nmissingEditStack.locked = true;\nlet UndoRedoService = class UndoRedoService {\n    constructor(_dialogService, _notificationService) {\n        this._dialogService = _dialogService;\n        this._notificationService = _notificationService;\n        this._editStacks = new Map();\n        this._uriComparisonKeyComputers = [];\n    }\n    getUriComparisonKey(resource) {\n        for (const uriComparisonKeyComputer of this._uriComparisonKeyComputers) {\n            if (uriComparisonKeyComputer[0] === resource.scheme) {\n                return uriComparisonKeyComputer[1].getComparisonKey(resource);\n            }\n        }\n        return resource.toString();\n    }\n    _print(label) {\n        console.log(`------------------------------------`);\n        console.log(`AFTER ${label}: `);\n        const str = [];\n        for (const element of this._editStacks) {\n            str.push(element[1].toString());\n        }\n        console.log(str.join('\\n'));\n    }\n    pushElement(element, group = UndoRedoGroup.None, source = UndoRedoSource.None) {\n        if (element.type === 0 /* UndoRedoElementType.Resource */) {\n            const resourceLabel = getResourceLabel(element.resource);\n            const strResource = this.getUriComparisonKey(element.resource);\n            this._pushElement(new ResourceStackElement(element, resourceLabel, strResource, group.id, group.nextOrder(), source.id, source.nextOrder()));\n        }\n        else {\n            const seen = new Set();\n            const resourceLabels = [];\n            const strResources = [];\n            for (const resource of element.resources) {\n                const resourceLabel = getResourceLabel(resource);\n                const strResource = this.getUriComparisonKey(resource);\n                if (seen.has(strResource)) {\n                    continue;\n                }\n                seen.add(strResource);\n                resourceLabels.push(resourceLabel);\n                strResources.push(strResource);\n            }\n            if (resourceLabels.length === 1) {\n                this._pushElement(new ResourceStackElement(element, resourceLabels[0], strResources[0], group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n            else {\n                this._pushElement(new WorkspaceStackElement(element, resourceLabels, strResources, group.id, group.nextOrder(), source.id, source.nextOrder()));\n            }\n        }\n        if (DEBUG) {\n            this._print('pushElement');\n        }\n    }\n    _pushElement(element) {\n        for (let i = 0, len = element.strResources.length; i < len; i++) {\n            const resourceLabel = element.resourceLabels[i];\n            const strResource = element.strResources[i];\n            let editStack;\n            if (this._editStacks.has(strResource)) {\n                editStack = this._editStacks.get(strResource);\n            }\n            else {\n                editStack = new ResourceEditStack(resourceLabel, strResource);\n                this._editStacks.set(strResource, editStack);\n            }\n            editStack.pushElement(element);\n        }\n    }\n    getLastElement(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            if (editStack.hasFutureElements()) {\n                return null;\n            }\n            const closestPastElement = editStack.getClosestPastElement();\n            return closestPastElement ? closestPastElement.actual : null;\n        }\n        return null;\n    }\n    _splitPastWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitPastWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    _splitFutureWorkspaceElement(toRemove, ignoreResources) {\n        const individualArr = toRemove.actual.split();\n        const individualMap = new Map();\n        for (const _element of individualArr) {\n            const resourceLabel = getResourceLabel(_element.resource);\n            const strResource = this.getUriComparisonKey(_element.resource);\n            const element = new ResourceStackElement(_element, resourceLabel, strResource, 0, 0, 0, 0);\n            individualMap.set(element.strResource, element);\n        }\n        for (const strResource of toRemove.strResources) {\n            if (ignoreResources && ignoreResources.has(strResource)) {\n                continue;\n            }\n            const editStack = this._editStacks.get(strResource);\n            editStack.splitFutureWorkspaceElement(toRemove, individualMap);\n        }\n    }\n    removeElements(resource) {\n        const strResource = typeof resource === 'string' ? resource : this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.dispose();\n            this._editStacks.delete(strResource);\n        }\n        if (DEBUG) {\n            this._print('removeElements');\n        }\n    }\n    setElementsValidFlag(resource, isValid, filter) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.setElementsValidFlag(isValid, filter);\n        }\n        if (DEBUG) {\n            this._print('setElementsValidFlag');\n        }\n    }\n    createSnapshot(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.createSnapshot(resource);\n        }\n        return new ResourceEditStackSnapshot(resource, []);\n    }\n    restoreSnapshot(snapshot) {\n        const strResource = this.getUriComparisonKey(snapshot.resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            editStack.restoreSnapshot(snapshot);\n            if (!editStack.hasPastElements() && !editStack.hasFutureElements()) {\n                // the edit stack is now empty, just remove it entirely\n                editStack.dispose();\n                this._editStacks.delete(strResource);\n            }\n        }\n        if (DEBUG) {\n            this._print('restoreSnapshot');\n        }\n    }\n    getElements(resource) {\n        const strResource = this.getUriComparisonKey(resource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.getElements();\n        }\n        return { past: [], future: [] };\n    }\n    _findClosestUndoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with the sourceId and with the highest sourceOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder > matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canUndo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasPastElements();\n        }\n        return false;\n    }\n    _onError(err, element) {\n        onUnexpectedError(err);\n        // An error occurred while undoing or redoing => drop the undo/redo stack for all affected resources\n        for (const strResource of element.strResources) {\n            this.removeElements(strResource);\n        }\n        this._notificationService.error(err);\n    }\n    _acquireLocks(editStackSnapshot) {\n        // first, check if all locks can be acquired\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                throw new Error('Cannot acquire edit stack lock');\n            }\n        }\n        // can acquire all locks\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.locked = true;\n        }\n        return () => {\n            // release all locks\n            for (const editStack of editStackSnapshot.editStacks) {\n                editStack.locked = false;\n            }\n        };\n    }\n    _safeInvokeWithLocks(element, invoke, editStackSnapshot, cleanup, continuation) {\n        const releaseLocks = this._acquireLocks(editStackSnapshot);\n        let result;\n        try {\n            result = invoke();\n        }\n        catch (err) {\n            releaseLocks();\n            cleanup.dispose();\n            return this._onError(err, element);\n        }\n        if (result) {\n            // result is Promise<void>\n            return result.then(() => {\n                releaseLocks();\n                cleanup.dispose();\n                return continuation();\n            }, (err) => {\n                releaseLocks();\n                cleanup.dispose();\n                return this._onError(err, element);\n            });\n        }\n        else {\n            // result is void\n            releaseLocks();\n            cleanup.dispose();\n            return continuation();\n        }\n    }\n    async _invokeWorkspacePrepare(element) {\n        if (typeof element.actual.prepareUndoRedo === 'undefined') {\n            return Disposable.None;\n        }\n        const result = element.actual.prepareUndoRedo();\n        if (typeof result === 'undefined') {\n            return Disposable.None;\n        }\n        return result;\n    }\n    _invokeResourcePrepare(element, callback) {\n        if (element.actual.type !== 1 /* UndoRedoElementType.Workspace */ || typeof element.actual.prepareUndoRedo === 'undefined') {\n            // no preparation needed\n            return callback(Disposable.None);\n        }\n        const r = element.actual.prepareUndoRedo();\n        if (!r) {\n            // nothing to clean up\n            return callback(Disposable.None);\n        }\n        if (isDisposable(r)) {\n            return callback(r);\n        }\n        return r.then((disposable) => {\n            return callback(disposable);\n        });\n    }\n    _getAffectedEditStacks(element) {\n        const affectedEditStacks = [];\n        for (const strResource of element.strResources) {\n            affectedEditStacks.push(this._editStacks.get(strResource) || missingEditStack);\n        }\n        return new EditStackSnapshot(affectedEditStacks);\n    }\n    _tryToSplitAndUndo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitPastWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._undo(strResource, 0, true));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceUndo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndUndo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceUndo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not undo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last past element in all the impacted resources!\n        const cannotUndoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestPastElement() !== element) {\n                cannotUndoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotUndoDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because changes were made to {1}\", element.label, cannotUndoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndUndo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceUndoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not undo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceUndo(strResource, element, undoConfirmed) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceUndo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._confirmAndExecuteWorkspaceUndo(strResource, element, affectedEditStacks, undoConfirmed);\n    }\n    _isPartOfUndoGroup(element) {\n        if (!element.groupId) {\n            return false;\n        }\n        // check that there is at least another element with the same groupId ready to be undone\n        for (const [, editStack] of this._editStacks) {\n            const pastElement = editStack.getClosestPastElement();\n            if (!pastElement) {\n                continue;\n            }\n            if (pastElement === element) {\n                const secondPastElement = editStack.getSecondClosestPastElement();\n                if (secondPastElement && secondPastElement.groupId === element.groupId) {\n                    // there is another element with the same group id in the same stack!\n                    return true;\n                }\n            }\n            if (pastElement.groupId === element.groupId) {\n                // there is another element with the same group id in another stack!\n                return true;\n            }\n        }\n        return false;\n    }\n    async _confirmAndExecuteWorkspaceUndo(strResource, element, editStackSnapshot, undoConfirmed) {\n        if (element.canSplit() && !this._isPartOfUndoGroup(element)) {\n            // this element can be split\n            let UndoChoice;\n            (function (UndoChoice) {\n                UndoChoice[UndoChoice[\"All\"] = 0] = \"All\";\n                UndoChoice[UndoChoice[\"This\"] = 1] = \"This\";\n                UndoChoice[UndoChoice[\"Cancel\"] = 2] = \"Cancel\";\n            })(UndoChoice || (UndoChoice = {}));\n            const { result } = await this._dialogService.prompt({\n                type: Severity.Info,\n                message: nls.localize('confirmWorkspace', \"Would you like to undo '{0}' across all files?\", element.label),\n                buttons: [\n                    {\n                        label: nls.localize({ key: 'ok', comment: ['{0} denotes a number that is > 1, && denotes a mnemonic'] }, \"&&Undo in {0} Files\", editStackSnapshot.editStacks.length),\n                        run: () => UndoChoice.All\n                    },\n                    {\n                        label: nls.localize({ key: 'nok', comment: ['&& denotes a mnemonic'] }, \"Undo this &&File\"),\n                        run: () => UndoChoice.This\n                    }\n                ],\n                cancelButton: {\n                    run: () => UndoChoice.Cancel\n                }\n            });\n            if (result === UndoChoice.Cancel) {\n                // choice: cancel\n                return;\n            }\n            if (result === UndoChoice.This) {\n                // choice: undo this file\n                this._splitPastWorkspaceElement(element, null);\n                return this._undo(strResource, 0, true);\n            }\n            // choice: undo in all files\n            // At this point, it is possible that the element has been made invalid in the meantime (due to the confirmation await)\n            const verificationError1 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*invalidated resources will be checked after the prepare call*/ false);\n            if (verificationError1) {\n                return verificationError1.returnValue;\n            }\n            undoConfirmed = true;\n        }\n        // prepare\n        let cleanup;\n        try {\n            cleanup = await this._invokeWorkspacePrepare(element);\n        }\n        catch (err) {\n            return this._onError(err, element);\n        }\n        // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n        const verificationError2 = this._checkWorkspaceUndo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n        if (verificationError2) {\n            cleanup.dispose();\n            return verificationError2.returnValue;\n        }\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.moveBackward(element);\n        }\n        return this._safeInvokeWithLocks(element, () => element.actual.undo(), editStackSnapshot, cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n    }\n    _resourceUndo(editStack, element, undoConfirmed) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceUndoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not undo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveBackward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.undo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueUndoInGroup(element.groupId, undoConfirmed));\n        });\n    }\n    _findClosestUndoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the highest groupOrder ready to be undone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestPastElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder > matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueUndoInGroup(groupId, undoConfirmed) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestUndoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._undo(matchedStrResource, 0, undoConfirmed);\n        }\n    }\n    undo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestUndoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._undo(matchedStrResource, resourceOrSource.id, false) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._undo(resourceOrSource, 0, false);\n        }\n        return this._undo(this.getUriComparisonKey(resourceOrSource), 0, false);\n    }\n    _undo(strResource, sourceId = 0, undoConfirmed) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestPastElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure undoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestUndoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be undone before this one\n                return this._undo(matchedStrResource, sourceId, undoConfirmed);\n            }\n        }\n        const shouldPromptForConfirmation = (element.sourceId !== sourceId || element.confirmBeforeUndo);\n        if (shouldPromptForConfirmation && !undoConfirmed) {\n            // Hit a different source or the element asks for prompt before undo, prompt for confirmation\n            return this._confirmAndContinueUndo(strResource, sourceId, element);\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceUndo(strResource, element, undoConfirmed);\n            }\n            else {\n                return this._resourceUndo(editStack, element, undoConfirmed);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('undo');\n            }\n        }\n    }\n    async _confirmAndContinueUndo(strResource, sourceId, element) {\n        const result = await this._dialogService.confirm({\n            message: nls.localize('confirmDifferentSource', \"Would you like to undo '{0}'?\", element.label),\n            primaryButton: nls.localize({ key: 'confirmDifferentSource.yes', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"),\n            cancelButton: nls.localize('confirmDifferentSource.no', \"No\")\n        });\n        if (!result.confirmed) {\n            return;\n        }\n        return this._undo(strResource, sourceId, true);\n    }\n    _findClosestRedoElementWithSource(sourceId) {\n        if (!sourceId) {\n            return [null, null];\n        }\n        // find an element with sourceId and with the lowest sourceOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.sourceId === sourceId) {\n                if (!matchedElement || candidate.sourceOrder < matchedElement.sourceOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    canRedo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? true : false;\n        }\n        const strResource = this.getUriComparisonKey(resourceOrSource);\n        if (this._editStacks.has(strResource)) {\n            const editStack = this._editStacks.get(strResource);\n            return editStack.hasFutureElements();\n        }\n        return false;\n    }\n    _tryToSplitAndRedo(strResource, element, ignoreResources, message) {\n        if (element.canSplit()) {\n            this._splitFutureWorkspaceElement(element, ignoreResources);\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError(this._redo(strResource));\n        }\n        else {\n            // Cannot safely split this workspace element => flush all undo/redo stacks\n            for (const strResource of element.strResources) {\n                this.removeElements(strResource);\n            }\n            this._notificationService.warn(message);\n            return new WorkspaceVerificationError();\n        }\n    }\n    _checkWorkspaceRedo(strResource, element, editStackSnapshot, checkInvalidatedResources) {\n        if (element.removedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.removedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.removedResources.createMessage()));\n        }\n        if (checkInvalidatedResources && element.invalidatedResources) {\n            return this._tryToSplitAndRedo(strResource, element, element.invalidatedResources, nls.localize({ key: 'cannotWorkspaceRedo', comment: ['{0} is a label for an operation. {1} is another message.'] }, \"Could not redo '{0}' across all files. {1}\", element.label, element.invalidatedResources.createMessage()));\n        }\n        // this must be the last future element in all the impacted resources!\n        const cannotRedoDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.getClosestFutureElement() !== element) {\n                cannotRedoDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotRedoDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToChanges', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because changes were made to {1}\", element.label, cannotRedoDueToResources.join(', ')));\n        }\n        const cannotLockDueToResources = [];\n        for (const editStack of editStackSnapshot.editStacks) {\n            if (editStack.locked) {\n                cannotLockDueToResources.push(editStack.resourceLabel);\n            }\n        }\n        if (cannotLockDueToResources.length > 0) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because there is already an undo or redo operation running on {1}\", element.label, cannotLockDueToResources.join(', ')));\n        }\n        // check if new stack elements were added in the meantime...\n        if (!editStackSnapshot.isValid()) {\n            return this._tryToSplitAndRedo(strResource, element, null, nls.localize({ key: 'cannotWorkspaceRedoDueToInMeantimeUndoRedo', comment: ['{0} is a label for an operation. {1} is a list of filenames.'] }, \"Could not redo '{0}' across all files because an undo or redo operation occurred in the meantime\", element.label));\n        }\n        return null;\n    }\n    _workspaceRedo(strResource, element) {\n        const affectedEditStacks = this._getAffectedEditStacks(element);\n        const verificationError = this._checkWorkspaceRedo(strResource, element, affectedEditStacks, /*invalidated resources will be checked after the prepare call*/ false);\n        if (verificationError) {\n            return verificationError.returnValue;\n        }\n        return this._executeWorkspaceRedo(strResource, element, affectedEditStacks);\n    }\n    async _executeWorkspaceRedo(strResource, element, editStackSnapshot) {\n        // prepare\n        let cleanup;\n        try {\n            cleanup = await this._invokeWorkspacePrepare(element);\n        }\n        catch (err) {\n            return this._onError(err, element);\n        }\n        // At this point, it is possible that the element has been made invalid in the meantime (due to the prepare await)\n        const verificationError = this._checkWorkspaceRedo(strResource, element, editStackSnapshot, /*now also check that there are no more invalidated resources*/ true);\n        if (verificationError) {\n            cleanup.dispose();\n            return verificationError.returnValue;\n        }\n        for (const editStack of editStackSnapshot.editStacks) {\n            editStack.moveForward(element);\n        }\n        return this._safeInvokeWithLocks(element, () => element.actual.redo(), editStackSnapshot, cleanup, () => this._continueRedoInGroup(element.groupId));\n    }\n    _resourceRedo(editStack, element) {\n        if (!element.isValid) {\n            // invalid element => immediately flush edit stack!\n            editStack.flushAllElements();\n            return;\n        }\n        if (editStack.locked) {\n            const message = nls.localize({ key: 'cannotResourceRedoDueToInProgressUndoRedo', comment: ['{0} is a label for an operation.'] }, \"Could not redo '{0}' because there is already an undo or redo operation running.\", element.label);\n            this._notificationService.warn(message);\n            return;\n        }\n        return this._invokeResourcePrepare(element, (cleanup) => {\n            editStack.moveForward(element);\n            return this._safeInvokeWithLocks(element, () => element.actual.redo(), new EditStackSnapshot([editStack]), cleanup, () => this._continueRedoInGroup(element.groupId));\n        });\n    }\n    _findClosestRedoElementInGroup(groupId) {\n        if (!groupId) {\n            return [null, null];\n        }\n        // find another element with the same groupId and with the lowest groupOrder ready to be redone\n        let matchedElement = null;\n        let matchedStrResource = null;\n        for (const [strResource, editStack] of this._editStacks) {\n            const candidate = editStack.getClosestFutureElement();\n            if (!candidate) {\n                continue;\n            }\n            if (candidate.groupId === groupId) {\n                if (!matchedElement || candidate.groupOrder < matchedElement.groupOrder) {\n                    matchedElement = candidate;\n                    matchedStrResource = strResource;\n                }\n            }\n        }\n        return [matchedElement, matchedStrResource];\n    }\n    _continueRedoInGroup(groupId) {\n        if (!groupId) {\n            return;\n        }\n        const [, matchedStrResource] = this._findClosestRedoElementInGroup(groupId);\n        if (matchedStrResource) {\n            return this._redo(matchedStrResource);\n        }\n    }\n    redo(resourceOrSource) {\n        if (resourceOrSource instanceof UndoRedoSource) {\n            const [, matchedStrResource] = this._findClosestRedoElementWithSource(resourceOrSource.id);\n            return matchedStrResource ? this._redo(matchedStrResource) : undefined;\n        }\n        if (typeof resourceOrSource === 'string') {\n            return this._redo(resourceOrSource);\n        }\n        return this._redo(this.getUriComparisonKey(resourceOrSource));\n    }\n    _redo(strResource) {\n        if (!this._editStacks.has(strResource)) {\n            return;\n        }\n        const editStack = this._editStacks.get(strResource);\n        const element = editStack.getClosestFutureElement();\n        if (!element) {\n            return;\n        }\n        if (element.groupId) {\n            // this element is a part of a group, we need to make sure redoing in a group is in order\n            const [matchedElement, matchedStrResource] = this._findClosestRedoElementInGroup(element.groupId);\n            if (element !== matchedElement && matchedStrResource) {\n                // there is an element in the same group that should be redone before this one\n                return this._redo(matchedStrResource);\n            }\n        }\n        try {\n            if (element.type === 1 /* UndoRedoElementType.Workspace */) {\n                return this._workspaceRedo(strResource, element);\n            }\n            else {\n                return this._resourceRedo(editStack, element);\n            }\n        }\n        finally {\n            if (DEBUG) {\n                this._print('redo');\n            }\n        }\n    }\n};\nUndoRedoService = __decorate([\n    __param(0, IDialogService),\n    __param(1, INotificationService)\n], UndoRedoService);\nexport { UndoRedoService };\nclass WorkspaceVerificationError {\n    constructor(returnValue) {\n        this.returnValue = returnValue;\n    }\n}\nregisterSingleton(IUndoRedoService, UndoRedoService, 1 /* InstantiationType.Delayed */);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}