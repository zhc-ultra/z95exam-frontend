{"ast":null,"code":"import _slicedToArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { isFirefox } from '../../base/browser/browser.js';\nimport * as types from '../../base/common/types.js';\nimport { status } from '../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from './editorExtensions.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { ColumnSelection } from '../common/cursor/cursorColumnSelection.js';\nimport { CursorState } from '../common/cursorCommon.js';\nimport { DeleteOperations } from '../common/cursor/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../common/cursor/cursorMoveCommands.js';\nimport { TypeOperations } from '../common/cursor/cursorTypeOperations.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { EditorContextKeys } from '../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { getActiveElement } from '../../base/browser/dom.js';\nvar CORE_WEIGHT = 0 /* KeybindingWeight.EditorCore */;\nexport var CoreEditorCommand = /*#__PURE__*/function (_EditorCommand) {\n  function CoreEditorCommand() {\n    _classCallCheck(this, CoreEditorCommand);\n    return _callSuper(this, CoreEditorCommand, arguments);\n  }\n  _inherits(CoreEditorCommand, _EditorCommand);\n  return _createClass(CoreEditorCommand, [{\n    key: \"runEditorCommand\",\n    value: function runEditorCommand(accessor, editor, args) {\n      var viewModel = editor._getViewModel();\n      if (!viewModel) {\n        // the editor has no view => has no cursors\n        return;\n      }\n      this.runCoreEditorCommand(viewModel, args || {});\n    }\n  }]);\n}(EditorCommand);\nexport var EditorScroll_;\n(function (EditorScroll_) {\n  var isEditorScrollArgs = function isEditorScrollArgs(arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n    var scrollArg = arg;\n    if (!types.isString(scrollArg.to)) {\n      return false;\n    }\n    if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n      return false;\n    }\n    if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n      return false;\n    }\n    if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n      return false;\n    }\n    return true;\n  };\n  EditorScroll_.metadata = {\n    description: 'Scroll editor in the given direction',\n    args: [{\n      name: 'Editor scroll argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory direction value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'up', 'down'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\\n\\t\\t\\t\\t\",\n      constraint: isEditorScrollArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['up', 'down']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'page', 'halfPage', 'editor']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'revealCursor': {\n            'type': 'boolean'\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Directions in the view for editor scroll command.\n   */\n  EditorScroll_.RawDirection = {\n    Up: 'up',\n    Right: 'right',\n    Down: 'down',\n    Left: 'left'\n  };\n  /**\n   * Units for editor scroll 'by' argument\n   */\n  EditorScroll_.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Page: 'page',\n    HalfPage: 'halfPage',\n    Editor: 'editor',\n    Column: 'column'\n  };\n  function parse(args) {\n    var direction;\n    switch (args.to) {\n      case EditorScroll_.RawDirection.Up:\n        direction = 1 /* Direction.Up */;\n        break;\n      case EditorScroll_.RawDirection.Right:\n        direction = 2 /* Direction.Right */;\n        break;\n      case EditorScroll_.RawDirection.Down:\n        direction = 3 /* Direction.Down */;\n        break;\n      case EditorScroll_.RawDirection.Left:\n        direction = 4 /* Direction.Left */;\n        break;\n      default:\n        // Illegal arguments\n        return null;\n    }\n    var unit;\n    switch (args.by) {\n      case EditorScroll_.RawUnit.Line:\n        unit = 1 /* Unit.Line */;\n        break;\n      case EditorScroll_.RawUnit.WrappedLine:\n        unit = 2 /* Unit.WrappedLine */;\n        break;\n      case EditorScroll_.RawUnit.Page:\n        unit = 3 /* Unit.Page */;\n        break;\n      case EditorScroll_.RawUnit.HalfPage:\n        unit = 4 /* Unit.HalfPage */;\n        break;\n      case EditorScroll_.RawUnit.Editor:\n        unit = 5 /* Unit.Editor */;\n        break;\n      case EditorScroll_.RawUnit.Column:\n        unit = 6 /* Unit.Column */;\n        break;\n      default:\n        unit = 2 /* Unit.WrappedLine */;\n    }\n    var value = Math.floor(args.value || 1);\n    var revealCursor = !!args.revealCursor;\n    return {\n      direction: direction,\n      unit: unit,\n      value: value,\n      revealCursor: revealCursor,\n      select: !!args.select\n    };\n  }\n  EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n  var isRevealLineArgs = function isRevealLineArgs(arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n    var reveaLineArg = arg;\n    if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n      return false;\n    }\n    if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n      return false;\n    }\n    return true;\n  };\n  RevealLine_.metadata = {\n    description: 'Reveal the given line at the given logical position',\n    args: [{\n      name: 'Reveal line argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'lineNumber': A mandatory line number value.\\n\\t\\t\\t\\t\\t* 'at': Logical position at which line has to be revealed.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'top', 'center', 'bottom'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\",\n      constraint: isRevealLineArgs,\n      schema: {\n        'type': 'object',\n        'required': ['lineNumber'],\n        'properties': {\n          'lineNumber': {\n            'type': ['number', 'string']\n          },\n          'at': {\n            'type': 'string',\n            'enum': ['top', 'center', 'bottom']\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Values for reveal line 'at' argument\n   */\n  RevealLine_.RawAtArgument = {\n    Top: 'top',\n    Center: 'center',\n    Bottom: 'bottom'\n  };\n})(RevealLine_ || (RevealLine_ = {}));\nvar EditorOrNativeTextInputCommand = /*#__PURE__*/function () {\n  function EditorOrNativeTextInputCommand(target) {\n    var _this = this;\n    _classCallCheck(this, EditorOrNativeTextInputCommand);\n    // 1. handle case when focus is in editor.\n    target.addImplementation(10000, 'code-editor', function (accessor, args) {\n      // Only if editor text focus (i.e. not if editor has widget focus).\n      var focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n      if (focusedEditor && focusedEditor.hasTextFocus()) {\n        return _this._runEditorCommand(accessor, focusedEditor, args);\n      }\n      return false;\n    });\n    // 2. handle case when focus is in some other `input` / `textarea`.\n    target.addImplementation(1000, 'generic-dom-input-textarea', function (accessor, args) {\n      // Only if focused on an element that allows for entering text\n      var activeElement = getActiveElement();\n      if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n        _this.runDOMCommand(activeElement);\n        return true;\n      }\n      return false;\n    });\n    // 3. (default) handle case when focus is somewhere else.\n    target.addImplementation(0, 'generic-dom', function (accessor, args) {\n      // Redirecting to active editor\n      var activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n      if (activeEditor) {\n        activeEditor.focus();\n        return _this._runEditorCommand(accessor, activeEditor, args);\n      }\n      return false;\n    });\n  }\n  return _createClass(EditorOrNativeTextInputCommand, [{\n    key: \"_runEditorCommand\",\n    value: function _runEditorCommand(accessor, editor, args) {\n      var result = this.runEditorCommand(accessor, editor, args);\n      if (result) {\n        return result;\n      }\n      return true;\n    }\n  }]);\n}();\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n  var BaseMoveToCommand = /*#__PURE__*/function (_CoreEditorCommand) {\n    function BaseMoveToCommand(opts) {\n      var _this2;\n      _classCallCheck(this, BaseMoveToCommand);\n      _this2 = _callSuper(this, BaseMoveToCommand, [opts]);\n      _this2._inSelectionMode = opts.inSelectionMode;\n      return _this2;\n    }\n    _inherits(BaseMoveToCommand, _CoreEditorCommand);\n    return _createClass(BaseMoveToCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        if (!args.position) {\n          return;\n        }\n        viewModel.model.pushStackElement();\n        var cursorStateChanged = viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)]);\n        if (cursorStateChanged && args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n          viewModel.revealAllCursors(args.source, true, true);\n        }\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveTo',\n    inSelectionMode: false,\n    precondition: undefined\n  }));\n  CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveToSelect',\n    inSelectionMode: true,\n    precondition: undefined\n  }));\n  var ColumnSelectCommand = /*#__PURE__*/function (_CoreEditorCommand2) {\n    function ColumnSelectCommand() {\n      _classCallCheck(this, ColumnSelectCommand);\n      return _callSuper(this, ColumnSelectCommand, arguments);\n    }\n    _inherits(ColumnSelectCommand, _CoreEditorCommand2);\n    return _createClass(ColumnSelectCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        var result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n        if (result === null) {\n          // invalid arguments\n          return;\n        }\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, result.viewStates.map(function (viewState) {\n          return CursorState.fromViewState(viewState);\n        }));\n        viewModel.setCursorColumnSelectData({\n          isReal: true,\n          fromViewLineNumber: result.fromLineNumber,\n          fromViewVisualColumn: result.fromVisualColumn,\n          toViewLineNumber: result.toLineNumber,\n          toViewVisualColumn: result.toVisualColumn\n        });\n        if (result.reversed) {\n          viewModel.revealTopMostCursor(args.source);\n        } else {\n          viewModel.revealBottomMostCursor(args.source);\n        }\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.ColumnSelect = registerEditorCommand(new ( /*#__PURE__*/function (_ColumnSelectCommand) {\n    function _class() {\n      _classCallCheck(this, _class);\n      return _callSuper(this, _class, [{\n        id: 'columnSelect',\n        precondition: undefined\n      }]);\n    }\n    _inherits(_class, _ColumnSelectCommand);\n    return _createClass(_class, [{\n      key: \"_getColumnSelectResult\",\n      value: function _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n        if (typeof args.position === 'undefined' || typeof args.viewPosition === 'undefined' || typeof args.mouseColumn === 'undefined') {\n          return null;\n        }\n        // validate `args`\n        var validatedPosition = viewModel.model.validatePosition(args.position);\n        var validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n        var fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n        var fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n        return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n      }\n    }]);\n  }(ColumnSelectCommand))());\n  CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new ( /*#__PURE__*/function (_ColumnSelectCommand2) {\n    function _class2() {\n      _classCallCheck(this, _class2);\n      return _callSuper(this, _class2, [{\n        id: 'cursorColumnSelectLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */,\n          linux: {\n            primary: 0\n          }\n        }\n      }]);\n    }\n    _inherits(_class2, _ColumnSelectCommand2);\n    return _createClass(_class2, [{\n      key: \"_getColumnSelectResult\",\n      value: function _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n        return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n      }\n    }]);\n  }(ColumnSelectCommand))());\n  CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new ( /*#__PURE__*/function (_ColumnSelectCommand3) {\n    function _class3() {\n      _classCallCheck(this, _class3);\n      return _callSuper(this, _class3, [{\n        id: 'cursorColumnSelectRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */,\n          linux: {\n            primary: 0\n          }\n        }\n      }]);\n    }\n    _inherits(_class3, _ColumnSelectCommand3);\n    return _createClass(_class3, [{\n      key: \"_getColumnSelectResult\",\n      value: function _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n        return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n      }\n    }]);\n  }(ColumnSelectCommand))());\n  var ColumnSelectUpCommand = /*#__PURE__*/function (_ColumnSelectCommand4) {\n    function ColumnSelectUpCommand(opts) {\n      var _this3;\n      _classCallCheck(this, ColumnSelectUpCommand);\n      _this3 = _callSuper(this, ColumnSelectUpCommand, [opts]);\n      _this3._isPaged = opts.isPaged;\n      return _this3;\n    }\n    _inherits(ColumnSelectUpCommand, _ColumnSelectCommand4);\n    return _createClass(ColumnSelectUpCommand, [{\n      key: \"_getColumnSelectResult\",\n      value: function _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n        return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n      }\n    }]);\n  }(ColumnSelectCommand);\n  CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  var ColumnSelectDownCommand = /*#__PURE__*/function (_ColumnSelectCommand5) {\n    function ColumnSelectDownCommand(opts) {\n      var _this4;\n      _classCallCheck(this, ColumnSelectDownCommand);\n      _this4 = _callSuper(this, ColumnSelectDownCommand, [opts]);\n      _this4._isPaged = opts.isPaged;\n      return _this4;\n    }\n    _inherits(ColumnSelectDownCommand, _ColumnSelectCommand5);\n    return _createClass(ColumnSelectDownCommand, [{\n      key: \"_getColumnSelectResult\",\n      value: function _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n        return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n      }\n    }]);\n  }(ColumnSelectCommand);\n  CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  var CursorMoveImpl = /*#__PURE__*/function (_CoreEditorCommand3) {\n    function CursorMoveImpl() {\n      _classCallCheck(this, CursorMoveImpl);\n      return _callSuper(this, CursorMoveImpl, [{\n        id: 'cursorMove',\n        precondition: undefined,\n        metadata: CursorMove_.metadata\n      }]);\n    }\n    _inherits(CursorMoveImpl, _CoreEditorCommand3);\n    return _createClass(CursorMoveImpl, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        var parsed = CursorMove_.parse(args);\n        if (!parsed) {\n          // illegal arguments\n          return;\n        }\n        this._runCursorMove(viewModel, args.source, parsed);\n      }\n    }, {\n      key: \"_runCursorMove\",\n      value: function _runCursorMove(viewModel, source, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n        viewModel.revealAllCursors(source, true);\n      }\n    }], [{\n      key: \"_move\",\n      value: function _move(viewModel, cursors, args) {\n        var inSelectionMode = args.select;\n        var value = args.value;\n        switch (args.direction) {\n          case 0 /* CursorMove_.Direction.Left */:\n          case 1 /* CursorMove_.Direction.Right */:\n          case 2 /* CursorMove_.Direction.Up */:\n          case 3 /* CursorMove_.Direction.Down */:\n          case 4 /* CursorMove_.Direction.PrevBlankLine */:\n          case 5 /* CursorMove_.Direction.NextBlankLine */:\n          case 6 /* CursorMove_.Direction.WrappedLineStart */:\n          case 7 /* CursorMove_.Direction.WrappedLineFirstNonWhitespaceCharacter */:\n          case 8 /* CursorMove_.Direction.WrappedLineColumnCenter */:\n          case 9 /* CursorMove_.Direction.WrappedLineEnd */:\n          case 10 /* CursorMove_.Direction.WrappedLineLastNonWhitespaceCharacter */:\n            return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n          case 11 /* CursorMove_.Direction.ViewPortTop */:\n          case 13 /* CursorMove_.Direction.ViewPortBottom */:\n          case 12 /* CursorMove_.Direction.ViewPortCenter */:\n          case 14 /* CursorMove_.Direction.ViewPortIfOutside */:\n            return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n          default:\n            return null;\n        }\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n  CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n  var CursorMoveBasedCommand = /*#__PURE__*/function (_CoreEditorCommand4) {\n    function CursorMoveBasedCommand(opts) {\n      var _this5;\n      _classCallCheck(this, CursorMoveBasedCommand);\n      _this5 = _callSuper(this, CursorMoveBasedCommand, [opts]);\n      _this5._staticArgs = opts.args;\n      return _this5;\n    }\n    _inherits(CursorMoveBasedCommand, _CoreEditorCommand4);\n    return _createClass(CursorMoveBasedCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, dynamicArgs) {\n        var args = this._staticArgs;\n        if (this._staticArgs.value === -1 /* Constants.PAGE_SIZE_MARKER */) {\n          // -1 is a marker for page size\n          args = {\n            direction: this._staticArgs.direction,\n            unit: this._staticArgs.unit,\n            select: this._staticArgs.select,\n            value: dynamicArgs.pageSize || viewModel.cursorConfig.pageSize\n          };\n        }\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(dynamicArgs.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n        viewModel.revealAllCursors(dynamicArgs.source, true);\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0 /* CursorMove_.Direction.Left */,\n      unit: 0 /* CursorMove_.Unit.None */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorLeft',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 15 /* KeyCode.LeftArrow */,\n      mac: {\n        primary: 15 /* KeyCode.LeftArrow */,\n        secondary: [256 /* KeyMod.WinCtrl */ | 32 /* KeyCode.KeyB */]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0 /* CursorMove_.Direction.Left */,\n      unit: 0 /* CursorMove_.Unit.None */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorLeftSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */\n    }\n  }));\n  CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1 /* CursorMove_.Direction.Right */,\n      unit: 0 /* CursorMove_.Unit.None */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorRight',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 17 /* KeyCode.RightArrow */,\n      mac: {\n        primary: 17 /* KeyCode.RightArrow */,\n        secondary: [256 /* KeyMod.WinCtrl */ | 36 /* KeyCode.KeyF */]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1 /* CursorMove_.Direction.Right */,\n      unit: 0 /* CursorMove_.Unit.None */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorRightSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */\n    }\n  }));\n  CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* CursorMove_.Direction.Up */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 16 /* KeyCode.UpArrow */,\n      mac: {\n        primary: 16 /* KeyCode.UpArrow */,\n        secondary: [256 /* KeyMod.WinCtrl */ | 46 /* KeyCode.KeyP */]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* CursorMove_.Direction.Up */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n      secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */],\n      mac: {\n        primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */\n      },\n      linux: {\n        primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* CursorMove_.Direction.Up */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: false,\n      value: -1 /* Constants.PAGE_SIZE_MARKER */\n    },\n    id: 'cursorPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 11 /* KeyCode.PageUp */\n    }\n  }));\n  CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* CursorMove_.Direction.Up */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: true,\n      value: -1 /* Constants.PAGE_SIZE_MARKER */\n    },\n    id: 'cursorPageUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */\n    }\n  }));\n  CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* CursorMove_.Direction.Down */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 18 /* KeyCode.DownArrow */,\n      mac: {\n        primary: 18 /* KeyCode.DownArrow */,\n        secondary: [256 /* KeyMod.WinCtrl */ | 44 /* KeyCode.KeyN */]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* CursorMove_.Direction.Down */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n      secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */],\n      mac: {\n        primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */\n      },\n      linux: {\n        primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* CursorMove_.Direction.Down */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: false,\n      value: -1 /* Constants.PAGE_SIZE_MARKER */\n    },\n    id: 'cursorPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 12 /* KeyCode.PageDown */\n    }\n  }));\n  CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* CursorMove_.Direction.Down */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: true,\n      value: -1 /* Constants.PAGE_SIZE_MARKER */\n    },\n    id: 'cursorPageDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */\n    }\n  }));\n  CoreNavigationCommands.CreateCursor = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand5) {\n    function _class4() {\n      _classCallCheck(this, _class4);\n      return _callSuper(this, _class4, [{\n        id: 'createCursor',\n        precondition: undefined\n      }]);\n    }\n    _inherits(_class4, _CoreEditorCommand5);\n    return _createClass(_class4, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        if (!args.position) {\n          return;\n        }\n        var newState;\n        if (args.wholeLine) {\n          newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n        } else {\n          newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n        }\n        var states = viewModel.getCursorStates();\n        // Check if we should remove a cursor (sort of like a toggle)\n        if (states.length > 1) {\n          var newModelPosition = newState.modelState ? newState.modelState.position : null;\n          var newViewPosition = newState.viewState ? newState.viewState.position : null;\n          for (var i = 0, len = states.length; i < len; i++) {\n            var state = states[i];\n            if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n              continue;\n            }\n            if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n              continue;\n            }\n            // => Remove the cursor\n            states.splice(i, 1);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n            return;\n          }\n        }\n        // => Add the new cursor\n        states.push(newState);\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand6) {\n    function _class5() {\n      _classCallCheck(this, _class5);\n      return _callSuper(this, _class5, [{\n        id: '_lastCursorMoveToSelect',\n        precondition: undefined\n      }]);\n    }\n    _inherits(_class5, _CoreEditorCommand6);\n    return _createClass(_class5, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        if (!args.position) {\n          return;\n        }\n        var lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n        var states = viewModel.getCursorStates();\n        var newStates = states.slice(0);\n        newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n      }\n    }]);\n  }(CoreEditorCommand))());\n  var HomeCommand = /*#__PURE__*/function (_CoreEditorCommand7) {\n    function HomeCommand(opts) {\n      var _this6;\n      _classCallCheck(this, HomeCommand);\n      _this6 = _callSuper(this, HomeCommand, [opts]);\n      _this6._inSelectionMode = opts.inSelectionMode;\n      return _this6;\n    }\n    _inherits(HomeCommand, _CoreEditorCommand7);\n    return _createClass(HomeCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n        viewModel.revealAllCursors(args.source, true);\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n    inSelectionMode: false,\n    id: 'cursorHome',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 14 /* KeyCode.Home */,\n      mac: {\n        primary: 14 /* KeyCode.Home */,\n        secondary: [2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n    inSelectionMode: true,\n    id: 'cursorHomeSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n      mac: {\n        primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n        secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */]\n      }\n    }\n  }));\n  var LineStartCommand = /*#__PURE__*/function (_CoreEditorCommand8) {\n    function LineStartCommand(opts) {\n      var _this7;\n      _classCallCheck(this, LineStartCommand);\n      _this7 = _callSuper(this, LineStartCommand, [opts]);\n      _this7._inSelectionMode = opts.inSelectionMode;\n      return _this7;\n    }\n    _inherits(LineStartCommand, _CoreEditorCommand8);\n    return _createClass(LineStartCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel.getCursorStates()));\n        viewModel.revealAllCursors(args.source, true);\n      }\n    }, {\n      key: \"_exec\",\n      value: function _exec(cursors) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n          var cursor = cursors[i];\n          var lineNumber = cursor.modelState.position.lineNumber;\n          result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n        }\n        return result;\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n    inSelectionMode: false,\n    id: 'cursorLineStart',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* KeyMod.WinCtrl */ | 31 /* KeyCode.KeyA */\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n    inSelectionMode: true,\n    id: 'cursorLineStartSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */\n      }\n    }\n  }));\n  var EndCommand = /*#__PURE__*/function (_CoreEditorCommand9) {\n    function EndCommand(opts) {\n      var _this8;\n      _classCallCheck(this, EndCommand);\n      _this8 = _callSuper(this, EndCommand, [opts]);\n      _this8._inSelectionMode = opts.inSelectionMode;\n      return _this8;\n    }\n    _inherits(EndCommand, _CoreEditorCommand9);\n    return _createClass(EndCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n        viewModel.revealAllCursors(args.source, true);\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n    inSelectionMode: false,\n    id: 'cursorEnd',\n    precondition: undefined,\n    kbOpts: {\n      args: {\n        sticky: false\n      },\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 13 /* KeyCode.End */,\n      mac: {\n        primary: 13 /* KeyCode.End */,\n        secondary: [2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */]\n      }\n    },\n    metadata: {\n      description: \"Go to End\",\n      args: [{\n        name: 'args',\n        schema: {\n          type: 'object',\n          properties: {\n            'sticky': {\n              description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n              type: 'boolean',\n              \"default\": false\n            }\n          }\n        }\n      }]\n    }\n  }));\n  CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n    inSelectionMode: true,\n    id: 'cursorEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      args: {\n        sticky: false\n      },\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n      mac: {\n        primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n        secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */]\n      }\n    },\n    metadata: {\n      description: \"Select to End\",\n      args: [{\n        name: 'args',\n        schema: {\n          type: 'object',\n          properties: {\n            'sticky': {\n              description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n              type: 'boolean',\n              \"default\": false\n            }\n          }\n        }\n      }]\n    }\n  }));\n  var LineEndCommand = /*#__PURE__*/function (_CoreEditorCommand10) {\n    function LineEndCommand(opts) {\n      var _this9;\n      _classCallCheck(this, LineEndCommand);\n      _this9 = _callSuper(this, LineEndCommand, [opts]);\n      _this9._inSelectionMode = opts.inSelectionMode;\n      return _this9;\n    }\n    _inherits(LineEndCommand, _CoreEditorCommand10);\n    return _createClass(LineEndCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n        viewModel.revealAllCursors(args.source, true);\n      }\n    }, {\n      key: \"_exec\",\n      value: function _exec(viewModel, cursors) {\n        var result = [];\n        for (var i = 0, len = cursors.length; i < len; i++) {\n          var cursor = cursors[i];\n          var lineNumber = cursor.modelState.position.lineNumber;\n          var maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n          result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n        }\n        return result;\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n    inSelectionMode: false,\n    id: 'cursorLineEnd',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* KeyMod.WinCtrl */ | 35 /* KeyCode.KeyE */\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n    inSelectionMode: true,\n    id: 'cursorLineEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 35 /* KeyCode.KeyE */\n      }\n    }\n  }));\n  var TopCommand = /*#__PURE__*/function (_CoreEditorCommand11) {\n    function TopCommand(opts) {\n      var _this10;\n      _classCallCheck(this, TopCommand);\n      _this10 = _callSuper(this, TopCommand, [opts]);\n      _this10._inSelectionMode = opts.inSelectionMode;\n      return _this10;\n    }\n    _inherits(TopCommand, _CoreEditorCommand11);\n    return _createClass(TopCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n        viewModel.revealAllCursors(args.source, true);\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n    inSelectionMode: false,\n    id: 'cursorTop',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 14 /* KeyCode.Home */,\n      mac: {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n    inSelectionMode: true,\n    id: 'cursorTopSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n      mac: {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */\n      }\n    }\n  }));\n  var BottomCommand = /*#__PURE__*/function (_CoreEditorCommand12) {\n    function BottomCommand(opts) {\n      var _this11;\n      _classCallCheck(this, BottomCommand);\n      _this11 = _callSuper(this, BottomCommand, [opts]);\n      _this11._inSelectionMode = opts.inSelectionMode;\n      return _this11;\n    }\n    _inherits(BottomCommand, _CoreEditorCommand12);\n    return _createClass(BottomCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n        viewModel.revealAllCursors(args.source, true);\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n    inSelectionMode: false,\n    id: 'cursorBottom',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 13 /* KeyCode.End */,\n      mac: {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n    inSelectionMode: true,\n    id: 'cursorBottomSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n      mac: {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */\n      }\n    }\n  }));\n  var EditorScrollImpl = /*#__PURE__*/function (_CoreEditorCommand13) {\n    function EditorScrollImpl() {\n      _classCallCheck(this, EditorScrollImpl);\n      return _callSuper(this, EditorScrollImpl, [{\n        id: 'editorScroll',\n        precondition: undefined,\n        metadata: EditorScroll_.metadata\n      }]);\n    }\n    _inherits(EditorScrollImpl, _CoreEditorCommand13);\n    return _createClass(EditorScrollImpl, [{\n      key: \"determineScrollMethod\",\n      value: function determineScrollMethod(args) {\n        var horizontalUnits = [6 /* EditorScroll_.Unit.Column */];\n        var verticalUnits = [1 /* EditorScroll_.Unit.Line */, 2 /* EditorScroll_.Unit.WrappedLine */, 3 /* EditorScroll_.Unit.Page */, 4 /* EditorScroll_.Unit.HalfPage */, 5 /* EditorScroll_.Unit.Editor */, 6 /* EditorScroll_.Unit.Column */];\n        var horizontalDirections = [4 /* EditorScroll_.Direction.Left */, 2 /* EditorScroll_.Direction.Right */];\n        var verticalDirections = [1 /* EditorScroll_.Direction.Up */, 3 /* EditorScroll_.Direction.Down */];\n        if (horizontalUnits.includes(args.unit) && horizontalDirections.includes(args.direction)) {\n          return this._runHorizontalEditorScroll.bind(this);\n        }\n        if (verticalUnits.includes(args.unit) && verticalDirections.includes(args.direction)) {\n          return this._runVerticalEditorScroll.bind(this);\n        }\n        return null;\n      }\n    }, {\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        var parsed = EditorScroll_.parse(args);\n        if (!parsed) {\n          // illegal arguments\n          return;\n        }\n        var runEditorScroll = this.determineScrollMethod(parsed);\n        if (!runEditorScroll) {\n          // Incompatible unit and direction\n          return;\n        }\n        runEditorScroll(viewModel, args.source, parsed);\n      }\n    }, {\n      key: \"_runVerticalEditorScroll\",\n      value: function _runVerticalEditorScroll(viewModel, source, args) {\n        var desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n        if (args.revealCursor) {\n          // must ensure cursor is in new visible range\n          var desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n          viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)]);\n        }\n        viewModel.viewLayout.setScrollPosition({\n          scrollTop: desiredScrollTop\n        }, 0 /* ScrollType.Smooth */);\n      }\n    }, {\n      key: \"_computeDesiredScrollTop\",\n      value: function _computeDesiredScrollTop(viewModel, args) {\n        if (args.unit === 1 /* EditorScroll_.Unit.Line */) {\n          // scrolling by model lines\n          var futureViewport = viewModel.viewLayout.getFutureViewport();\n          var visibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(futureViewport.top);\n          var visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n          var desiredTopModelLineNumber;\n          if (args.direction === 1 /* EditorScroll_.Direction.Up */) {\n            // must go x model lines up\n            desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n          } else {\n            // must go x model lines down\n            desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n          }\n          var viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n          return viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n        }\n        if (args.unit === 5 /* EditorScroll_.Unit.Editor */) {\n          var _desiredTopModelLineNumber = 0;\n          if (args.direction === 3 /* EditorScroll_.Direction.Down */) {\n            _desiredTopModelLineNumber = viewModel.model.getLineCount() - viewModel.cursorConfig.pageSize;\n          }\n          return viewModel.viewLayout.getVerticalOffsetForLineNumber(_desiredTopModelLineNumber);\n        }\n        var noOfLines;\n        if (args.unit === 3 /* EditorScroll_.Unit.Page */) {\n          noOfLines = viewModel.cursorConfig.pageSize * args.value;\n        } else if (args.unit === 4 /* EditorScroll_.Unit.HalfPage */) {\n          noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n        } else {\n          noOfLines = args.value;\n        }\n        var deltaLines = (args.direction === 1 /* EditorScroll_.Direction.Up */ ? -1 : 1) * noOfLines;\n        return viewModel.viewLayout.getCurrentScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n      }\n    }, {\n      key: \"_runHorizontalEditorScroll\",\n      value: function _runHorizontalEditorScroll(viewModel, source, args) {\n        var desiredScrollLeft = this._computeDesiredScrollLeft(viewModel, args);\n        viewModel.viewLayout.setScrollPosition({\n          scrollLeft: desiredScrollLeft\n        }, 0 /* ScrollType.Smooth */);\n      }\n    }, {\n      key: \"_computeDesiredScrollLeft\",\n      value: function _computeDesiredScrollLeft(viewModel, args) {\n        var deltaColumns = (args.direction === 4 /* EditorScroll_.Direction.Left */ ? -1 : 1) * args.value;\n        return viewModel.viewLayout.getCurrentScrollLeft() + deltaColumns * viewModel.cursorConfig.typicalHalfwidthCharacterWidth;\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n  CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n  CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand14) {\n    function _class6() {\n      _classCallCheck(this, _class6);\n      return _callSuper(this, _class6, [{\n        id: 'scrollLineUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */,\n          mac: {\n            primary: 256 /* KeyMod.WinCtrl */ | 11 /* KeyCode.PageUp */\n          }\n        }\n      }]);\n    }\n    _inherits(_class6, _CoreEditorCommand14);\n    return _createClass(_class6, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n          to: EditorScroll_.RawDirection.Up,\n          by: EditorScroll_.RawUnit.WrappedLine,\n          value: 1,\n          revealCursor: false,\n          select: false,\n          source: args.source\n        });\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand15) {\n    function _class7() {\n      _classCallCheck(this, _class7);\n      return _callSuper(this, _class7, [{\n        id: 'scrollPageUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 11 /* KeyCode.PageUp */,\n          win: {\n            primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */\n          },\n          linux: {\n            primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */\n          }\n        }\n      }]);\n    }\n    _inherits(_class7, _CoreEditorCommand15);\n    return _createClass(_class7, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n          to: EditorScroll_.RawDirection.Up,\n          by: EditorScroll_.RawUnit.Page,\n          value: 1,\n          revealCursor: false,\n          select: false,\n          source: args.source\n        });\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollEditorTop = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand16) {\n    function _class8() {\n      _classCallCheck(this, _class8);\n      return _callSuper(this, _class8, [{\n        id: 'scrollEditorTop',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus\n        }\n      }]);\n    }\n    _inherits(_class8, _CoreEditorCommand16);\n    return _createClass(_class8, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n          to: EditorScroll_.RawDirection.Up,\n          by: EditorScroll_.RawUnit.Editor,\n          value: 1,\n          revealCursor: false,\n          select: false,\n          source: args.source\n        });\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand17) {\n    function _class9() {\n      _classCallCheck(this, _class9);\n      return _callSuper(this, _class9, [{\n        id: 'scrollLineDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */,\n          mac: {\n            primary: 256 /* KeyMod.WinCtrl */ | 12 /* KeyCode.PageDown */\n          }\n        }\n      }]);\n    }\n    _inherits(_class9, _CoreEditorCommand17);\n    return _createClass(_class9, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n          to: EditorScroll_.RawDirection.Down,\n          by: EditorScroll_.RawUnit.WrappedLine,\n          value: 1,\n          revealCursor: false,\n          select: false,\n          source: args.source\n        });\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand18) {\n    function _class10() {\n      _classCallCheck(this, _class10);\n      return _callSuper(this, _class10, [{\n        id: 'scrollPageDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 12 /* KeyCode.PageDown */,\n          win: {\n            primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */\n          },\n          linux: {\n            primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */\n          }\n        }\n      }]);\n    }\n    _inherits(_class10, _CoreEditorCommand18);\n    return _createClass(_class10, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n          to: EditorScroll_.RawDirection.Down,\n          by: EditorScroll_.RawUnit.Page,\n          value: 1,\n          revealCursor: false,\n          select: false,\n          source: args.source\n        });\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollEditorBottom = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand19) {\n    function _class11() {\n      _classCallCheck(this, _class11);\n      return _callSuper(this, _class11, [{\n        id: 'scrollEditorBottom',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus\n        }\n      }]);\n    }\n    _inherits(_class11, _CoreEditorCommand19);\n    return _createClass(_class11, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n          to: EditorScroll_.RawDirection.Down,\n          by: EditorScroll_.RawUnit.Editor,\n          value: 1,\n          revealCursor: false,\n          select: false,\n          source: args.source\n        });\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollLeft = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand20) {\n    function _class12() {\n      _classCallCheck(this, _class12);\n      return _callSuper(this, _class12, [{\n        id: 'scrollLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus\n        }\n      }]);\n    }\n    _inherits(_class12, _CoreEditorCommand20);\n    return _createClass(_class12, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n          to: EditorScroll_.RawDirection.Left,\n          by: EditorScroll_.RawUnit.Column,\n          value: 2,\n          revealCursor: false,\n          select: false,\n          source: args.source\n        });\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollRight = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand21) {\n    function _class13() {\n      _classCallCheck(this, _class13);\n      return _callSuper(this, _class13, [{\n        id: 'scrollRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus\n        }\n      }]);\n    }\n    _inherits(_class13, _CoreEditorCommand21);\n    return _createClass(_class13, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n          to: EditorScroll_.RawDirection.Right,\n          by: EditorScroll_.RawUnit.Column,\n          value: 2,\n          revealCursor: false,\n          select: false,\n          source: args.source\n        });\n      }\n    }]);\n  }(CoreEditorCommand))());\n  var WordCommand = /*#__PURE__*/function (_CoreEditorCommand22) {\n    function WordCommand(opts) {\n      var _this12;\n      _classCallCheck(this, WordCommand);\n      _this12 = _callSuper(this, WordCommand, [opts]);\n      _this12._inSelectionMode = opts.inSelectionMode;\n      return _this12;\n    }\n    _inherits(WordCommand, _CoreEditorCommand22);\n    return _createClass(WordCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        if (!args.position) {\n          return;\n        }\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)]);\n        if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n          viewModel.revealAllCursors(args.source, true, true);\n        }\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n    inSelectionMode: false,\n    id: '_wordSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n    inSelectionMode: true,\n    id: '_wordSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand23) {\n    function _class14() {\n      _classCallCheck(this, _class14);\n      return _callSuper(this, _class14, [{\n        id: 'lastCursorWordSelect',\n        precondition: undefined\n      }]);\n    }\n    _inherits(_class14, _CoreEditorCommand23);\n    return _createClass(_class14, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        if (!args.position) {\n          return;\n        }\n        var lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n        var states = viewModel.getCursorStates();\n        var newStates = states.slice(0);\n        var lastAddedState = states[lastAddedCursorIndex];\n        newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n      }\n    }]);\n  }(CoreEditorCommand))());\n  var LineCommand = /*#__PURE__*/function (_CoreEditorCommand24) {\n    function LineCommand(opts) {\n      var _this13;\n      _classCallCheck(this, LineCommand);\n      _this13 = _callSuper(this, LineCommand, [opts]);\n      _this13._inSelectionMode = opts.inSelectionMode;\n      return _this13;\n    }\n    _inherits(LineCommand, _CoreEditorCommand24);\n    return _createClass(LineCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        if (!args.position) {\n          return;\n        }\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)]);\n        if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n          viewModel.revealAllCursors(args.source, false, true);\n        }\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n    inSelectionMode: false,\n    id: '_lineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n    inSelectionMode: true,\n    id: '_lineSelectDrag',\n    precondition: undefined\n  }));\n  var LastCursorLineCommand = /*#__PURE__*/function (_CoreEditorCommand25) {\n    function LastCursorLineCommand(opts) {\n      var _this14;\n      _classCallCheck(this, LastCursorLineCommand);\n      _this14 = _callSuper(this, LastCursorLineCommand, [opts]);\n      _this14._inSelectionMode = opts.inSelectionMode;\n      return _this14;\n    }\n    _inherits(LastCursorLineCommand, _CoreEditorCommand25);\n    return _createClass(LastCursorLineCommand, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        if (!args.position) {\n          return;\n        }\n        var lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n        var states = viewModel.getCursorStates();\n        var newStates = states.slice(0);\n        newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n      }\n    }]);\n  }(CoreEditorCommand);\n  CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: false,\n    id: 'lastCursorLineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: true,\n    id: 'lastCursorLineSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.CancelSelection = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand26) {\n    function _class15() {\n      _classCallCheck(this, _class15);\n      return _callSuper(this, _class15, [{\n        id: 'cancelSelection',\n        precondition: EditorContextKeys.hasNonEmptySelection,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9 /* KeyCode.Escape */,\n          secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n        }\n      }]);\n    }\n    _inherits(_class15, _CoreEditorCommand26);\n    return _createClass(_class15, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())]);\n        viewModel.revealAllCursors(args.source, true);\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand27) {\n    function _class16() {\n      _classCallCheck(this, _class16);\n      return _callSuper(this, _class16, [{\n        id: 'removeSecondaryCursors',\n        precondition: EditorContextKeys.hasMultipleSelections,\n        kbOpts: {\n          weight: CORE_WEIGHT + 1,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9 /* KeyCode.Escape */,\n          secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n        }\n      }]);\n    }\n    _inherits(_class16, _CoreEditorCommand27);\n    return _createClass(_class16, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [viewModel.getPrimaryCursorState()]);\n        viewModel.revealAllCursors(args.source, true);\n        status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.RevealLine = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand28) {\n    function _class17() {\n      _classCallCheck(this, _class17);\n      return _callSuper(this, _class17, [{\n        id: 'revealLine',\n        precondition: undefined,\n        metadata: RevealLine_.metadata\n      }]);\n    }\n    _inherits(_class17, _CoreEditorCommand28);\n    return _createClass(_class17, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        var revealLineArg = args;\n        var lineNumberArg = revealLineArg.lineNumber || 0;\n        var lineNumber = typeof lineNumberArg === 'number' ? lineNumberArg + 1 : parseInt(lineNumberArg) + 1;\n        if (lineNumber < 1) {\n          lineNumber = 1;\n        }\n        var lineCount = viewModel.model.getLineCount();\n        if (lineNumber > lineCount) {\n          lineNumber = lineCount;\n        }\n        var range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n        var revealAt = 0 /* VerticalRevealType.Simple */;\n        if (revealLineArg.at) {\n          switch (revealLineArg.at) {\n            case RevealLine_.RawAtArgument.Top:\n              revealAt = 3 /* VerticalRevealType.Top */;\n              break;\n            case RevealLine_.RawAtArgument.Center:\n              revealAt = 1 /* VerticalRevealType.Center */;\n              break;\n            case RevealLine_.RawAtArgument.Bottom:\n              revealAt = 4 /* VerticalRevealType.Bottom */;\n              break;\n            default:\n              break;\n          }\n        }\n        var viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n        viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* ScrollType.Smooth */);\n      }\n    }]);\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.SelectAll = new ( /*#__PURE__*/function (_EditorOrNativeTextIn) {\n    function _class18() {\n      _classCallCheck(this, _class18);\n      return _callSuper(this, _class18, [SelectAllCommand]);\n    }\n    _inherits(_class18, _EditorOrNativeTextIn);\n    return _createClass(_class18, [{\n      key: \"runDOMCommand\",\n      value: function runDOMCommand(activeElement) {\n        if (isFirefox) {\n          activeElement.focus();\n          activeElement.select();\n        }\n        activeElement.ownerDocument.execCommand('selectAll');\n      }\n    }, {\n      key: \"runEditorCommand\",\n      value: function runEditorCommand(accessor, editor, args) {\n        var viewModel = editor._getViewModel();\n        if (!viewModel) {\n          // the editor has no view => has no cursors\n          return;\n        }\n        this.runCoreEditorCommand(viewModel, args);\n      }\n    }, {\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates('keyboard', 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())]);\n      }\n    }]);\n  }(EditorOrNativeTextInputCommand))();\n  CoreNavigationCommands.SetSelection = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditorCommand29) {\n    function _class19() {\n      _classCallCheck(this, _class19);\n      return _callSuper(this, _class19, [{\n        id: 'setSelection',\n        precondition: undefined\n      }]);\n    }\n    _inherits(_class19, _CoreEditorCommand29);\n    return _createClass(_class19, [{\n      key: \"runCoreEditorCommand\",\n      value: function runCoreEditorCommand(viewModel, args) {\n        if (!args.selection) {\n          return;\n        }\n        viewModel.model.pushStackElement();\n        viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [CursorState.fromModelSelection(args.selection)]);\n      }\n    }]);\n  }(CoreEditorCommand))());\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nvar columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n  KeybindingsRegistry.registerKeybindingRule({\n    id: id,\n    primary: keybinding,\n    when: columnSelectionCondition,\n    weight: CORE_WEIGHT + 1\n  });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */);\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n  var CoreEditingCommand = /*#__PURE__*/function (_EditorCommand2) {\n    function CoreEditingCommand() {\n      _classCallCheck(this, CoreEditingCommand);\n      return _callSuper(this, CoreEditingCommand, arguments);\n    }\n    _inherits(CoreEditingCommand, _EditorCommand2);\n    return _createClass(CoreEditingCommand, [{\n      key: \"runEditorCommand\",\n      value: function runEditorCommand(accessor, editor, args) {\n        var viewModel = editor._getViewModel();\n        if (!viewModel) {\n          // the editor has no view => has no cursors\n          return;\n        }\n        this.runCoreEditingCommand(editor, viewModel, args || {});\n      }\n    }]);\n  }(EditorCommand);\n  CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n  CoreEditingCommands.LineBreakInsert = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditingCommand) {\n    function _class20() {\n      _classCallCheck(this, _class20);\n      return _callSuper(this, _class20, [{\n        id: 'lineBreakInsert',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 0,\n          mac: {\n            primary: 256 /* KeyMod.WinCtrl */ | 45 /* KeyCode.KeyO */\n          }\n        }\n      }]);\n    }\n    _inherits(_class20, _CoreEditingCommand);\n    return _createClass(_class20, [{\n      key: \"runCoreEditingCommand\",\n      value: function runCoreEditingCommand(editor, viewModel, args) {\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(function (s) {\n          return s.modelState.selection;\n        })));\n      }\n    }]);\n  }(CoreEditingCommand))());\n  CoreEditingCommands.Outdent = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditingCommand2) {\n    function _class21() {\n      _classCallCheck(this, _class21);\n      return _callSuper(this, _class21, [{\n        id: 'outdent',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n        }\n      }]);\n    }\n    _inherits(_class21, _CoreEditingCommand2);\n    return _createClass(_class21, [{\n      key: \"runCoreEditingCommand\",\n      value: function runCoreEditingCommand(editor, viewModel, args) {\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(function (s) {\n          return s.modelState.selection;\n        })));\n        editor.pushUndoStop();\n      }\n    }]);\n  }(CoreEditingCommand))());\n  CoreEditingCommands.Tab = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditingCommand3) {\n    function _class22() {\n      _classCallCheck(this, _class22);\n      return _callSuper(this, _class22, [{\n        id: 'tab',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 2 /* KeyCode.Tab */\n        }\n      }]);\n    }\n    _inherits(_class22, _CoreEditingCommand3);\n    return _createClass(_class22, [{\n      key: \"runCoreEditingCommand\",\n      value: function runCoreEditingCommand(editor, viewModel, args) {\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(function (s) {\n          return s.modelState.selection;\n        })));\n        editor.pushUndoStop();\n      }\n    }]);\n  }(CoreEditingCommand))());\n  CoreEditingCommands.DeleteLeft = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditingCommand4) {\n    function _class23() {\n      _classCallCheck(this, _class23);\n      return _callSuper(this, _class23, [{\n        id: 'deleteLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 1 /* KeyCode.Backspace */,\n          secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */],\n          mac: {\n            primary: 1 /* KeyCode.Backspace */,\n            secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */, 256 /* KeyMod.WinCtrl */ | 38 /* KeyCode.KeyH */, 256 /* KeyMod.WinCtrl */ | 1 /* KeyCode.Backspace */]\n          }\n        }\n      }]);\n    }\n    _inherits(_class23, _CoreEditingCommand4);\n    return _createClass(_class23, [{\n      key: \"runCoreEditingCommand\",\n      value: function runCoreEditingCommand(editor, viewModel, args) {\n        var _DeleteOperations$del = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(function (s) {\n            return s.modelState.selection;\n          }), viewModel.getCursorAutoClosedCharacters()),\n          _DeleteOperations$del2 = _slicedToArray(_DeleteOperations$del, 2),\n          shouldPushStackElementBefore = _DeleteOperations$del2[0],\n          commands = _DeleteOperations$del2[1];\n        if (shouldPushStackElementBefore) {\n          editor.pushUndoStop();\n        }\n        editor.executeCommands(this.id, commands);\n        viewModel.setPrevEditOperationType(2 /* EditOperationType.DeletingLeft */);\n      }\n    }]);\n  }(CoreEditingCommand))());\n  CoreEditingCommands.DeleteRight = registerEditorCommand(new ( /*#__PURE__*/function (_CoreEditingCommand5) {\n    function _class24() {\n      _classCallCheck(this, _class24);\n      return _callSuper(this, _class24, [{\n        id: 'deleteRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 20 /* KeyCode.Delete */,\n          mac: {\n            primary: 20 /* KeyCode.Delete */,\n            secondary: [256 /* KeyMod.WinCtrl */ | 34 /* KeyCode.KeyD */, 256 /* KeyMod.WinCtrl */ | 20 /* KeyCode.Delete */]\n          }\n        }\n      }]);\n    }\n    _inherits(_class24, _CoreEditingCommand5);\n    return _createClass(_class24, [{\n      key: \"runCoreEditingCommand\",\n      value: function runCoreEditingCommand(editor, viewModel, args) {\n        var _DeleteOperations$del3 = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(function (s) {\n            return s.modelState.selection;\n          })),\n          _DeleteOperations$del4 = _slicedToArray(_DeleteOperations$del3, 2),\n          shouldPushStackElementBefore = _DeleteOperations$del4[0],\n          commands = _DeleteOperations$del4[1];\n        if (shouldPushStackElementBefore) {\n          editor.pushUndoStop();\n        }\n        editor.executeCommands(this.id, commands);\n        viewModel.setPrevEditOperationType(3 /* EditOperationType.DeletingRight */);\n      }\n    }]);\n  }(CoreEditingCommand))());\n  CoreEditingCommands.Undo = new ( /*#__PURE__*/function (_EditorOrNativeTextIn2) {\n    function _class25() {\n      _classCallCheck(this, _class25);\n      return _callSuper(this, _class25, [UndoCommand]);\n    }\n    _inherits(_class25, _EditorOrNativeTextIn2);\n    return _createClass(_class25, [{\n      key: \"runDOMCommand\",\n      value: function runDOMCommand(activeElement) {\n        activeElement.ownerDocument.execCommand('undo');\n      }\n    }, {\n      key: \"runEditorCommand\",\n      value: function runEditorCommand(accessor, editor, args) {\n        if (!editor.hasModel() || editor.getOption(91 /* EditorOption.readOnly */) === true) {\n          return;\n        }\n        return editor.getModel().undo();\n      }\n    }]);\n  }(EditorOrNativeTextInputCommand))();\n  CoreEditingCommands.Redo = new ( /*#__PURE__*/function (_EditorOrNativeTextIn3) {\n    function _class26() {\n      _classCallCheck(this, _class26);\n      return _callSuper(this, _class26, [RedoCommand]);\n    }\n    _inherits(_class26, _EditorOrNativeTextIn3);\n    return _createClass(_class26, [{\n      key: \"runDOMCommand\",\n      value: function runDOMCommand(activeElement) {\n        activeElement.ownerDocument.execCommand('redo');\n      }\n    }, {\n      key: \"runEditorCommand\",\n      value: function runEditorCommand(accessor, editor, args) {\n        if (!editor.hasModel() || editor.getOption(91 /* EditorOption.readOnly */) === true) {\n          return;\n        }\n        return editor.getModel().redo();\n      }\n    }]);\n  }(EditorOrNativeTextInputCommand))();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\nvar EditorHandlerCommand = /*#__PURE__*/function (_Command) {\n  function EditorHandlerCommand(id, handlerId, metadata) {\n    var _this15;\n    _classCallCheck(this, EditorHandlerCommand);\n    _this15 = _callSuper(this, EditorHandlerCommand, [{\n      id: id,\n      precondition: undefined,\n      metadata: metadata\n    }]);\n    _this15._handlerId = handlerId;\n    return _this15;\n  }\n  _inherits(EditorHandlerCommand, _Command);\n  return _createClass(EditorHandlerCommand, [{\n    key: \"runCommand\",\n    value: function runCommand(accessor, args) {\n      var editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n      if (!editor) {\n        return;\n      }\n      editor.trigger('keyboard', this._handlerId, args);\n    }\n  }]);\n}(Command);\nfunction registerOverwritableCommand(handlerId, metadata) {\n  registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n  registerCommand(new EditorHandlerCommand(handlerId, handlerId, metadata));\n}\nregisterOverwritableCommand(\"type\" /* Handler.Type */, {\n  description: \"Type\",\n  args: [{\n    name: 'args',\n    schema: {\n      'type': 'object',\n      'required': ['text'],\n      'properties': {\n        'text': {\n          'type': 'string'\n        }\n      }\n    }\n  }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* Handler.ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionType\" /* Handler.CompositionType */);\nregisterOverwritableCommand(\"compositionStart\" /* Handler.CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* Handler.CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Handler.Paste */);\nregisterOverwritableCommand(\"cut\" /* Handler.Cut */);","map":{"version":3,"names":["nls","isFirefox","types","status","Command","EditorCommand","registerEditorCommand","UndoCommand","RedoCommand","SelectAllCommand","ICodeEditorService","ColumnSelection","CursorState","DeleteOperations","CursorMove","CursorMove_","CursorMoveCommands","TypeOperations","Position","Range","EditorContextKeys","ContextKeyExpr","KeybindingsRegistry","getActiveElement","CORE_WEIGHT","CoreEditorCommand","_EditorCommand","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","runEditorCommand","accessor","editor","args","viewModel","_getViewModel","runCoreEditorCommand","EditorScroll_","isEditorScrollArgs","arg","isObject","scrollArg","isString","to","isUndefined","by","isNumber","revealCursor","isBoolean","metadata","description","name","constraint","schema","RawDirection","Up","Right","Down","Left","RawUnit","Line","WrappedLine","Page","HalfPage","Editor","Column","parse","direction","unit","Math","floor","select","RevealLine_","isRevealLineArgs","reveaLineArg","lineNumber","at","RawAtArgument","Top","Center","Bottom","EditorOrNativeTextInputCommand","target","_this","addImplementation","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","_runEditorCommand","activeElement","indexOf","tagName","toLowerCase","runDOMCommand","activeEditor","getActiveCodeEditor","focus","result","CoreNavigationCommands","BaseMoveToCommand","_CoreEditorCommand","opts","_this2","_inSelectionMode","inSelectionMode","position","model","pushStackElement","cursorStateChanged","setCursorStates","source","moveTo","getPrimaryCursorState","viewPosition","revealType","revealAllCursors","MoveTo","id","precondition","undefined","MoveToSelect","ColumnSelectCommand","_CoreEditorCommand2","_getColumnSelectResult","getCursorColumnSelectData","viewStates","map","viewState","fromViewState","setCursorColumnSelectData","isReal","fromViewLineNumber","fromLineNumber","fromViewVisualColumn","fromVisualColumn","toViewLineNumber","toLineNumber","toViewVisualColumn","toVisualColumn","reversed","revealTopMostCursor","revealBottomMostCursor","ColumnSelect","_ColumnSelectCommand","_class","primary","prevColumnSelectData","mouseColumn","validatedPosition","validatePosition","validatedViewPosition","coordinatesConverter","validateViewPosition","column","doColumnSelect","columnSelect","cursorConfig","CursorColumnSelectLeft","_ColumnSelectCommand2","_class2","kbOpts","weight","kbExpr","textInputFocus","linux","columnSelectLeft","CursorColumnSelectRight","_ColumnSelectCommand3","_class3","columnSelectRight","ColumnSelectUpCommand","_ColumnSelectCommand4","_this3","_isPaged","isPaged","columnSelectUp","CursorColumnSelectUp","CursorColumnSelectPageUp","ColumnSelectDownCommand","_ColumnSelectCommand5","_this4","columnSelectDown","CursorColumnSelectDown","CursorColumnSelectPageDown","CursorMoveImpl","_CoreEditorCommand3","parsed","_runCursorMove","_move","getCursorStates","cursors","simpleMove","viewportMove","CursorMoveBasedCommand","_CoreEditorCommand4","_this5","_staticArgs","dynamicArgs","pageSize","CursorLeft","mac","secondary","CursorLeftSelect","CursorRight","CursorRightSelect","CursorUp","CursorUpSelect","CursorPageUp","CursorPageUpSelect","CursorDown","CursorDownSelect","CursorPageDown","CursorPageDownSelect","CreateCursor","_CoreEditorCommand5","_class4","newState","wholeLine","line","states","length","newModelPosition","modelState","newViewPosition","i","len","state","selection","containsPosition","splice","push","LastCursorMoveToSelect","_CoreEditorCommand6","_class5","lastAddedCursorIndex","getLastAddedCursorIndex","newStates","slice","HomeCommand","_CoreEditorCommand7","_this6","moveToBeginningOfLine","CursorHome","CursorHomeSelect","LineStartCommand","_CoreEditorCommand8","_this7","_exec","cursor","fromModelState","move","CursorLineStart","CursorLineStartSelect","EndCommand","_CoreEditorCommand9","_this8","moveToEndOfLine","sticky","CursorEnd","type","properties","localize","CursorEndSelect","LineEndCommand","_CoreEditorCommand10","_this9","maxColumn","getLineMaxColumn","CursorLineEnd","CursorLineEndSelect","TopCommand","_CoreEditorCommand11","_this10","moveToBeginningOfBuffer","CursorTop","CursorTopSelect","BottomCommand","_CoreEditorCommand12","_this11","moveToEndOfBuffer","CursorBottom","CursorBottomSelect","EditorScrollImpl","_CoreEditorCommand13","determineScrollMethod","horizontalUnits","verticalUnits","horizontalDirections","verticalDirections","includes","_runHorizontalEditorScroll","bind","_runVerticalEditorScroll","runEditorScroll","desiredScrollTop","_computeDesiredScrollTop","desiredVisibleViewRange","getCompletelyVisibleViewRangeAtScrollTop","findPositionInViewportIfOutside","viewLayout","setScrollPosition","scrollTop","futureViewport","getFutureViewport","visibleViewRange","top","visibleModelRange","convertViewRangeToModelRange","desiredTopModelLineNumber","max","startLineNumber","min","getLineCount","convertModelPositionToViewPosition","getVerticalOffsetForLineNumber","noOfLines","round","deltaLines","getCurrentScrollTop","lineHeight","desiredScrollLeft","_computeDesiredScrollLeft","scrollLeft","deltaColumns","getCurrentScrollLeft","typicalHalfwidthCharacterWidth","EditorScroll","ScrollLineUp","_CoreEditorCommand14","_class6","ScrollPageUp","_CoreEditorCommand15","_class7","win","ScrollEditorTop","_CoreEditorCommand16","_class8","ScrollLineDown","_CoreEditorCommand17","_class9","ScrollPageDown","_CoreEditorCommand18","_class10","ScrollEditorBottom","_CoreEditorCommand19","_class11","ScrollLeft","_CoreEditorCommand20","_class12","ScrollRight","_CoreEditorCommand21","_class13","WordCommand","_CoreEditorCommand22","_this12","word","WordSelect","WordSelectDrag","LastCursorWordSelect","_CoreEditorCommand23","_class14","lastAddedState","hasSelection","LineCommand","_CoreEditorCommand24","_this13","LineSelect","LineSelectDrag","LastCursorLineCommand","_CoreEditorCommand25","_this14","LastCursorLineSelect","LastCursorLineSelectDrag","CancelSelection","_CoreEditorCommand26","_class15","hasNonEmptySelection","cancelSelection","RemoveSecondaryCursors","_CoreEditorCommand27","_class16","hasMultipleSelections","RevealLine","_CoreEditorCommand28","_class17","revealLineArg","lineNumberArg","parseInt","lineCount","range","revealAt","viewRange","convertModelRangeToViewRange","revealRange","SelectAll","_EditorOrNativeTextIn","_class18","ownerDocument","execCommand","selectAll","SetSelection","_CoreEditorCommand29","_class19","fromModelSelection","columnSelectionCondition","and","columnSelection","registerColumnSelection","keybinding","registerKeybindingRule","when","registerCommand","command","register","CoreEditingCommands","CoreEditingCommand","_EditorCommand2","runCoreEditingCommand","LineBreakInsert","_CoreEditingCommand","_class20","writable","pushUndoStop","executeCommands","lineBreakInsert","s","Outdent","_CoreEditingCommand2","_class21","editorTextFocus","tabDoesNotMoveFocus","outdent","Tab","_CoreEditingCommand3","_class22","tab","DeleteLeft","_CoreEditingCommand4","_class23","_DeleteOperations$del","deleteLeft","getPrevEditOperationType","getCursorAutoClosedCharacters","_DeleteOperations$del2","_slicedToArray","shouldPushStackElementBefore","commands","setPrevEditOperationType","DeleteRight","_CoreEditingCommand5","_class24","_DeleteOperations$del3","deleteRight","_DeleteOperations$del4","Undo","_EditorOrNativeTextIn2","_class25","hasModel","getOption","getModel","undo","Redo","_EditorOrNativeTextIn3","_class26","redo","EditorHandlerCommand","_Command","handlerId","_this15","_handlerId","runCommand","trigger","registerOverwritableCommand"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/browser/coreCommands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { isFirefox } from '../../base/browser/browser.js';\nimport * as types from '../../base/common/types.js';\nimport { status } from '../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from './editorExtensions.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { ColumnSelection } from '../common/cursor/cursorColumnSelection.js';\nimport { CursorState } from '../common/cursorCommon.js';\nimport { DeleteOperations } from '../common/cursor/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../common/cursor/cursorMoveCommands.js';\nimport { TypeOperations } from '../common/cursor/cursorTypeOperations.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { EditorContextKeys } from '../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { getActiveElement } from '../../base/browser/dom.js';\nconst CORE_WEIGHT = 0 /* KeybindingWeight.EditorCore */;\nexport class CoreEditorCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            // the editor has no view => has no cursors\n            return;\n        }\n        this.runCoreEditorCommand(viewModel, args || {});\n    }\n}\nexport var EditorScroll_;\n(function (EditorScroll_) {\n    const isEditorScrollArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const scrollArg = arg;\n        if (!types.isString(scrollArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n            return false;\n        }\n        return true;\n    };\n    EditorScroll_.metadata = {\n        description: 'Scroll editor in the given direction',\n        args: [\n            {\n                name: 'Editor scroll argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n                constraint: isEditorScrollArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['up', 'down']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage', 'editor']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'revealCursor': {\n                            'type': 'boolean',\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Directions in the view for editor scroll command.\n     */\n    EditorScroll_.RawDirection = {\n        Up: 'up',\n        Right: 'right',\n        Down: 'down',\n        Left: 'left'\n    };\n    /**\n     * Units for editor scroll 'by' argument\n     */\n    EditorScroll_.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Page: 'page',\n        HalfPage: 'halfPage',\n        Editor: 'editor',\n        Column: 'column'\n    };\n    function parse(args) {\n        let direction;\n        switch (args.to) {\n            case EditorScroll_.RawDirection.Up:\n                direction = 1 /* Direction.Up */;\n                break;\n            case EditorScroll_.RawDirection.Right:\n                direction = 2 /* Direction.Right */;\n                break;\n            case EditorScroll_.RawDirection.Down:\n                direction = 3 /* Direction.Down */;\n                break;\n            case EditorScroll_.RawDirection.Left:\n                direction = 4 /* Direction.Left */;\n                break;\n            default:\n                // Illegal arguments\n                return null;\n        }\n        let unit;\n        switch (args.by) {\n            case EditorScroll_.RawUnit.Line:\n                unit = 1 /* Unit.Line */;\n                break;\n            case EditorScroll_.RawUnit.WrappedLine:\n                unit = 2 /* Unit.WrappedLine */;\n                break;\n            case EditorScroll_.RawUnit.Page:\n                unit = 3 /* Unit.Page */;\n                break;\n            case EditorScroll_.RawUnit.HalfPage:\n                unit = 4 /* Unit.HalfPage */;\n                break;\n            case EditorScroll_.RawUnit.Editor:\n                unit = 5 /* Unit.Editor */;\n                break;\n            case EditorScroll_.RawUnit.Column:\n                unit = 6 /* Unit.Column */;\n                break;\n            default:\n                unit = 2 /* Unit.WrappedLine */;\n        }\n        const value = Math.floor(args.value || 1);\n        const revealCursor = !!args.revealCursor;\n        return {\n            direction: direction,\n            unit: unit,\n            value: value,\n            revealCursor: revealCursor,\n            select: (!!args.select)\n        };\n    }\n    EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n    const isRevealLineArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const reveaLineArg = arg;\n        if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n            return false;\n        }\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n            return false;\n        }\n        return true;\n    };\n    RevealLine_.metadata = {\n        description: 'Reveal the given line at the given logical position',\n        args: [\n            {\n                name: 'Reveal line argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n                constraint: isRevealLineArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['lineNumber'],\n                    'properties': {\n                        'lineNumber': {\n                            'type': ['number', 'string'],\n                        },\n                        'at': {\n                            'type': 'string',\n                            'enum': ['top', 'center', 'bottom']\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Values for reveal line 'at' argument\n     */\n    RevealLine_.RawAtArgument = {\n        Top: 'top',\n        Center: 'center',\n        Bottom: 'bottom'\n    };\n})(RevealLine_ || (RevealLine_ = {}));\nclass EditorOrNativeTextInputCommand {\n    constructor(target) {\n        // 1. handle case when focus is in editor.\n        target.addImplementation(10000, 'code-editor', (accessor, args) => {\n            // Only if editor text focus (i.e. not if editor has widget focus).\n            const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\n                return this._runEditorCommand(accessor, focusedEditor, args);\n            }\n            return false;\n        });\n        // 2. handle case when focus is in some other `input` / `textarea`.\n        target.addImplementation(1000, 'generic-dom-input-textarea', (accessor, args) => {\n            // Only if focused on an element that allows for entering text\n            const activeElement = getActiveElement();\n            if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n                this.runDOMCommand(activeElement);\n                return true;\n            }\n            return false;\n        });\n        // 3. (default) handle case when focus is somewhere else.\n        target.addImplementation(0, 'generic-dom', (accessor, args) => {\n            // Redirecting to active editor\n            const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n            if (activeEditor) {\n                activeEditor.focus();\n                return this._runEditorCommand(accessor, activeEditor, args);\n            }\n            return false;\n        });\n    }\n    _runEditorCommand(accessor, editor, args) {\n        const result = this.runEditorCommand(accessor, editor, args);\n        if (result) {\n            return result;\n        }\n        return true;\n    }\n}\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n    class BaseMoveToCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            const cursorStateChanged = viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (cursorStateChanged && args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealAllCursors(args.source, true, true);\n            }\n        }\n    }\n    CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveTo',\n        inSelectionMode: false,\n        precondition: undefined\n    }));\n    CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveToSelect',\n        inSelectionMode: true,\n        precondition: undefined\n    }));\n    class ColumnSelectCommand extends CoreEditorCommand {\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n            if (result === null) {\n                // invalid arguments\n                return;\n            }\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\n            viewModel.setCursorColumnSelectData({\n                isReal: true,\n                fromViewLineNumber: result.fromLineNumber,\n                fromViewVisualColumn: result.fromVisualColumn,\n                toViewLineNumber: result.toLineNumber,\n                toViewVisualColumn: result.toVisualColumn\n            });\n            if (result.reversed) {\n                viewModel.revealTopMostCursor(args.source);\n            }\n            else {\n                viewModel.revealBottomMostCursor(args.source);\n            }\n        }\n    }\n    CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'columnSelect',\n                precondition: undefined\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            if (typeof args.position === 'undefined' || typeof args.viewPosition === 'undefined' || typeof args.mouseColumn === 'undefined') {\n                return null;\n            }\n            // validate `args`\n            const validatedPosition = viewModel.model.validatePosition(args.position);\n            const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n            const fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n            const fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n            return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    class ColumnSelectUpCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */,\n            linux: { primary: 0 }\n        }\n    }));\n    class ColumnSelectDownCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */,\n            linux: { primary: 0 }\n        }\n    }));\n    class CursorMoveImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cursorMove',\n                precondition: undefined,\n                metadata: CursorMove_.metadata\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = CursorMove_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runCursorMove(viewModel, args.source, parsed);\n        }\n        _runCursorMove(viewModel, source, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n            viewModel.revealAllCursors(source, true);\n        }\n        static _move(viewModel, cursors, args) {\n            const inSelectionMode = args.select;\n            const value = args.value;\n            switch (args.direction) {\n                case 0 /* CursorMove_.Direction.Left */:\n                case 1 /* CursorMove_.Direction.Right */:\n                case 2 /* CursorMove_.Direction.Up */:\n                case 3 /* CursorMove_.Direction.Down */:\n                case 4 /* CursorMove_.Direction.PrevBlankLine */:\n                case 5 /* CursorMove_.Direction.NextBlankLine */:\n                case 6 /* CursorMove_.Direction.WrappedLineStart */:\n                case 7 /* CursorMove_.Direction.WrappedLineFirstNonWhitespaceCharacter */:\n                case 8 /* CursorMove_.Direction.WrappedLineColumnCenter */:\n                case 9 /* CursorMove_.Direction.WrappedLineEnd */:\n                case 10 /* CursorMove_.Direction.WrappedLineLastNonWhitespaceCharacter */:\n                    return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n                case 11 /* CursorMove_.Direction.ViewPortTop */:\n                case 13 /* CursorMove_.Direction.ViewPortBottom */:\n                case 12 /* CursorMove_.Direction.ViewPortCenter */:\n                case 14 /* CursorMove_.Direction.ViewPortIfOutside */:\n                    return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n                default:\n                    return null;\n            }\n        }\n    }\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n    CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n    class CursorMoveBasedCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._staticArgs = opts.args;\n        }\n        runCoreEditorCommand(viewModel, dynamicArgs) {\n            let args = this._staticArgs;\n            if (this._staticArgs.value === -1 /* Constants.PAGE_SIZE_MARKER */) {\n                // -1 is a marker for page size\n                args = {\n                    direction: this._staticArgs.direction,\n                    unit: this._staticArgs.unit,\n                    select: this._staticArgs.select,\n                    value: dynamicArgs.pageSize || viewModel.cursorConfig.pageSize\n                };\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(dynamicArgs.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n            viewModel.revealAllCursors(dynamicArgs.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorLeft',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 15 /* KeyCode.LeftArrow */,\n            mac: { primary: 15 /* KeyCode.LeftArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 32 /* KeyCode.KeyB */] }\n        }\n    }));\n    CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorLeftSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorRight',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 17 /* KeyCode.RightArrow */,\n            mac: { primary: 17 /* KeyCode.RightArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 36 /* KeyCode.KeyF */] }\n        }\n    }));\n    CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorRightSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 16 /* KeyCode.UpArrow */,\n            mac: { primary: 16 /* KeyCode.UpArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 46 /* KeyCode.KeyP */] }\n        }\n    }));\n    CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 18 /* KeyCode.DownArrow */,\n            mac: { primary: 18 /* KeyCode.DownArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 44 /* KeyCode.KeyN */] }\n        }\n    }));\n    CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'createCursor',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            let newState;\n            if (args.wholeLine) {\n                newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            else {\n                newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            const states = viewModel.getCursorStates();\n            // Check if we should remove a cursor (sort of like a toggle)\n            if (states.length > 1) {\n                const newModelPosition = (newState.modelState ? newState.modelState.position : null);\n                const newViewPosition = (newState.viewState ? newState.viewState.position : null);\n                for (let i = 0, len = states.length; i < len; i++) {\n                    const state = states[i];\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n                        continue;\n                    }\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n                        continue;\n                    }\n                    // => Remove the cursor\n                    states.splice(i, 1);\n                    viewModel.model.pushStackElement();\n                    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n                    return;\n                }\n            }\n            // => Add the new cursor\n            states.push(newState);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n        }\n    });\n    CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: '_lastCursorMoveToSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class HomeCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealAllCursors(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n        inSelectionMode: false,\n        id: 'cursorHome',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 14 /* KeyCode.Home */,\n            mac: { primary: 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n        inSelectionMode: true,\n        id: 'cursorHomeSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    class LineStartCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel.getCursorStates()));\n            viewModel.revealAllCursors(args.source, true);\n        }\n        _exec(cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: false,\n        id: 'cursorLineStart',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: true,\n        id: 'cursorLineStartSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    class EndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n            viewModel.revealAllCursors(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n        inSelectionMode: false,\n        id: 'cursorEnd',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 13 /* KeyCode.End */,\n            mac: { primary: 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */] }\n        },\n        metadata: {\n            description: `Go to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n        inSelectionMode: true,\n        id: 'cursorEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */] }\n        },\n        metadata: {\n            description: `Select to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    class LineEndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n            viewModel.revealAllCursors(args.source, true);\n        }\n        _exec(viewModel, cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: false,\n        id: 'cursorLineEnd',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: true,\n        id: 'cursorLineEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    class TopCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealAllCursors(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n        inSelectionMode: false,\n        id: 'cursorTop',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n        inSelectionMode: true,\n        id: 'cursorTopSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    class BottomCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealAllCursors(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n        inSelectionMode: false,\n        id: 'cursorBottom',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n        inSelectionMode: true,\n        id: 'cursorBottomSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    class EditorScrollImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'editorScroll',\n                precondition: undefined,\n                metadata: EditorScroll_.metadata\n            });\n        }\n        determineScrollMethod(args) {\n            const horizontalUnits = [6 /* EditorScroll_.Unit.Column */];\n            const verticalUnits = [\n                1 /* EditorScroll_.Unit.Line */,\n                2 /* EditorScroll_.Unit.WrappedLine */,\n                3 /* EditorScroll_.Unit.Page */,\n                4 /* EditorScroll_.Unit.HalfPage */,\n                5 /* EditorScroll_.Unit.Editor */,\n                6 /* EditorScroll_.Unit.Column */\n            ];\n            const horizontalDirections = [4 /* EditorScroll_.Direction.Left */, 2 /* EditorScroll_.Direction.Right */];\n            const verticalDirections = [1 /* EditorScroll_.Direction.Up */, 3 /* EditorScroll_.Direction.Down */];\n            if (horizontalUnits.includes(args.unit) && horizontalDirections.includes(args.direction)) {\n                return this._runHorizontalEditorScroll.bind(this);\n            }\n            if (verticalUnits.includes(args.unit) && verticalDirections.includes(args.direction)) {\n                return this._runVerticalEditorScroll.bind(this);\n            }\n            return null;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = EditorScroll_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            const runEditorScroll = this.determineScrollMethod(parsed);\n            if (!runEditorScroll) {\n                // Incompatible unit and direction\n                return;\n            }\n            runEditorScroll(viewModel, args.source, parsed);\n        }\n        _runVerticalEditorScroll(viewModel, source, args) {\n            const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n            if (args.revealCursor) {\n                // must ensure cursor is in new visible range\n                const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n                viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, [\n                    CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\n                ]);\n            }\n            viewModel.viewLayout.setScrollPosition({ scrollTop: desiredScrollTop }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollTop(viewModel, args) {\n            if (args.unit === 1 /* EditorScroll_.Unit.Line */) {\n                // scrolling by model lines\n                const futureViewport = viewModel.viewLayout.getFutureViewport();\n                const visibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(futureViewport.top);\n                const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n                let desiredTopModelLineNumber;\n                if (args.direction === 1 /* EditorScroll_.Direction.Up */) {\n                    // must go x model lines up\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n                }\n                else {\n                    // must go x model lines down\n                    desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n                }\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            }\n            if (args.unit === 5 /* EditorScroll_.Unit.Editor */) {\n                let desiredTopModelLineNumber = 0;\n                if (args.direction === 3 /* EditorScroll_.Direction.Down */) {\n                    desiredTopModelLineNumber = viewModel.model.getLineCount() - viewModel.cursorConfig.pageSize;\n                }\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(desiredTopModelLineNumber);\n            }\n            let noOfLines;\n            if (args.unit === 3 /* EditorScroll_.Unit.Page */) {\n                noOfLines = viewModel.cursorConfig.pageSize * args.value;\n            }\n            else if (args.unit === 4 /* EditorScroll_.Unit.HalfPage */) {\n                noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n            }\n            else {\n                noOfLines = args.value;\n            }\n            const deltaLines = (args.direction === 1 /* EditorScroll_.Direction.Up */ ? -1 : 1) * noOfLines;\n            return viewModel.viewLayout.getCurrentScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n        }\n        _runHorizontalEditorScroll(viewModel, source, args) {\n            const desiredScrollLeft = this._computeDesiredScrollLeft(viewModel, args);\n            viewModel.viewLayout.setScrollPosition({ scrollLeft: desiredScrollLeft }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollLeft(viewModel, args) {\n            const deltaColumns = (args.direction === 4 /* EditorScroll_.Direction.Left */ ? -1 : 1) * args.value;\n            return viewModel.viewLayout.getCurrentScrollLeft() + deltaColumns * viewModel.cursorConfig.typicalHalfwidthCharacterWidth;\n        }\n    }\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n    CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n    CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 11 /* KeyCode.PageUp */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorTop = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorTop',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.Editor,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 12 /* KeyCode.PageDown */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorBottom = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorBottom',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.Editor,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLeft = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Left,\n                by: EditorScroll_.RawUnit.Column,\n                value: 2,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollRight = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Right,\n                by: EditorScroll_.RawUnit.Column,\n                value: 2,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    class WordCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\n            ]);\n            if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealAllCursors(args.source, true, true);\n            }\n        }\n    }\n    CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n        inSelectionMode: false,\n        id: '_wordSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n        inSelectionMode: true,\n        id: '_wordSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'lastCursorWordSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            const lastAddedState = states[lastAddedCursorIndex];\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class LineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealAllCursors(args.source, false, true);\n            }\n        }\n    }\n    CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n        inSelectionMode: false,\n        id: '_lineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n        inSelectionMode: true,\n        id: '_lineSelectDrag',\n        precondition: undefined\n    }));\n    class LastCursorLineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    }\n    CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: false,\n        id: 'lastCursorLineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: true,\n        id: 'lastCursorLineSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cancelSelection',\n                precondition: EditorContextKeys.hasNonEmptySelection,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n            viewModel.revealAllCursors(args.source, true);\n        }\n    });\n    CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'removeSecondaryCursors',\n                precondition: EditorContextKeys.hasMultipleSelections,\n                kbOpts: {\n                    weight: CORE_WEIGHT + 1,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                viewModel.getPrimaryCursorState()\n            ]);\n            viewModel.revealAllCursors(args.source, true);\n            status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n        }\n    });\n    CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'revealLine',\n                precondition: undefined,\n                metadata: RevealLine_.metadata\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const revealLineArg = args;\n            const lineNumberArg = revealLineArg.lineNumber || 0;\n            let lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\n            if (lineNumber < 1) {\n                lineNumber = 1;\n            }\n            const lineCount = viewModel.model.getLineCount();\n            if (lineNumber > lineCount) {\n                lineNumber = lineCount;\n            }\n            const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n            let revealAt = 0 /* VerticalRevealType.Simple */;\n            if (revealLineArg.at) {\n                switch (revealLineArg.at) {\n                    case RevealLine_.RawAtArgument.Top:\n                        revealAt = 3 /* VerticalRevealType.Top */;\n                        break;\n                    case RevealLine_.RawAtArgument.Center:\n                        revealAt = 1 /* VerticalRevealType.Center */;\n                        break;\n                    case RevealLine_.RawAtArgument.Bottom:\n                        revealAt = 4 /* VerticalRevealType.Bottom */;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n            viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* ScrollType.Smooth */);\n        }\n    });\n    CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(SelectAllCommand);\n        }\n        runDOMCommand(activeElement) {\n            if (isFirefox) {\n                activeElement.focus();\n                activeElement.select();\n            }\n            activeElement.ownerDocument.execCommand('selectAll');\n        }\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditorCommand(viewModel, args);\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates('keyboard', 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n        }\n    }();\n    CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'setSelection',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.selection) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorState.fromModelSelection(args.selection)\n            ]);\n        }\n    });\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n    KeybindingsRegistry.registerKeybindingRule({\n        id: id,\n        primary: keybinding,\n        when: columnSelectionCondition,\n        weight: CORE_WEIGHT + 1\n    });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */);\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n    class CoreEditingCommand extends EditorCommand {\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditingCommand(editor, viewModel, args || {});\n        }\n    }\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n    CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'lineBreakInsert',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 45 /* KeyCode.KeyO */ }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n        }\n    });\n    CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'outdent',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'tab',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 1 /* KeyCode.Backspace */,\n                    secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */],\n                    mac: { primary: 1 /* KeyCode.Backspace */, secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */, 256 /* KeyMod.WinCtrl */ | 38 /* KeyCode.KeyH */, 256 /* KeyMod.WinCtrl */ | 1 /* KeyCode.Backspace */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(2 /* EditOperationType.DeletingLeft */);\n        }\n    });\n    CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 20 /* KeyCode.Delete */,\n                    mac: { primary: 20 /* KeyCode.Delete */, secondary: [256 /* KeyMod.WinCtrl */ | 34 /* KeyCode.KeyD */, 256 /* KeyMod.WinCtrl */ | 20 /* KeyCode.Delete */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(3 /* EditOperationType.DeletingRight */);\n        }\n    });\n    CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(UndoCommand);\n        }\n        runDOMCommand(activeElement) {\n            activeElement.ownerDocument.execCommand('undo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(91 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().undo();\n        }\n    }();\n    CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(RedoCommand);\n        }\n        runDOMCommand(activeElement) {\n            activeElement.ownerDocument.execCommand('redo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(91 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().redo();\n        }\n    }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n    constructor(id, handlerId, metadata) {\n        super({\n            id: id,\n            precondition: undefined,\n            metadata\n        });\n        this._handlerId = handlerId;\n    }\n    runCommand(accessor, args) {\n        const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (!editor) {\n            return;\n        }\n        editor.trigger('keyboard', this._handlerId, args);\n    }\n}\nfunction registerOverwritableCommand(handlerId, metadata) {\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, metadata));\n}\nregisterOverwritableCommand(\"type\" /* Handler.Type */, {\n    description: `Type`,\n    args: [{\n            name: 'args',\n            schema: {\n                'type': 'object',\n                'required': ['text'],\n                'properties': {\n                    'text': {\n                        'type': 'string'\n                    }\n                },\n            }\n        }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* Handler.ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionType\" /* Handler.CompositionType */);\nregisterOverwritableCommand(\"compositionStart\" /* Handler.CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* Handler.CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Handler.Paste */);\nregisterOverwritableCommand(\"cut\" /* Handler.Cut */);\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,GAAG,MAAM,cAAc;AACnC,SAASC,SAAS,QAAQ,+BAA+B;AACzD,OAAO,KAAKC,KAAK,MAAM,4BAA4B;AACnD,SAASC,MAAM,QAAQ,oCAAoC;AAC3D,SAASC,OAAO,EAAEC,aAAa,EAAEC,qBAAqB,EAAEC,WAAW,EAAEC,WAAW,EAAEC,gBAAgB,QAAQ,uBAAuB;AACjI,SAASC,kBAAkB,QAAQ,iCAAiC;AACpE,SAASC,eAAe,QAAQ,2CAA2C;AAC3E,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,gBAAgB,QAAQ,4CAA4C;AAC7E,SAASC,UAAU,IAAIC,WAAW,EAAEC,kBAAkB,QAAQ,wCAAwC;AACtG,SAASC,cAAc,QAAQ,0CAA0C;AACzE,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,KAAK,QAAQ,yBAAyB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,cAAc,QAAQ,gDAAgD;AAC/E,SAASC,mBAAmB,QAAQ,yDAAyD;AAC7F,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,IAAMC,WAAW,GAAG,CAAC,CAAC;AACtB,WAAaC,iBAAiB,0BAAAC,cAAA;EAAA,SAAAD,kBAAA;IAAAE,eAAA,OAAAF,iBAAA;IAAA,OAAAG,UAAA,OAAAH,iBAAA,EAAAI,SAAA;EAAA;EAAAC,SAAA,CAAAL,iBAAA,EAAAC,cAAA;EAAA,OAAAK,YAAA,CAAAN,iBAAA;IAAAO,GAAA;IAAAC,KAAA,EAC1B,SAAAC,iBAAiBC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAE;MACrC,IAAMC,SAAS,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC;MACxC,IAAI,CAACD,SAAS,EAAE;QACZ;QACA;MACJ;MACA,IAAI,CAACE,oBAAoB,CAACF,SAAS,EAAED,IAAI,IAAI,CAAC,CAAC,CAAC;IACpD;EAAC;AAAA,EARkChC,aAAa;AAUpD,OAAO,IAAIoC,aAAa;AACxB,CAAC,UAAUA,aAAa,EAAE;EACtB,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAaC,GAAG,EAAE;IACtC,IAAI,CAACzC,KAAK,CAAC0C,QAAQ,CAACD,GAAG,CAAC,EAAE;MACtB,OAAO,KAAK;IAChB;IACA,IAAME,SAAS,GAAGF,GAAG;IACrB,IAAI,CAACzC,KAAK,CAAC4C,QAAQ,CAACD,SAAS,CAACE,EAAE,CAAC,EAAE;MAC/B,OAAO,KAAK;IAChB;IACA,IAAI,CAAC7C,KAAK,CAAC8C,WAAW,CAACH,SAAS,CAACI,EAAE,CAAC,IAAI,CAAC/C,KAAK,CAAC4C,QAAQ,CAACD,SAAS,CAACI,EAAE,CAAC,EAAE;MACnE,OAAO,KAAK;IAChB;IACA,IAAI,CAAC/C,KAAK,CAAC8C,WAAW,CAACH,SAAS,CAACZ,KAAK,CAAC,IAAI,CAAC/B,KAAK,CAACgD,QAAQ,CAACL,SAAS,CAACZ,KAAK,CAAC,EAAE;MACzE,OAAO,KAAK;IAChB;IACA,IAAI,CAAC/B,KAAK,CAAC8C,WAAW,CAACH,SAAS,CAACM,YAAY,CAAC,IAAI,CAACjD,KAAK,CAACkD,SAAS,CAACP,SAAS,CAACM,YAAY,CAAC,EAAE;MACxF,OAAO,KAAK;IAChB;IACA,OAAO,IAAI;EACf,CAAC;EACDV,aAAa,CAACY,QAAQ,GAAG;IACrBC,WAAW,EAAE,sCAAsC;IACnDjB,IAAI,EAAE,CACF;MACIkB,IAAI,EAAE,+BAA+B;MACrCD,WAAW,0fAWtB;MACWE,UAAU,EAAEd,kBAAkB;MAC9Be,MAAM,EAAE;QACJ,MAAM,EAAE,QAAQ;QAChB,UAAU,EAAE,CAAC,IAAI,CAAC;QAClB,YAAY,EAAE;UACV,IAAI,EAAE;YACF,MAAM,EAAE,QAAQ;YAChB,MAAM,EAAE,CAAC,IAAI,EAAE,MAAM;UACzB,CAAC;UACD,IAAI,EAAE;YACF,MAAM,EAAE,QAAQ;YAChB,MAAM,EAAE,CAAC,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ;UAChE,CAAC;UACD,OAAO,EAAE;YACL,MAAM,EAAE,QAAQ;YAChB,SAAS,EAAE;UACf,CAAC;UACD,cAAc,EAAE;YACZ,MAAM,EAAE;UACZ;QACJ;MACJ;IACJ,CAAC;EAET,CAAC;EACD;AACJ;AACA;EACIhB,aAAa,CAACiB,YAAY,GAAG;IACzBC,EAAE,EAAE,IAAI;IACRC,KAAK,EAAE,OAAO;IACdC,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE;EACV,CAAC;EACD;AACJ;AACA;EACIrB,aAAa,CAACsB,OAAO,GAAG;IACpBC,IAAI,EAAE,MAAM;IACZC,WAAW,EAAE,aAAa;IAC1BC,IAAI,EAAE,MAAM;IACZC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE,QAAQ;IAChBC,MAAM,EAAE;EACZ,CAAC;EACD,SAASC,KAAKA,CAACjC,IAAI,EAAE;IACjB,IAAIkC,SAAS;IACb,QAAQlC,IAAI,CAACU,EAAE;MACX,KAAKN,aAAa,CAACiB,YAAY,CAACC,EAAE;QAC9BY,SAAS,GAAG,CAAC,CAAC;QACd;MACJ,KAAK9B,aAAa,CAACiB,YAAY,CAACE,KAAK;QACjCW,SAAS,GAAG,CAAC,CAAC;QACd;MACJ,KAAK9B,aAAa,CAACiB,YAAY,CAACG,IAAI;QAChCU,SAAS,GAAG,CAAC,CAAC;QACd;MACJ,KAAK9B,aAAa,CAACiB,YAAY,CAACI,IAAI;QAChCS,SAAS,GAAG,CAAC,CAAC;QACd;MACJ;QACI;QACA,OAAO,IAAI;IACnB;IACA,IAAIC,IAAI;IACR,QAAQnC,IAAI,CAACY,EAAE;MACX,KAAKR,aAAa,CAACsB,OAAO,CAACC,IAAI;QAC3BQ,IAAI,GAAG,CAAC,CAAC;QACT;MACJ,KAAK/B,aAAa,CAACsB,OAAO,CAACE,WAAW;QAClCO,IAAI,GAAG,CAAC,CAAC;QACT;MACJ,KAAK/B,aAAa,CAACsB,OAAO,CAACG,IAAI;QAC3BM,IAAI,GAAG,CAAC,CAAC;QACT;MACJ,KAAK/B,aAAa,CAACsB,OAAO,CAACI,QAAQ;QAC/BK,IAAI,GAAG,CAAC,CAAC;QACT;MACJ,KAAK/B,aAAa,CAACsB,OAAO,CAACK,MAAM;QAC7BI,IAAI,GAAG,CAAC,CAAC;QACT;MACJ,KAAK/B,aAAa,CAACsB,OAAO,CAACM,MAAM;QAC7BG,IAAI,GAAG,CAAC,CAAC;QACT;MACJ;QACIA,IAAI,GAAG,CAAC,CAAC;IACjB;IACA,IAAMvC,KAAK,GAAGwC,IAAI,CAACC,KAAK,CAACrC,IAAI,CAACJ,KAAK,IAAI,CAAC,CAAC;IACzC,IAAMkB,YAAY,GAAG,CAAC,CAACd,IAAI,CAACc,YAAY;IACxC,OAAO;MACHoB,SAAS,EAAEA,SAAS;MACpBC,IAAI,EAAEA,IAAI;MACVvC,KAAK,EAAEA,KAAK;MACZkB,YAAY,EAAEA,YAAY;MAC1BwB,MAAM,EAAG,CAAC,CAACtC,IAAI,CAACsC;IACpB,CAAC;EACL;EACAlC,aAAa,CAAC6B,KAAK,GAAGA,KAAK;AAC/B,CAAC,EAAE7B,aAAa,KAAKA,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;AACzC,OAAO,IAAImC,WAAW;AACtB,CAAC,UAAUA,WAAW,EAAE;EACpB,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAalC,GAAG,EAAE;IACpC,IAAI,CAACzC,KAAK,CAAC0C,QAAQ,CAACD,GAAG,CAAC,EAAE;MACtB,OAAO,KAAK;IAChB;IACA,IAAMmC,YAAY,GAAGnC,GAAG;IACxB,IAAI,CAACzC,KAAK,CAACgD,QAAQ,CAAC4B,YAAY,CAACC,UAAU,CAAC,IAAI,CAAC7E,KAAK,CAAC4C,QAAQ,CAACgC,YAAY,CAACC,UAAU,CAAC,EAAE;MACtF,OAAO,KAAK;IAChB;IACA,IAAI,CAAC7E,KAAK,CAAC8C,WAAW,CAAC8B,YAAY,CAACE,EAAE,CAAC,IAAI,CAAC9E,KAAK,CAAC4C,QAAQ,CAACgC,YAAY,CAACE,EAAE,CAAC,EAAE;MACzE,OAAO,KAAK;IAChB;IACA,OAAO,IAAI;EACf,CAAC;EACDJ,WAAW,CAACvB,QAAQ,GAAG;IACnBC,WAAW,EAAE,qDAAqD;IAClEjB,IAAI,EAAE,CACF;MACIkB,IAAI,EAAE,6BAA6B;MACnCD,WAAW,qRAMtB;MACWE,UAAU,EAAEqB,gBAAgB;MAC5BpB,MAAM,EAAE;QACJ,MAAM,EAAE,QAAQ;QAChB,UAAU,EAAE,CAAC,YAAY,CAAC;QAC1B,YAAY,EAAE;UACV,YAAY,EAAE;YACV,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ;UAC/B,CAAC;UACD,IAAI,EAAE;YACF,MAAM,EAAE,QAAQ;YAChB,MAAM,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ;UACtC;QACJ;MACJ;IACJ,CAAC;EAET,CAAC;EACD;AACJ;AACA;EACImB,WAAW,CAACK,aAAa,GAAG;IACxBC,GAAG,EAAE,KAAK;IACVC,MAAM,EAAE,QAAQ;IAChBC,MAAM,EAAE;EACZ,CAAC;AACL,CAAC,EAAER,WAAW,KAAKA,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;AAAC,IAChCS,8BAA8B;EAChC,SAAAA,+BAAYC,MAAM,EAAE;IAAA,IAAAC,KAAA;IAAA5D,eAAA,OAAA0D,8BAAA;IAChB;IACAC,MAAM,CAACE,iBAAiB,CAAC,KAAK,EAAE,aAAa,EAAE,UAACrD,QAAQ,EAAEE,IAAI,EAAK;MAC/D;MACA,IAAMoD,aAAa,GAAGtD,QAAQ,CAACuD,GAAG,CAAChF,kBAAkB,CAAC,CAACiF,oBAAoB,CAAC,CAAC;MAC7E,IAAIF,aAAa,IAAIA,aAAa,CAACG,YAAY,CAAC,CAAC,EAAE;QAC/C,OAAOL,KAAI,CAACM,iBAAiB,CAAC1D,QAAQ,EAAEsD,aAAa,EAAEpD,IAAI,CAAC;MAChE;MACA,OAAO,KAAK;IAChB,CAAC,CAAC;IACF;IACAiD,MAAM,CAACE,iBAAiB,CAAC,IAAI,EAAE,4BAA4B,EAAE,UAACrD,QAAQ,EAAEE,IAAI,EAAK;MAC7E;MACA,IAAMyD,aAAa,GAAGvE,gBAAgB,CAAC,CAAC;MACxC,IAAIuE,aAAa,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,CAACC,OAAO,CAACD,aAAa,CAACE,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;QAC1FV,KAAI,CAACW,aAAa,CAACJ,aAAa,CAAC;QACjC,OAAO,IAAI;MACf;MACA,OAAO,KAAK;IAChB,CAAC,CAAC;IACF;IACAR,MAAM,CAACE,iBAAiB,CAAC,CAAC,EAAE,aAAa,EAAE,UAACrD,QAAQ,EAAEE,IAAI,EAAK;MAC3D;MACA,IAAM8D,YAAY,GAAGhE,QAAQ,CAACuD,GAAG,CAAChF,kBAAkB,CAAC,CAAC0F,mBAAmB,CAAC,CAAC;MAC3E,IAAID,YAAY,EAAE;QACdA,YAAY,CAACE,KAAK,CAAC,CAAC;QACpB,OAAOd,KAAI,CAACM,iBAAiB,CAAC1D,QAAQ,EAAEgE,YAAY,EAAE9D,IAAI,CAAC;MAC/D;MACA,OAAO,KAAK;IAChB,CAAC,CAAC;EACN;EAAC,OAAAN,YAAA,CAAAsD,8BAAA;IAAArD,GAAA;IAAAC,KAAA,EACD,SAAA4D,kBAAkB1D,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAE;MACtC,IAAMiE,MAAM,GAAG,IAAI,CAACpE,gBAAgB,CAACC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,CAAC;MAC5D,IAAIiE,MAAM,EAAE;QACR,OAAOA,MAAM;MACjB;MACA,OAAO,IAAI;IACf;EAAC;AAAA;AAEL,OAAO,IAAIC,sBAAsB;AACjC,CAAC,UAAUA,sBAAsB,EAAE;EAAA,IACzBC,iBAAiB,0BAAAC,kBAAA;IACnB,SAAAD,kBAAYE,IAAI,EAAE;MAAA,IAAAC,MAAA;MAAAhF,eAAA,OAAA6E,iBAAA;MACdG,MAAA,GAAA/E,UAAA,OAAA4E,iBAAA,GAAME,IAAI;MACVC,MAAA,CAAKC,gBAAgB,GAAGF,IAAI,CAACG,eAAe;MAAC,OAAAF,MAAA;IACjD;IAAC7E,SAAA,CAAA0E,iBAAA,EAAAC,kBAAA;IAAA,OAAA1E,YAAA,CAAAyE,iBAAA;MAAAxE,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAI,CAACA,IAAI,CAACyE,QAAQ,EAAE;UAChB;QACJ;QACAxE,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC,IAAMC,kBAAkB,GAAG3E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC,CACnGnG,kBAAkB,CAACoG,MAAM,CAAC9E,SAAS,EAAEA,SAAS,CAAC+E,qBAAqB,CAAC,CAAC,EAAE,IAAI,CAACT,gBAAgB,EAAEvE,IAAI,CAACyE,QAAQ,EAAEzE,IAAI,CAACiF,YAAY,CAAC,CACnI,CAAC;QACF,IAAIL,kBAAkB,IAAI5E,IAAI,CAACkF,UAAU,KAAK,CAAC,CAAC,wCAAwC;UACpFjF,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC;QACvD;MACJ;IAAC;EAAA,EAhB2B1F,iBAAiB;EAkBjD8E,sBAAsB,CAACkB,MAAM,GAAGnH,qBAAqB,CAAC,IAAIkG,iBAAiB,CAAC;IACxEkB,EAAE,EAAE,SAAS;IACbb,eAAe,EAAE,KAAK;IACtBc,YAAY,EAAEC;EAClB,CAAC,CAAC,CAAC;EACHrB,sBAAsB,CAACsB,YAAY,GAAGvH,qBAAqB,CAAC,IAAIkG,iBAAiB,CAAC;IAC9EkB,EAAE,EAAE,eAAe;IACnBb,eAAe,EAAE,IAAI;IACrBc,YAAY,EAAEC;EAClB,CAAC,CAAC,CAAC;EAAC,IACEE,mBAAmB,0BAAAC,mBAAA;IAAA,SAAAD,oBAAA;MAAAnG,eAAA,OAAAmG,mBAAA;MAAA,OAAAlG,UAAA,OAAAkG,mBAAA,EAAAjG,SAAA;IAAA;IAAAC,SAAA,CAAAgG,mBAAA,EAAAC,mBAAA;IAAA,OAAAhG,YAAA,CAAA+F,mBAAA;MAAA9F,GAAA;MAAAC,KAAA,EACrB,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC,IAAMV,MAAM,GAAG,IAAI,CAAC0B,sBAAsB,CAAC1F,SAAS,EAAEA,SAAS,CAAC+E,qBAAqB,CAAC,CAAC,EAAE/E,SAAS,CAAC2F,yBAAyB,CAAC,CAAC,EAAE5F,IAAI,CAAC;QACrI,IAAIiE,MAAM,KAAK,IAAI,EAAE;UACjB;UACA;QACJ;QACAhE,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmCb,MAAM,CAAC4B,UAAU,CAACC,GAAG,CAAC,UAACC,SAAS;UAAA,OAAKxH,WAAW,CAACyH,aAAa,CAACD,SAAS,CAAC;QAAA,EAAC,CAAC;QACvJ9F,SAAS,CAACgG,yBAAyB,CAAC;UAChCC,MAAM,EAAE,IAAI;UACZC,kBAAkB,EAAElC,MAAM,CAACmC,cAAc;UACzCC,oBAAoB,EAAEpC,MAAM,CAACqC,gBAAgB;UAC7CC,gBAAgB,EAAEtC,MAAM,CAACuC,YAAY;UACrCC,kBAAkB,EAAExC,MAAM,CAACyC;QAC/B,CAAC,CAAC;QACF,IAAIzC,MAAM,CAAC0C,QAAQ,EAAE;UACjB1G,SAAS,CAAC2G,mBAAmB,CAAC5G,IAAI,CAAC8E,MAAM,CAAC;QAC9C,CAAC,MACI;UACD7E,SAAS,CAAC4G,sBAAsB,CAAC7G,IAAI,CAAC8E,MAAM,CAAC;QACjD;MACJ;IAAC;EAAA,EAtB6B1F,iBAAiB;EAwBnD8E,sBAAsB,CAAC4C,YAAY,GAAG7I,qBAAqB,CAAC,6BAAA8I,oBAAA;IACxD,SAAAC,OAAA,EAAc;MAAA1H,eAAA,OAAA0H,MAAA;MAAA,OAAAzH,UAAA,OAAAyH,MAAA,GACJ;QACF3B,EAAE,EAAE,cAAc;QAClBC,YAAY,EAAEC;MAClB,CAAC;IACL;IAAC9F,SAAA,CAAAuH,MAAA,EAAAD,oBAAA;IAAA,OAAArH,YAAA,CAAAsH,MAAA;MAAArH,GAAA;MAAAC,KAAA,EACD,SAAA+F,uBAAuB1F,SAAS,EAAEgH,OAAO,EAAEC,oBAAoB,EAAElH,IAAI,EAAE;QACnE,IAAI,OAAOA,IAAI,CAACyE,QAAQ,KAAK,WAAW,IAAI,OAAOzE,IAAI,CAACiF,YAAY,KAAK,WAAW,IAAI,OAAOjF,IAAI,CAACmH,WAAW,KAAK,WAAW,EAAE;UAC7H,OAAO,IAAI;QACf;QACA;QACA,IAAMC,iBAAiB,GAAGnH,SAAS,CAACyE,KAAK,CAAC2C,gBAAgB,CAACrH,IAAI,CAACyE,QAAQ,CAAC;QACzE,IAAM6C,qBAAqB,GAAGrH,SAAS,CAACsH,oBAAoB,CAACC,oBAAoB,CAAC,IAAI3I,QAAQ,CAACmB,IAAI,CAACiF,YAAY,CAACvC,UAAU,EAAE1C,IAAI,CAACiF,YAAY,CAACwC,MAAM,CAAC,EAAEL,iBAAiB,CAAC;QAC1K,IAAMjB,kBAAkB,GAAGnG,IAAI,CAAC0H,cAAc,GAAGR,oBAAoB,CAACf,kBAAkB,GAAGmB,qBAAqB,CAAC5E,UAAU;QAC3H,IAAM2D,oBAAoB,GAAGrG,IAAI,CAAC0H,cAAc,GAAGR,oBAAoB,CAACb,oBAAoB,GAAGrG,IAAI,CAACmH,WAAW,GAAG,CAAC;QACnH,OAAO7I,eAAe,CAACqJ,YAAY,CAAC1H,SAAS,CAAC2H,YAAY,EAAE3H,SAAS,EAAEkG,kBAAkB,EAAEE,oBAAoB,EAAEiB,qBAAqB,CAAC5E,UAAU,EAAE1C,IAAI,CAACmH,WAAW,GAAG,CAAC,CAAC;MAC5K;IAAC;EAAA,EAjByE1B,mBAAmB,GAkBjG,CAAC,CAAC;EACFvB,sBAAsB,CAAC2D,sBAAsB,GAAG5J,qBAAqB,CAAC,6BAAA6J,qBAAA;IAClE,SAAAC,QAAA,EAAc;MAAAzI,eAAA,OAAAyI,OAAA;MAAA,OAAAxI,UAAA,OAAAwI,OAAA,GACJ;QACF1C,EAAE,EAAE,wBAAwB;QAC5BC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,GAAG,CAAC,mBAAmB,EAAE,CAAC;UACzFmB,KAAK,EAAE;YAAEnB,OAAO,EAAE;UAAE;QACxB;MACJ,CAAC;IACL;IAACxH,SAAA,CAAAsI,OAAA,EAAAD,qBAAA;IAAA,OAAApI,YAAA,CAAAqI,OAAA;MAAApI,GAAA;MAAAC,KAAA,EACD,SAAA+F,uBAAuB1F,SAAS,EAAEgH,OAAO,EAAEC,oBAAoB,EAAElH,IAAI,EAAE;QACnE,OAAO1B,eAAe,CAAC+J,gBAAgB,CAACpI,SAAS,CAAC2H,YAAY,EAAE3H,SAAS,EAAEiH,oBAAoB,CAAC;MACpG;IAAC;EAAA,EAfmFzB,mBAAmB,GAgB3G,CAAC,CAAC;EACFvB,sBAAsB,CAACoE,uBAAuB,GAAGrK,qBAAqB,CAAC,6BAAAsK,qBAAA;IACnE,SAAAC,QAAA,EAAc;MAAAlJ,eAAA,OAAAkJ,OAAA;MAAA,OAAAjJ,UAAA,OAAAiJ,OAAA,GACJ;QACFnD,EAAE,EAAE,yBAAyB;QAC7BC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,GAAG,CAAC,mBAAmB,EAAE,CAAC;UACzFmB,KAAK,EAAE;YAAEnB,OAAO,EAAE;UAAE;QACxB;MACJ,CAAC;IACL;IAACxH,SAAA,CAAA+I,OAAA,EAAAD,qBAAA;IAAA,OAAA7I,YAAA,CAAA8I,OAAA;MAAA7I,GAAA;MAAAC,KAAA,EACD,SAAA+F,uBAAuB1F,SAAS,EAAEgH,OAAO,EAAEC,oBAAoB,EAAElH,IAAI,EAAE;QACnE,OAAO1B,eAAe,CAACmK,iBAAiB,CAACxI,SAAS,CAAC2H,YAAY,EAAE3H,SAAS,EAAEiH,oBAAoB,CAAC;MACrG;IAAC;EAAA,EAfoFzB,mBAAmB,GAgB5G,CAAC,CAAC;EAAC,IACGiD,qBAAqB,0BAAAC,qBAAA;IACvB,SAAAD,sBAAYrE,IAAI,EAAE;MAAA,IAAAuE,MAAA;MAAAtJ,eAAA,OAAAoJ,qBAAA;MACdE,MAAA,GAAArJ,UAAA,OAAAmJ,qBAAA,GAAMrE,IAAI;MACVuE,MAAA,CAAKC,QAAQ,GAAGxE,IAAI,CAACyE,OAAO;MAAC,OAAAF,MAAA;IACjC;IAACnJ,SAAA,CAAAiJ,qBAAA,EAAAC,qBAAA;IAAA,OAAAjJ,YAAA,CAAAgJ,qBAAA;MAAA/I,GAAA;MAAAC,KAAA,EACD,SAAA+F,uBAAuB1F,SAAS,EAAEgH,OAAO,EAAEC,oBAAoB,EAAElH,IAAI,EAAE;QACnE,OAAO1B,eAAe,CAACyK,cAAc,CAAC9I,SAAS,CAAC2H,YAAY,EAAE3H,SAAS,EAAEiH,oBAAoB,EAAE,IAAI,CAAC2B,QAAQ,CAAC;MACjH;IAAC;EAAA,EAP+BpD,mBAAmB;EASvDvB,sBAAsB,CAAC8E,oBAAoB,GAAG/K,qBAAqB,CAAC,IAAIyK,qBAAqB,CAAC;IAC1FI,OAAO,EAAE,KAAK;IACdzD,EAAE,EAAE,sBAAsB;IAC1BC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,GAAG,CAAC,mBAAmB,EAAE,CAAC;MACzFmB,KAAK,EAAE;QAAEnB,OAAO,EAAE;MAAE;IACxB;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAAC+E,wBAAwB,GAAGhL,qBAAqB,CAAC,IAAIyK,qBAAqB,CAAC;IAC9FI,OAAO,EAAE,IAAI;IACbzD,EAAE,EAAE,0BAA0B;IAC9BC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,GAAG,CAAC,mBAAmB,EAAE,CAAC;MACzFmB,KAAK,EAAE;QAAEnB,OAAO,EAAE;MAAE;IACxB;EACJ,CAAC,CAAC,CAAC;EAAC,IACEiC,uBAAuB,0BAAAC,qBAAA;IACzB,SAAAD,wBAAY7E,IAAI,EAAE;MAAA,IAAA+E,MAAA;MAAA9J,eAAA,OAAA4J,uBAAA;MACdE,MAAA,GAAA7J,UAAA,OAAA2J,uBAAA,GAAM7E,IAAI;MACV+E,MAAA,CAAKP,QAAQ,GAAGxE,IAAI,CAACyE,OAAO;MAAC,OAAAM,MAAA;IACjC;IAAC3J,SAAA,CAAAyJ,uBAAA,EAAAC,qBAAA;IAAA,OAAAzJ,YAAA,CAAAwJ,uBAAA;MAAAvJ,GAAA;MAAAC,KAAA,EACD,SAAA+F,uBAAuB1F,SAAS,EAAEgH,OAAO,EAAEC,oBAAoB,EAAElH,IAAI,EAAE;QACnE,OAAO1B,eAAe,CAAC+K,gBAAgB,CAACpJ,SAAS,CAAC2H,YAAY,EAAE3H,SAAS,EAAEiH,oBAAoB,EAAE,IAAI,CAAC2B,QAAQ,CAAC;MACnH;IAAC;EAAA,EAPiCpD,mBAAmB;EASzDvB,sBAAsB,CAACoF,sBAAsB,GAAGrL,qBAAqB,CAAC,IAAIiL,uBAAuB,CAAC;IAC9FJ,OAAO,EAAE,KAAK;IACdzD,EAAE,EAAE,wBAAwB;IAC5BC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,GAAG,CAAC,mBAAmB,EAAE,CAAC;MACzFmB,KAAK,EAAE;QAAEnB,OAAO,EAAE;MAAE;IACxB;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAACqF,0BAA0B,GAAGtL,qBAAqB,CAAC,IAAIiL,uBAAuB,CAAC;IAClGJ,OAAO,EAAE,IAAI;IACbzD,EAAE,EAAE,4BAA4B;IAChCC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,GAAG,CAAC,mBAAmB,EAAE,CAAC;MACzFmB,KAAK,EAAE;QAAEnB,OAAO,EAAE;MAAE;IACxB;EACJ,CAAC,CAAC,CAAC;EAAC,IACEuC,cAAc,0BAAAC,mBAAA;IAChB,SAAAD,eAAA,EAAc;MAAAlK,eAAA,OAAAkK,cAAA;MAAA,OAAAjK,UAAA,OAAAiK,cAAA,GACJ;QACFnE,EAAE,EAAE,YAAY;QAChBC,YAAY,EAAEC,SAAS;QACvBvE,QAAQ,EAAEtC,WAAW,CAACsC;MAC1B,CAAC;IACL;IAACvB,SAAA,CAAA+J,cAAA,EAAAC,mBAAA;IAAA,OAAA/J,YAAA,CAAA8J,cAAA;MAAA7J,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAM0J,MAAM,GAAGhL,WAAW,CAACuD,KAAK,CAACjC,IAAI,CAAC;QACtC,IAAI,CAAC0J,MAAM,EAAE;UACT;UACA;QACJ;QACA,IAAI,CAACC,cAAc,CAAC1J,SAAS,EAAED,IAAI,CAAC8E,MAAM,EAAE4E,MAAM,CAAC;MACvD;IAAC;MAAA/J,GAAA;MAAAC,KAAA,EACD,SAAA+J,eAAe1J,SAAS,EAAE6E,MAAM,EAAE9E,IAAI,EAAE;QACpCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAACC,MAAM,EAAE,CAAC,CAAC,mCAAmC0E,cAAc,CAACI,KAAK,CAAC3J,SAAS,EAAEA,SAAS,CAAC4J,eAAe,CAAC,CAAC,EAAE7J,IAAI,CAAC,CAAC;QAC1IC,SAAS,CAACkF,gBAAgB,CAACL,MAAM,EAAE,IAAI,CAAC;MAC5C;IAAC;MAAAnF,GAAA;MAAAC,KAAA,EACD,SAAAgK,MAAa3J,SAAS,EAAE6J,OAAO,EAAE9J,IAAI,EAAE;QACnC,IAAMwE,eAAe,GAAGxE,IAAI,CAACsC,MAAM;QACnC,IAAM1C,KAAK,GAAGI,IAAI,CAACJ,KAAK;QACxB,QAAQI,IAAI,CAACkC,SAAS;UAClB,KAAK,CAAC,CAAC;UACP,KAAK,CAAC,CAAC;UACP,KAAK,CAAC,CAAC;UACP,KAAK,CAAC,CAAC;UACP,KAAK,CAAC,CAAC;UACP,KAAK,CAAC,CAAC;UACP,KAAK,CAAC,CAAC;UACP,KAAK,CAAC,CAAC;UACP,KAAK,CAAC,CAAC;UACP,KAAK,CAAC,CAAC;UACP,KAAK,EAAE,CAAC;YACJ,OAAOvD,kBAAkB,CAACoL,UAAU,CAAC9J,SAAS,EAAE6J,OAAO,EAAE9J,IAAI,CAACkC,SAAS,EAAEsC,eAAe,EAAE5E,KAAK,EAAEI,IAAI,CAACmC,IAAI,CAAC;UAC/G,KAAK,EAAE,CAAC;UACR,KAAK,EAAE,CAAC;UACR,KAAK,EAAE,CAAC;UACR,KAAK,EAAE,CAAC;YACJ,OAAOxD,kBAAkB,CAACqL,YAAY,CAAC/J,SAAS,EAAE6J,OAAO,EAAE9J,IAAI,CAACkC,SAAS,EAAEsC,eAAe,EAAE5E,KAAK,CAAC;UACtG;YACI,OAAO,IAAI;QACnB;MACJ;IAAC;EAAA,EA7CwBR,iBAAiB;EA+C9C8E,sBAAsB,CAACsF,cAAc,GAAGA,cAAc;EACtDtF,sBAAsB,CAACzF,UAAU,GAAGR,qBAAqB,CAAC,IAAIuL,cAAc,CAAC,CAAC,CAAC;EAAC,IAC1ES,sBAAsB,0BAAAC,mBAAA;IACxB,SAAAD,uBAAY5F,IAAI,EAAE;MAAA,IAAA8F,MAAA;MAAA7K,eAAA,OAAA2K,sBAAA;MACdE,MAAA,GAAA5K,UAAA,OAAA0K,sBAAA,GAAM5F,IAAI;MACV8F,MAAA,CAAKC,WAAW,GAAG/F,IAAI,CAACrE,IAAI;MAAC,OAAAmK,MAAA;IACjC;IAAC1K,SAAA,CAAAwK,sBAAA,EAAAC,mBAAA;IAAA,OAAAxK,YAAA,CAAAuK,sBAAA;MAAAtK,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAEoK,WAAW,EAAE;QACzC,IAAIrK,IAAI,GAAG,IAAI,CAACoK,WAAW;QAC3B,IAAI,IAAI,CAACA,WAAW,CAACxK,KAAK,KAAK,CAAC,CAAC,CAAC,kCAAkC;UAChE;UACAI,IAAI,GAAG;YACHkC,SAAS,EAAE,IAAI,CAACkI,WAAW,CAAClI,SAAS;YACrCC,IAAI,EAAE,IAAI,CAACiI,WAAW,CAACjI,IAAI;YAC3BG,MAAM,EAAE,IAAI,CAAC8H,WAAW,CAAC9H,MAAM;YAC/B1C,KAAK,EAAEyK,WAAW,CAACC,QAAQ,IAAIrK,SAAS,CAAC2H,YAAY,CAAC0C;UAC1D,CAAC;QACL;QACArK,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAACwF,WAAW,CAACvF,MAAM,EAAE,CAAC,CAAC,mCAAmCnG,kBAAkB,CAACoL,UAAU,CAAC9J,SAAS,EAAEA,SAAS,CAAC4J,eAAe,CAAC,CAAC,EAAE7J,IAAI,CAACkC,SAAS,EAAElC,IAAI,CAACsC,MAAM,EAAEtC,IAAI,CAACJ,KAAK,EAAEI,IAAI,CAACmC,IAAI,CAAC,CAAC;QAC7MlC,SAAS,CAACkF,gBAAgB,CAACkF,WAAW,CAACvF,MAAM,EAAE,IAAI,CAAC;MACxD;IAAC;EAAA,EAnBgC1F,iBAAiB;EAqBtD8E,sBAAsB,CAACqG,UAAU,GAAGtM,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IACjFjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,KAAK;MACb1C,KAAK,EAAE;IACX,CAAC;IACDyF,EAAE,EAAE,YAAY;IAChBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,EAAE,CAAC;MACZuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,EAAE,CAAC;QAAyBwD,SAAS,EAAE,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC;MAAoB;IAC9G;EACJ,CAAC,CAAC,CAAC;EACHvG,sBAAsB,CAACwG,gBAAgB,GAAGzM,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IACvFjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,IAAI;MACZ1C,KAAK,EAAE;IACX,CAAC;IACDyF,EAAE,EAAE,kBAAkB;IACtBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC1C;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAACyG,WAAW,GAAG1M,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IAClFjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,KAAK;MACb1C,KAAK,EAAE;IACX,CAAC;IACDyF,EAAE,EAAE,aAAa;IACjBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,EAAE,CAAC;MACZuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,EAAE,CAAC;QAA0BwD,SAAS,EAAE,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC;MAAoB;IAC/G;EACJ,CAAC,CAAC,CAAC;EACHvG,sBAAsB,CAAC0G,iBAAiB,GAAG3M,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IACxFjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,IAAI;MACZ1C,KAAK,EAAE;IACX,CAAC;IACDyF,EAAE,EAAE,mBAAmB;IACvBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC1C;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAAC2G,QAAQ,GAAG5M,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IAC/EjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,KAAK;MACb1C,KAAK,EAAE;IACX,CAAC;IACDyF,EAAE,EAAE,UAAU;IACdC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,EAAE,CAAC;MACZuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,EAAE,CAAC;QAAuBwD,SAAS,EAAE,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC;MAAoB;IAC5G;EACJ,CAAC,CAAC,CAAC;EACHvG,sBAAsB,CAAC4G,cAAc,GAAG7M,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IACrFjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,IAAI;MACZ1C,KAAK,EAAE;IACX,CAAC;IACDyF,EAAE,EAAE,gBAAgB;IACpBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;MACtCwD,SAAS,EAAE,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC,sBAAsB;MAC3FD,GAAG,EAAE;QAAEvD,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAAsB,CAAC;MACpEmB,KAAK,EAAE;QAAEnB,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAAsB;IACzE;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAAC6G,YAAY,GAAG9M,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IACnFjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,KAAK;MACb1C,KAAK,EAAE,CAAC,CAAC,CAAC;IACd,CAAC;IACDyF,EAAE,EAAE,cAAc;IAClBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,EAAE,CAAC;IAChB;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAAC8G,kBAAkB,GAAG/M,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IACzFjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,IAAI;MACZ1C,KAAK,EAAE,CAAC,CAAC,CAAC;IACd,CAAC;IACDyF,EAAE,EAAE,oBAAoB;IACxBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC1C;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAAC+G,UAAU,GAAGhN,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IACjFjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,KAAK;MACb1C,KAAK,EAAE;IACX,CAAC;IACDyF,EAAE,EAAE,YAAY;IAChBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,EAAE,CAAC;MACZuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,EAAE,CAAC;QAAyBwD,SAAS,EAAE,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC;MAAoB;IAC9G;EACJ,CAAC,CAAC,CAAC;EACHvG,sBAAsB,CAACgH,gBAAgB,GAAGjN,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IACvFjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,IAAI;MACZ1C,KAAK,EAAE;IACX,CAAC;IACDyF,EAAE,EAAE,kBAAkB;IACtBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;MACtCwD,SAAS,EAAE,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC,wBAAwB;MAC7FD,GAAG,EAAE;QAAEvD,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAAwB,CAAC;MACtEmB,KAAK,EAAE;QAAEnB,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAAwB;IAC3E;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAACiH,cAAc,GAAGlN,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IACrFjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,KAAK;MACb1C,KAAK,EAAE,CAAC,CAAC,CAAC;IACd,CAAC;IACDyF,EAAE,EAAE,gBAAgB;IACpBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,EAAE,CAAC;IAChB;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAACkH,oBAAoB,GAAGnN,qBAAqB,CAAC,IAAIgM,sBAAsB,CAAC;IAC3FjK,IAAI,EAAE;MACFkC,SAAS,EAAE,CAAC,CAAC;MACbC,IAAI,EAAE,CAAC,CAAC;MACRG,MAAM,EAAE,IAAI;MACZ1C,KAAK,EAAE,CAAC,CAAC,CAAC;IACd,CAAC;IACDyF,EAAE,EAAE,sBAAsB;IAC1BC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC1C;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAACmH,YAAY,GAAGpN,qBAAqB,CAAC,6BAAAqN,mBAAA;IACxD,SAAAC,QAAA,EAAc;MAAAjM,eAAA,OAAAiM,OAAA;MAAA,OAAAhM,UAAA,OAAAgM,OAAA,GACJ;QACFlG,EAAE,EAAE,cAAc;QAClBC,YAAY,EAAEC;MAClB,CAAC;IACL;IAAC9F,SAAA,CAAA8L,OAAA,EAAAD,mBAAA;IAAA,OAAA5L,YAAA,CAAA6L,OAAA;MAAA5L,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAI,CAACA,IAAI,CAACyE,QAAQ,EAAE;UAChB;QACJ;QACA,IAAI+G,QAAQ;QACZ,IAAIxL,IAAI,CAACyL,SAAS,EAAE;UAChBD,QAAQ,GAAG7M,kBAAkB,CAAC+M,IAAI,CAACzL,SAAS,EAAEA,SAAS,CAAC+E,qBAAqB,CAAC,CAAC,EAAE,KAAK,EAAEhF,IAAI,CAACyE,QAAQ,EAAEzE,IAAI,CAACiF,YAAY,CAAC;QAC7H,CAAC,MACI;UACDuG,QAAQ,GAAG7M,kBAAkB,CAACoG,MAAM,CAAC9E,SAAS,EAAEA,SAAS,CAAC+E,qBAAqB,CAAC,CAAC,EAAE,KAAK,EAAEhF,IAAI,CAACyE,QAAQ,EAAEzE,IAAI,CAACiF,YAAY,CAAC;QAC/H;QACA,IAAM0G,MAAM,GAAG1L,SAAS,CAAC4J,eAAe,CAAC,CAAC;QAC1C;QACA,IAAI8B,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;UACnB,IAAMC,gBAAgB,GAAIL,QAAQ,CAACM,UAAU,GAAGN,QAAQ,CAACM,UAAU,CAACrH,QAAQ,GAAG,IAAK;UACpF,IAAMsH,eAAe,GAAIP,QAAQ,CAACzF,SAAS,GAAGyF,QAAQ,CAACzF,SAAS,CAACtB,QAAQ,GAAG,IAAK;UACjF,KAAK,IAAIuH,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGN,MAAM,CAACC,MAAM,EAAEI,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;YAC/C,IAAME,KAAK,GAAGP,MAAM,CAACK,CAAC,CAAC;YACvB,IAAIH,gBAAgB,IAAI,CAACK,KAAK,CAACJ,UAAU,CAACK,SAAS,CAACC,gBAAgB,CAACP,gBAAgB,CAAC,EAAE;cACpF;YACJ;YACA,IAAIE,eAAe,IAAI,CAACG,KAAK,CAACnG,SAAS,CAACoG,SAAS,CAACC,gBAAgB,CAACL,eAAe,CAAC,EAAE;cACjF;YACJ;YACA;YACAJ,MAAM,CAACU,MAAM,CAACL,CAAC,EAAE,CAAC,CAAC;YACnB/L,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;YAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC6G,MAAM,CAAC;YACnF;UACJ;QACJ;QACA;QACAA,MAAM,CAACW,IAAI,CAACd,QAAQ,CAAC;QACrBvL,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC6G,MAAM,CAAC;MACvF;IAAC;EAAA,EA1CyEvM,iBAAiB,GA2C/F,CAAC,CAAC;EACF8E,sBAAsB,CAACqI,sBAAsB,GAAGtO,qBAAqB,CAAC,6BAAAuO,mBAAA;IAClE,SAAAC,QAAA,EAAc;MAAAnN,eAAA,OAAAmN,OAAA;MAAA,OAAAlN,UAAA,OAAAkN,OAAA,GACJ;QACFpH,EAAE,EAAE,yBAAyB;QAC7BC,YAAY,EAAEC;MAClB,CAAC;IACL;IAAC9F,SAAA,CAAAgN,OAAA,EAAAD,mBAAA;IAAA,OAAA9M,YAAA,CAAA+M,OAAA;MAAA9M,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAI,CAACA,IAAI,CAACyE,QAAQ,EAAE;UAChB;QACJ;QACA,IAAMiI,oBAAoB,GAAGzM,SAAS,CAAC0M,uBAAuB,CAAC,CAAC;QAChE,IAAMhB,MAAM,GAAG1L,SAAS,CAAC4J,eAAe,CAAC,CAAC;QAC1C,IAAM+C,SAAS,GAAGjB,MAAM,CAACkB,KAAK,CAAC,CAAC,CAAC;QACjCD,SAAS,CAACF,oBAAoB,CAAC,GAAG/N,kBAAkB,CAACoG,MAAM,CAAC9E,SAAS,EAAE0L,MAAM,CAACe,oBAAoB,CAAC,EAAE,IAAI,EAAE1M,IAAI,CAACyE,QAAQ,EAAEzE,IAAI,CAACiF,YAAY,CAAC;QAC5IhF,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC8H,SAAS,CAAC;MAC1F;IAAC;EAAA,EAjBmFxN,iBAAiB,GAkBzG,CAAC,CAAC;EAAC,IACG0N,WAAW,0BAAAC,mBAAA;IACb,SAAAD,YAAYzI,IAAI,EAAE;MAAA,IAAA2I,MAAA;MAAA1N,eAAA,OAAAwN,WAAA;MACdE,MAAA,GAAAzN,UAAA,OAAAuN,WAAA,GAAMzI,IAAI;MACV2I,MAAA,CAAKzI,gBAAgB,GAAGF,IAAI,CAACG,eAAe;MAAC,OAAAwI,MAAA;IACjD;IAACvN,SAAA,CAAAqN,WAAA,EAAAC,mBAAA;IAAA,OAAArN,YAAA,CAAAoN,WAAA;MAAAnN,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmCnG,kBAAkB,CAACsO,qBAAqB,CAAChN,SAAS,EAAEA,SAAS,CAAC4J,eAAe,CAAC,CAAC,EAAE,IAAI,CAACtF,gBAAgB,CAAC,CAAC;QACpLtE,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,IAAI,CAAC;MACjD;IAAC;EAAA,EATqB1F,iBAAiB;EAW3C8E,sBAAsB,CAACgJ,UAAU,GAAGjP,qBAAqB,CAAC,IAAI6O,WAAW,CAAC;IACtEtI,eAAe,EAAE,KAAK;IACtBa,EAAE,EAAE,YAAY;IAChBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,EAAE,CAAC;MACZuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,EAAE,CAAC;QAAoBwD,SAAS,EAAE,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;MAAyB;IAC/G;EACJ,CAAC,CAAC,CAAC;EACHvG,sBAAsB,CAACiJ,gBAAgB,GAAGlP,qBAAqB,CAAC,IAAI6O,WAAW,CAAC;IAC5EtI,eAAe,EAAE,IAAI;IACrBa,EAAE,EAAE,kBAAkB;IACtBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;MACtCuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAAoBwD,SAAS,EAAE,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAAyB;IACnK;EACJ,CAAC,CAAC,CAAC;EAAC,IACE2C,gBAAgB,0BAAAC,mBAAA;IAClB,SAAAD,iBAAY/I,IAAI,EAAE;MAAA,IAAAiJ,MAAA;MAAAhO,eAAA,OAAA8N,gBAAA;MACdE,MAAA,GAAA/N,UAAA,OAAA6N,gBAAA,GAAM/I,IAAI;MACViJ,MAAA,CAAK/I,gBAAgB,GAAGF,IAAI,CAACG,eAAe;MAAC,OAAA8I,MAAA;IACjD;IAAC7N,SAAA,CAAA2N,gBAAA,EAAAC,mBAAA;IAAA,OAAA3N,YAAA,CAAA0N,gBAAA;MAAAzN,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC,IAAI,CAACyI,KAAK,CAACtN,SAAS,CAAC4J,eAAe,CAAC,CAAC,CAAC,CAAC;QACpH5J,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,IAAI,CAAC;MACjD;IAAC;MAAAnF,GAAA;MAAAC,KAAA,EACD,SAAA2N,MAAMzD,OAAO,EAAE;QACX,IAAM7F,MAAM,GAAG,EAAE;QACjB,KAAK,IAAI+H,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGnC,OAAO,CAAC8B,MAAM,EAAEI,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;UAChD,IAAMwB,MAAM,GAAG1D,OAAO,CAACkC,CAAC,CAAC;UACzB,IAAMtJ,UAAU,GAAG8K,MAAM,CAAC1B,UAAU,CAACrH,QAAQ,CAAC/B,UAAU;UACxDuB,MAAM,CAAC+H,CAAC,CAAC,GAAGzN,WAAW,CAACkP,cAAc,CAACD,MAAM,CAAC1B,UAAU,CAAC4B,IAAI,CAAC,IAAI,CAACnJ,gBAAgB,EAAE7B,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3G;QACA,OAAOuB,MAAM;MACjB;IAAC;EAAA,EAlB0B7E,iBAAiB;EAoBhD8E,sBAAsB,CAACyJ,eAAe,GAAG1P,qBAAqB,CAAC,IAAImP,gBAAgB,CAAC;IAChF5I,eAAe,EAAE,KAAK;IACtBa,EAAE,EAAE,iBAAiB;IACrBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,CAAC;MACVuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,GAAG,CAAC,uBAAuB,EAAE,CAAC;MAAmB;IACrE;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAAC0J,qBAAqB,GAAG3P,qBAAqB,CAAC,IAAImP,gBAAgB,CAAC;IACtF5I,eAAe,EAAE,IAAI;IACrBa,EAAE,EAAE,uBAAuB;IAC3BC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,CAAC;MACVuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,GAAG,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAAmB;IAC/F;EACJ,CAAC,CAAC,CAAC;EAAC,IACE4G,UAAU,0BAAAC,mBAAA;IACZ,SAAAD,WAAYxJ,IAAI,EAAE;MAAA,IAAA0J,MAAA;MAAAzO,eAAA,OAAAuO,UAAA;MACdE,MAAA,GAAAxO,UAAA,OAAAsO,UAAA,GAAMxJ,IAAI;MACV0J,MAAA,CAAKxJ,gBAAgB,GAAGF,IAAI,CAACG,eAAe;MAAC,OAAAuJ,MAAA;IACjD;IAACtO,SAAA,CAAAoO,UAAA,EAAAC,mBAAA;IAAA,OAAApO,YAAA,CAAAmO,UAAA;MAAAlO,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmCnG,kBAAkB,CAACqP,eAAe,CAAC/N,SAAS,EAAEA,SAAS,CAAC4J,eAAe,CAAC,CAAC,EAAE,IAAI,CAACtF,gBAAgB,EAAEvE,IAAI,CAACiO,MAAM,IAAI,KAAK,CAAC,CAAC;QACpMhO,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,IAAI,CAAC;MACjD;IAAC;EAAA,EAToB1F,iBAAiB;EAW1C8E,sBAAsB,CAACgK,SAAS,GAAGjQ,qBAAqB,CAAC,IAAI4P,UAAU,CAAC;IACpErJ,eAAe,EAAE,KAAK;IACtBa,EAAE,EAAE,WAAW;IACfC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJhI,IAAI,EAAE;QAAEiO,MAAM,EAAE;MAAM,CAAC;MACvBhG,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,EAAE,CAAC;MACZuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,EAAE,CAAC;QAAmBwD,SAAS,EAAE,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;MAA0B;IAC/G,CAAC;IACDzJ,QAAQ,EAAE;MACNC,WAAW,aAAa;MACxBjB,IAAI,EAAE,CAAC;QACCkB,IAAI,EAAE,MAAM;QACZE,MAAM,EAAE;UACJ+M,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACR,QAAQ,EAAE;cACNnN,WAAW,EAAEtD,GAAG,CAAC0Q,QAAQ,CAAC,YAAY,EAAE,kDAAkD,CAAC;cAC3FF,IAAI,EAAE,SAAS;cACf,WAAS;YACb;UACJ;QACJ;MACJ,CAAC;IACT;EACJ,CAAC,CAAC,CAAC;EACHjK,sBAAsB,CAACoK,eAAe,GAAGrQ,qBAAqB,CAAC,IAAI4P,UAAU,CAAC;IAC1ErJ,eAAe,EAAE,IAAI;IACrBa,EAAE,EAAE,iBAAiB;IACrBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJhI,IAAI,EAAE;QAAEiO,MAAM,EAAE;MAAM,CAAC;MACvBhG,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;MACtCuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAAmBwD,SAAS,EAAE,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAA0B;IACnK,CAAC;IACDzJ,QAAQ,EAAE;MACNC,WAAW,iBAAiB;MAC5BjB,IAAI,EAAE,CAAC;QACCkB,IAAI,EAAE,MAAM;QACZE,MAAM,EAAE;UACJ+M,IAAI,EAAE,QAAQ;UACdC,UAAU,EAAE;YACR,QAAQ,EAAE;cACNnN,WAAW,EAAEtD,GAAG,CAAC0Q,QAAQ,CAAC,YAAY,EAAE,kDAAkD,CAAC;cAC3FF,IAAI,EAAE,SAAS;cACf,WAAS;YACb;UACJ;QACJ;MACJ,CAAC;IACT;EACJ,CAAC,CAAC,CAAC;EAAC,IACEI,cAAc,0BAAAC,oBAAA;IAChB,SAAAD,eAAYlK,IAAI,EAAE;MAAA,IAAAoK,MAAA;MAAAnP,eAAA,OAAAiP,cAAA;MACdE,MAAA,GAAAlP,UAAA,OAAAgP,cAAA,GAAMlK,IAAI;MACVoK,MAAA,CAAKlK,gBAAgB,GAAGF,IAAI,CAACG,eAAe;MAAC,OAAAiK,MAAA;IACjD;IAAChP,SAAA,CAAA8O,cAAA,EAAAC,oBAAA;IAAA,OAAA9O,YAAA,CAAA6O,cAAA;MAAA5O,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC,IAAI,CAACyI,KAAK,CAACtN,SAAS,EAAEA,SAAS,CAAC4J,eAAe,CAAC,CAAC,CAAC,CAAC;QAC/H5J,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,IAAI,CAAC;MACjD;IAAC;MAAAnF,GAAA;MAAAC,KAAA,EACD,SAAA2N,MAAMtN,SAAS,EAAE6J,OAAO,EAAE;QACtB,IAAM7F,MAAM,GAAG,EAAE;QACjB,KAAK,IAAI+H,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGnC,OAAO,CAAC8B,MAAM,EAAEI,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;UAChD,IAAMwB,MAAM,GAAG1D,OAAO,CAACkC,CAAC,CAAC;UACzB,IAAMtJ,UAAU,GAAG8K,MAAM,CAAC1B,UAAU,CAACrH,QAAQ,CAAC/B,UAAU;UACxD,IAAMgM,SAAS,GAAGzO,SAAS,CAACyE,KAAK,CAACiK,gBAAgB,CAACjM,UAAU,CAAC;UAC9DuB,MAAM,CAAC+H,CAAC,CAAC,GAAGzN,WAAW,CAACkP,cAAc,CAACD,MAAM,CAAC1B,UAAU,CAAC4B,IAAI,CAAC,IAAI,CAACnJ,gBAAgB,EAAE7B,UAAU,EAAEgM,SAAS,EAAE,CAAC,CAAC,CAAC;QACnH;QACA,OAAOzK,MAAM;MACjB;IAAC;EAAA,EAnBwB7E,iBAAiB;EAqB9C8E,sBAAsB,CAAC0K,aAAa,GAAG3Q,qBAAqB,CAAC,IAAIsQ,cAAc,CAAC;IAC5E/J,eAAe,EAAE,KAAK;IACtBa,EAAE,EAAE,eAAe;IACnBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,CAAC;MACVuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,GAAG,CAAC,uBAAuB,EAAE,CAAC;MAAmB;IACrE;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAAC2K,mBAAmB,GAAG5Q,qBAAqB,CAAC,IAAIsQ,cAAc,CAAC;IAClF/J,eAAe,EAAE,IAAI;IACrBa,EAAE,EAAE,qBAAqB;IACzBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,CAAC;MACVuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,GAAG,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAAmB;IAC/F;EACJ,CAAC,CAAC,CAAC;EAAC,IACE6H,UAAU,0BAAAC,oBAAA;IACZ,SAAAD,WAAYzK,IAAI,EAAE;MAAA,IAAA2K,OAAA;MAAA1P,eAAA,OAAAwP,UAAA;MACdE,OAAA,GAAAzP,UAAA,OAAAuP,UAAA,GAAMzK,IAAI;MACV2K,OAAA,CAAKzK,gBAAgB,GAAGF,IAAI,CAACG,eAAe;MAAC,OAAAwK,OAAA;IACjD;IAACvP,SAAA,CAAAqP,UAAA,EAAAC,oBAAA;IAAA,OAAArP,YAAA,CAAAoP,UAAA;MAAAnP,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmCnG,kBAAkB,CAACsQ,uBAAuB,CAAChP,SAAS,EAAEA,SAAS,CAAC4J,eAAe,CAAC,CAAC,EAAE,IAAI,CAACtF,gBAAgB,CAAC,CAAC;QACtLtE,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,IAAI,CAAC;MACjD;IAAC;EAAA,EAToB1F,iBAAiB;EAW1C8E,sBAAsB,CAACgL,SAAS,GAAGjR,qBAAqB,CAAC,IAAI6Q,UAAU,CAAC;IACpEtK,eAAe,EAAE,KAAK;IACtBa,EAAE,EAAE,WAAW;IACfC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;MACxCuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;MAAsB;IACzE;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAACiL,eAAe,GAAGlR,qBAAqB,CAAC,IAAI6Q,UAAU,CAAC;IAC1EtK,eAAe,EAAE,IAAI;IACrBa,EAAE,EAAE,iBAAiB;IACrBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAClEuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAAsB;IACnG;EACJ,CAAC,CAAC,CAAC;EAAC,IACEmI,aAAa,0BAAAC,oBAAA;IACf,SAAAD,cAAY/K,IAAI,EAAE;MAAA,IAAAiL,OAAA;MAAAhQ,eAAA,OAAA8P,aAAA;MACdE,OAAA,GAAA/P,UAAA,OAAA6P,aAAA,GAAM/K,IAAI;MACViL,OAAA,CAAK/K,gBAAgB,GAAGF,IAAI,CAACG,eAAe;MAAC,OAAA8K,OAAA;IACjD;IAAC7P,SAAA,CAAA2P,aAAA,EAAAC,oBAAA;IAAA,OAAA3P,YAAA,CAAA0P,aAAA;MAAAzP,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmCnG,kBAAkB,CAAC4Q,iBAAiB,CAACtP,SAAS,EAAEA,SAAS,CAAC4J,eAAe,CAAC,CAAC,EAAE,IAAI,CAACtF,gBAAgB,CAAC,CAAC;QAChLtE,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,IAAI,CAAC;MACjD;IAAC;EAAA,EATuB1F,iBAAiB;EAW7C8E,sBAAsB,CAACsL,YAAY,GAAGvR,qBAAqB,CAAC,IAAImR,aAAa,CAAC;IAC1E5K,eAAe,EAAE,KAAK;IACtBa,EAAE,EAAE,cAAc;IAClBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;MACxCuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;MAAwB;IAC3E;EACJ,CAAC,CAAC,CAAC;EACH/C,sBAAsB,CAACuL,kBAAkB,GAAGxR,qBAAqB,CAAC,IAAImR,aAAa,CAAC;IAChF5K,eAAe,EAAE,IAAI;IACrBa,EAAE,EAAE,oBAAoB;IACxBC,YAAY,EAAEC,SAAS;IACvByC,MAAM,EAAE;MACJC,MAAM,EAAE9I,WAAW;MACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;MACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAClEuD,GAAG,EAAE;QAAEvD,OAAO,EAAE,IAAI,CAAC,uBAAuB,IAAI,CAAC,qBAAqB,EAAE,CAAC;MAAwB;IACrG;EACJ,CAAC,CAAC,CAAC;EAAC,IACEyI,gBAAgB,0BAAAC,oBAAA;IAClB,SAAAD,iBAAA,EAAc;MAAApQ,eAAA,OAAAoQ,gBAAA;MAAA,OAAAnQ,UAAA,OAAAmQ,gBAAA,GACJ;QACFrK,EAAE,EAAE,cAAc;QAClBC,YAAY,EAAEC,SAAS;QACvBvE,QAAQ,EAAEZ,aAAa,CAACY;MAC5B,CAAC;IACL;IAACvB,SAAA,CAAAiQ,gBAAA,EAAAC,oBAAA;IAAA,OAAAjQ,YAAA,CAAAgQ,gBAAA;MAAA/P,GAAA;MAAAC,KAAA,EACD,SAAAgQ,sBAAsB5P,IAAI,EAAE;QACxB,IAAM6P,eAAe,GAAG,CAAC,CAAC,CAAC,gCAAgC;QAC3D,IAAMC,aAAa,GAAG,CAClB,CAAC,CAAC,+BACF,CAAC,CAAC,sCACF,CAAC,CAAC,+BACF,CAAC,CAAC,mCACF,CAAC,CAAC,iCACF,CAAC,CAAC,gCACL;QACD,IAAMC,oBAAoB,GAAG,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,oCAAoC;QAC1G,IAAMC,kBAAkB,GAAG,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC,mCAAmC;QACrG,IAAIH,eAAe,CAACI,QAAQ,CAACjQ,IAAI,CAACmC,IAAI,CAAC,IAAI4N,oBAAoB,CAACE,QAAQ,CAACjQ,IAAI,CAACkC,SAAS,CAAC,EAAE;UACtF,OAAO,IAAI,CAACgO,0BAA0B,CAACC,IAAI,CAAC,IAAI,CAAC;QACrD;QACA,IAAIL,aAAa,CAACG,QAAQ,CAACjQ,IAAI,CAACmC,IAAI,CAAC,IAAI6N,kBAAkB,CAACC,QAAQ,CAACjQ,IAAI,CAACkC,SAAS,CAAC,EAAE;UAClF,OAAO,IAAI,CAACkO,wBAAwB,CAACD,IAAI,CAAC,IAAI,CAAC;QACnD;QACA,OAAO,IAAI;MACf;IAAC;MAAAxQ,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAM0J,MAAM,GAAGtJ,aAAa,CAAC6B,KAAK,CAACjC,IAAI,CAAC;QACxC,IAAI,CAAC0J,MAAM,EAAE;UACT;UACA;QACJ;QACA,IAAM2G,eAAe,GAAG,IAAI,CAACT,qBAAqB,CAAClG,MAAM,CAAC;QAC1D,IAAI,CAAC2G,eAAe,EAAE;UAClB;UACA;QACJ;QACAA,eAAe,CAACpQ,SAAS,EAAED,IAAI,CAAC8E,MAAM,EAAE4E,MAAM,CAAC;MACnD;IAAC;MAAA/J,GAAA;MAAAC,KAAA,EACD,SAAAwQ,yBAAyBnQ,SAAS,EAAE6E,MAAM,EAAE9E,IAAI,EAAE;QAC9C,IAAMsQ,gBAAgB,GAAG,IAAI,CAACC,wBAAwB,CAACtQ,SAAS,EAAED,IAAI,CAAC;QACvE,IAAIA,IAAI,CAACc,YAAY,EAAE;UACnB;UACA,IAAM0P,uBAAuB,GAAGvQ,SAAS,CAACwQ,wCAAwC,CAACH,gBAAgB,CAAC;UACpGrQ,SAAS,CAAC4E,eAAe,CAACC,MAAM,EAAE,CAAC,CAAC,mCAAmC,CACnEnG,kBAAkB,CAAC+R,+BAA+B,CAACzQ,SAAS,EAAEA,SAAS,CAAC+E,qBAAqB,CAAC,CAAC,EAAEwL,uBAAuB,EAAExQ,IAAI,CAACsC,MAAM,CAAC,CACzI,CAAC;QACN;QACArC,SAAS,CAAC0Q,UAAU,CAACC,iBAAiB,CAAC;UAAEC,SAAS,EAAEP;QAAiB,CAAC,EAAE,CAAC,CAAC,uBAAuB,CAAC;MACtG;IAAC;MAAA3Q,GAAA;MAAAC,KAAA,EACD,SAAA2Q,yBAAyBtQ,SAAS,EAAED,IAAI,EAAE;QACtC,IAAIA,IAAI,CAACmC,IAAI,KAAK,CAAC,CAAC,+BAA+B;UAC/C;UACA,IAAM2O,cAAc,GAAG7Q,SAAS,CAAC0Q,UAAU,CAACI,iBAAiB,CAAC,CAAC;UAC/D,IAAMC,gBAAgB,GAAG/Q,SAAS,CAACwQ,wCAAwC,CAACK,cAAc,CAACG,GAAG,CAAC;UAC/F,IAAMC,iBAAiB,GAAGjR,SAAS,CAACsH,oBAAoB,CAAC4J,4BAA4B,CAACH,gBAAgB,CAAC;UACvG,IAAII,yBAAyB;UAC7B,IAAIpR,IAAI,CAACkC,SAAS,KAAK,CAAC,CAAC,kCAAkC;YACvD;YACAkP,yBAAyB,GAAGhP,IAAI,CAACiP,GAAG,CAAC,CAAC,EAAEH,iBAAiB,CAACI,eAAe,GAAGtR,IAAI,CAACJ,KAAK,CAAC;UAC3F,CAAC,MACI;YACD;YACAwR,yBAAyB,GAAGhP,IAAI,CAACmP,GAAG,CAACtR,SAAS,CAACyE,KAAK,CAAC8M,YAAY,CAAC,CAAC,EAAEN,iBAAiB,CAACI,eAAe,GAAGtR,IAAI,CAACJ,KAAK,CAAC;UACxH;UACA,IAAMqF,YAAY,GAAGhF,SAAS,CAACsH,oBAAoB,CAACkK,kCAAkC,CAAC,IAAI5S,QAAQ,CAACuS,yBAAyB,EAAE,CAAC,CAAC,CAAC;UAClI,OAAOnR,SAAS,CAAC0Q,UAAU,CAACe,8BAA8B,CAACzM,YAAY,CAACvC,UAAU,CAAC;QACvF;QACA,IAAI1C,IAAI,CAACmC,IAAI,KAAK,CAAC,CAAC,iCAAiC;UACjD,IAAIiP,0BAAyB,GAAG,CAAC;UACjC,IAAIpR,IAAI,CAACkC,SAAS,KAAK,CAAC,CAAC,oCAAoC;YACzDkP,0BAAyB,GAAGnR,SAAS,CAACyE,KAAK,CAAC8M,YAAY,CAAC,CAAC,GAAGvR,SAAS,CAAC2H,YAAY,CAAC0C,QAAQ;UAChG;UACA,OAAOrK,SAAS,CAAC0Q,UAAU,CAACe,8BAA8B,CAACN,0BAAyB,CAAC;QACzF;QACA,IAAIO,SAAS;QACb,IAAI3R,IAAI,CAACmC,IAAI,KAAK,CAAC,CAAC,+BAA+B;UAC/CwP,SAAS,GAAG1R,SAAS,CAAC2H,YAAY,CAAC0C,QAAQ,GAAGtK,IAAI,CAACJ,KAAK;QAC5D,CAAC,MACI,IAAII,IAAI,CAACmC,IAAI,KAAK,CAAC,CAAC,mCAAmC;UACxDwP,SAAS,GAAGvP,IAAI,CAACwP,KAAK,CAAC3R,SAAS,CAAC2H,YAAY,CAAC0C,QAAQ,GAAG,CAAC,CAAC,GAAGtK,IAAI,CAACJ,KAAK;QAC5E,CAAC,MACI;UACD+R,SAAS,GAAG3R,IAAI,CAACJ,KAAK;QAC1B;QACA,IAAMiS,UAAU,GAAG,CAAC7R,IAAI,CAACkC,SAAS,KAAK,CAAC,CAAC,mCAAmC,CAAC,CAAC,GAAG,CAAC,IAAIyP,SAAS;QAC/F,OAAO1R,SAAS,CAAC0Q,UAAU,CAACmB,mBAAmB,CAAC,CAAC,GAAGD,UAAU,GAAG5R,SAAS,CAAC2H,YAAY,CAACmK,UAAU;MACtG;IAAC;MAAApS,GAAA;MAAAC,KAAA,EACD,SAAAsQ,2BAA2BjQ,SAAS,EAAE6E,MAAM,EAAE9E,IAAI,EAAE;QAChD,IAAMgS,iBAAiB,GAAG,IAAI,CAACC,yBAAyB,CAAChS,SAAS,EAAED,IAAI,CAAC;QACzEC,SAAS,CAAC0Q,UAAU,CAACC,iBAAiB,CAAC;UAAEsB,UAAU,EAAEF;QAAkB,CAAC,EAAE,CAAC,CAAC,uBAAuB,CAAC;MACxG;IAAC;MAAArS,GAAA;MAAAC,KAAA,EACD,SAAAqS,0BAA0BhS,SAAS,EAAED,IAAI,EAAE;QACvC,IAAMmS,YAAY,GAAG,CAACnS,IAAI,CAACkC,SAAS,KAAK,CAAC,CAAC,qCAAqC,CAAC,CAAC,GAAG,CAAC,IAAIlC,IAAI,CAACJ,KAAK;QACpG,OAAOK,SAAS,CAAC0Q,UAAU,CAACyB,oBAAoB,CAAC,CAAC,GAAGD,YAAY,GAAGlS,SAAS,CAAC2H,YAAY,CAACyK,8BAA8B;MAC7H;IAAC;EAAA,EAjG0BjT,iBAAiB;EAmGhD8E,sBAAsB,CAACwL,gBAAgB,GAAGA,gBAAgB;EAC1DxL,sBAAsB,CAACoO,YAAY,GAAGrU,qBAAqB,CAAC,IAAIyR,gBAAgB,CAAC,CAAC,CAAC;EACnFxL,sBAAsB,CAACqO,YAAY,GAAGtU,qBAAqB,CAAC,6BAAAuU,oBAAA;IACxD,SAAAC,QAAA,EAAc;MAAAnT,eAAA,OAAAmT,OAAA;MAAA,OAAAlT,UAAA,OAAAkT,OAAA,GACJ;QACFpN,EAAE,EAAE,cAAc;QAClBC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;UACxCuD,GAAG,EAAE;YAAEvD,OAAO,EAAE,GAAG,CAAC,uBAAuB,EAAE,CAAC;UAAqB;QACvE;MACJ,CAAC;IACL;IAACxH,SAAA,CAAAgT,OAAA,EAAAD,oBAAA;IAAA,OAAA9S,YAAA,CAAA+S,OAAA;MAAA9S,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCkE,sBAAsB,CAACoO,YAAY,CAACnS,oBAAoB,CAACF,SAAS,EAAE;UAChES,EAAE,EAAEN,aAAa,CAACiB,YAAY,CAACC,EAAE;UACjCV,EAAE,EAAER,aAAa,CAACsB,OAAO,CAACE,WAAW;UACrChC,KAAK,EAAE,CAAC;UACRkB,YAAY,EAAE,KAAK;UACnBwB,MAAM,EAAE,KAAK;UACbwC,MAAM,EAAE9E,IAAI,CAAC8E;QACjB,CAAC,CAAC;MACN;IAAC;EAAA,EAtByE1F,iBAAiB,GAuB/F,CAAC,CAAC;EACF8E,sBAAsB,CAACwO,YAAY,GAAGzU,qBAAqB,CAAC,6BAAA0U,oBAAA;IACxD,SAAAC,QAAA,EAAc;MAAAtT,eAAA,OAAAsT,OAAA;MAAA,OAAArT,UAAA,OAAAqT,OAAA,GACJ;QACFvN,EAAE,EAAE,cAAc;QAClBC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;UACxC4L,GAAG,EAAE;YAAE5L,OAAO,EAAE,GAAG,CAAC,mBAAmB,EAAE,CAAC;UAAqB,CAAC;UAChEmB,KAAK,EAAE;YAAEnB,OAAO,EAAE,GAAG,CAAC,mBAAmB,EAAE,CAAC;UAAqB;QACrE;MACJ,CAAC;IACL;IAACxH,SAAA,CAAAmT,OAAA,EAAAD,oBAAA;IAAA,OAAAjT,YAAA,CAAAkT,OAAA;MAAAjT,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCkE,sBAAsB,CAACoO,YAAY,CAACnS,oBAAoB,CAACF,SAAS,EAAE;UAChES,EAAE,EAAEN,aAAa,CAACiB,YAAY,CAACC,EAAE;UACjCV,EAAE,EAAER,aAAa,CAACsB,OAAO,CAACG,IAAI;UAC9BjC,KAAK,EAAE,CAAC;UACRkB,YAAY,EAAE,KAAK;UACnBwB,MAAM,EAAE,KAAK;UACbwC,MAAM,EAAE9E,IAAI,CAAC8E;QACjB,CAAC,CAAC;MACN;IAAC;EAAA,EAvByE1F,iBAAiB,GAwB/F,CAAC,CAAC;EACF8E,sBAAsB,CAAC4O,eAAe,GAAG7U,qBAAqB,CAAC,6BAAA8U,oBAAA;IAC3D,SAAAC,QAAA,EAAc;MAAA1T,eAAA,OAAA0T,OAAA;MAAA,OAAAzT,UAAA,OAAAyT,OAAA,GACJ;QACF3N,EAAE,EAAE,iBAAiB;QACrBC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ;QAC9B;MACJ,CAAC;IACL;IAAC1I,SAAA,CAAAuT,OAAA,EAAAD,oBAAA;IAAA,OAAArT,YAAA,CAAAsT,OAAA;MAAArT,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCkE,sBAAsB,CAACoO,YAAY,CAACnS,oBAAoB,CAACF,SAAS,EAAE;UAChES,EAAE,EAAEN,aAAa,CAACiB,YAAY,CAACC,EAAE;UACjCV,EAAE,EAAER,aAAa,CAACsB,OAAO,CAACK,MAAM;UAChCnC,KAAK,EAAE,CAAC;UACRkB,YAAY,EAAE,KAAK;UACnBwB,MAAM,EAAE,KAAK;UACbwC,MAAM,EAAE9E,IAAI,CAAC8E;QACjB,CAAC,CAAC;MACN;IAAC;EAAA,EApB4E1F,iBAAiB,GAqBlG,CAAC,CAAC;EACF8E,sBAAsB,CAAC+O,cAAc,GAAGhV,qBAAqB,CAAC,6BAAAiV,oBAAA;IAC1D,SAAAC,QAAA,EAAc;MAAA7T,eAAA,OAAA6T,OAAA;MAAA,OAAA5T,UAAA,OAAA4T,OAAA,GACJ;QACF9N,EAAE,EAAE,gBAAgB;QACpBC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;UACxCuD,GAAG,EAAE;YAAEvD,OAAO,EAAE,GAAG,CAAC,uBAAuB,EAAE,CAAC;UAAuB;QACzE;MACJ,CAAC;IACL;IAACxH,SAAA,CAAA0T,OAAA,EAAAD,oBAAA;IAAA,OAAAxT,YAAA,CAAAyT,OAAA;MAAAxT,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCkE,sBAAsB,CAACoO,YAAY,CAACnS,oBAAoB,CAACF,SAAS,EAAE;UAChES,EAAE,EAAEN,aAAa,CAACiB,YAAY,CAACG,IAAI;UACnCZ,EAAE,EAAER,aAAa,CAACsB,OAAO,CAACE,WAAW;UACrChC,KAAK,EAAE,CAAC;UACRkB,YAAY,EAAE,KAAK;UACnBwB,MAAM,EAAE,KAAK;UACbwC,MAAM,EAAE9E,IAAI,CAAC8E;QACjB,CAAC,CAAC;MACN;IAAC;EAAA,EAtB2E1F,iBAAiB,GAuBjG,CAAC,CAAC;EACF8E,sBAAsB,CAACkP,cAAc,GAAGnV,qBAAqB,CAAC,6BAAAoV,oBAAA;IAC1D,SAAAC,SAAA,EAAc;MAAAhU,eAAA,OAAAgU,QAAA;MAAA,OAAA/T,UAAA,OAAA+T,QAAA,GACJ;QACFjO,EAAE,EAAE,gBAAgB;QACpBC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC;UACxC4L,GAAG,EAAE;YAAE5L,OAAO,EAAE,GAAG,CAAC,mBAAmB,EAAE,CAAC;UAAuB,CAAC;UAClEmB,KAAK,EAAE;YAAEnB,OAAO,EAAE,GAAG,CAAC,mBAAmB,EAAE,CAAC;UAAuB;QACvE;MACJ,CAAC;IACL;IAACxH,SAAA,CAAA6T,QAAA,EAAAD,oBAAA;IAAA,OAAA3T,YAAA,CAAA4T,QAAA;MAAA3T,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCkE,sBAAsB,CAACoO,YAAY,CAACnS,oBAAoB,CAACF,SAAS,EAAE;UAChES,EAAE,EAAEN,aAAa,CAACiB,YAAY,CAACG,IAAI;UACnCZ,EAAE,EAAER,aAAa,CAACsB,OAAO,CAACG,IAAI;UAC9BjC,KAAK,EAAE,CAAC;UACRkB,YAAY,EAAE,KAAK;UACnBwB,MAAM,EAAE,KAAK;UACbwC,MAAM,EAAE9E,IAAI,CAAC8E;QACjB,CAAC,CAAC;MACN;IAAC;EAAA,EAvB2E1F,iBAAiB,GAwBjG,CAAC,CAAC;EACF8E,sBAAsB,CAACqP,kBAAkB,GAAGtV,qBAAqB,CAAC,6BAAAuV,oBAAA;IAC9D,SAAAC,SAAA,EAAc;MAAAnU,eAAA,OAAAmU,QAAA;MAAA,OAAAlU,UAAA,OAAAkU,QAAA,GACJ;QACFpO,EAAE,EAAE,oBAAoB;QACxBC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ;QAC9B;MACJ,CAAC;IACL;IAAC1I,SAAA,CAAAgU,QAAA,EAAAD,oBAAA;IAAA,OAAA9T,YAAA,CAAA+T,QAAA;MAAA9T,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCkE,sBAAsB,CAACoO,YAAY,CAACnS,oBAAoB,CAACF,SAAS,EAAE;UAChES,EAAE,EAAEN,aAAa,CAACiB,YAAY,CAACG,IAAI;UACnCZ,EAAE,EAAER,aAAa,CAACsB,OAAO,CAACK,MAAM;UAChCnC,KAAK,EAAE,CAAC;UACRkB,YAAY,EAAE,KAAK;UACnBwB,MAAM,EAAE,KAAK;UACbwC,MAAM,EAAE9E,IAAI,CAAC8E;QACjB,CAAC,CAAC;MACN;IAAC;EAAA,EApB+E1F,iBAAiB,GAqBrG,CAAC,CAAC;EACF8E,sBAAsB,CAACwP,UAAU,GAAGzV,qBAAqB,CAAC,6BAAA0V,oBAAA;IACtD,SAAAC,SAAA,EAAc;MAAAtU,eAAA,OAAAsU,QAAA;MAAA,OAAArU,UAAA,OAAAqU,QAAA,GACJ;QACFvO,EAAE,EAAE,YAAY;QAChBC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ;QAC9B;MACJ,CAAC;IACL;IAAC1I,SAAA,CAAAmU,QAAA,EAAAD,oBAAA;IAAA,OAAAjU,YAAA,CAAAkU,QAAA;MAAAjU,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCkE,sBAAsB,CAACoO,YAAY,CAACnS,oBAAoB,CAACF,SAAS,EAAE;UAChES,EAAE,EAAEN,aAAa,CAACiB,YAAY,CAACI,IAAI;UACnCb,EAAE,EAAER,aAAa,CAACsB,OAAO,CAACM,MAAM;UAChCpC,KAAK,EAAE,CAAC;UACRkB,YAAY,EAAE,KAAK;UACnBwB,MAAM,EAAE,KAAK;UACbwC,MAAM,EAAE9E,IAAI,CAAC8E;QACjB,CAAC,CAAC;MACN;IAAC;EAAA,EApBuE1F,iBAAiB,GAqB7F,CAAC,CAAC;EACF8E,sBAAsB,CAAC2P,WAAW,GAAG5V,qBAAqB,CAAC,6BAAA6V,oBAAA;IACvD,SAAAC,SAAA,EAAc;MAAAzU,eAAA,OAAAyU,QAAA;MAAA,OAAAxU,UAAA,OAAAwU,QAAA,GACJ;QACF1O,EAAE,EAAE,aAAa;QACjBC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ;QAC9B;MACJ,CAAC;IACL;IAAC1I,SAAA,CAAAsU,QAAA,EAAAD,oBAAA;IAAA,OAAApU,YAAA,CAAAqU,QAAA;MAAApU,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCkE,sBAAsB,CAACoO,YAAY,CAACnS,oBAAoB,CAACF,SAAS,EAAE;UAChES,EAAE,EAAEN,aAAa,CAACiB,YAAY,CAACE,KAAK;UACpCX,EAAE,EAAER,aAAa,CAACsB,OAAO,CAACM,MAAM;UAChCpC,KAAK,EAAE,CAAC;UACRkB,YAAY,EAAE,KAAK;UACnBwB,MAAM,EAAE,KAAK;UACbwC,MAAM,EAAE9E,IAAI,CAAC8E;QACjB,CAAC,CAAC;MACN;IAAC;EAAA,EApBwE1F,iBAAiB,GAqB9F,CAAC,CAAC;EAAC,IACG4U,WAAW,0BAAAC,oBAAA;IACb,SAAAD,YAAY3P,IAAI,EAAE;MAAA,IAAA6P,OAAA;MAAA5U,eAAA,OAAA0U,WAAA;MACdE,OAAA,GAAA3U,UAAA,OAAAyU,WAAA,GAAM3P,IAAI;MACV6P,OAAA,CAAK3P,gBAAgB,GAAGF,IAAI,CAACG,eAAe;MAAC,OAAA0P,OAAA;IACjD;IAACzU,SAAA,CAAAuU,WAAA,EAAAC,oBAAA;IAAA,OAAAvU,YAAA,CAAAsU,WAAA;MAAArU,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAI,CAACA,IAAI,CAACyE,QAAQ,EAAE;UAChB;QACJ;QACAxE,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC,CACxEnG,kBAAkB,CAACwV,IAAI,CAAClU,SAAS,EAAEA,SAAS,CAAC+E,qBAAqB,CAAC,CAAC,EAAE,IAAI,CAACT,gBAAgB,EAAEvE,IAAI,CAACyE,QAAQ,CAAC,CAC9G,CAAC;QACF,IAAIzE,IAAI,CAACkF,UAAU,KAAK,CAAC,CAAC,wCAAwC;UAC9DjF,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC;QACvD;MACJ;IAAC;EAAA,EAhBqB1F,iBAAiB;EAkB3C8E,sBAAsB,CAACkQ,UAAU,GAAGnW,qBAAqB,CAAC,IAAI+V,WAAW,CAAC;IACtExP,eAAe,EAAE,KAAK;IACtBa,EAAE,EAAE,aAAa;IACjBC,YAAY,EAAEC;EAClB,CAAC,CAAC,CAAC;EACHrB,sBAAsB,CAACmQ,cAAc,GAAGpW,qBAAqB,CAAC,IAAI+V,WAAW,CAAC;IAC1ExP,eAAe,EAAE,IAAI;IACrBa,EAAE,EAAE,iBAAiB;IACrBC,YAAY,EAAEC;EAClB,CAAC,CAAC,CAAC;EACHrB,sBAAsB,CAACoQ,oBAAoB,GAAGrW,qBAAqB,CAAC,6BAAAsW,oBAAA;IAChE,SAAAC,SAAA,EAAc;MAAAlV,eAAA,OAAAkV,QAAA;MAAA,OAAAjV,UAAA,OAAAiV,QAAA,GACJ;QACFnP,EAAE,EAAE,sBAAsB;QAC1BC,YAAY,EAAEC;MAClB,CAAC;IACL;IAAC9F,SAAA,CAAA+U,QAAA,EAAAD,oBAAA;IAAA,OAAA7U,YAAA,CAAA8U,QAAA;MAAA7U,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAI,CAACA,IAAI,CAACyE,QAAQ,EAAE;UAChB;QACJ;QACA,IAAMiI,oBAAoB,GAAGzM,SAAS,CAAC0M,uBAAuB,CAAC,CAAC;QAChE,IAAMhB,MAAM,GAAG1L,SAAS,CAAC4J,eAAe,CAAC,CAAC;QAC1C,IAAM+C,SAAS,GAAGjB,MAAM,CAACkB,KAAK,CAAC,CAAC,CAAC;QACjC,IAAM4H,cAAc,GAAG9I,MAAM,CAACe,oBAAoB,CAAC;QACnDE,SAAS,CAACF,oBAAoB,CAAC,GAAG/N,kBAAkB,CAACwV,IAAI,CAAClU,SAAS,EAAEwU,cAAc,EAAEA,cAAc,CAAC3I,UAAU,CAAC4I,YAAY,CAAC,CAAC,EAAE1U,IAAI,CAACyE,QAAQ,CAAC;QAC7IxE,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC8H,SAAS,CAAC;MAC1F;IAAC;EAAA,EAlBiFxN,iBAAiB,GAmBvG,CAAC,CAAC;EAAC,IACGuV,WAAW,0BAAAC,oBAAA;IACb,SAAAD,YAAYtQ,IAAI,EAAE;MAAA,IAAAwQ,OAAA;MAAAvV,eAAA,OAAAqV,WAAA;MACdE,OAAA,GAAAtV,UAAA,OAAAoV,WAAA,GAAMtQ,IAAI;MACVwQ,OAAA,CAAKtQ,gBAAgB,GAAGF,IAAI,CAACG,eAAe;MAAC,OAAAqQ,OAAA;IACjD;IAACpV,SAAA,CAAAkV,WAAA,EAAAC,oBAAA;IAAA,OAAAlV,YAAA,CAAAiV,WAAA;MAAAhV,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAI,CAACA,IAAI,CAACyE,QAAQ,EAAE;UAChB;QACJ;QACAxE,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC,CACxEnG,kBAAkB,CAAC+M,IAAI,CAACzL,SAAS,EAAEA,SAAS,CAAC+E,qBAAqB,CAAC,CAAC,EAAE,IAAI,CAACT,gBAAgB,EAAEvE,IAAI,CAACyE,QAAQ,EAAEzE,IAAI,CAACiF,YAAY,CAAC,CACjI,CAAC;QACF,IAAIjF,IAAI,CAACkF,UAAU,KAAK,CAAC,CAAC,wCAAwC;UAC9DjF,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC;QACxD;MACJ;IAAC;EAAA,EAhBqB1F,iBAAiB;EAkB3C8E,sBAAsB,CAAC4Q,UAAU,GAAG7W,qBAAqB,CAAC,IAAI0W,WAAW,CAAC;IACtEnQ,eAAe,EAAE,KAAK;IACtBa,EAAE,EAAE,aAAa;IACjBC,YAAY,EAAEC;EAClB,CAAC,CAAC,CAAC;EACHrB,sBAAsB,CAAC6Q,cAAc,GAAG9W,qBAAqB,CAAC,IAAI0W,WAAW,CAAC;IAC1EnQ,eAAe,EAAE,IAAI;IACrBa,EAAE,EAAE,iBAAiB;IACrBC,YAAY,EAAEC;EAClB,CAAC,CAAC,CAAC;EAAC,IACEyP,qBAAqB,0BAAAC,oBAAA;IACvB,SAAAD,sBAAY3Q,IAAI,EAAE;MAAA,IAAA6Q,OAAA;MAAA5V,eAAA,OAAA0V,qBAAA;MACdE,OAAA,GAAA3V,UAAA,OAAAyV,qBAAA,GAAM3Q,IAAI;MACV6Q,OAAA,CAAK3Q,gBAAgB,GAAGF,IAAI,CAACG,eAAe;MAAC,OAAA0Q,OAAA;IACjD;IAACzV,SAAA,CAAAuV,qBAAA,EAAAC,oBAAA;IAAA,OAAAvV,YAAA,CAAAsV,qBAAA;MAAArV,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAI,CAACA,IAAI,CAACyE,QAAQ,EAAE;UAChB;QACJ;QACA,IAAMiI,oBAAoB,GAAGzM,SAAS,CAAC0M,uBAAuB,CAAC,CAAC;QAChE,IAAMhB,MAAM,GAAG1L,SAAS,CAAC4J,eAAe,CAAC,CAAC;QAC1C,IAAM+C,SAAS,GAAGjB,MAAM,CAACkB,KAAK,CAAC,CAAC,CAAC;QACjCD,SAAS,CAACF,oBAAoB,CAAC,GAAG/N,kBAAkB,CAAC+M,IAAI,CAACzL,SAAS,EAAE0L,MAAM,CAACe,oBAAoB,CAAC,EAAE,IAAI,CAACnI,gBAAgB,EAAEvE,IAAI,CAACyE,QAAQ,EAAEzE,IAAI,CAACiF,YAAY,CAAC;QAC3JhF,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC8H,SAAS,CAAC;MAC1F;IAAC;EAAA,EAf+BxN,iBAAiB;EAiBrD8E,sBAAsB,CAACiR,oBAAoB,GAAGlX,qBAAqB,CAAC,IAAI+W,qBAAqB,CAAC;IAC1FxQ,eAAe,EAAE,KAAK;IACtBa,EAAE,EAAE,sBAAsB;IAC1BC,YAAY,EAAEC;EAClB,CAAC,CAAC,CAAC;EACHrB,sBAAsB,CAACkR,wBAAwB,GAAGnX,qBAAqB,CAAC,IAAI+W,qBAAqB,CAAC;IAC9FxQ,eAAe,EAAE,IAAI;IACrBa,EAAE,EAAE,0BAA0B;IAC9BC,YAAY,EAAEC;EAClB,CAAC,CAAC,CAAC;EACHrB,sBAAsB,CAACmR,eAAe,GAAGpX,qBAAqB,CAAC,6BAAAqX,oBAAA;IAC3D,SAAAC,SAAA,EAAc;MAAAjW,eAAA,OAAAiW,QAAA;MAAA,OAAAhW,UAAA,OAAAgW,QAAA,GACJ;QACFlQ,EAAE,EAAE,iBAAiB;QACrBC,YAAY,EAAEvG,iBAAiB,CAACyW,oBAAoB;QACpDxN,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,CAAC,CAAC;UACXwD,SAAS,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAC5C;MACJ,CAAC;IACL;IAAChL,SAAA,CAAA8V,QAAA,EAAAD,oBAAA;IAAA,OAAA5V,YAAA,CAAA6V,QAAA;MAAA5V,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC,CACxEnG,kBAAkB,CAAC8W,eAAe,CAACxV,SAAS,EAAEA,SAAS,CAAC+E,qBAAqB,CAAC,CAAC,CAAC,CACnF,CAAC;QACF/E,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,IAAI,CAAC;MACjD;IAAC;EAAA,EAnB4E1F,iBAAiB,GAoBlG,CAAC,CAAC;EACF8E,sBAAsB,CAACwR,sBAAsB,GAAGzX,qBAAqB,CAAC,6BAAA0X,oBAAA;IAClE,SAAAC,SAAA,EAAc;MAAAtW,eAAA,OAAAsW,QAAA;MAAA,OAAArW,UAAA,OAAAqW,QAAA,GACJ;QACFvQ,EAAE,EAAE,wBAAwB;QAC5BC,YAAY,EAAEvG,iBAAiB,CAAC8W,qBAAqB;QACrD7N,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW,GAAG,CAAC;UACvB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,CAAC,CAAC;UACXwD,SAAS,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;QAC5C;MACJ,CAAC;IACL;IAAChL,SAAA,CAAAmW,QAAA,EAAAD,oBAAA;IAAA,OAAAjW,YAAA,CAAAkW,QAAA;MAAAjW,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC,CACxE7E,SAAS,CAAC+E,qBAAqB,CAAC,CAAC,CACpC,CAAC;QACF/E,SAAS,CAACkF,gBAAgB,CAACnF,IAAI,CAAC8E,MAAM,EAAE,IAAI,CAAC;QAC7ChH,MAAM,CAACH,GAAG,CAAC0Q,QAAQ,CAAC,eAAe,EAAE,2BAA2B,CAAC,CAAC;MACtE;IAAC;EAAA,EApBmFjP,iBAAiB,GAqBzG,CAAC,CAAC;EACF8E,sBAAsB,CAAC4R,UAAU,GAAG7X,qBAAqB,CAAC,6BAAA8X,oBAAA;IACtD,SAAAC,SAAA,EAAc;MAAA1W,eAAA,OAAA0W,QAAA;MAAA,OAAAzW,UAAA,OAAAyW,QAAA,GACJ;QACF3Q,EAAE,EAAE,YAAY;QAChBC,YAAY,EAAEC,SAAS;QACvBvE,QAAQ,EAAEuB,WAAW,CAACvB;MAC1B,CAAC;IACL;IAACvB,SAAA,CAAAuW,QAAA,EAAAD,oBAAA;IAAA,OAAArW,YAAA,CAAAsW,QAAA;MAAArW,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAMiW,aAAa,GAAGjW,IAAI;QAC1B,IAAMkW,aAAa,GAAGD,aAAa,CAACvT,UAAU,IAAI,CAAC;QACnD,IAAIA,UAAU,GAAG,OAAOwT,aAAa,KAAK,QAAQ,GAAIA,aAAa,GAAG,CAAC,GAAKC,QAAQ,CAACD,aAAa,CAAC,GAAG,CAAE;QACxG,IAAIxT,UAAU,GAAG,CAAC,EAAE;UAChBA,UAAU,GAAG,CAAC;QAClB;QACA,IAAM0T,SAAS,GAAGnW,SAAS,CAACyE,KAAK,CAAC8M,YAAY,CAAC,CAAC;QAChD,IAAI9O,UAAU,GAAG0T,SAAS,EAAE;UACxB1T,UAAU,GAAG0T,SAAS;QAC1B;QACA,IAAMC,KAAK,GAAG,IAAIvX,KAAK,CAAC4D,UAAU,EAAE,CAAC,EAAEA,UAAU,EAAEzC,SAAS,CAACyE,KAAK,CAACiK,gBAAgB,CAACjM,UAAU,CAAC,CAAC;QAChG,IAAI4T,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAIL,aAAa,CAACtT,EAAE,EAAE;UAClB,QAAQsT,aAAa,CAACtT,EAAE;YACpB,KAAKJ,WAAW,CAACK,aAAa,CAACC,GAAG;cAC9ByT,QAAQ,GAAG,CAAC,CAAC;cACb;YACJ,KAAK/T,WAAW,CAACK,aAAa,CAACE,MAAM;cACjCwT,QAAQ,GAAG,CAAC,CAAC;cACb;YACJ,KAAK/T,WAAW,CAACK,aAAa,CAACG,MAAM;cACjCuT,QAAQ,GAAG,CAAC,CAAC;cACb;YACJ;cACI;UACR;QACJ;QACA,IAAMC,SAAS,GAAGtW,SAAS,CAACsH,oBAAoB,CAACiP,4BAA4B,CAACH,KAAK,CAAC;QACpFpW,SAAS,CAACwW,WAAW,CAACzW,IAAI,CAAC8E,MAAM,EAAE,KAAK,EAAEyR,SAAS,EAAED,QAAQ,EAAE,CAAC,CAAC,uBAAuB,CAAC;MAC7F;IAAC;EAAA,EAtCuElX,iBAAiB,GAuC7F,CAAC,CAAC;EACF8E,sBAAsB,CAACwS,SAAS,GAAG,6BAAAC,qBAAA;IAC/B,SAAAC,SAAA,EAAc;MAAAtX,eAAA,OAAAsX,QAAA;MAAA,OAAArX,UAAA,OAAAqX,QAAA,GACJxY,gBAAgB;IAC1B;IAACqB,SAAA,CAAAmX,QAAA,EAAAD,qBAAA;IAAA,OAAAjX,YAAA,CAAAkX,QAAA;MAAAjX,GAAA;MAAAC,KAAA,EACD,SAAAiE,cAAcJ,aAAa,EAAE;QACzB,IAAI7F,SAAS,EAAE;UACX6F,aAAa,CAACO,KAAK,CAAC,CAAC;UACrBP,aAAa,CAACnB,MAAM,CAAC,CAAC;QAC1B;QACAmB,aAAa,CAACoT,aAAa,CAACC,WAAW,CAAC,WAAW,CAAC;MACxD;IAAC;MAAAnX,GAAA;MAAAC,KAAA,EACD,SAAAC,iBAAiBC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAE;QACrC,IAAMC,SAAS,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC;QACxC,IAAI,CAACD,SAAS,EAAE;UACZ;UACA;QACJ;QACA,IAAI,CAACE,oBAAoB,CAACF,SAAS,EAAED,IAAI,CAAC;MAC9C;IAAC;MAAAL,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClCC,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC,UAAU,EAAE,CAAC,CAAC,mCAAmC,CACvElG,kBAAkB,CAACoY,SAAS,CAAC9W,SAAS,EAAEA,SAAS,CAAC+E,qBAAqB,CAAC,CAAC,CAAC,CAC7E,CAAC;MACN;IAAC;EAAA,EAxBgDhC,8BAA8B,GAyBjF,CAAC;EACHkB,sBAAsB,CAAC8S,YAAY,GAAG/Y,qBAAqB,CAAC,6BAAAgZ,oBAAA;IACxD,SAAAC,SAAA,EAAc;MAAA5X,eAAA,OAAA4X,QAAA;MAAA,OAAA3X,UAAA,OAAA2X,QAAA,GACJ;QACF7R,EAAE,EAAE,cAAc;QAClBC,YAAY,EAAEC;MAClB,CAAC;IACL;IAAC9F,SAAA,CAAAyX,QAAA,EAAAD,oBAAA;IAAA,OAAAvX,YAAA,CAAAwX,QAAA;MAAAvX,GAAA;MAAAC,KAAA,EACD,SAAAO,qBAAqBF,SAAS,EAAED,IAAI,EAAE;QAClC,IAAI,CAACA,IAAI,CAACmM,SAAS,EAAE;UACjB;QACJ;QACAlM,SAAS,CAACyE,KAAK,CAACC,gBAAgB,CAAC,CAAC;QAClC1E,SAAS,CAAC4E,eAAe,CAAC7E,IAAI,CAAC8E,MAAM,EAAE,CAAC,CAAC,mCAAmC,CACxEvG,WAAW,CAAC4Y,kBAAkB,CAACnX,IAAI,CAACmM,SAAS,CAAC,CACjD,CAAC;MACN;IAAC;EAAA,EAfyE/M,iBAAiB,GAgB/F,CAAC,CAAC;AACN,CAAC,EAAE8E,sBAAsB,KAAKA,sBAAsB,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3D,IAAMkT,wBAAwB,GAAGpY,cAAc,CAACqY,GAAG,CAACtY,iBAAiB,CAACoJ,cAAc,EAAEpJ,iBAAiB,CAACuY,eAAe,CAAC;AACxH,SAASC,uBAAuBA,CAAClS,EAAE,EAAEmS,UAAU,EAAE;EAC7CvY,mBAAmB,CAACwY,sBAAsB,CAAC;IACvCpS,EAAE,EAAEA,EAAE;IACN4B,OAAO,EAAEuQ,UAAU;IACnBE,IAAI,EAAEN,wBAAwB;IAC9BnP,MAAM,EAAE9I,WAAW,GAAG;EAC1B,CAAC,CAAC;AACN;AACAoY,uBAAuB,CAACrT,sBAAsB,CAAC2D,sBAAsB,CAACxC,EAAE,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC,uBAAuB,CAAC;AAC/HkS,uBAAuB,CAACrT,sBAAsB,CAACoE,uBAAuB,CAACjD,EAAE,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC,wBAAwB,CAAC;AACjIkS,uBAAuB,CAACrT,sBAAsB,CAAC8E,oBAAoB,CAAC3D,EAAE,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC,qBAAqB,CAAC;AAC3HkS,uBAAuB,CAACrT,sBAAsB,CAAC+E,wBAAwB,CAAC5D,EAAE,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC,oBAAoB,CAAC;AAC9HkS,uBAAuB,CAACrT,sBAAsB,CAACoF,sBAAsB,CAACjE,EAAE,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC,uBAAuB,CAAC;AAC/HkS,uBAAuB,CAACrT,sBAAsB,CAACqF,0BAA0B,CAAClE,EAAE,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC,sBAAsB,CAAC;AAClI,SAASsS,eAAeA,CAACC,OAAO,EAAE;EAC9BA,OAAO,CAACC,QAAQ,CAAC,CAAC;EAClB,OAAOD,OAAO;AAClB;AACA,OAAO,IAAIE,mBAAmB;AAC9B,CAAC,UAAUA,mBAAmB,EAAE;EAAA,IACtBC,kBAAkB,0BAAAC,eAAA;IAAA,SAAAD,mBAAA;MAAAzY,eAAA,OAAAyY,kBAAA;MAAA,OAAAxY,UAAA,OAAAwY,kBAAA,EAAAvY,SAAA;IAAA;IAAAC,SAAA,CAAAsY,kBAAA,EAAAC,eAAA;IAAA,OAAAtY,YAAA,CAAAqY,kBAAA;MAAApY,GAAA;MAAAC,KAAA,EACpB,SAAAC,iBAAiBC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAE;QACrC,IAAMC,SAAS,GAAGF,MAAM,CAACG,aAAa,CAAC,CAAC;QACxC,IAAI,CAACD,SAAS,EAAE;UACZ;UACA;QACJ;QACA,IAAI,CAACgY,qBAAqB,CAAClY,MAAM,EAAEE,SAAS,EAAED,IAAI,IAAI,CAAC,CAAC,CAAC;MAC7D;IAAC;EAAA,EAR4BhC,aAAa;EAU9C8Z,mBAAmB,CAACC,kBAAkB,GAAGA,kBAAkB;EAC3DD,mBAAmB,CAACI,eAAe,GAAGja,qBAAqB,CAAC,6BAAAka,mBAAA;IACxD,SAAAC,SAAA,EAAc;MAAA9Y,eAAA,OAAA8Y,QAAA;MAAA,OAAA7Y,UAAA,OAAA6Y,QAAA,GACJ;QACF/S,EAAE,EAAE,iBAAiB;QACrBC,YAAY,EAAEvG,iBAAiB,CAACsZ,QAAQ;QACxCrQ,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,CAAC;UACVuD,GAAG,EAAE;YAAEvD,OAAO,EAAE,GAAG,CAAC,uBAAuB,EAAE,CAAC;UAAmB;QACrE;MACJ,CAAC;IACL;IAACxH,SAAA,CAAA2Y,QAAA,EAAAD,mBAAA;IAAA,OAAAzY,YAAA,CAAA0Y,QAAA;MAAAzY,GAAA;MAAAC,KAAA,EACD,SAAAqY,sBAAsBlY,MAAM,EAAEE,SAAS,EAAED,IAAI,EAAE;QAC3CD,MAAM,CAACuY,YAAY,CAAC,CAAC;QACrBvY,MAAM,CAACwY,eAAe,CAAC,IAAI,CAAClT,EAAE,EAAEzG,cAAc,CAAC4Z,eAAe,CAACvY,SAAS,CAAC2H,YAAY,EAAE3H,SAAS,CAACyE,KAAK,EAAEzE,SAAS,CAAC4J,eAAe,CAAC,CAAC,CAAC/D,GAAG,CAAC,UAAA2S,CAAC;UAAA,OAAIA,CAAC,CAAC3M,UAAU,CAACK,SAAS;QAAA,EAAC,CAAC,CAAC;MAC1K;IAAC;EAAA,EAhByE4L,kBAAkB,GAiBhG,CAAC,CAAC;EACFD,mBAAmB,CAACY,OAAO,GAAGza,qBAAqB,CAAC,6BAAA0a,oBAAA;IAChD,SAAAC,SAAA,EAAc;MAAAtZ,eAAA,OAAAsZ,QAAA;MAAA,OAAArZ,UAAA,OAAAqZ,QAAA,GACJ;QACFvT,EAAE,EAAE,SAAS;QACbC,YAAY,EAAEvG,iBAAiB,CAACsZ,QAAQ;QACxCrQ,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAElJ,cAAc,CAACqY,GAAG,CAACtY,iBAAiB,CAAC8Z,eAAe,EAAE9Z,iBAAiB,CAAC+Z,mBAAmB,CAAC;UACpG7R,OAAO,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACzC;MACJ,CAAC;IACL;IAACxH,SAAA,CAAAmZ,QAAA,EAAAD,oBAAA;IAAA,OAAAjZ,YAAA,CAAAkZ,QAAA;MAAAjZ,GAAA;MAAAC,KAAA,EACD,SAAAqY,sBAAsBlY,MAAM,EAAEE,SAAS,EAAED,IAAI,EAAE;QAC3CD,MAAM,CAACuY,YAAY,CAAC,CAAC;QACrBvY,MAAM,CAACwY,eAAe,CAAC,IAAI,CAAClT,EAAE,EAAEzG,cAAc,CAACma,OAAO,CAAC9Y,SAAS,CAAC2H,YAAY,EAAE3H,SAAS,CAACyE,KAAK,EAAEzE,SAAS,CAAC4J,eAAe,CAAC,CAAC,CAAC/D,GAAG,CAAC,UAAA2S,CAAC;UAAA,OAAIA,CAAC,CAAC3M,UAAU,CAACK,SAAS;QAAA,EAAC,CAAC,CAAC;QAC9JpM,MAAM,CAACuY,YAAY,CAAC,CAAC;MACzB;IAAC;EAAA,EAhBiEP,kBAAkB,GAiBxF,CAAC,CAAC;EACFD,mBAAmB,CAACkB,GAAG,GAAG/a,qBAAqB,CAAC,6BAAAgb,oBAAA;IAC5C,SAAAC,SAAA,EAAc;MAAA5Z,eAAA,OAAA4Z,QAAA;MAAA,OAAA3Z,UAAA,OAAA2Z,QAAA,GACJ;QACF7T,EAAE,EAAE,KAAK;QACTC,YAAY,EAAEvG,iBAAiB,CAACsZ,QAAQ;QACxCrQ,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAElJ,cAAc,CAACqY,GAAG,CAACtY,iBAAiB,CAAC8Z,eAAe,EAAE9Z,iBAAiB,CAAC+Z,mBAAmB,CAAC;UACpG7R,OAAO,EAAE,CAAC,CAAC;QACf;MACJ,CAAC;IACL;IAACxH,SAAA,CAAAyZ,QAAA,EAAAD,oBAAA;IAAA,OAAAvZ,YAAA,CAAAwZ,QAAA;MAAAvZ,GAAA;MAAAC,KAAA,EACD,SAAAqY,sBAAsBlY,MAAM,EAAEE,SAAS,EAAED,IAAI,EAAE;QAC3CD,MAAM,CAACuY,YAAY,CAAC,CAAC;QACrBvY,MAAM,CAACwY,eAAe,CAAC,IAAI,CAAClT,EAAE,EAAEzG,cAAc,CAACua,GAAG,CAAClZ,SAAS,CAAC2H,YAAY,EAAE3H,SAAS,CAACyE,KAAK,EAAEzE,SAAS,CAAC4J,eAAe,CAAC,CAAC,CAAC/D,GAAG,CAAC,UAAA2S,CAAC;UAAA,OAAIA,CAAC,CAAC3M,UAAU,CAACK,SAAS;QAAA,EAAC,CAAC,CAAC;QAC1JpM,MAAM,CAACuY,YAAY,CAAC,CAAC;MACzB;IAAC;EAAA,EAhB6DP,kBAAkB,GAiBpF,CAAC,CAAC;EACFD,mBAAmB,CAACsB,UAAU,GAAGnb,qBAAqB,CAAC,6BAAAob,oBAAA;IACnD,SAAAC,SAAA,EAAc;MAAAha,eAAA,OAAAga,QAAA;MAAA,OAAA/Z,UAAA,OAAA+Z,QAAA,GACJ;QACFjU,EAAE,EAAE,YAAY;QAChBC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,CAAC,CAAC;UACXwD,SAAS,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,wBAAwB;UAChED,GAAG,EAAE;YAAEvD,OAAO,EAAE,CAAC,CAAC;YAAyBwD,SAAS,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,yBAAyB,GAAG,CAAC,uBAAuB,EAAE,CAAC,oBAAoB,GAAG,CAAC,uBAAuB,CAAC,CAAC;UAAyB;QACxN;MACJ,CAAC;IACL;IAAChL,SAAA,CAAA6Z,QAAA,EAAAD,oBAAA;IAAA,OAAA3Z,YAAA,CAAA4Z,QAAA;MAAA3Z,GAAA;MAAAC,KAAA,EACD,SAAAqY,sBAAsBlY,MAAM,EAAEE,SAAS,EAAED,IAAI,EAAE;QAC3C,IAAAuZ,qBAAA,GAAiD/a,gBAAgB,CAACgb,UAAU,CAACvZ,SAAS,CAACwZ,wBAAwB,CAAC,CAAC,EAAExZ,SAAS,CAAC2H,YAAY,EAAE3H,SAAS,CAACyE,KAAK,EAAEzE,SAAS,CAAC4J,eAAe,CAAC,CAAC,CAAC/D,GAAG,CAAC,UAAA2S,CAAC;YAAA,OAAIA,CAAC,CAAC3M,UAAU,CAACK,SAAS;UAAA,EAAC,EAAElM,SAAS,CAACyZ,6BAA6B,CAAC,CAAC,CAAC;UAAAC,sBAAA,GAAAC,cAAA,CAAAL,qBAAA;UAA7PM,4BAA4B,GAAAF,sBAAA;UAAEG,QAAQ,GAAAH,sBAAA;QAC7C,IAAIE,4BAA4B,EAAE;UAC9B9Z,MAAM,CAACuY,YAAY,CAAC,CAAC;QACzB;QACAvY,MAAM,CAACwY,eAAe,CAAC,IAAI,CAAClT,EAAE,EAAEyU,QAAQ,CAAC;QACzC7Z,SAAS,CAAC8Z,wBAAwB,CAAC,CAAC,CAAC,oCAAoC,CAAC;MAC9E;IAAC;EAAA,EArBoEhC,kBAAkB,GAsB3F,CAAC,CAAC;EACFD,mBAAmB,CAACkC,WAAW,GAAG/b,qBAAqB,CAAC,6BAAAgc,oBAAA;IACpD,SAAAC,SAAA,EAAc;MAAA5a,eAAA,OAAA4a,QAAA;MAAA,OAAA3a,UAAA,OAAA2a,QAAA,GACJ;QACF7U,EAAE,EAAE,aAAa;QACjBC,YAAY,EAAEC,SAAS;QACvByC,MAAM,EAAE;UACJC,MAAM,EAAE9I,WAAW;UACnB+I,MAAM,EAAEnJ,iBAAiB,CAACoJ,cAAc;UACxClB,OAAO,EAAE,EAAE,CAAC;UACZuD,GAAG,EAAE;YAAEvD,OAAO,EAAE,EAAE,CAAC;YAAsBwD,SAAS,EAAE,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC,oBAAoB,GAAG,CAAC,uBAAuB,EAAE,CAAC;UAAsB;QAC/J;MACJ,CAAC;IACL;IAAChL,SAAA,CAAAya,QAAA,EAAAD,oBAAA;IAAA,OAAAva,YAAA,CAAAwa,QAAA;MAAAva,GAAA;MAAAC,KAAA,EACD,SAAAqY,sBAAsBlY,MAAM,EAAEE,SAAS,EAAED,IAAI,EAAE;QAC3C,IAAAma,sBAAA,GAAiD3b,gBAAgB,CAAC4b,WAAW,CAACna,SAAS,CAACwZ,wBAAwB,CAAC,CAAC,EAAExZ,SAAS,CAAC2H,YAAY,EAAE3H,SAAS,CAACyE,KAAK,EAAEzE,SAAS,CAAC4J,eAAe,CAAC,CAAC,CAAC/D,GAAG,CAAC,UAAA2S,CAAC;YAAA,OAAIA,CAAC,CAAC3M,UAAU,CAACK,SAAS;UAAA,EAAC,CAAC;UAAAkO,sBAAA,GAAAT,cAAA,CAAAO,sBAAA;UAAnNN,4BAA4B,GAAAQ,sBAAA;UAAEP,QAAQ,GAAAO,sBAAA;QAC7C,IAAIR,4BAA4B,EAAE;UAC9B9Z,MAAM,CAACuY,YAAY,CAAC,CAAC;QACzB;QACAvY,MAAM,CAACwY,eAAe,CAAC,IAAI,CAAClT,EAAE,EAAEyU,QAAQ,CAAC;QACzC7Z,SAAS,CAAC8Z,wBAAwB,CAAC,CAAC,CAAC,qCAAqC,CAAC;MAC/E;IAAC;EAAA,EApBqEhC,kBAAkB,GAqB5F,CAAC,CAAC;EACFD,mBAAmB,CAACwC,IAAI,GAAG,6BAAAC,sBAAA;IACvB,SAAAC,SAAA,EAAc;MAAAlb,eAAA,OAAAkb,QAAA;MAAA,OAAAjb,UAAA,OAAAib,QAAA,GACJtc,WAAW;IACrB;IAACuB,SAAA,CAAA+a,QAAA,EAAAD,sBAAA;IAAA,OAAA7a,YAAA,CAAA8a,QAAA;MAAA7a,GAAA;MAAAC,KAAA,EACD,SAAAiE,cAAcJ,aAAa,EAAE;QACzBA,aAAa,CAACoT,aAAa,CAACC,WAAW,CAAC,MAAM,CAAC;MACnD;IAAC;MAAAnX,GAAA;MAAAC,KAAA,EACD,SAAAC,iBAAiBC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAE;QACrC,IAAI,CAACD,MAAM,CAAC0a,QAAQ,CAAC,CAAC,IAAI1a,MAAM,CAAC2a,SAAS,CAAC,EAAE,CAAC,2BAA2B,CAAC,KAAK,IAAI,EAAE;UACjF;QACJ;QACA,OAAO3a,MAAM,CAAC4a,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MACnC;IAAC;EAAA,EAZwC5X,8BAA8B,GAazE,CAAC;EACH8U,mBAAmB,CAAC+C,IAAI,GAAG,6BAAAC,sBAAA;IACvB,SAAAC,SAAA,EAAc;MAAAzb,eAAA,OAAAyb,QAAA;MAAA,OAAAxb,UAAA,OAAAwb,QAAA,GACJ5c,WAAW;IACrB;IAACsB,SAAA,CAAAsb,QAAA,EAAAD,sBAAA;IAAA,OAAApb,YAAA,CAAAqb,QAAA;MAAApb,GAAA;MAAAC,KAAA,EACD,SAAAiE,cAAcJ,aAAa,EAAE;QACzBA,aAAa,CAACoT,aAAa,CAACC,WAAW,CAAC,MAAM,CAAC;MACnD;IAAC;MAAAnX,GAAA;MAAAC,KAAA,EACD,SAAAC,iBAAiBC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAE;QACrC,IAAI,CAACD,MAAM,CAAC0a,QAAQ,CAAC,CAAC,IAAI1a,MAAM,CAAC2a,SAAS,CAAC,EAAE,CAAC,2BAA2B,CAAC,KAAK,IAAI,EAAE;UACjF;QACJ;QACA,OAAO3a,MAAM,CAAC4a,QAAQ,CAAC,CAAC,CAACK,IAAI,CAAC,CAAC;MACnC;IAAC;EAAA,EAZwChY,8BAA8B,GAazE,CAAC;AACP,CAAC,EAAE8U,mBAAmB,KAAKA,mBAAmB,GAAG,CAAC,CAAC,CAAC,CAAC;AACrD;AACA;AACA;AAFA,IAGMmD,oBAAoB,0BAAAC,QAAA;EACtB,SAAAD,qBAAY5V,EAAE,EAAE8V,SAAS,EAAEna,QAAQ,EAAE;IAAA,IAAAoa,OAAA;IAAA9b,eAAA,OAAA2b,oBAAA;IACjCG,OAAA,GAAA7b,UAAA,OAAA0b,oBAAA,GAAM;MACF5V,EAAE,EAAEA,EAAE;MACNC,YAAY,EAAEC,SAAS;MACvBvE,QAAQ,EAARA;IACJ,CAAC;IACDoa,OAAA,CAAKC,UAAU,GAAGF,SAAS;IAAC,OAAAC,OAAA;EAChC;EAAC3b,SAAA,CAAAwb,oBAAA,EAAAC,QAAA;EAAA,OAAAxb,YAAA,CAAAub,oBAAA;IAAAtb,GAAA;IAAAC,KAAA,EACD,SAAA0b,WAAWxb,QAAQ,EAAEE,IAAI,EAAE;MACvB,IAAMD,MAAM,GAAGD,QAAQ,CAACuD,GAAG,CAAChF,kBAAkB,CAAC,CAACiF,oBAAoB,CAAC,CAAC;MACtE,IAAI,CAACvD,MAAM,EAAE;QACT;MACJ;MACAA,MAAM,CAACwb,OAAO,CAAC,UAAU,EAAE,IAAI,CAACF,UAAU,EAAErb,IAAI,CAAC;IACrD;EAAC;AAAA,EAf8BjC,OAAO;AAiB1C,SAASyd,2BAA2BA,CAACL,SAAS,EAAEna,QAAQ,EAAE;EACtD2W,eAAe,CAAC,IAAIsD,oBAAoB,CAAC,UAAU,GAAGE,SAAS,EAAEA,SAAS,CAAC,CAAC;EAC5ExD,eAAe,CAAC,IAAIsD,oBAAoB,CAACE,SAAS,EAAEA,SAAS,EAAEna,QAAQ,CAAC,CAAC;AAC7E;AACAwa,2BAA2B,CAAC,MAAM,CAAC,oBAAoB;EACnDva,WAAW,QAAQ;EACnBjB,IAAI,EAAE,CAAC;IACCkB,IAAI,EAAE,MAAM;IACZE,MAAM,EAAE;MACJ,MAAM,EAAE,QAAQ;MAChB,UAAU,EAAE,CAAC,MAAM,CAAC;MACpB,YAAY,EAAE;QACV,MAAM,EAAE;UACJ,MAAM,EAAE;QACZ;MACJ;IACJ;EACJ,CAAC;AACT,CAAC,CAAC;AACFoa,2BAA2B,CAAC,qBAAqB,CAAC,iCAAiC,CAAC;AACpFA,2BAA2B,CAAC,iBAAiB,CAAC,6BAA6B,CAAC;AAC5EA,2BAA2B,CAAC,kBAAkB,CAAC,8BAA8B,CAAC;AAC9EA,2BAA2B,CAAC,gBAAgB,CAAC,4BAA4B,CAAC;AAC1EA,2BAA2B,CAAC,OAAO,CAAC,mBAAmB,CAAC;AACxDA,2BAA2B,CAAC,KAAK,CAAC,iBAAiB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}