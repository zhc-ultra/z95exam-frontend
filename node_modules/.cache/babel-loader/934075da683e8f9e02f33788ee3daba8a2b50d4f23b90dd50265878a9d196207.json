{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { normalizeIndentation } from '../../../common/core/indentation.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport function getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber, inheritedIndent) {\n  if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n    // Model is empty\n    return [];\n  }\n  var indentationRules = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentationRules;\n  if (!indentationRules) {\n    return [];\n  }\n  endLineNumber = Math.min(endLineNumber, model.getLineCount());\n  // Skip `unIndentedLinePattern` lines\n  while (startLineNumber <= endLineNumber) {\n    if (!indentationRules.unIndentedLinePattern) {\n      break;\n    }\n    var text = model.getLineContent(startLineNumber);\n    if (!indentationRules.unIndentedLinePattern.test(text)) {\n      break;\n    }\n    startLineNumber++;\n  }\n  if (startLineNumber > endLineNumber - 1) {\n    return [];\n  }\n  var _model$getOptions = model.getOptions(),\n    tabSize = _model$getOptions.tabSize,\n    indentSize = _model$getOptions.indentSize,\n    insertSpaces = _model$getOptions.insertSpaces;\n  var shiftIndent = function shiftIndent(indentation, count) {\n    count = count || 1;\n    return ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n  };\n  var unshiftIndent = function unshiftIndent(indentation, count) {\n    count = count || 1;\n    return ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n  };\n  var indentEdits = [];\n  // indentation being passed to lines below\n  var globalIndent;\n  // Calculate indentation for the first line\n  // If there is no passed-in indentation, we use the indentation of the first line as base.\n  var currentLineText = model.getLineContent(startLineNumber);\n  var adjustedLineContent = currentLineText;\n  if (inheritedIndent !== undefined && inheritedIndent !== null) {\n    globalIndent = inheritedIndent;\n    var oldIndentation = strings.getLeadingWhitespace(currentLineText);\n    adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n    if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n      globalIndent = unshiftIndent(globalIndent);\n      adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n    }\n    if (currentLineText !== adjustedLineContent) {\n      indentEdits.push(EditOperation.replaceMove(new Selection(startLineNumber, 1, startLineNumber, oldIndentation.length + 1), normalizeIndentation(globalIndent, indentSize, insertSpaces)));\n    }\n  } else {\n    globalIndent = strings.getLeadingWhitespace(currentLineText);\n  }\n  // idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n  var idealIndentForNextLine = globalIndent;\n  if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n    idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n    globalIndent = shiftIndent(globalIndent);\n  } else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n    idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n  }\n  startLineNumber++;\n  // Calculate indentation adjustment for all following lines\n  for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n    var _text = model.getLineContent(lineNumber);\n    var _oldIndentation = strings.getLeadingWhitespace(_text);\n    var _adjustedLineContent = idealIndentForNextLine + _text.substring(_oldIndentation.length);\n    if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(_adjustedLineContent)) {\n      idealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n      globalIndent = unshiftIndent(globalIndent);\n    }\n    if (_oldIndentation !== idealIndentForNextLine) {\n      indentEdits.push(EditOperation.replaceMove(new Selection(lineNumber, 1, lineNumber, _oldIndentation.length + 1), normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n    }\n    // calculate idealIndentForNextLine\n    if (indentationRules.unIndentedLinePattern && indentationRules.unIndentedLinePattern.test(_text)) {\n      // In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n      // but don't change globalIndent and idealIndentForNextLine.\n      continue;\n    } else if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(_adjustedLineContent)) {\n      globalIndent = shiftIndent(globalIndent);\n      idealIndentForNextLine = globalIndent;\n    } else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(_adjustedLineContent)) {\n      idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n    } else {\n      idealIndentForNextLine = globalIndent;\n    }\n  }\n  return indentEdits;\n}","map":{"version":3,"names":["strings","ShiftCommand","EditOperation","normalizeIndentation","Selection","getReindentEditOperations","model","languageConfigurationService","startLineNumber","endLineNumber","inheritedIndent","getLineCount","getLineMaxColumn","indentationRules","getLanguageConfiguration","getLanguageId","Math","min","unIndentedLinePattern","text","getLineContent","test","_model$getOptions","getOptions","tabSize","indentSize","insertSpaces","shiftIndent","indentation","count","length","unshiftIndent","indentEdits","globalIndent","currentLineText","adjustedLineContent","undefined","oldIndentation","getLeadingWhitespace","substring","decreaseIndentPattern","push","replaceMove","idealIndentForNextLine","increaseIndentPattern","indentNextLinePattern","lineNumber"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/contrib/indentation/common/indentation.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditOperation } from '../../../common/core/editOperation.js';\nimport { normalizeIndentation } from '../../../common/core/indentation.js';\nimport { Selection } from '../../../common/core/selection.js';\nexport function getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber, inheritedIndent) {\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n        // Model is empty\n        return [];\n    }\n    const indentationRules = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentationRules;\n    if (!indentationRules) {\n        return [];\n    }\n    endLineNumber = Math.min(endLineNumber, model.getLineCount());\n    // Skip `unIndentedLinePattern` lines\n    while (startLineNumber <= endLineNumber) {\n        if (!indentationRules.unIndentedLinePattern) {\n            break;\n        }\n        const text = model.getLineContent(startLineNumber);\n        if (!indentationRules.unIndentedLinePattern.test(text)) {\n            break;\n        }\n        startLineNumber++;\n    }\n    if (startLineNumber > endLineNumber - 1) {\n        return [];\n    }\n    const { tabSize, indentSize, insertSpaces } = model.getOptions();\n    const shiftIndent = (indentation, count) => {\n        count = count || 1;\n        return ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n    };\n    const unshiftIndent = (indentation, count) => {\n        count = count || 1;\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n    };\n    const indentEdits = [];\n    // indentation being passed to lines below\n    let globalIndent;\n    // Calculate indentation for the first line\n    // If there is no passed-in indentation, we use the indentation of the first line as base.\n    const currentLineText = model.getLineContent(startLineNumber);\n    let adjustedLineContent = currentLineText;\n    if (inheritedIndent !== undefined && inheritedIndent !== null) {\n        globalIndent = inheritedIndent;\n        const oldIndentation = strings.getLeadingWhitespace(currentLineText);\n        adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n        if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n            globalIndent = unshiftIndent(globalIndent);\n            adjustedLineContent = globalIndent + currentLineText.substring(oldIndentation.length);\n        }\n        if (currentLineText !== adjustedLineContent) {\n            indentEdits.push(EditOperation.replaceMove(new Selection(startLineNumber, 1, startLineNumber, oldIndentation.length + 1), normalizeIndentation(globalIndent, indentSize, insertSpaces)));\n        }\n    }\n    else {\n        globalIndent = strings.getLeadingWhitespace(currentLineText);\n    }\n    // idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n    let idealIndentForNextLine = globalIndent;\n    if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n        idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n        globalIndent = shiftIndent(globalIndent);\n    }\n    else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n        idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n    }\n    startLineNumber++;\n    // Calculate indentation adjustment for all following lines\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        const text = model.getLineContent(lineNumber);\n        const oldIndentation = strings.getLeadingWhitespace(text);\n        const adjustedLineContent = idealIndentForNextLine + text.substring(oldIndentation.length);\n        if (indentationRules.decreaseIndentPattern && indentationRules.decreaseIndentPattern.test(adjustedLineContent)) {\n            idealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n            globalIndent = unshiftIndent(globalIndent);\n        }\n        if (oldIndentation !== idealIndentForNextLine) {\n            indentEdits.push(EditOperation.replaceMove(new Selection(lineNumber, 1, lineNumber, oldIndentation.length + 1), normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n        }\n        // calculate idealIndentForNextLine\n        if (indentationRules.unIndentedLinePattern && indentationRules.unIndentedLinePattern.test(text)) {\n            // In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n            // but don't change globalIndent and idealIndentForNextLine.\n            continue;\n        }\n        else if (indentationRules.increaseIndentPattern && indentationRules.increaseIndentPattern.test(adjustedLineContent)) {\n            globalIndent = shiftIndent(globalIndent);\n            idealIndentForNextLine = globalIndent;\n        }\n        else if (indentationRules.indentNextLinePattern && indentationRules.indentNextLinePattern.test(adjustedLineContent)) {\n            idealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n        }\n        else {\n            idealIndentForNextLine = globalIndent;\n        }\n    }\n    return indentEdits;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}