{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { NullState, nullTokenizeEncoded } from './nullTokenize.js';\nvar fallback = {\n  getInitialState: function getInitialState() {\n    return NullState;\n  },\n  tokenizeEncoded: function tokenizeEncoded(buffer, hasEOL, state) {\n    return nullTokenizeEncoded(0 /* LanguageId.Null */, state);\n  }\n};\nexport function tokenizeToString(_x, _x2, _x3) {\n  return _tokenizeToString2.apply(this, arguments);\n}\nfunction _tokenizeToString2() {\n  _tokenizeToString2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(languageService, text, languageId) {\n    var tokenizationSupport;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (languageId) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", _tokenizeToString(text, languageService.languageIdCodec, fallback));\n        case 2:\n          _context.next = 4;\n          return TokenizationRegistry.getOrCreate(languageId);\n        case 4:\n          tokenizationSupport = _context.sent;\n          return _context.abrupt(\"return\", _tokenizeToString(text, languageService.languageIdCodec, tokenizationSupport || fallback));\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _tokenizeToString2.apply(this, arguments);\n}\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\n  var result = \"<div>\";\n  var charIndex = startOffset;\n  var tabsCharDelta = 0;\n  var prevIsSpace = true;\n  for (var tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n    var tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n    if (tokenEndIndex <= startOffset) {\n      continue;\n    }\n    var partContent = '';\n    for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n      var charCode = text.charCodeAt(charIndex);\n      switch (charCode) {\n        case 9 /* CharCode.Tab */:\n          {\n            var insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n            tabsCharDelta += insertSpacesCount - 1;\n            while (insertSpacesCount > 0) {\n              if (useNbsp && prevIsSpace) {\n                partContent += '&#160;';\n                prevIsSpace = false;\n              } else {\n                partContent += ' ';\n                prevIsSpace = true;\n              }\n              insertSpacesCount--;\n            }\n            break;\n          }\n        case 60 /* CharCode.LessThan */:\n          partContent += '&lt;';\n          prevIsSpace = false;\n          break;\n        case 62 /* CharCode.GreaterThan */:\n          partContent += '&gt;';\n          prevIsSpace = false;\n          break;\n        case 38 /* CharCode.Ampersand */:\n          partContent += '&amp;';\n          prevIsSpace = false;\n          break;\n        case 0 /* CharCode.Null */:\n          partContent += '&#00;';\n          prevIsSpace = false;\n          break;\n        case 65279 /* CharCode.UTF8_BOM */:\n        case 8232 /* CharCode.LINE_SEPARATOR */:\n        case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n        case 133 /* CharCode.NEXT_LINE */:\n          partContent += \"\\uFFFD\";\n          prevIsSpace = false;\n          break;\n        case 13 /* CharCode.CarriageReturn */:\n          // zero width space, because carriage return would introduce a line break\n          partContent += '&#8203';\n          prevIsSpace = false;\n          break;\n        case 32 /* CharCode.Space */:\n          if (useNbsp && prevIsSpace) {\n            partContent += '&#160;';\n            prevIsSpace = false;\n          } else {\n            partContent += ' ';\n            prevIsSpace = true;\n          }\n          break;\n        default:\n          partContent += String.fromCharCode(charCode);\n          prevIsSpace = false;\n      }\n    }\n    result += \"<span style=\\\"\".concat(viewLineTokens.getInlineStyle(tokenIndex, colorMap), \"\\\">\").concat(partContent, \"</span>\");\n    if (tokenEndIndex > endOffset || charIndex >= endOffset) {\n      break;\n    }\n  }\n  result += \"</div>\";\n  return result;\n}\nexport function _tokenizeToString(text, languageIdCodec, tokenizationSupport) {\n  var result = \"<div class=\\\"monaco-tokenized-source\\\">\";\n  var lines = strings.splitLines(text);\n  var currentState = tokenizationSupport.getInitialState();\n  for (var i = 0, len = lines.length; i < len; i++) {\n    var line = lines[i];\n    if (i > 0) {\n      result += \"<br/>\";\n    }\n    var tokenizationResult = tokenizationSupport.tokenizeEncoded(line, true, currentState);\n    LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n    var lineTokens = new LineTokens(tokenizationResult.tokens, line, languageIdCodec);\n    var viewLineTokens = lineTokens.inflate();\n    var startOffset = 0;\n    for (var j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n      var type = viewLineTokens.getClassName(j);\n      var endIndex = viewLineTokens.getEndOffset(j);\n      result += \"<span class=\\\"\".concat(type, \"\\\">\").concat(strings.escape(line.substring(startOffset, endIndex)), \"</span>\");\n      startOffset = endIndex;\n    }\n    currentState = tokenizationResult.endState;\n  }\n  result += \"</div>\";\n  return result;\n}","map":{"version":3,"names":["strings","LineTokens","TokenizationRegistry","NullState","nullTokenizeEncoded","fallback","getInitialState","tokenizeEncoded","buffer","hasEOL","state","tokenizeToString","_x","_x2","_x3","_tokenizeToString2","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","languageService","text","languageId","tokenizationSupport","wrap","_callee$","_context","prev","next","abrupt","_tokenizeToString","languageIdCodec","getOrCreate","sent","stop","tokenizeLineToHTML","viewLineTokens","colorMap","startOffset","endOffset","tabSize","useNbsp","result","charIndex","tabsCharDelta","prevIsSpace","tokenIndex","tokenCount","getCount","tokenEndIndex","getEndOffset","partContent","charCode","charCodeAt","insertSpacesCount","String","fromCharCode","concat","getInlineStyle","lines","splitLines","currentState","i","len","length","line","tokenizationResult","convertToEndOffset","tokens","lineTokens","inflate","j","lenJ","type","getClassName","endIndex","escape","substring","endState"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/languages/textToHtmlTokenizer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../tokens/lineTokens.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { NullState, nullTokenizeEncoded } from './nullTokenize.js';\nconst fallback = {\n    getInitialState: () => NullState,\n    tokenizeEncoded: (buffer, hasEOL, state) => nullTokenizeEncoded(0 /* LanguageId.Null */, state)\n};\nexport async function tokenizeToString(languageService, text, languageId) {\n    if (!languageId) {\n        return _tokenizeToString(text, languageService.languageIdCodec, fallback);\n    }\n    const tokenizationSupport = await TokenizationRegistry.getOrCreate(languageId);\n    return _tokenizeToString(text, languageService.languageIdCodec, tokenizationSupport || fallback);\n}\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize, useNbsp) {\n    let result = `<div>`;\n    let charIndex = startOffset;\n    let tabsCharDelta = 0;\n    let prevIsSpace = true;\n    for (let tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n        const tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n        if (tokenEndIndex <= startOffset) {\n            continue;\n        }\n        let partContent = '';\n        for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n            const charCode = text.charCodeAt(charIndex);\n            switch (charCode) {\n                case 9 /* CharCode.Tab */: {\n                    let insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n                    tabsCharDelta += insertSpacesCount - 1;\n                    while (insertSpacesCount > 0) {\n                        if (useNbsp && prevIsSpace) {\n                            partContent += '&#160;';\n                            prevIsSpace = false;\n                        }\n                        else {\n                            partContent += ' ';\n                            prevIsSpace = true;\n                        }\n                        insertSpacesCount--;\n                    }\n                    break;\n                }\n                case 60 /* CharCode.LessThan */:\n                    partContent += '&lt;';\n                    prevIsSpace = false;\n                    break;\n                case 62 /* CharCode.GreaterThan */:\n                    partContent += '&gt;';\n                    prevIsSpace = false;\n                    break;\n                case 38 /* CharCode.Ampersand */:\n                    partContent += '&amp;';\n                    prevIsSpace = false;\n                    break;\n                case 0 /* CharCode.Null */:\n                    partContent += '&#00;';\n                    prevIsSpace = false;\n                    break;\n                case 65279 /* CharCode.UTF8_BOM */:\n                case 8232 /* CharCode.LINE_SEPARATOR */:\n                case 8233 /* CharCode.PARAGRAPH_SEPARATOR */:\n                case 133 /* CharCode.NEXT_LINE */:\n                    partContent += '\\ufffd';\n                    prevIsSpace = false;\n                    break;\n                case 13 /* CharCode.CarriageReturn */:\n                    // zero width space, because carriage return would introduce a line break\n                    partContent += '&#8203';\n                    prevIsSpace = false;\n                    break;\n                case 32 /* CharCode.Space */:\n                    if (useNbsp && prevIsSpace) {\n                        partContent += '&#160;';\n                        prevIsSpace = false;\n                    }\n                    else {\n                        partContent += ' ';\n                        prevIsSpace = true;\n                    }\n                    break;\n                default:\n                    partContent += String.fromCharCode(charCode);\n                    prevIsSpace = false;\n            }\n        }\n        result += `<span style=\"${viewLineTokens.getInlineStyle(tokenIndex, colorMap)}\">${partContent}</span>`;\n        if (tokenEndIndex > endOffset || charIndex >= endOffset) {\n            break;\n        }\n    }\n    result += `</div>`;\n    return result;\n}\nexport function _tokenizeToString(text, languageIdCodec, tokenizationSupport) {\n    let result = `<div class=\"monaco-tokenized-source\">`;\n    const lines = strings.splitLines(text);\n    let currentState = tokenizationSupport.getInitialState();\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const line = lines[i];\n        if (i > 0) {\n            result += `<br/>`;\n        }\n        const tokenizationResult = tokenizationSupport.tokenizeEncoded(line, true, currentState);\n        LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n        const lineTokens = new LineTokens(tokenizationResult.tokens, line, languageIdCodec);\n        const viewLineTokens = lineTokens.inflate();\n        let startOffset = 0;\n        for (let j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n            const type = viewLineTokens.getClassName(j);\n            const endIndex = viewLineTokens.getEndOffset(j);\n            result += `<span class=\"${type}\">${strings.escape(line.substring(startOffset, endIndex))}</span>`;\n            startOffset = endIndex;\n        }\n        currentState = tokenizationResult.endState;\n    }\n    result += `</div>`;\n    return result;\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,OAAO,MAAM,iCAAiC;AAC1D,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,oBAAoB,QAAQ,iBAAiB;AACtD,SAASC,SAAS,EAAEC,mBAAmB,QAAQ,mBAAmB;AAClE,IAAMC,QAAQ,GAAG;EACbC,eAAe,EAAE,SAAAA,gBAAA;IAAA,OAAMH,SAAS;EAAA;EAChCI,eAAe,EAAE,SAAAA,gBAACC,MAAM,EAAEC,MAAM,EAAEC,KAAK;IAAA,OAAKN,mBAAmB,CAAC,CAAC,CAAC,uBAAuBM,KAAK,CAAC;EAAA;AACnG,CAAC;AACD,gBAAsBC,gBAAgBA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAMrC,SAAAF,mBAAA;EAAAA,kBAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CANM,SAAAC,QAAgCC,eAAe,EAAEC,IAAI,EAAEC,UAAU;IAAA,IAAAC,mBAAA;IAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,IAC/DN,UAAU;YAAAI,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAG,MAAA,WACJC,iBAAiB,CAACT,IAAI,EAAED,eAAe,CAACW,eAAe,EAAE5B,QAAQ,CAAC;QAAA;UAAAuB,QAAA,CAAAE,IAAA;UAAA,OAE3C5B,oBAAoB,CAACgC,WAAW,CAACV,UAAU,CAAC;QAAA;UAAxEC,mBAAmB,GAAAG,QAAA,CAAAO,IAAA;UAAA,OAAAP,QAAA,CAAAG,MAAA,WAClBC,iBAAiB,CAACT,IAAI,EAAED,eAAe,CAACW,eAAe,EAAER,mBAAmB,IAAIpB,QAAQ,CAAC;QAAA;QAAA;UAAA,OAAAuB,QAAA,CAAAQ,IAAA;MAAA;IAAA,GAAAf,OAAA;EAAA,CACnG;EAAA,OAAAN,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AACD,OAAO,SAASoB,kBAAkBA,CAACd,IAAI,EAAEe,cAAc,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACzG,IAAIC,MAAM,UAAU;EACpB,IAAIC,SAAS,GAAGL,WAAW;EAC3B,IAAIM,aAAa,GAAG,CAAC;EACrB,IAAIC,WAAW,GAAG,IAAI;EACtB,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEC,UAAU,GAAGX,cAAc,CAACY,QAAQ,CAAC,CAAC,EAAEF,UAAU,GAAGC,UAAU,EAAED,UAAU,EAAE,EAAE;IACpG,IAAMG,aAAa,GAAGb,cAAc,CAACc,YAAY,CAACJ,UAAU,CAAC;IAC7D,IAAIG,aAAa,IAAIX,WAAW,EAAE;MAC9B;IACJ;IACA,IAAIa,WAAW,GAAG,EAAE;IACpB,OAAOR,SAAS,GAAGM,aAAa,IAAIN,SAAS,GAAGJ,SAAS,EAAEI,SAAS,EAAE,EAAE;MACpE,IAAMS,QAAQ,GAAG/B,IAAI,CAACgC,UAAU,CAACV,SAAS,CAAC;MAC3C,QAAQS,QAAQ;QACZ,KAAK,CAAC,CAAC;UAAoB;YACvB,IAAIE,iBAAiB,GAAGd,OAAO,GAAG,CAACG,SAAS,GAAGC,aAAa,IAAIJ,OAAO;YACvEI,aAAa,IAAIU,iBAAiB,GAAG,CAAC;YACtC,OAAOA,iBAAiB,GAAG,CAAC,EAAE;cAC1B,IAAIb,OAAO,IAAII,WAAW,EAAE;gBACxBM,WAAW,IAAI,QAAQ;gBACvBN,WAAW,GAAG,KAAK;cACvB,CAAC,MACI;gBACDM,WAAW,IAAI,GAAG;gBAClBN,WAAW,GAAG,IAAI;cACtB;cACAS,iBAAiB,EAAE;YACvB;YACA;UACJ;QACA,KAAK,EAAE,CAAC;UACJH,WAAW,IAAI,MAAM;UACrBN,WAAW,GAAG,KAAK;UACnB;QACJ,KAAK,EAAE,CAAC;UACJM,WAAW,IAAI,MAAM;UACrBN,WAAW,GAAG,KAAK;UACnB;QACJ,KAAK,EAAE,CAAC;UACJM,WAAW,IAAI,OAAO;UACtBN,WAAW,GAAG,KAAK;UACnB;QACJ,KAAK,CAAC,CAAC;UACHM,WAAW,IAAI,OAAO;UACtBN,WAAW,GAAG,KAAK;UACnB;QACJ,KAAK,KAAK,CAAC;QACX,KAAK,IAAI,CAAC;QACV,KAAK,IAAI,CAAC;QACV,KAAK,GAAG,CAAC;UACLM,WAAW,IAAI,QAAQ;UACvBN,WAAW,GAAG,KAAK;UACnB;QACJ,KAAK,EAAE,CAAC;UACJ;UACAM,WAAW,IAAI,QAAQ;UACvBN,WAAW,GAAG,KAAK;UACnB;QACJ,KAAK,EAAE,CAAC;UACJ,IAAIJ,OAAO,IAAII,WAAW,EAAE;YACxBM,WAAW,IAAI,QAAQ;YACvBN,WAAW,GAAG,KAAK;UACvB,CAAC,MACI;YACDM,WAAW,IAAI,GAAG;YAClBN,WAAW,GAAG,IAAI;UACtB;UACA;QACJ;UACIM,WAAW,IAAII,MAAM,CAACC,YAAY,CAACJ,QAAQ,CAAC;UAC5CP,WAAW,GAAG,KAAK;MAC3B;IACJ;IACAH,MAAM,qBAAAe,MAAA,CAAoBrB,cAAc,CAACsB,cAAc,CAACZ,UAAU,EAAET,QAAQ,CAAC,SAAAoB,MAAA,CAAKN,WAAW,YAAS;IACtG,IAAIF,aAAa,GAAGV,SAAS,IAAII,SAAS,IAAIJ,SAAS,EAAE;MACrD;IACJ;EACJ;EACAG,MAAM,YAAY;EAClB,OAAOA,MAAM;AACjB;AACA,OAAO,SAASZ,iBAAiBA,CAACT,IAAI,EAAEU,eAAe,EAAER,mBAAmB,EAAE;EAC1E,IAAImB,MAAM,4CAA0C;EACpD,IAAMiB,KAAK,GAAG7D,OAAO,CAAC8D,UAAU,CAACvC,IAAI,CAAC;EACtC,IAAIwC,YAAY,GAAGtC,mBAAmB,CAACnB,eAAe,CAAC,CAAC;EACxD,KAAK,IAAI0D,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGJ,KAAK,CAACK,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IAC9C,IAAMG,IAAI,GAAGN,KAAK,CAACG,CAAC,CAAC;IACrB,IAAIA,CAAC,GAAG,CAAC,EAAE;MACPpB,MAAM,WAAW;IACrB;IACA,IAAMwB,kBAAkB,GAAG3C,mBAAmB,CAAClB,eAAe,CAAC4D,IAAI,EAAE,IAAI,EAAEJ,YAAY,CAAC;IACxF9D,UAAU,CAACoE,kBAAkB,CAACD,kBAAkB,CAACE,MAAM,EAAEH,IAAI,CAACD,MAAM,CAAC;IACrE,IAAMK,UAAU,GAAG,IAAItE,UAAU,CAACmE,kBAAkB,CAACE,MAAM,EAAEH,IAAI,EAAElC,eAAe,CAAC;IACnF,IAAMK,cAAc,GAAGiC,UAAU,CAACC,OAAO,CAAC,CAAC;IAC3C,IAAIhC,WAAW,GAAG,CAAC;IACnB,KAAK,IAAIiC,CAAC,GAAG,CAAC,EAAEC,IAAI,GAAGpC,cAAc,CAACY,QAAQ,CAAC,CAAC,EAAEuB,CAAC,GAAGC,IAAI,EAAED,CAAC,EAAE,EAAE;MAC7D,IAAME,IAAI,GAAGrC,cAAc,CAACsC,YAAY,CAACH,CAAC,CAAC;MAC3C,IAAMI,QAAQ,GAAGvC,cAAc,CAACc,YAAY,CAACqB,CAAC,CAAC;MAC/C7B,MAAM,qBAAAe,MAAA,CAAoBgB,IAAI,SAAAhB,MAAA,CAAK3D,OAAO,CAAC8E,MAAM,CAACX,IAAI,CAACY,SAAS,CAACvC,WAAW,EAAEqC,QAAQ,CAAC,CAAC,YAAS;MACjGrC,WAAW,GAAGqC,QAAQ;IAC1B;IACAd,YAAY,GAAGK,kBAAkB,CAACY,QAAQ;EAC9C;EACApC,MAAM,YAAY;EAClB,OAAOA,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}