{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { getActiveDocument } from '../../../../base/browser/dom.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { CopyOptions, InMemoryClipboardMetadataManager } from '../../../browser/controller/textAreaInput.js';\nimport { EditorAction, MultiCommand, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyPasteController } from '../../dropOrPasteInto/browser/copyPasteController.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nvar CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nvar supportsCut = platform.isNative || document.queryCommandSupported('cut');\nvar supportsCopy = platform.isNative || document.queryCommandSupported('copy');\n// Firefox only supports navigator.clipboard.readText() in browser extensions.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility\n// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313\nvar supportsPaste = typeof navigator.clipboard === 'undefined' || browser.isFirefox ? document.queryCommandSupported('paste') : true;\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\nexport var CutAction = supportsCut ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardCutAction',\n  precondition: undefined,\n  kbOpts:\n  // Do not bind cut keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */,\n    win: {\n      primary: 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */,\n      secondary: [1024 /* KeyMod.Shift */ | 20 /* KeyCode.Delete */]\n    },\n    weight: 100 /* KeybindingWeight.EditorContrib */\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miCut',\n      comment: ['&& denotes a mnemonic']\n    }, \"Cu&&t\"),\n    order: 1\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    when: EditorContextKeys.writable,\n    order: 1\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    order: 1\n  }, {\n    menuId: MenuId.SimpleEditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n    when: EditorContextKeys.writable,\n    order: 1\n  }]\n})) : undefined;\nexport var CopyAction = supportsCopy ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardCopyAction',\n  precondition: undefined,\n  kbOpts:\n  // Do not bind copy keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048 /* KeyMod.CtrlCmd */ | 33 /* KeyCode.KeyC */,\n    win: {\n      primary: 2048 /* KeyMod.CtrlCmd */ | 33 /* KeyCode.KeyC */,\n      secondary: [2048 /* KeyMod.CtrlCmd */ | 19 /* KeyCode.Insert */]\n    },\n    weight: 100 /* KeybindingWeight.EditorContrib */\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miCopy',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Copy\"),\n    order: 2\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 2\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 1\n  }, {\n    menuId: MenuId.SimpleEditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n    order: 2\n  }]\n})) : undefined;\nMenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, {\n  submenu: MenuId.MenubarCopy,\n  title: nls.localize2('copy as', \"Copy As\"),\n  group: '2_ccp',\n  order: 3\n});\nMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n  submenu: MenuId.EditorContextCopy,\n  title: nls.localize2('copy as', \"Copy As\"),\n  group: CLIPBOARD_CONTEXT_MENU_GROUP,\n  order: 3\n});\nMenuRegistry.appendMenuItem(MenuId.EditorContext, {\n  submenu: MenuId.EditorContextShare,\n  title: nls.localize2('share', \"Share\"),\n  group: '11_share',\n  order: -1,\n  when: ContextKeyExpr.and(ContextKeyExpr.notEquals('resourceScheme', 'output'), EditorContextKeys.editorTextFocus)\n});\nMenuRegistry.appendMenuItem(MenuId.EditorTitleContext, {\n  submenu: MenuId.EditorTitleContextShare,\n  title: nls.localize2('share', \"Share\"),\n  group: '11_share',\n  order: -1\n});\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, {\n  submenu: MenuId.ExplorerContextShare,\n  title: nls.localize2('share', \"Share\"),\n  group: '11_share',\n  order: -1\n});\nexport var PasteAction = supportsPaste ? registerCommand(new MultiCommand({\n  id: 'editor.action.clipboardPasteAction',\n  precondition: undefined,\n  kbOpts:\n  // Do not bind paste keybindings in the browser,\n  // since browsers do that for us and it avoids security prompts\n  platform.isNative ? {\n    primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */,\n    win: {\n      primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */,\n      secondary: [1024 /* KeyMod.Shift */ | 19 /* KeyCode.Insert */]\n    },\n    linux: {\n      primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */,\n      secondary: [1024 /* KeyMod.Shift */ | 19 /* KeyCode.Insert */]\n    },\n    weight: 100 /* KeybindingWeight.EditorContrib */\n  } : undefined,\n  menuOpts: [{\n    menuId: MenuId.MenubarEditMenu,\n    group: '2_ccp',\n    title: nls.localize({\n      key: 'miPaste',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Paste\"),\n    order: 4\n  }, {\n    menuId: MenuId.EditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    when: EditorContextKeys.writable,\n    order: 4\n  }, {\n    menuId: MenuId.CommandPalette,\n    group: '',\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    order: 1\n  }, {\n    menuId: MenuId.SimpleEditorContext,\n    group: CLIPBOARD_CONTEXT_MENU_GROUP,\n    title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n    when: EditorContextKeys.writable,\n    order: 4\n  }]\n})) : undefined;\nvar ExecCommandCopyWithSyntaxHighlightingAction = /*#__PURE__*/function (_EditorAction) {\n  function ExecCommandCopyWithSyntaxHighlightingAction() {\n    _classCallCheck(this, ExecCommandCopyWithSyntaxHighlightingAction);\n    return _callSuper(this, ExecCommandCopyWithSyntaxHighlightingAction, [{\n      id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n      label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n      alias: 'Copy With Syntax Highlighting',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(ExecCommandCopyWithSyntaxHighlightingAction, _EditorAction);\n  return _createClass(ExecCommandCopyWithSyntaxHighlightingAction, [{\n    key: \"run\",\n    value: function run(accessor, editor) {\n      if (!editor.hasModel()) {\n        return;\n      }\n      var emptySelectionClipboard = editor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n      if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n        return;\n      }\n      CopyOptions.forceCopyWithSyntaxHighlighting = true;\n      editor.focus();\n      editor.getContainerDomNode().ownerDocument.execCommand('copy');\n      CopyOptions.forceCopyWithSyntaxHighlighting = false;\n    }\n  }]);\n}(EditorAction);\nfunction registerExecCommandImpl(target, browserCommand) {\n  if (!target) {\n    return;\n  }\n  // 1. handle case when focus is in editor.\n  target.addImplementation(10000, 'code-editor', function (accessor, args) {\n    // Only if editor text focus (i.e. not if editor has widget focus).\n    var focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      // Do not execute if there is no selection and empty selection clipboard is off\n      var emptySelectionClipboard = focusedEditor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n      var selection = focusedEditor.getSelection();\n      if (selection && selection.isEmpty() && !emptySelectionClipboard) {\n        return true;\n      }\n      focusedEditor.getContainerDomNode().ownerDocument.execCommand(browserCommand);\n      return true;\n    }\n    return false;\n  });\n  // 2. (default) handle case when focus is somewhere else.\n  target.addImplementation(0, 'generic-dom', function (accessor, args) {\n    getActiveDocument().execCommand(browserCommand);\n    return true;\n  });\n}\nregisterExecCommandImpl(CutAction, 'cut');\nregisterExecCommandImpl(CopyAction, 'copy');\nif (PasteAction) {\n  // 1. Paste: handle case when focus is in editor.\n  PasteAction.addImplementation(10000, 'code-editor', function (accessor, args) {\n    var _a, _b;\n    var codeEditorService = accessor.get(ICodeEditorService);\n    var clipboardService = accessor.get(IClipboardService);\n    // Only if editor text focus (i.e. not if editor has widget focus).\n    var focusedEditor = codeEditorService.getFocusedCodeEditor();\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      var result = focusedEditor.getContainerDomNode().ownerDocument.execCommand('paste');\n      if (result) {\n        return (_b = (_a = CopyPasteController.get(focusedEditor)) === null || _a === void 0 ? void 0 : _a.finishedPaste()) !== null && _b !== void 0 ? _b : Promise.resolve();\n      } else if (platform.isWeb) {\n        // Use the clipboard service if document.execCommand('paste') was not successful\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var clipboardText, metadata, pasteOnNewLine, multicursorText, mode;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return clipboardService.readText();\n              case 2:\n                clipboardText = _context.sent;\n                if (clipboardText !== '') {\n                  metadata = InMemoryClipboardMetadataManager.INSTANCE.get(clipboardText);\n                  pasteOnNewLine = false;\n                  multicursorText = null;\n                  mode = null;\n                  if (metadata) {\n                    pasteOnNewLine = focusedEditor.getOption(37 /* EditorOption.emptySelectionClipboard */) && !!metadata.isFromEmptySelection;\n                    multicursorText = typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null;\n                    mode = metadata.mode;\n                  }\n                  focusedEditor.trigger('keyboard', \"paste\" /* Handler.Paste */, {\n                    text: clipboardText,\n                    pasteOnNewLine: pasteOnNewLine,\n                    multicursorText: multicursorText,\n                    mode: mode\n                  });\n                }\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }))();\n      }\n      return true;\n    }\n    return false;\n  });\n  // 2. Paste: (default) handle case when focus is somewhere else.\n  PasteAction.addImplementation(0, 'generic-dom', function (accessor, args) {\n    getActiveDocument().execCommand('paste');\n    return true;\n  });\n}\nif (supportsCopy) {\n  registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}","map":{"version":3,"names":["browser","getActiveDocument","platform","CopyOptions","InMemoryClipboardMetadataManager","EditorAction","MultiCommand","registerEditorAction","ICodeEditorService","EditorContextKeys","CopyPasteController","nls","MenuId","MenuRegistry","IClipboardService","ContextKeyExpr","CLIPBOARD_CONTEXT_MENU_GROUP","supportsCut","isNative","document","queryCommandSupported","supportsCopy","supportsPaste","navigator","clipboard","isFirefox","registerCommand","command","register","CutAction","id","precondition","undefined","kbOpts","primary","win","secondary","weight","menuOpts","menuId","MenubarEditMenu","group","title","localize","key","comment","order","EditorContext","when","writable","CommandPalette","SimpleEditorContext","CopyAction","appendMenuItem","submenu","MenubarCopy","localize2","EditorContextCopy","EditorContextShare","and","notEquals","editorTextFocus","EditorTitleContext","EditorTitleContextShare","ExplorerContext","ExplorerContextShare","PasteAction","linux","ExecCommandCopyWithSyntaxHighlightingAction","_EditorAction","_classCallCheck","_callSuper","label","alias","kbExpr","textInputFocus","_inherits","_createClass","value","run","accessor","editor","hasModel","emptySelectionClipboard","getOption","getSelection","isEmpty","forceCopyWithSyntaxHighlighting","focus","getContainerDomNode","ownerDocument","execCommand","registerExecCommandImpl","target","browserCommand","addImplementation","args","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","selection","_a","_b","codeEditorService","clipboardService","result","finishedPaste","Promise","resolve","isWeb","_asyncToGenerator","_regeneratorRuntime","mark","_callee","clipboardText","metadata","pasteOnNewLine","multicursorText","mode","wrap","_callee$","_context","prev","next","readText","sent","INSTANCE","isFromEmptySelection","trigger","text","stop"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/contrib/clipboard/browser/clipboard.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from '../../../../base/browser/browser.js';\nimport { getActiveDocument } from '../../../../base/browser/dom.js';\nimport * as platform from '../../../../base/common/platform.js';\nimport { CopyOptions, InMemoryClipboardMetadataManager } from '../../../browser/controller/textAreaInput.js';\nimport { EditorAction, MultiCommand, registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { CopyPasteController } from '../../dropOrPasteInto/browser/copyPasteController.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId, MenuRegistry } from '../../../../platform/actions/common/actions.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nconst CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nconst supportsCut = (platform.isNative || document.queryCommandSupported('cut'));\nconst supportsCopy = (platform.isNative || document.queryCommandSupported('copy'));\n// Firefox only supports navigator.clipboard.readText() in browser extensions.\n// See https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText#Browser_compatibility\n// When loading over http, navigator.clipboard can be undefined. See https://github.com/microsoft/monaco-editor/issues/2313\nconst supportsPaste = (typeof navigator.clipboard === 'undefined' || browser.isFirefox) ? document.queryCommandSupported('paste') : true;\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport const CutAction = supportsCut ? registerCommand(new MultiCommand({\n    id: 'editor.action.clipboardCutAction',\n    precondition: undefined,\n    kbOpts: (\n    // Do not bind cut keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    platform.isNative ? {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */,\n        win: { primary: 2048 /* KeyMod.CtrlCmd */ | 54 /* KeyCode.KeyX */, secondary: [1024 /* KeyMod.Shift */ | 20 /* KeyCode.Delete */] },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n    } : undefined),\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '2_ccp',\n            title: nls.localize({ key: 'miCut', comment: ['&& denotes a mnemonic'] }, \"Cu&&t\"),\n            order: 1\n        }, {\n            menuId: MenuId.EditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n            when: EditorContextKeys.writable,\n            order: 1,\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n            order: 1\n        }, {\n            menuId: MenuId.SimpleEditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n            when: EditorContextKeys.writable,\n            order: 1,\n        }]\n})) : undefined;\nexport const CopyAction = supportsCopy ? registerCommand(new MultiCommand({\n    id: 'editor.action.clipboardCopyAction',\n    precondition: undefined,\n    kbOpts: (\n    // Do not bind copy keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    platform.isNative ? {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 33 /* KeyCode.KeyC */,\n        win: { primary: 2048 /* KeyMod.CtrlCmd */ | 33 /* KeyCode.KeyC */, secondary: [2048 /* KeyMod.CtrlCmd */ | 19 /* KeyCode.Insert */] },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n    } : undefined),\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '2_ccp',\n            title: nls.localize({ key: 'miCopy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\n            order: 2\n        }, {\n            menuId: MenuId.EditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n            order: 2,\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n            order: 1\n        }, {\n            menuId: MenuId.SimpleEditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n            order: 2,\n        }]\n})) : undefined;\nMenuRegistry.appendMenuItem(MenuId.MenubarEditMenu, { submenu: MenuId.MenubarCopy, title: nls.localize2('copy as', \"Copy As\"), group: '2_ccp', order: 3 });\nMenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextCopy, title: nls.localize2('copy as', \"Copy As\"), group: CLIPBOARD_CONTEXT_MENU_GROUP, order: 3 });\nMenuRegistry.appendMenuItem(MenuId.EditorContext, { submenu: MenuId.EditorContextShare, title: nls.localize2('share', \"Share\"), group: '11_share', order: -1, when: ContextKeyExpr.and(ContextKeyExpr.notEquals('resourceScheme', 'output'), EditorContextKeys.editorTextFocus) });\nMenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { submenu: MenuId.EditorTitleContextShare, title: nls.localize2('share', \"Share\"), group: '11_share', order: -1 });\nMenuRegistry.appendMenuItem(MenuId.ExplorerContext, { submenu: MenuId.ExplorerContextShare, title: nls.localize2('share', \"Share\"), group: '11_share', order: -1 });\nexport const PasteAction = supportsPaste ? registerCommand(new MultiCommand({\n    id: 'editor.action.clipboardPasteAction',\n    precondition: undefined,\n    kbOpts: (\n    // Do not bind paste keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n    platform.isNative ? {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */,\n        win: { primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */, secondary: [1024 /* KeyMod.Shift */ | 19 /* KeyCode.Insert */] },\n        linux: { primary: 2048 /* KeyMod.CtrlCmd */ | 52 /* KeyCode.KeyV */, secondary: [1024 /* KeyMod.Shift */ | 19 /* KeyCode.Insert */] },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n    } : undefined),\n    menuOpts: [{\n            menuId: MenuId.MenubarEditMenu,\n            group: '2_ccp',\n            title: nls.localize({ key: 'miPaste', comment: ['&& denotes a mnemonic'] }, \"&&Paste\"),\n            order: 4\n        }, {\n            menuId: MenuId.EditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n            when: EditorContextKeys.writable,\n            order: 4,\n        }, {\n            menuId: MenuId.CommandPalette,\n            group: '',\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n            order: 1\n        }, {\n            menuId: MenuId.SimpleEditorContext,\n            group: CLIPBOARD_CONTEXT_MENU_GROUP,\n            title: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n            when: EditorContextKeys.writable,\n            order: 4,\n        }]\n})) : undefined;\nclass ExecCommandCopyWithSyntaxHighlightingAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n            label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n            alias: 'Copy With Syntax Highlighting',\n            precondition: undefined,\n            kbOpts: {\n                kbExpr: EditorContextKeys.textInputFocus,\n                primary: 0,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    run(accessor, editor) {\n        if (!editor.hasModel()) {\n            return;\n        }\n        const emptySelectionClipboard = editor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n        if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n            return;\n        }\n        CopyOptions.forceCopyWithSyntaxHighlighting = true;\n        editor.focus();\n        editor.getContainerDomNode().ownerDocument.execCommand('copy');\n        CopyOptions.forceCopyWithSyntaxHighlighting = false;\n    }\n}\nfunction registerExecCommandImpl(target, browserCommand) {\n    if (!target) {\n        return;\n    }\n    // 1. handle case when focus is in editor.\n    target.addImplementation(10000, 'code-editor', (accessor, args) => {\n        // Only if editor text focus (i.e. not if editor has widget focus).\n        const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\n            // Do not execute if there is no selection and empty selection clipboard is off\n            const emptySelectionClipboard = focusedEditor.getOption(37 /* EditorOption.emptySelectionClipboard */);\n            const selection = focusedEditor.getSelection();\n            if (selection && selection.isEmpty() && !emptySelectionClipboard) {\n                return true;\n            }\n            focusedEditor.getContainerDomNode().ownerDocument.execCommand(browserCommand);\n            return true;\n        }\n        return false;\n    });\n    // 2. (default) handle case when focus is somewhere else.\n    target.addImplementation(0, 'generic-dom', (accessor, args) => {\n        getActiveDocument().execCommand(browserCommand);\n        return true;\n    });\n}\nregisterExecCommandImpl(CutAction, 'cut');\nregisterExecCommandImpl(CopyAction, 'copy');\nif (PasteAction) {\n    // 1. Paste: handle case when focus is in editor.\n    PasteAction.addImplementation(10000, 'code-editor', (accessor, args) => {\n        var _a, _b;\n        const codeEditorService = accessor.get(ICodeEditorService);\n        const clipboardService = accessor.get(IClipboardService);\n        // Only if editor text focus (i.e. not if editor has widget focus).\n        const focusedEditor = codeEditorService.getFocusedCodeEditor();\n        if (focusedEditor && focusedEditor.hasTextFocus()) {\n            const result = focusedEditor.getContainerDomNode().ownerDocument.execCommand('paste');\n            if (result) {\n                return (_b = (_a = CopyPasteController.get(focusedEditor)) === null || _a === void 0 ? void 0 : _a.finishedPaste()) !== null && _b !== void 0 ? _b : Promise.resolve();\n            }\n            else if (platform.isWeb) {\n                // Use the clipboard service if document.execCommand('paste') was not successful\n                return (async () => {\n                    const clipboardText = await clipboardService.readText();\n                    if (clipboardText !== '') {\n                        const metadata = InMemoryClipboardMetadataManager.INSTANCE.get(clipboardText);\n                        let pasteOnNewLine = false;\n                        let multicursorText = null;\n                        let mode = null;\n                        if (metadata) {\n                            pasteOnNewLine = (focusedEditor.getOption(37 /* EditorOption.emptySelectionClipboard */) && !!metadata.isFromEmptySelection);\n                            multicursorText = (typeof metadata.multicursorText !== 'undefined' ? metadata.multicursorText : null);\n                            mode = metadata.mode;\n                        }\n                        focusedEditor.trigger('keyboard', \"paste\" /* Handler.Paste */, {\n                            text: clipboardText,\n                            pasteOnNewLine,\n                            multicursorText,\n                            mode\n                        });\n                    }\n                })();\n            }\n            return true;\n        }\n        return false;\n    });\n    // 2. Paste: (default) handle case when focus is somewhere else.\n    PasteAction.addImplementation(0, 'generic-dom', (accessor, args) => {\n        getActiveDocument().execCommand('paste');\n        return true;\n    });\n}\nif (supportsCopy) {\n    registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}