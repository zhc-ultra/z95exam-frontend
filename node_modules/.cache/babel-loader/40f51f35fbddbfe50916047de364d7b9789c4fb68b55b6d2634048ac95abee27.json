{"ast":null,"code":"import _toConsumableArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _typeof from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/web.timers.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport * as indentUtils from '../common/indentUtils.js';\nimport * as nls from '../../../../nls.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { getGoodIndentForLine, getIndentMetadata } from '../../../common/languages/autoIndent.js';\nimport { getReindentEditOperations } from '../common/indentation.js';\nexport var IndentationToSpacesAction = /*#__PURE__*/function (_EditorAction) {\n  function IndentationToSpacesAction() {\n    _classCallCheck(this, IndentationToSpacesAction);\n    return _callSuper(this, IndentationToSpacesAction, [{\n      id: IndentationToSpacesAction.ID,\n      label: nls.localize('indentationToSpaces', \"Convert Indentation to Spaces\"),\n      alias: 'Convert Indentation to Spaces',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(IndentationToSpacesAction, _EditorAction);\n  return _createClass(IndentationToSpacesAction, [{\n    key: \"run\",\n    value: function run(accessor, editor) {\n      var model = editor.getModel();\n      if (!model) {\n        return;\n      }\n      var modelOpts = model.getOptions();\n      var selection = editor.getSelection();\n      if (!selection) {\n        return;\n      }\n      var command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, [command]);\n      editor.pushUndoStop();\n      model.updateOptions({\n        insertSpaces: true\n      });\n    }\n  }]);\n}(EditorAction);\nIndentationToSpacesAction.ID = 'editor.action.indentationToSpaces';\nexport var IndentationToTabsAction = /*#__PURE__*/function (_EditorAction2) {\n  function IndentationToTabsAction() {\n    _classCallCheck(this, IndentationToTabsAction);\n    return _callSuper(this, IndentationToTabsAction, [{\n      id: IndentationToTabsAction.ID,\n      label: nls.localize('indentationToTabs', \"Convert Indentation to Tabs\"),\n      alias: 'Convert Indentation to Tabs',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(IndentationToTabsAction, _EditorAction2);\n  return _createClass(IndentationToTabsAction, [{\n    key: \"run\",\n    value: function run(accessor, editor) {\n      var model = editor.getModel();\n      if (!model) {\n        return;\n      }\n      var modelOpts = model.getOptions();\n      var selection = editor.getSelection();\n      if (!selection) {\n        return;\n      }\n      var command = new IndentationToTabsCommand(selection, modelOpts.tabSize);\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, [command]);\n      editor.pushUndoStop();\n      model.updateOptions({\n        insertSpaces: false\n      });\n    }\n  }]);\n}(EditorAction);\nIndentationToTabsAction.ID = 'editor.action.indentationToTabs';\nexport var ChangeIndentationSizeAction = /*#__PURE__*/function (_EditorAction3) {\n  function ChangeIndentationSizeAction(insertSpaces, displaySizeOnly, opts) {\n    var _this;\n    _classCallCheck(this, ChangeIndentationSizeAction);\n    _this = _callSuper(this, ChangeIndentationSizeAction, [opts]);\n    _this.insertSpaces = insertSpaces;\n    _this.displaySizeOnly = displaySizeOnly;\n    return _this;\n  }\n  _inherits(ChangeIndentationSizeAction, _EditorAction3);\n  return _createClass(ChangeIndentationSizeAction, [{\n    key: \"run\",\n    value: function run(accessor, editor) {\n      var _this2 = this;\n      var quickInputService = accessor.get(IQuickInputService);\n      var modelService = accessor.get(IModelService);\n      var model = editor.getModel();\n      if (!model) {\n        return;\n      }\n      var creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n      var modelOpts = model.getOptions();\n      var picks = [1, 2, 3, 4, 5, 6, 7, 8].map(function (n) {\n        return {\n          id: n.toString(),\n          label: n.toString(),\n          // add description for tabSize value set in the configuration\n          description: n === creationOpts.tabSize && n === modelOpts.tabSize ? nls.localize('configuredTabSize', \"Configured Tab Size\") : n === creationOpts.tabSize ? nls.localize('defaultTabSize', \"Default Tab Size\") : n === modelOpts.tabSize ? nls.localize('currentTabSize', \"Current Tab Size\") : undefined\n        };\n      });\n      // auto focus the tabSize set for the current editor\n      var autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n      setTimeout(function () {\n        quickInputService.pick(picks, {\n          placeHolder: nls.localize({\n            key: 'selectTabWidth',\n            comment: ['Tab corresponds to the tab key']\n          }, \"Select Tab Size for Current File\"),\n          activeItem: picks[autoFocusIndex]\n        }).then(function (pick) {\n          if (pick) {\n            if (model && !model.isDisposed()) {\n              var pickedVal = parseInt(pick.label, 10);\n              if (_this2.displaySizeOnly) {\n                model.updateOptions({\n                  tabSize: pickedVal\n                });\n              } else {\n                model.updateOptions({\n                  tabSize: pickedVal,\n                  indentSize: pickedVal,\n                  insertSpaces: _this2.insertSpaces\n                });\n              }\n            }\n          }\n        });\n      }, 50 /* quick input is sensitive to being opened so soon after another */);\n    }\n  }]);\n}(EditorAction);\nexport var IndentUsingTabs = /*#__PURE__*/function (_ChangeIndentationSiz) {\n  function IndentUsingTabs() {\n    _classCallCheck(this, IndentUsingTabs);\n    return _callSuper(this, IndentUsingTabs, [false, false, {\n      id: IndentUsingTabs.ID,\n      label: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n      alias: 'Indent Using Tabs',\n      precondition: undefined\n    }]);\n  }\n  _inherits(IndentUsingTabs, _ChangeIndentationSiz);\n  return _createClass(IndentUsingTabs);\n}(ChangeIndentationSizeAction);\nIndentUsingTabs.ID = 'editor.action.indentUsingTabs';\nexport var IndentUsingSpaces = /*#__PURE__*/function (_ChangeIndentationSiz2) {\n  function IndentUsingSpaces() {\n    _classCallCheck(this, IndentUsingSpaces);\n    return _callSuper(this, IndentUsingSpaces, [true, false, {\n      id: IndentUsingSpaces.ID,\n      label: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n      alias: 'Indent Using Spaces',\n      precondition: undefined\n    }]);\n  }\n  _inherits(IndentUsingSpaces, _ChangeIndentationSiz2);\n  return _createClass(IndentUsingSpaces);\n}(ChangeIndentationSizeAction);\nIndentUsingSpaces.ID = 'editor.action.indentUsingSpaces';\nexport var ChangeTabDisplaySize = /*#__PURE__*/function (_ChangeIndentationSiz3) {\n  function ChangeTabDisplaySize() {\n    _classCallCheck(this, ChangeTabDisplaySize);\n    return _callSuper(this, ChangeTabDisplaySize, [true, true, {\n      id: ChangeTabDisplaySize.ID,\n      label: nls.localize('changeTabDisplaySize', \"Change Tab Display Size\"),\n      alias: 'Change Tab Display Size',\n      precondition: undefined\n    }]);\n  }\n  _inherits(ChangeTabDisplaySize, _ChangeIndentationSiz3);\n  return _createClass(ChangeTabDisplaySize);\n}(ChangeIndentationSizeAction);\nChangeTabDisplaySize.ID = 'editor.action.changeTabDisplaySize';\nexport var DetectIndentation = /*#__PURE__*/function (_EditorAction4) {\n  function DetectIndentation() {\n    _classCallCheck(this, DetectIndentation);\n    return _callSuper(this, DetectIndentation, [{\n      id: DetectIndentation.ID,\n      label: nls.localize('detectIndentation', \"Detect Indentation from Content\"),\n      alias: 'Detect Indentation from Content',\n      precondition: undefined\n    }]);\n  }\n  _inherits(DetectIndentation, _EditorAction4);\n  return _createClass(DetectIndentation, [{\n    key: \"run\",\n    value: function run(accessor, editor) {\n      var modelService = accessor.get(IModelService);\n      var model = editor.getModel();\n      if (!model) {\n        return;\n      }\n      var creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n      model.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);\n    }\n  }]);\n}(EditorAction);\nDetectIndentation.ID = 'editor.action.detectIndentation';\nexport var ReindentLinesAction = /*#__PURE__*/function (_EditorAction5) {\n  function ReindentLinesAction() {\n    _classCallCheck(this, ReindentLinesAction);\n    return _callSuper(this, ReindentLinesAction, [{\n      id: 'editor.action.reindentlines',\n      label: nls.localize('editor.reindentlines', \"Reindent Lines\"),\n      alias: 'Reindent Lines',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(ReindentLinesAction, _EditorAction5);\n  return _createClass(ReindentLinesAction, [{\n    key: \"run\",\n    value: function run(accessor, editor) {\n      var languageConfigurationService = accessor.get(ILanguageConfigurationService);\n      var model = editor.getModel();\n      if (!model) {\n        return;\n      }\n      var edits = getReindentEditOperations(model, languageConfigurationService, 1, model.getLineCount());\n      if (edits.length > 0) {\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits);\n        editor.pushUndoStop();\n      }\n    }\n  }]);\n}(EditorAction);\nexport var ReindentSelectedLinesAction = /*#__PURE__*/function (_EditorAction6) {\n  function ReindentSelectedLinesAction() {\n    _classCallCheck(this, ReindentSelectedLinesAction);\n    return _callSuper(this, ReindentSelectedLinesAction, [{\n      id: 'editor.action.reindentselectedlines',\n      label: nls.localize('editor.reindentselectedlines', \"Reindent Selected Lines\"),\n      alias: 'Reindent Selected Lines',\n      precondition: EditorContextKeys.writable\n    }]);\n  }\n  _inherits(ReindentSelectedLinesAction, _EditorAction6);\n  return _createClass(ReindentSelectedLinesAction, [{\n    key: \"run\",\n    value: function run(accessor, editor) {\n      var languageConfigurationService = accessor.get(ILanguageConfigurationService);\n      var model = editor.getModel();\n      if (!model) {\n        return;\n      }\n      var selections = editor.getSelections();\n      if (selections === null) {\n        return;\n      }\n      var edits = [];\n      var _iterator = _createForOfIteratorHelper(selections),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var selection = _step.value;\n          var startLineNumber = selection.startLineNumber;\n          var endLineNumber = selection.endLineNumber;\n          if (startLineNumber !== endLineNumber && selection.endColumn === 1) {\n            endLineNumber--;\n          }\n          if (startLineNumber === 1) {\n            if (startLineNumber === endLineNumber) {\n              continue;\n            }\n          } else {\n            startLineNumber--;\n          }\n          var editOperations = getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber);\n          edits.push.apply(edits, _toConsumableArray(editOperations));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (edits.length > 0) {\n        editor.pushUndoStop();\n        editor.executeEdits(this.id, edits);\n        editor.pushUndoStop();\n      }\n    }\n  }]);\n}(EditorAction);\nexport var AutoIndentOnPasteCommand = /*#__PURE__*/function () {\n  function AutoIndentOnPasteCommand(edits, initialSelection) {\n    _classCallCheck(this, AutoIndentOnPasteCommand);\n    this._initialSelection = initialSelection;\n    this._edits = [];\n    this._selectionId = null;\n    var _iterator2 = _createForOfIteratorHelper(edits),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var edit = _step2.value;\n        if (edit.range && typeof edit.text === 'string') {\n          this._edits.push(edit);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return _createClass(AutoIndentOnPasteCommand, [{\n    key: \"getEditOperations\",\n    value: function getEditOperations(model, builder) {\n      var _iterator3 = _createForOfIteratorHelper(this._edits),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var edit = _step3.value;\n          builder.addEditOperation(Range.lift(edit.range), edit.text);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      var selectionIsSet = false;\n      if (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n        if (this._edits[0].range.startColumn === this._initialSelection.endColumn && this._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n          selectionIsSet = true;\n          this._selectionId = builder.trackSelection(this._initialSelection, true);\n        } else if (this._edits[0].range.endColumn === this._initialSelection.startColumn && this._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n          selectionIsSet = true;\n          this._selectionId = builder.trackSelection(this._initialSelection, false);\n        }\n      }\n      if (!selectionIsSet) {\n        this._selectionId = builder.trackSelection(this._initialSelection);\n      }\n    }\n  }, {\n    key: \"computeCursorState\",\n    value: function computeCursorState(model, helper) {\n      return helper.getTrackedSelection(this._selectionId);\n    }\n  }]);\n}();\nvar AutoIndentOnPaste = /*#__PURE__*/function () {\n  function AutoIndentOnPaste(editor, _languageConfigurationService) {\n    var _this3 = this;\n    _classCallCheck(this, AutoIndentOnPaste);\n    this.editor = editor;\n    this._languageConfigurationService = _languageConfigurationService;\n    this.callOnDispose = new DisposableStore();\n    this.callOnModel = new DisposableStore();\n    this.callOnDispose.add(editor.onDidChangeConfiguration(function () {\n      return _this3.update();\n    }));\n    this.callOnDispose.add(editor.onDidChangeModel(function () {\n      return _this3.update();\n    }));\n    this.callOnDispose.add(editor.onDidChangeModelLanguage(function () {\n      return _this3.update();\n    }));\n  }\n  return _createClass(AutoIndentOnPaste, [{\n    key: \"update\",\n    value: function update() {\n      var _this4 = this;\n      // clean up\n      this.callOnModel.clear();\n      // we are disabled\n      if (this.editor.getOption(12 /* EditorOption.autoIndent */) < 4 /* EditorAutoIndentStrategy.Full */ || this.editor.getOption(55 /* EditorOption.formatOnPaste */)) {\n        return;\n      }\n      // no model\n      if (!this.editor.hasModel()) {\n        return;\n      }\n      this.callOnModel.add(this.editor.onDidPaste(function (_ref) {\n        var range = _ref.range;\n        _this4.trigger(range);\n      }));\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(range) {\n      var selections = this.editor.getSelections();\n      if (selections === null || selections.length > 1) {\n        return;\n      }\n      var model = this.editor.getModel();\n      if (!model) {\n        return;\n      }\n      if (!model.tokenization.isCheapToTokenize(range.getStartPosition().lineNumber)) {\n        return;\n      }\n      var autoIndent = this.editor.getOption(12 /* EditorOption.autoIndent */);\n      var _model$getOptions = model.getOptions(),\n        tabSize = _model$getOptions.tabSize,\n        indentSize = _model$getOptions.indentSize,\n        insertSpaces = _model$getOptions.insertSpaces;\n      var textEdits = [];\n      var indentConverter = {\n        shiftIndent: function shiftIndent(indentation) {\n          return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n        },\n        unshiftIndent: function unshiftIndent(indentation) {\n          return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n        }\n      };\n      var startLineNumber = range.startLineNumber;\n      while (startLineNumber <= range.endLineNumber) {\n        if (this.shouldIgnoreLine(model, startLineNumber)) {\n          startLineNumber++;\n          continue;\n        }\n        break;\n      }\n      if (startLineNumber > range.endLineNumber) {\n        return;\n      }\n      var firstLineText = model.getLineContent(startLineNumber);\n      if (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n        var indentOfFirstLine = getGoodIndentForLine(autoIndent, model, model.getLanguageId(), startLineNumber, indentConverter, this._languageConfigurationService);\n        if (indentOfFirstLine !== null) {\n          var oldIndentation = strings.getLeadingWhitespace(firstLineText);\n          var newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n          var oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n          if (newSpaceCnt !== oldSpaceCnt) {\n            var newIndent = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n            textEdits.push({\n              range: new Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),\n              text: newIndent\n            });\n            firstLineText = newIndent + firstLineText.substr(oldIndentation.length);\n          } else {\n            var indentMetadata = getIndentMetadata(model, startLineNumber, this._languageConfigurationService);\n            if (indentMetadata === 0 || indentMetadata === 8 /* IndentConsts.UNINDENT_MASK */) {\n              // we paste content into a line where only contains whitespaces\n              // after pasting, the indentation of the first line is already correct\n              // the first line doesn't match any indentation rule\n              // then no-op.\n              return;\n            }\n          }\n        }\n      }\n      var firstLineNumber = startLineNumber;\n      // ignore empty or ignored lines\n      while (startLineNumber < range.endLineNumber) {\n        if (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n          startLineNumber++;\n          continue;\n        }\n        break;\n      }\n      if (startLineNumber !== range.endLineNumber) {\n        var virtualModel = {\n          tokenization: {\n            getLineTokens: function getLineTokens(lineNumber) {\n              return model.tokenization.getLineTokens(lineNumber);\n            },\n            getLanguageId: function getLanguageId() {\n              return model.getLanguageId();\n            },\n            getLanguageIdAtPosition: function getLanguageIdAtPosition(lineNumber, column) {\n              return model.getLanguageIdAtPosition(lineNumber, column);\n            }\n          },\n          getLineContent: function getLineContent(lineNumber) {\n            if (lineNumber === firstLineNumber) {\n              return firstLineText;\n            } else {\n              return model.getLineContent(lineNumber);\n            }\n          }\n        };\n        var indentOfSecondLine = getGoodIndentForLine(autoIndent, virtualModel, model.getLanguageId(), startLineNumber + 1, indentConverter, this._languageConfigurationService);\n        if (indentOfSecondLine !== null) {\n          var newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(indentOfSecondLine, tabSize);\n          var oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(strings.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);\n          if (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n            var spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n            for (var i = startLineNumber + 1; i <= range.endLineNumber; i++) {\n              var lineContent = model.getLineContent(i);\n              var originalIndent = strings.getLeadingWhitespace(lineContent);\n              var originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n              var newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n              var _newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n              if (_newIndent !== originalIndent) {\n                textEdits.push({\n                  range: new Range(i, 1, i, originalIndent.length + 1),\n                  text: _newIndent\n                });\n              }\n            }\n          }\n        }\n      }\n      if (textEdits.length > 0) {\n        this.editor.pushUndoStop();\n        var cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection());\n        this.editor.executeCommand('autoIndentOnPaste', cmd);\n        this.editor.pushUndoStop();\n      }\n    }\n  }, {\n    key: \"shouldIgnoreLine\",\n    value: function shouldIgnoreLine(model, lineNumber) {\n      model.tokenization.forceTokenization(lineNumber);\n      var nonWhitespaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n      if (nonWhitespaceColumn === 0) {\n        return true;\n      }\n      var tokens = model.tokenization.getLineTokens(lineNumber);\n      if (tokens.getCount() > 0) {\n        var firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhitespaceColumn);\n        if (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === 1 /* StandardTokenType.Comment */) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.callOnDispose.dispose();\n      this.callOnModel.dispose();\n    }\n  }]);\n}();\nAutoIndentOnPaste.ID = 'editor.contrib.autoIndentOnPaste';\nAutoIndentOnPaste = __decorate([__param(1, ILanguageConfigurationService)], AutoIndentOnPaste);\nexport { AutoIndentOnPaste };\nfunction getIndentationEditOperations(model, builder, tabSize, tabsToSpaces) {\n  if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n    // Model is empty\n    return;\n  }\n  var spaces = '';\n  for (var i = 0; i < tabSize; i++) {\n    spaces += ' ';\n  }\n  var spacesRegExp = new RegExp(spaces, 'gi');\n  for (var lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n    var lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n    if (lastIndentationColumn === 0) {\n      lastIndentationColumn = model.getLineMaxColumn(lineNumber);\n    }\n    if (lastIndentationColumn === 1) {\n      continue;\n    }\n    var originalIndentationRange = new Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n    var originalIndentation = model.getValueInRange(originalIndentationRange);\n    var newIndentation = tabsToSpaces ? originalIndentation.replace(/\\t/ig, spaces) : originalIndentation.replace(spacesRegExp, '\\t');\n    builder.addEditOperation(originalIndentationRange, newIndentation);\n  }\n}\nexport var IndentationToSpacesCommand = /*#__PURE__*/function () {\n  function IndentationToSpacesCommand(selection, tabSize) {\n    _classCallCheck(this, IndentationToSpacesCommand);\n    this.selection = selection;\n    this.tabSize = tabSize;\n    this.selectionId = null;\n  }\n  return _createClass(IndentationToSpacesCommand, [{\n    key: \"getEditOperations\",\n    value: function getEditOperations(model, builder) {\n      this.selectionId = builder.trackSelection(this.selection);\n      getIndentationEditOperations(model, builder, this.tabSize, true);\n    }\n  }, {\n    key: \"computeCursorState\",\n    value: function computeCursorState(model, helper) {\n      return helper.getTrackedSelection(this.selectionId);\n    }\n  }]);\n}();\nexport var IndentationToTabsCommand = /*#__PURE__*/function () {\n  function IndentationToTabsCommand(selection, tabSize) {\n    _classCallCheck(this, IndentationToTabsCommand);\n    this.selection = selection;\n    this.tabSize = tabSize;\n    this.selectionId = null;\n  }\n  return _createClass(IndentationToTabsCommand, [{\n    key: \"getEditOperations\",\n    value: function getEditOperations(model, builder) {\n      this.selectionId = builder.trackSelection(this.selection);\n      getIndentationEditOperations(model, builder, this.tabSize, false);\n    }\n  }, {\n    key: \"computeCursorState\",\n    value: function computeCursorState(model, helper) {\n      return helper.getTrackedSelection(this.selectionId);\n    }\n  }]);\n}();\nregisterEditorContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorAction(IndentationToSpacesAction);\nregisterEditorAction(IndentationToTabsAction);\nregisterEditorAction(IndentUsingTabs);\nregisterEditorAction(IndentUsingSpaces);\nregisterEditorAction(ChangeTabDisplaySize);\nregisterEditorAction(DetectIndentation);\nregisterEditorAction(ReindentLinesAction);\nregisterEditorAction(ReindentSelectedLinesAction);","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","_typeof","decorate","i","defineProperty","__param","paramIndex","decorator","DisposableStore","strings","EditorAction","registerEditorAction","registerEditorContribution","ShiftCommand","Range","EditorContextKeys","ILanguageConfigurationService","IModelService","indentUtils","nls","IQuickInputService","getGoodIndentForLine","getIndentMetadata","getReindentEditOperations","IndentationToSpacesAction","_EditorAction","_classCallCheck","_callSuper","id","ID","label","localize","alias","precondition","writable","_inherits","_createClass","value","run","accessor","editor","model","getModel","modelOpts","getOptions","selection","getSelection","command","IndentationToSpacesCommand","tabSize","pushUndoStop","executeCommands","updateOptions","insertSpaces","IndentationToTabsAction","_EditorAction2","IndentationToTabsCommand","ChangeIndentationSizeAction","_EditorAction3","displaySizeOnly","opts","_this","_this2","quickInputService","get","modelService","creationOpts","getCreationOptions","getLanguageId","uri","isForSimpleWidget","picks","map","n","toString","description","undefined","autoFocusIndex","Math","min","setTimeout","pick","placeHolder","comment","activeItem","then","isDisposed","pickedVal","parseInt","indentSize","IndentUsingTabs","_ChangeIndentationSiz","IndentUsingSpaces","_ChangeIndentationSiz2","ChangeTabDisplaySize","_ChangeIndentationSiz3","DetectIndentation","_EditorAction4","detectIndentation","ReindentLinesAction","_EditorAction5","languageConfigurationService","edits","getLineCount","executeEdits","ReindentSelectedLinesAction","_EditorAction6","selections","getSelections","_iterator","_createForOfIteratorHelper","_step","s","done","startLineNumber","endLineNumber","endColumn","editOperations","push","apply","_toConsumableArray","err","e","f","AutoIndentOnPasteCommand","initialSelection","_initialSelection","_edits","_selectionId","_iterator2","_step2","edit","range","text","getEditOperations","builder","_iterator3","_step3","addEditOperation","lift","selectionIsSet","Array","isArray","isEmpty","startColumn","trackSelection","computeCursorState","helper","getTrackedSelection","AutoIndentOnPaste","_languageConfigurationService","_this3","callOnDispose","callOnModel","add","onDidChangeConfiguration","update","onDidChangeModel","onDidChangeModelLanguage","_this4","clear","getOption","hasModel","onDidPaste","_ref","trigger","tokenization","isCheapToTokenize","getStartPosition","lineNumber","autoIndent","_model$getOptions","textEdits","indentConverter","shiftIndent","indentation","unshiftIndent","shouldIgnoreLine","firstLineText","getLineContent","test","substring","indentOfFirstLine","oldIndentation","getLeadingWhitespace","newSpaceCnt","getSpaceCnt","oldSpaceCnt","newIndent","generateIndent","substr","indentMetadata","firstLineNumber","virtualModel","getLineTokens","getLanguageIdAtPosition","column","indentOfSecondLine","newSpaceCntOfSecondLine","oldSpaceCntOfSecondLine","spaceCntOffset","lineContent","originalIndent","originalSpacesCnt","newSpacesCnt","cmd","executeCommand","forceTokenization","nonWhitespaceColumn","getLineFirstNonWhitespaceColumn","tokens","getCount","firstNonWhitespaceTokenIndex","findTokenIndexAtOffset","getStandardTokenType","dispose","getIndentationEditOperations","tabsToSpaces","getLineMaxColumn","spaces","spacesRegExp","RegExp","lineCount","lastIndentationColumn","originalIndentationRange","originalIndentation","getValueInRange","newIndentation","replace","selectionId"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/contrib/indentation/browser/indentation.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport * as indentUtils from '../common/indentUtils.js';\nimport * as nls from '../../../../nls.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { getGoodIndentForLine, getIndentMetadata } from '../../../common/languages/autoIndent.js';\nimport { getReindentEditOperations } from '../common/indentation.js';\nexport class IndentationToSpacesAction extends EditorAction {\n    constructor() {\n        super({\n            id: IndentationToSpacesAction.ID,\n            label: nls.localize('indentationToSpaces', \"Convert Indentation to Spaces\"),\n            alias: 'Convert Indentation to Spaces',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(accessor, editor) {\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const modelOpts = model.getOptions();\n        const selection = editor.getSelection();\n        if (!selection) {\n            return;\n        }\n        const command = new IndentationToSpacesCommand(selection, modelOpts.tabSize);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n        model.updateOptions({\n            insertSpaces: true\n        });\n    }\n}\nIndentationToSpacesAction.ID = 'editor.action.indentationToSpaces';\nexport class IndentationToTabsAction extends EditorAction {\n    constructor() {\n        super({\n            id: IndentationToTabsAction.ID,\n            label: nls.localize('indentationToTabs', \"Convert Indentation to Tabs\"),\n            alias: 'Convert Indentation to Tabs',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(accessor, editor) {\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const modelOpts = model.getOptions();\n        const selection = editor.getSelection();\n        if (!selection) {\n            return;\n        }\n        const command = new IndentationToTabsCommand(selection, modelOpts.tabSize);\n        editor.pushUndoStop();\n        editor.executeCommands(this.id, [command]);\n        editor.pushUndoStop();\n        model.updateOptions({\n            insertSpaces: false\n        });\n    }\n}\nIndentationToTabsAction.ID = 'editor.action.indentationToTabs';\nexport class ChangeIndentationSizeAction extends EditorAction {\n    constructor(insertSpaces, displaySizeOnly, opts) {\n        super(opts);\n        this.insertSpaces = insertSpaces;\n        this.displaySizeOnly = displaySizeOnly;\n    }\n    run(accessor, editor) {\n        const quickInputService = accessor.get(IQuickInputService);\n        const modelService = accessor.get(IModelService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n        const modelOpts = model.getOptions();\n        const picks = [1, 2, 3, 4, 5, 6, 7, 8].map(n => ({\n            id: n.toString(),\n            label: n.toString(),\n            // add description for tabSize value set in the configuration\n            description: (n === creationOpts.tabSize && n === modelOpts.tabSize\n                ? nls.localize('configuredTabSize', \"Configured Tab Size\")\n                : n === creationOpts.tabSize\n                    ? nls.localize('defaultTabSize', \"Default Tab Size\")\n                    : n === modelOpts.tabSize\n                        ? nls.localize('currentTabSize', \"Current Tab Size\")\n                        : undefined)\n        }));\n        // auto focus the tabSize set for the current editor\n        const autoFocusIndex = Math.min(model.getOptions().tabSize - 1, 7);\n        setTimeout(() => {\n            quickInputService.pick(picks, { placeHolder: nls.localize({ key: 'selectTabWidth', comment: ['Tab corresponds to the tab key'] }, \"Select Tab Size for Current File\"), activeItem: picks[autoFocusIndex] }).then(pick => {\n                if (pick) {\n                    if (model && !model.isDisposed()) {\n                        const pickedVal = parseInt(pick.label, 10);\n                        if (this.displaySizeOnly) {\n                            model.updateOptions({\n                                tabSize: pickedVal\n                            });\n                        }\n                        else {\n                            model.updateOptions({\n                                tabSize: pickedVal,\n                                indentSize: pickedVal,\n                                insertSpaces: this.insertSpaces\n                            });\n                        }\n                    }\n                }\n            });\n        }, 50 /* quick input is sensitive to being opened so soon after another */);\n    }\n}\nexport class IndentUsingTabs extends ChangeIndentationSizeAction {\n    constructor() {\n        super(false, false, {\n            id: IndentUsingTabs.ID,\n            label: nls.localize('indentUsingTabs', \"Indent Using Tabs\"),\n            alias: 'Indent Using Tabs',\n            precondition: undefined\n        });\n    }\n}\nIndentUsingTabs.ID = 'editor.action.indentUsingTabs';\nexport class IndentUsingSpaces extends ChangeIndentationSizeAction {\n    constructor() {\n        super(true, false, {\n            id: IndentUsingSpaces.ID,\n            label: nls.localize('indentUsingSpaces', \"Indent Using Spaces\"),\n            alias: 'Indent Using Spaces',\n            precondition: undefined\n        });\n    }\n}\nIndentUsingSpaces.ID = 'editor.action.indentUsingSpaces';\nexport class ChangeTabDisplaySize extends ChangeIndentationSizeAction {\n    constructor() {\n        super(true, true, {\n            id: ChangeTabDisplaySize.ID,\n            label: nls.localize('changeTabDisplaySize', \"Change Tab Display Size\"),\n            alias: 'Change Tab Display Size',\n            precondition: undefined\n        });\n    }\n}\nChangeTabDisplaySize.ID = 'editor.action.changeTabDisplaySize';\nexport class DetectIndentation extends EditorAction {\n    constructor() {\n        super({\n            id: DetectIndentation.ID,\n            label: nls.localize('detectIndentation', \"Detect Indentation from Content\"),\n            alias: 'Detect Indentation from Content',\n            precondition: undefined\n        });\n    }\n    run(accessor, editor) {\n        const modelService = accessor.get(IModelService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const creationOpts = modelService.getCreationOptions(model.getLanguageId(), model.uri, model.isForSimpleWidget);\n        model.detectIndentation(creationOpts.insertSpaces, creationOpts.tabSize);\n    }\n}\nDetectIndentation.ID = 'editor.action.detectIndentation';\nexport class ReindentLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.reindentlines',\n            label: nls.localize('editor.reindentlines', \"Reindent Lines\"),\n            alias: 'Reindent Lines',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const edits = getReindentEditOperations(model, languageConfigurationService, 1, model.getLineCount());\n        if (edits.length > 0) {\n            editor.pushUndoStop();\n            editor.executeEdits(this.id, edits);\n            editor.pushUndoStop();\n        }\n    }\n}\nexport class ReindentSelectedLinesAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.reindentselectedlines',\n            label: nls.localize('editor.reindentselectedlines', \"Reindent Selected Lines\"),\n            alias: 'Reindent Selected Lines',\n            precondition: EditorContextKeys.writable\n        });\n    }\n    run(accessor, editor) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const model = editor.getModel();\n        if (!model) {\n            return;\n        }\n        const selections = editor.getSelections();\n        if (selections === null) {\n            return;\n        }\n        const edits = [];\n        for (const selection of selections) {\n            let startLineNumber = selection.startLineNumber;\n            let endLineNumber = selection.endLineNumber;\n            if (startLineNumber !== endLineNumber && selection.endColumn === 1) {\n                endLineNumber--;\n            }\n            if (startLineNumber === 1) {\n                if (startLineNumber === endLineNumber) {\n                    continue;\n                }\n            }\n            else {\n                startLineNumber--;\n            }\n            const editOperations = getReindentEditOperations(model, languageConfigurationService, startLineNumber, endLineNumber);\n            edits.push(...editOperations);\n        }\n        if (edits.length > 0) {\n            editor.pushUndoStop();\n            editor.executeEdits(this.id, edits);\n            editor.pushUndoStop();\n        }\n    }\n}\nexport class AutoIndentOnPasteCommand {\n    constructor(edits, initialSelection) {\n        this._initialSelection = initialSelection;\n        this._edits = [];\n        this._selectionId = null;\n        for (const edit of edits) {\n            if (edit.range && typeof edit.text === 'string') {\n                this._edits.push(edit);\n            }\n        }\n    }\n    getEditOperations(model, builder) {\n        for (const edit of this._edits) {\n            builder.addEditOperation(Range.lift(edit.range), edit.text);\n        }\n        let selectionIsSet = false;\n        if (Array.isArray(this._edits) && this._edits.length === 1 && this._initialSelection.isEmpty()) {\n            if (this._edits[0].range.startColumn === this._initialSelection.endColumn &&\n                this._edits[0].range.startLineNumber === this._initialSelection.endLineNumber) {\n                selectionIsSet = true;\n                this._selectionId = builder.trackSelection(this._initialSelection, true);\n            }\n            else if (this._edits[0].range.endColumn === this._initialSelection.startColumn &&\n                this._edits[0].range.endLineNumber === this._initialSelection.startLineNumber) {\n                selectionIsSet = true;\n                this._selectionId = builder.trackSelection(this._initialSelection, false);\n            }\n        }\n        if (!selectionIsSet) {\n            this._selectionId = builder.trackSelection(this._initialSelection);\n        }\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this._selectionId);\n    }\n}\nlet AutoIndentOnPaste = class AutoIndentOnPaste {\n    constructor(editor, _languageConfigurationService) {\n        this.editor = editor;\n        this._languageConfigurationService = _languageConfigurationService;\n        this.callOnDispose = new DisposableStore();\n        this.callOnModel = new DisposableStore();\n        this.callOnDispose.add(editor.onDidChangeConfiguration(() => this.update()));\n        this.callOnDispose.add(editor.onDidChangeModel(() => this.update()));\n        this.callOnDispose.add(editor.onDidChangeModelLanguage(() => this.update()));\n    }\n    update() {\n        // clean up\n        this.callOnModel.clear();\n        // we are disabled\n        if (this.editor.getOption(12 /* EditorOption.autoIndent */) < 4 /* EditorAutoIndentStrategy.Full */ || this.editor.getOption(55 /* EditorOption.formatOnPaste */)) {\n            return;\n        }\n        // no model\n        if (!this.editor.hasModel()) {\n            return;\n        }\n        this.callOnModel.add(this.editor.onDidPaste(({ range }) => {\n            this.trigger(range);\n        }));\n    }\n    trigger(range) {\n        const selections = this.editor.getSelections();\n        if (selections === null || selections.length > 1) {\n            return;\n        }\n        const model = this.editor.getModel();\n        if (!model) {\n            return;\n        }\n        if (!model.tokenization.isCheapToTokenize(range.getStartPosition().lineNumber)) {\n            return;\n        }\n        const autoIndent = this.editor.getOption(12 /* EditorOption.autoIndent */);\n        const { tabSize, indentSize, insertSpaces } = model.getOptions();\n        const textEdits = [];\n        const indentConverter = {\n            shiftIndent: (indentation) => {\n                return ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            },\n            unshiftIndent: (indentation) => {\n                return ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n            }\n        };\n        let startLineNumber = range.startLineNumber;\n        while (startLineNumber <= range.endLineNumber) {\n            if (this.shouldIgnoreLine(model, startLineNumber)) {\n                startLineNumber++;\n                continue;\n            }\n            break;\n        }\n        if (startLineNumber > range.endLineNumber) {\n            return;\n        }\n        let firstLineText = model.getLineContent(startLineNumber);\n        if (!/\\S/.test(firstLineText.substring(0, range.startColumn - 1))) {\n            const indentOfFirstLine = getGoodIndentForLine(autoIndent, model, model.getLanguageId(), startLineNumber, indentConverter, this._languageConfigurationService);\n            if (indentOfFirstLine !== null) {\n                const oldIndentation = strings.getLeadingWhitespace(firstLineText);\n                const newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n                const oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n                if (newSpaceCnt !== oldSpaceCnt) {\n                    const newIndent = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n                    textEdits.push({\n                        range: new Range(startLineNumber, 1, startLineNumber, oldIndentation.length + 1),\n                        text: newIndent\n                    });\n                    firstLineText = newIndent + firstLineText.substr(oldIndentation.length);\n                }\n                else {\n                    const indentMetadata = getIndentMetadata(model, startLineNumber, this._languageConfigurationService);\n                    if (indentMetadata === 0 || indentMetadata === 8 /* IndentConsts.UNINDENT_MASK */) {\n                        // we paste content into a line where only contains whitespaces\n                        // after pasting, the indentation of the first line is already correct\n                        // the first line doesn't match any indentation rule\n                        // then no-op.\n                        return;\n                    }\n                }\n            }\n        }\n        const firstLineNumber = startLineNumber;\n        // ignore empty or ignored lines\n        while (startLineNumber < range.endLineNumber) {\n            if (!/\\S/.test(model.getLineContent(startLineNumber + 1))) {\n                startLineNumber++;\n                continue;\n            }\n            break;\n        }\n        if (startLineNumber !== range.endLineNumber) {\n            const virtualModel = {\n                tokenization: {\n                    getLineTokens: (lineNumber) => {\n                        return model.tokenization.getLineTokens(lineNumber);\n                    },\n                    getLanguageId: () => {\n                        return model.getLanguageId();\n                    },\n                    getLanguageIdAtPosition: (lineNumber, column) => {\n                        return model.getLanguageIdAtPosition(lineNumber, column);\n                    },\n                },\n                getLineContent: (lineNumber) => {\n                    if (lineNumber === firstLineNumber) {\n                        return firstLineText;\n                    }\n                    else {\n                        return model.getLineContent(lineNumber);\n                    }\n                }\n            };\n            const indentOfSecondLine = getGoodIndentForLine(autoIndent, virtualModel, model.getLanguageId(), startLineNumber + 1, indentConverter, this._languageConfigurationService);\n            if (indentOfSecondLine !== null) {\n                const newSpaceCntOfSecondLine = indentUtils.getSpaceCnt(indentOfSecondLine, tabSize);\n                const oldSpaceCntOfSecondLine = indentUtils.getSpaceCnt(strings.getLeadingWhitespace(model.getLineContent(startLineNumber + 1)), tabSize);\n                if (newSpaceCntOfSecondLine !== oldSpaceCntOfSecondLine) {\n                    const spaceCntOffset = newSpaceCntOfSecondLine - oldSpaceCntOfSecondLine;\n                    for (let i = startLineNumber + 1; i <= range.endLineNumber; i++) {\n                        const lineContent = model.getLineContent(i);\n                        const originalIndent = strings.getLeadingWhitespace(lineContent);\n                        const originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n                        const newSpacesCnt = originalSpacesCnt + spaceCntOffset;\n                        const newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n                        if (newIndent !== originalIndent) {\n                            textEdits.push({\n                                range: new Range(i, 1, i, originalIndent.length + 1),\n                                text: newIndent\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if (textEdits.length > 0) {\n            this.editor.pushUndoStop();\n            const cmd = new AutoIndentOnPasteCommand(textEdits, this.editor.getSelection());\n            this.editor.executeCommand('autoIndentOnPaste', cmd);\n            this.editor.pushUndoStop();\n        }\n    }\n    shouldIgnoreLine(model, lineNumber) {\n        model.tokenization.forceTokenization(lineNumber);\n        const nonWhitespaceColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n        if (nonWhitespaceColumn === 0) {\n            return true;\n        }\n        const tokens = model.tokenization.getLineTokens(lineNumber);\n        if (tokens.getCount() > 0) {\n            const firstNonWhitespaceTokenIndex = tokens.findTokenIndexAtOffset(nonWhitespaceColumn);\n            if (firstNonWhitespaceTokenIndex >= 0 && tokens.getStandardTokenType(firstNonWhitespaceTokenIndex) === 1 /* StandardTokenType.Comment */) {\n                return true;\n            }\n        }\n        return false;\n    }\n    dispose() {\n        this.callOnDispose.dispose();\n        this.callOnModel.dispose();\n    }\n};\nAutoIndentOnPaste.ID = 'editor.contrib.autoIndentOnPaste';\nAutoIndentOnPaste = __decorate([\n    __param(1, ILanguageConfigurationService)\n], AutoIndentOnPaste);\nexport { AutoIndentOnPaste };\nfunction getIndentationEditOperations(model, builder, tabSize, tabsToSpaces) {\n    if (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n        // Model is empty\n        return;\n    }\n    let spaces = '';\n    for (let i = 0; i < tabSize; i++) {\n        spaces += ' ';\n    }\n    const spacesRegExp = new RegExp(spaces, 'gi');\n    for (let lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n        let lastIndentationColumn = model.getLineFirstNonWhitespaceColumn(lineNumber);\n        if (lastIndentationColumn === 0) {\n            lastIndentationColumn = model.getLineMaxColumn(lineNumber);\n        }\n        if (lastIndentationColumn === 1) {\n            continue;\n        }\n        const originalIndentationRange = new Range(lineNumber, 1, lineNumber, lastIndentationColumn);\n        const originalIndentation = model.getValueInRange(originalIndentationRange);\n        const newIndentation = (tabsToSpaces\n            ? originalIndentation.replace(/\\t/ig, spaces)\n            : originalIndentation.replace(spacesRegExp, '\\t'));\n        builder.addEditOperation(originalIndentationRange, newIndentation);\n    }\n}\nexport class IndentationToSpacesCommand {\n    constructor(selection, tabSize) {\n        this.selection = selection;\n        this.tabSize = tabSize;\n        this.selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        this.selectionId = builder.trackSelection(this.selection);\n        getIndentationEditOperations(model, builder, this.tabSize, true);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    }\n}\nexport class IndentationToTabsCommand {\n    constructor(selection, tabSize) {\n        this.selection = selection;\n        this.tabSize = tabSize;\n        this.selectionId = null;\n    }\n    getEditOperations(model, builder) {\n        this.selectionId = builder.trackSelection(this.selection);\n        getIndentationEditOperations(model, builder, this.tabSize, false);\n    }\n    computeCursorState(model, helper) {\n        return helper.getTrackedSelection(this.selectionId);\n    }\n}\nregisterEditorContribution(AutoIndentOnPaste.ID, AutoIndentOnPaste, 2 /* EditorContributionInstantiation.BeforeFirstInteraction */);\nregisterEditorAction(IndentationToSpacesAction);\nregisterEditorAction(IndentationToTabsAction);\nregisterEditorAction(IndentUsingTabs);\nregisterEditorAction(IndentUsingSpaces);\nregisterEditorAction(ChangeTabDisplaySize);\nregisterEditorAction(DetectIndentation);\nregisterEditorAction(ReindentLinesAction);\nregisterEditorAction(ReindentSelectedLinesAction);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}