{"ast":null,"code":"import \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/protobuf/protobuf.ts\nvar namedLiterals = [\"true\", \"false\"];\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  surroundingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  autoClosingPairs: [{\n    open: \"{\",\n    close: \"}\"\n  }, {\n    open: \"[\",\n    close: \"]\"\n  }, {\n    open: \"(\",\n    close: \")\"\n  }, {\n    open: \"<\",\n    close: \">\"\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\"]\n  }, {\n    open: \"'\",\n    close: \"'\",\n    notIn: [\"string\"]\n  }],\n  autoCloseBefore: \".,=}])>' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".proto\",\n  brackets: [{\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords: [\"syntax\", \"import\", \"weak\", \"public\", \"package\", \"option\", \"repeated\", \"oneof\", \"map\", \"reserved\", \"to\", \"max\", \"enum\", \"message\", \"service\", \"rpc\", \"stream\", \"returns\", \"package\", \"optional\", \"true\", \"false\"],\n  builtinTypes: [\"double\", \"float\", \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\", \"bool\", \"string\", \"bytes\"],\n  operators: [\"=\", \"+\", \"-\"],\n  namedLiterals: namedLiterals,\n  escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\n  identifier: /[a-zA-Z]\\w*/,\n  fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n  optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n  messageName: /@identifier/,\n  enumName: /@identifier/,\n  messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n  enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n  floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n  exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n  boolLit: /true\\b|false\\b/,\n  decimalLit: /[1-9][0-9]*/,\n  octalLit: /0[0-7]*/,\n  hexLit: /0[xX][0-9a-fA-F]+/,\n  type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n  keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n  tokenizer: {\n    root: [{\n      include: \"@whitespace\"\n    }, [/syntax/, \"keyword\"], [/=/, \"operators\"], [/;/, \"delimiter\"], [/(\")(proto3)(\")/, [\"string.quote\", \"string\", {\n      token: \"string.quote\",\n      switchTo: \"@topLevel.proto3\"\n    }]], [/(\")(proto2)(\")/, [\"string.quote\", \"string\", {\n      token: \"string.quote\",\n      switchTo: \"@topLevel.proto2\"\n    }]], [\n    // If no `syntax` provided, regarded as proto2\n    /.*?/, {\n      token: \"\",\n      switchTo: \"@topLevel.proto2\"\n    }]],\n    topLevel: [\n    // whitespace\n    {\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/[;.]/, \"delimiter\"], [/@fullIdentifier/, {\n      cases: {\n        option: {\n          token: \"keyword\",\n          next: \"@option.$S2\"\n        },\n        \"enum\": {\n          token: \"keyword\",\n          next: \"@enumDecl.$S2\"\n        },\n        message: {\n          token: \"keyword\",\n          next: \"@messageDecl.$S2\"\n        },\n        service: {\n          token: \"keyword\",\n          next: \"@serviceDecl.$S2\"\n        },\n        extend: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@extendDecl.$S2\"\n            }\n          }\n        },\n        \"@keywords\": \"keyword\",\n        \"@default\": \"identifier\"\n      }\n    }]],\n    enumDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@enumBody.$S2\"\n    }]],\n    enumBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/;/, \"delimiter\"], [/option\\b/, \"keyword\", \"@option.$S2\"], [/@identifier/, \"identifier\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    messageDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@messageBody.$S2\"\n    }]],\n    messageBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/=/, \"operators\"], [/;/, \"delimiter\"], [\"(map)(s*)(<)\", [\"keyword\", \"white\", {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@map.$S2\"\n    }]], [/@identifier/, {\n      cases: {\n        option: {\n          token: \"keyword\",\n          next: \"@option.$S2\"\n        },\n        \"enum\": {\n          token: \"keyword\",\n          next: \"@enumDecl.$S2\"\n        },\n        message: {\n          token: \"keyword\",\n          next: \"@messageDecl.$S2\"\n        },\n        oneof: {\n          token: \"keyword\",\n          next: \"@oneofDecl.$S2\"\n        },\n        extensions: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@reserved.$S2\"\n            }\n          }\n        },\n        reserved: {\n          token: \"keyword\",\n          next: \"@reserved.$S2\"\n        },\n        \"(?:repeated|optional)\": {\n          token: \"keyword\",\n          next: \"@field.$S2\"\n        },\n        required: {\n          cases: {\n            \"$S2==proto2\": {\n              token: \"keyword\",\n              next: \"@field.$S2\"\n            }\n          }\n        },\n        \"$S2==proto3\": {\n          token: \"@rematch\",\n          next: \"@field.$S2\"\n        }\n      }\n    }], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    extendDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@extendBody.$S2\"\n    }]],\n    extendBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/(?:repeated|optional|required)/, \"keyword\", \"@field.$S2\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    options: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\"], [/\\]/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    option: [{\n      include: \"@whitespace\"\n    }, [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\", \"@pop\"]],\n    oneofDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@oneofBody.$S2\"\n    }]],\n    oneofBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", \"delimiter\"]], [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    reserved: [{\n      include: \"@whitespace\"\n    }, [/,/, \"delimiter\"], [/;/, \"delimiter\", \"@pop\"], {\n      include: \"@constant\"\n    }, [/to\\b|max\\b/, \"keyword\"]],\n    map: [{\n      include: \"@whitespace\"\n    }, [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }], [/,/, \"delimiter\"], [/>/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"identifier\"\n    }]],\n    field: [{\n      include: \"@whitespace\"\n    }, [\"group\", {\n      cases: {\n        \"$S2==proto2\": {\n          token: \"keyword\",\n          switchTo: \"@groupDecl.$S2\"\n        }\n      }\n    }], [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", {\n      token: \"delimiter\",\n      next: \"@pop\"\n    }]], [/@fullIdentifier|\\./, {\n      cases: {\n        \"@builtinTypes\": \"keyword\",\n        \"@default\": \"type.identifier\"\n      }\n    }]],\n    groupDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [\"=\", \"operator\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@messageBody.$S2\"\n    }], {\n      include: \"@constant\"\n    }],\n    type: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"type.identifier\", \"@pop\"], [/./, \"delimiter\"]],\n    identifier: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\", \"@pop\"]],\n    serviceDecl: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@serviceBody.$S2\"\n    }]],\n    serviceBody: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [/option\\b/, \"keyword\", \"@option.$S2\"], [/rpc\\b/, \"keyword\", \"@rpc.$S2\"], [/\\[/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@options.$S2\"\n    }], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    rpc: [{\n      include: \"@whitespace\"\n    }, [/@identifier/, \"identifier\"], [/\\(/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@request.$S2\"\n    }], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@methodOptions.$S2\"\n    }], [/;/, \"delimiter\", \"@pop\"]],\n    request: [{\n      include: \"@whitespace\"\n    }, [/@messageType/, {\n      cases: {\n        stream: {\n          token: \"keyword\",\n          next: \"@type.$S2\"\n        },\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\)/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"@returns.$S2\"\n    }]],\n    returns: [{\n      include: \"@whitespace\"\n    }, [/returns\\b/, \"keyword\"], [/\\(/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      switchTo: \"@response.$S2\"\n    }]],\n    response: [{\n      include: \"@whitespace\"\n    }, [/@messageType/, {\n      cases: {\n        stream: {\n          token: \"keyword\",\n          next: \"@type.$S2\"\n        },\n        \"@default\": \"type.identifier\"\n      }\n    }], [/\\)/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      switchTo: \"@rpc.$S2\"\n    }]],\n    methodOptions: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/;/, \"delimiter\"], [\"option\", \"keyword\"], [/@optionName/, \"annotation\"], [/[()]/, \"annotation.brackets\"], [/=/, \"operator\"], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    comment: [[/[^\\/*]+/, \"comment\"], [/\\/\\*/, \"comment\", \"@push\"],\n    // nested comment\n    [\"\\\\*/\", \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    string: [[/[^\\\\\"]+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    stringSingle: [[/[^\\\\']+/, \"string\"], [/@escapes/, \"string.escape\"], [/\\\\./, \"string.escape.invalid\"], [/'/, {\n      token: \"string.quote\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]],\n    constant: [[\"@boolLit\", \"keyword.constant\"], [\"@hexLit\", \"number.hex\"], [\"@octalLit\", \"number.octal\"], [\"@decimalLit\", \"number\"], [\"@floatLit\", \"number.float\"], [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, \"string.invalid\"],\n    // non-terminated string\n    [/\"/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@string\"\n    }], [/'/, {\n      token: \"string.quote\",\n      bracket: \"@open\",\n      next: \"@stringSingle\"\n    }], [/{/, {\n      token: \"@brackets\",\n      bracket: \"@open\",\n      next: \"@prototext\"\n    }], [/identifier/, \"identifier\"]],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"], [/\\/\\*/, \"comment\", \"@comment\"], [/\\/\\/.*$/, \"comment\"]],\n    prototext: [{\n      include: \"@whitespace\"\n    }, {\n      include: \"@constant\"\n    }, [/@identifier/, \"identifier\"], [/[:;]/, \"delimiter\"], [/}/, {\n      token: \"@brackets\",\n      bracket: \"@close\",\n      next: \"@pop\"\n    }]]\n  }\n};\nexport { conf, language };","map":{"version":3,"names":["namedLiterals","conf","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","language","defaultToken","tokenPostfix","token","symbols","keywords","builtinTypes","operators","escapes","identifier","fullIdentifier","optionName","messageName","enumName","messageType","enumType","floatLit","exponent","boolLit","decimalLit","octalLit","hexLit","type","keyType","tokenizer","root","include","switchTo","topLevel","cases","option","next","message","service","extend","enumDecl","bracket","enumBody","messageDecl","messageBody","oneof","extensions","reserved","required","extendDecl","extendBody","options","oneofDecl","oneofBody","map","field","groupDecl","serviceDecl","serviceBody","rpc","request","stream","returns","response","methodOptions","comment","string","stringSingle","constant","whitespace","prototext"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/basic-languages/protobuf/protobuf.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/protobuf/protobuf.ts\nvar namedLiterals = [\"true\", \"false\"];\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\"] }\n  ],\n  autoCloseBefore: \".,=}])>' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".proto\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords: [\n    \"syntax\",\n    \"import\",\n    \"weak\",\n    \"public\",\n    \"package\",\n    \"option\",\n    \"repeated\",\n    \"oneof\",\n    \"map\",\n    \"reserved\",\n    \"to\",\n    \"max\",\n    \"enum\",\n    \"message\",\n    \"service\",\n    \"rpc\",\n    \"stream\",\n    \"returns\",\n    \"package\",\n    \"optional\",\n    \"true\",\n    \"false\"\n  ],\n  builtinTypes: [\n    \"double\",\n    \"float\",\n    \"int32\",\n    \"int64\",\n    \"uint32\",\n    \"uint64\",\n    \"sint32\",\n    \"sint64\",\n    \"fixed32\",\n    \"fixed64\",\n    \"sfixed32\",\n    \"sfixed64\",\n    \"bool\",\n    \"string\",\n    \"bytes\"\n  ],\n  operators: [\"=\", \"+\", \"-\"],\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  identifier: /[a-zA-Z]\\w*/,\n  fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n  optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n  messageName: /@identifier/,\n  enumName: /@identifier/,\n  messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n  enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n  floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n  exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n  boolLit: /true\\b|false\\b/,\n  decimalLit: /[1-9][0-9]*/,\n  octalLit: /0[0-7]*/,\n  hexLit: /0[xX][0-9a-fA-F]+/,\n  type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n  keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n  tokenizer: {\n    root: [\n      { include: \"@whitespace\" },\n      [/syntax/, \"keyword\"],\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [\n        /(\")(proto3)(\")/,\n        [\"string.quote\", \"string\", { token: \"string.quote\", switchTo: \"@topLevel.proto3\" }]\n      ],\n      [\n        /(\")(proto2)(\")/,\n        [\"string.quote\", \"string\", { token: \"string.quote\", switchTo: \"@topLevel.proto2\" }]\n      ],\n      [\n        // If no `syntax` provided, regarded as proto2\n        /.*?/,\n        { token: \"\", switchTo: \"@topLevel.proto2\" }\n      ]\n    ],\n    topLevel: [\n      // whitespace\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/[;.]/, \"delimiter\"],\n      [\n        /@fullIdentifier/,\n        {\n          cases: {\n            option: { token: \"keyword\", next: \"@option.$S2\" },\n            enum: { token: \"keyword\", next: \"@enumDecl.$S2\" },\n            message: { token: \"keyword\", next: \"@messageDecl.$S2\" },\n            service: { token: \"keyword\", next: \"@serviceDecl.$S2\" },\n            extend: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@extendDecl.$S2\" }\n              }\n            },\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ]\n    ],\n    enumDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@enumBody.$S2\" }]\n    ],\n    enumBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [/option\\b/, \"keyword\", \"@option.$S2\"],\n      [/@identifier/, \"identifier\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    messageDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@messageBody.$S2\" }]\n    ],\n    messageBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [\n        \"(map)(s*)(<)\",\n        [\"keyword\", \"white\", { token: \"@brackets\", bracket: \"@open\", next: \"@map.$S2\" }]\n      ],\n      [\n        /@identifier/,\n        {\n          cases: {\n            option: { token: \"keyword\", next: \"@option.$S2\" },\n            enum: { token: \"keyword\", next: \"@enumDecl.$S2\" },\n            message: { token: \"keyword\", next: \"@messageDecl.$S2\" },\n            oneof: { token: \"keyword\", next: \"@oneofDecl.$S2\" },\n            extensions: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@reserved.$S2\" }\n              }\n            },\n            reserved: { token: \"keyword\", next: \"@reserved.$S2\" },\n            \"(?:repeated|optional)\": { token: \"keyword\", next: \"@field.$S2\" },\n            required: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@field.$S2\" }\n              }\n            },\n            \"$S2==proto3\": { token: \"@rematch\", next: \"@field.$S2\" }\n          }\n        }\n      ],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    extendDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@extendBody.$S2\" }]\n    ],\n    extendBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/(?:repeated|optional|required)/, \"keyword\", \"@field.$S2\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    options: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\"],\n      [/\\]/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    option: [\n      { include: \"@whitespace\" },\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\", \"@pop\"]\n    ],\n    oneofDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@oneofBody.$S2\" }]\n    ],\n    oneofBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", \"delimiter\"]],\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    reserved: [\n      { include: \"@whitespace\" },\n      [/,/, \"delimiter\"],\n      [/;/, \"delimiter\", \"@pop\"],\n      { include: \"@constant\" },\n      [/to\\b|max\\b/, \"keyword\"]\n    ],\n    map: [\n      { include: \"@whitespace\" },\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/,/, \"delimiter\"],\n      [/>/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"identifier\" }]\n    ],\n    field: [\n      { include: \"@whitespace\" },\n      [\n        \"group\",\n        {\n          cases: {\n            \"$S2==proto2\": { token: \"keyword\", switchTo: \"@groupDecl.$S2\" }\n          }\n        }\n      ],\n      [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", { token: \"delimiter\", next: \"@pop\" }]],\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ]\n    ],\n    groupDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [\"=\", \"operator\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@messageBody.$S2\" }],\n      { include: \"@constant\" }\n    ],\n    type: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\", \"@pop\"],\n      [/./, \"delimiter\"]\n    ],\n    identifier: [{ include: \"@whitespace\" }, [/@identifier/, \"identifier\", \"@pop\"]],\n    serviceDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@serviceBody.$S2\" }]\n    ],\n    serviceBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/option\\b/, \"keyword\", \"@option.$S2\"],\n      [/rpc\\b/, \"keyword\", \"@rpc.$S2\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    rpc: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/\\(/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@request.$S2\" }],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", next: \"@methodOptions.$S2\" }],\n      [/;/, \"delimiter\", \"@pop\"]\n    ],\n    request: [\n      { include: \"@whitespace\" },\n      [\n        /@messageType/,\n        {\n          cases: {\n            stream: { token: \"keyword\", next: \"@type.$S2\" },\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\)/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"@returns.$S2\" }]\n    ],\n    returns: [\n      { include: \"@whitespace\" },\n      [/returns\\b/, \"keyword\"],\n      [/\\(/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@response.$S2\" }]\n    ],\n    response: [\n      { include: \"@whitespace\" },\n      [\n        /@messageType/,\n        {\n          cases: {\n            stream: { token: \"keyword\", next: \"@type.$S2\" },\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\)/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"@rpc.$S2\" }]\n    ],\n    methodOptions: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [\"option\", \"keyword\"],\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\"],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\/\\*/, \"comment\", \"@push\"],\n      // nested comment\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    stringSingle: [\n      [/[^\\\\']+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/'/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    constant: [\n      [\"@boolLit\", \"keyword.constant\"],\n      [\"@hexLit\", \"number.hex\"],\n      [\"@octalLit\", \"number.octal\"],\n      [\"@decimalLit\", \"number\"],\n      [\"@floatLit\", \"number.float\"],\n      [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, \"string.invalid\"],\n      // non-terminated string\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }],\n      [/'/, { token: \"string.quote\", bracket: \"@open\", next: \"@stringSingle\" }],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", next: \"@prototext\" }],\n      [/identifier/, \"identifier\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    prototext: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/@identifier/, \"identifier\"],\n      [/[:;]/, \"delimiter\"],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}