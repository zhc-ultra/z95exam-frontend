{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getWindowId, onDidUnregisterWindow } from './dom.js';\nimport { Emitter, Event } from '../common/event.js';\nimport { Disposable, markAsSingleton } from '../common/lifecycle.js';\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n */\nvar DevicePixelRatioMonitor = /*#__PURE__*/function (_Disposable) {\n  function DevicePixelRatioMonitor(targetWindow) {\n    var _this;\n    _classCallCheck(this, DevicePixelRatioMonitor);\n    _this = _callSuper(this, DevicePixelRatioMonitor);\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._listener = function () {\n      return _this._handleChange(targetWindow, true);\n    };\n    _this._mediaQueryList = null;\n    _this._handleChange(targetWindow, false);\n    return _this;\n  }\n  _inherits(DevicePixelRatioMonitor, _Disposable);\n  return _createClass(DevicePixelRatioMonitor, [{\n    key: \"_handleChange\",\n    value: function _handleChange(targetWindow, fireEvent) {\n      var _a;\n      (_a = this._mediaQueryList) === null || _a === void 0 ? void 0 : _a.removeEventListener('change', this._listener);\n      this._mediaQueryList = targetWindow.matchMedia(\"(resolution: \".concat(targetWindow.devicePixelRatio, \"dppx)\"));\n      this._mediaQueryList.addEventListener('change', this._listener);\n      if (fireEvent) {\n        this._onDidChange.fire();\n      }\n    }\n  }]);\n}(Disposable);\nvar PixelRatioMonitorImpl = /*#__PURE__*/function (_Disposable2) {\n  function PixelRatioMonitorImpl(targetWindow) {\n    var _this2;\n    _classCallCheck(this, PixelRatioMonitorImpl);\n    _this2 = _callSuper(this, PixelRatioMonitorImpl);\n    _this2._onDidChange = _this2._register(new Emitter());\n    _this2.onDidChange = _this2._onDidChange.event;\n    _this2._value = _this2._getPixelRatio(targetWindow);\n    var dprMonitor = _this2._register(new DevicePixelRatioMonitor(targetWindow));\n    _this2._register(dprMonitor.onDidChange(function () {\n      _this2._value = _this2._getPixelRatio(targetWindow);\n      _this2._onDidChange.fire(_this2._value);\n    }));\n    return _this2;\n  }\n  _inherits(PixelRatioMonitorImpl, _Disposable2);\n  return _createClass(PixelRatioMonitorImpl, [{\n    key: \"value\",\n    get: function get() {\n      return this._value;\n    }\n  }, {\n    key: \"_getPixelRatio\",\n    value: function _getPixelRatio(targetWindow) {\n      var ctx = document.createElement('canvas').getContext('2d');\n      var dpr = targetWindow.devicePixelRatio || 1;\n      var bsr = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n      return dpr / bsr;\n    }\n  }]);\n}(Disposable);\nvar PixelRatioMonitorFacade = /*#__PURE__*/function () {\n  function PixelRatioMonitorFacade() {\n    _classCallCheck(this, PixelRatioMonitorFacade);\n    this.mapWindowIdToPixelRatioMonitor = new Map();\n  }\n  return _createClass(PixelRatioMonitorFacade, [{\n    key: \"_getOrCreatePixelRatioMonitor\",\n    value: function _getOrCreatePixelRatioMonitor(targetWindow) {\n      var _this3 = this;\n      var targetWindowId = getWindowId(targetWindow);\n      var pixelRatioMonitor = this.mapWindowIdToPixelRatioMonitor.get(targetWindowId);\n      if (!pixelRatioMonitor) {\n        pixelRatioMonitor = markAsSingleton(new PixelRatioMonitorImpl(targetWindow));\n        this.mapWindowIdToPixelRatioMonitor.set(targetWindowId, pixelRatioMonitor);\n        markAsSingleton(Event.once(onDidUnregisterWindow)(function (_ref) {\n          var vscodeWindowId = _ref.vscodeWindowId;\n          if (vscodeWindowId === targetWindowId) {\n            pixelRatioMonitor === null || pixelRatioMonitor === void 0 ? void 0 : pixelRatioMonitor.dispose();\n            _this3.mapWindowIdToPixelRatioMonitor[\"delete\"](targetWindowId);\n          }\n        }));\n      }\n      return pixelRatioMonitor;\n    }\n  }, {\n    key: \"getInstance\",\n    value: function getInstance(targetWindow) {\n      return this._getOrCreatePixelRatioMonitor(targetWindow);\n    }\n  }]);\n}();\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\nexport var PixelRatio = new PixelRatioMonitorFacade();","map":{"version":3,"names":["getWindowId","onDidUnregisterWindow","Emitter","Event","Disposable","markAsSingleton","DevicePixelRatioMonitor","_Disposable","targetWindow","_this","_classCallCheck","_callSuper","_onDidChange","_register","onDidChange","event","_listener","_handleChange","_mediaQueryList","_inherits","_createClass","key","value","fireEvent","_a","removeEventListener","matchMedia","concat","devicePixelRatio","addEventListener","fire","PixelRatioMonitorImpl","_Disposable2","_this2","_value","_getPixelRatio","dprMonitor","get","ctx","document","createElement","getContext","dpr","bsr","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","PixelRatioMonitorFacade","mapWindowIdToPixelRatioMonitor","Map","_getOrCreatePixelRatioMonitor","_this3","targetWindowId","pixelRatioMonitor","set","once","_ref","vscodeWindowId","dispose","getInstance","PixelRatio"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/base/browser/pixelRatio.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { getWindowId, onDidUnregisterWindow } from './dom.js';\nimport { Emitter, Event } from '../common/event.js';\nimport { Disposable, markAsSingleton } from '../common/lifecycle.js';\n/**\n * See https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes\n */\nclass DevicePixelRatioMonitor extends Disposable {\n    constructor(targetWindow) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._listener = () => this._handleChange(targetWindow, true);\n        this._mediaQueryList = null;\n        this._handleChange(targetWindow, false);\n    }\n    _handleChange(targetWindow, fireEvent) {\n        var _a;\n        (_a = this._mediaQueryList) === null || _a === void 0 ? void 0 : _a.removeEventListener('change', this._listener);\n        this._mediaQueryList = targetWindow.matchMedia(`(resolution: ${targetWindow.devicePixelRatio}dppx)`);\n        this._mediaQueryList.addEventListener('change', this._listener);\n        if (fireEvent) {\n            this._onDidChange.fire();\n        }\n    }\n}\nclass PixelRatioMonitorImpl extends Disposable {\n    get value() {\n        return this._value;\n    }\n    constructor(targetWindow) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._value = this._getPixelRatio(targetWindow);\n        const dprMonitor = this._register(new DevicePixelRatioMonitor(targetWindow));\n        this._register(dprMonitor.onDidChange(() => {\n            this._value = this._getPixelRatio(targetWindow);\n            this._onDidChange.fire(this._value);\n        }));\n    }\n    _getPixelRatio(targetWindow) {\n        const ctx = document.createElement('canvas').getContext('2d');\n        const dpr = targetWindow.devicePixelRatio || 1;\n        const bsr = ctx.webkitBackingStorePixelRatio ||\n            ctx.mozBackingStorePixelRatio ||\n            ctx.msBackingStorePixelRatio ||\n            ctx.oBackingStorePixelRatio ||\n            ctx.backingStorePixelRatio || 1;\n        return dpr / bsr;\n    }\n}\nclass PixelRatioMonitorFacade {\n    constructor() {\n        this.mapWindowIdToPixelRatioMonitor = new Map();\n    }\n    _getOrCreatePixelRatioMonitor(targetWindow) {\n        const targetWindowId = getWindowId(targetWindow);\n        let pixelRatioMonitor = this.mapWindowIdToPixelRatioMonitor.get(targetWindowId);\n        if (!pixelRatioMonitor) {\n            pixelRatioMonitor = markAsSingleton(new PixelRatioMonitorImpl(targetWindow));\n            this.mapWindowIdToPixelRatioMonitor.set(targetWindowId, pixelRatioMonitor);\n            markAsSingleton(Event.once(onDidUnregisterWindow)(({ vscodeWindowId }) => {\n                if (vscodeWindowId === targetWindowId) {\n                    pixelRatioMonitor === null || pixelRatioMonitor === void 0 ? void 0 : pixelRatioMonitor.dispose();\n                    this.mapWindowIdToPixelRatioMonitor.delete(targetWindowId);\n                }\n            }));\n        }\n        return pixelRatioMonitor;\n    }\n    getInstance(targetWindow) {\n        return this._getOrCreatePixelRatioMonitor(targetWindow);\n    }\n}\n/**\n * Returns the pixel ratio.\n *\n * This is useful for rendering <canvas> elements at native screen resolution or for being used as\n * a cache key when storing font measurements. Fonts might render differently depending on resolution\n * and any measurements need to be discarded for example when a window is moved from a monitor to another.\n */\nexport const PixelRatio = new PixelRatioMonitorFacade();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}