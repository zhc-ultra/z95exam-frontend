{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n  var decimal = Math.pow(10, decimalPoints);\n  return Math.round(number * decimal) / decimal;\n}\nexport var RGBA = /*#__PURE__*/function () {\n  function RGBA(r, g, b) {\n    var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    _classCallCheck(this, RGBA);\n    this._rgbaBrand = undefined;\n    this.r = Math.min(255, Math.max(0, r)) | 0;\n    this.g = Math.min(255, Math.max(0, g)) | 0;\n    this.b = Math.min(255, Math.max(0, b)) | 0;\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  return _createClass(RGBA, null, [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n    }\n  }]);\n}();\nexport var HSLA = /*#__PURE__*/function () {\n  function HSLA(h, s, l, a) {\n    _classCallCheck(this, HSLA);\n    this._hslaBrand = undefined;\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  return _createClass(HSLA, null, [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n    }\n    /**\n     * Converts an RGB color value to HSL. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes r, g, and b are contained in the set [0, 255] and\n     * returns h in the set [0, 360], s, and l in the set [0, 1].\n     */\n  }, {\n    key: \"fromRGBA\",\n    value: function fromRGBA(rgba) {\n      var r = rgba.r / 255;\n      var g = rgba.g / 255;\n      var b = rgba.b / 255;\n      var a = rgba.a;\n      var max = Math.max(r, g, b);\n      var min = Math.min(r, g, b);\n      var h = 0;\n      var s = 0;\n      var l = (min + max) / 2;\n      var chroma = max - min;\n      if (chroma > 0) {\n        s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n        switch (max) {\n          case r:\n            h = (g - b) / chroma + (g < b ? 6 : 0);\n            break;\n          case g:\n            h = (b - r) / chroma + 2;\n            break;\n          case b:\n            h = (r - g) / chroma + 4;\n            break;\n        }\n        h *= 60;\n        h = Math.round(h);\n      }\n      return new HSLA(h, s, l, a);\n    }\n  }, {\n    key: \"_hue2rgb\",\n    value: function _hue2rgb(p, q, t) {\n      if (t < 0) {\n        t += 1;\n      }\n      if (t > 1) {\n        t -= 1;\n      }\n      if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n      }\n      if (t < 1 / 2) {\n        return q;\n      }\n      if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n      }\n      return p;\n    }\n    /**\n     * Converts an HSL color value to RGB. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n     * returns r, g, and b in the set [0, 255].\n     */\n  }, {\n    key: \"toRGBA\",\n    value: function toRGBA(hsla) {\n      var h = hsla.h / 360;\n      var s = hsla.s,\n        l = hsla.l,\n        a = hsla.a;\n      var r, g, b;\n      if (s === 0) {\n        r = g = b = l; // achromatic\n      } else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = HSLA._hue2rgb(p, q, h + 1 / 3);\n        g = HSLA._hue2rgb(p, q, h);\n        b = HSLA._hue2rgb(p, q, h - 1 / 3);\n      }\n      return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n    }\n  }]);\n}();\nexport var HSVA = /*#__PURE__*/function () {\n  function HSVA(h, s, v, a) {\n    _classCallCheck(this, HSVA);\n    this._hsvaBrand = undefined;\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n  return _createClass(HSVA, null, [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n    }\n    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n  }, {\n    key: \"fromRGBA\",\n    value: function fromRGBA(rgba) {\n      var r = rgba.r / 255;\n      var g = rgba.g / 255;\n      var b = rgba.b / 255;\n      var cmax = Math.max(r, g, b);\n      var cmin = Math.min(r, g, b);\n      var delta = cmax - cmin;\n      var s = cmax === 0 ? 0 : delta / cmax;\n      var m;\n      if (delta === 0) {\n        m = 0;\n      } else if (cmax === r) {\n        m = ((g - b) / delta % 6 + 6) % 6;\n      } else if (cmax === g) {\n        m = (b - r) / delta + 2;\n      } else {\n        m = (r - g) / delta + 4;\n      }\n      return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n    }\n    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n  }, {\n    key: \"toRGBA\",\n    value: function toRGBA(hsva) {\n      var h = hsva.h,\n        s = hsva.s,\n        v = hsva.v,\n        a = hsva.a;\n      var c = v * s;\n      var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n      var m = v - c;\n      var r = 0,\n        g = 0,\n        b = 0;\n      if (h < 60) {\n        r = c;\n        g = x;\n      } else if (h < 120) {\n        r = x;\n        g = c;\n      } else if (h < 180) {\n        g = c;\n        b = x;\n      } else if (h < 240) {\n        g = x;\n        b = c;\n      } else if (h < 300) {\n        r = x;\n        b = c;\n      } else if (h <= 360) {\n        r = c;\n        b = x;\n      }\n      r = Math.round((r + m) * 255);\n      g = Math.round((g + m) * 255);\n      b = Math.round((b + m) * 255);\n      return new RGBA(r, g, b, a);\n    }\n  }]);\n}();\nexport var Color = /*#__PURE__*/function () {\n  function Color(arg) {\n    _classCallCheck(this, Color);\n    if (!arg) {\n      throw new Error('Color needs a value');\n    } else if (arg instanceof RGBA) {\n      this.rgba = arg;\n    } else if (arg instanceof HSLA) {\n      this._hsla = arg;\n      this.rgba = HSLA.toRGBA(arg);\n    } else if (arg instanceof HSVA) {\n      this._hsva = arg;\n      this.rgba = HSVA.toRGBA(arg);\n    } else {\n      throw new Error('Invalid color ctor argument');\n    }\n  }\n  return _createClass(Color, [{\n    key: \"hsla\",\n    get: function get() {\n      if (this._hsla) {\n        return this._hsla;\n      } else {\n        return HSLA.fromRGBA(this.rgba);\n      }\n    }\n  }, {\n    key: \"hsva\",\n    get: function get() {\n      if (this._hsva) {\n        return this._hsva;\n      }\n      return HSVA.fromRGBA(this.rgba);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n    }\n    /**\n     * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n     */\n  }, {\n    key: \"getRelativeLuminance\",\n    value: function getRelativeLuminance() {\n      var R = Color._relativeLuminanceForComponent(this.rgba.r);\n      var G = Color._relativeLuminanceForComponent(this.rgba.g);\n      var B = Color._relativeLuminanceForComponent(this.rgba.b);\n      var luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n      return roundFloat(luminance, 4);\n    }\n  }, {\n    key: \"isLighter\",\n    value:\n    /**\n     *\thttp://24ways.org/2010/calculating-color-contrast\n     *  Return 'true' if lighter color otherwise 'false'\n     */\n    function isLighter() {\n      var yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n      return yiq >= 128;\n    }\n  }, {\n    key: \"isLighterThan\",\n    value: function isLighterThan(another) {\n      var lum1 = this.getRelativeLuminance();\n      var lum2 = another.getRelativeLuminance();\n      return lum1 > lum2;\n    }\n  }, {\n    key: \"isDarkerThan\",\n    value: function isDarkerThan(another) {\n      var lum1 = this.getRelativeLuminance();\n      var lum2 = another.getRelativeLuminance();\n      return lum1 < lum2;\n    }\n  }, {\n    key: \"lighten\",\n    value: function lighten(factor) {\n      return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n    }\n  }, {\n    key: \"darken\",\n    value: function darken(factor) {\n      return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n    }\n  }, {\n    key: \"transparent\",\n    value: function transparent(factor) {\n      var _this$rgba = this.rgba,\n        r = _this$rgba.r,\n        g = _this$rgba.g,\n        b = _this$rgba.b,\n        a = _this$rgba.a;\n      return new Color(new RGBA(r, g, b, a * factor));\n    }\n  }, {\n    key: \"isTransparent\",\n    value: function isTransparent() {\n      return this.rgba.a === 0;\n    }\n  }, {\n    key: \"isOpaque\",\n    value: function isOpaque() {\n      return this.rgba.a === 1;\n    }\n  }, {\n    key: \"opposite\",\n    value: function opposite() {\n      return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n    }\n  }, {\n    key: \"makeOpaque\",\n    value: function makeOpaque(opaqueBackground) {\n      if (this.isOpaque() || opaqueBackground.rgba.a !== 1) {\n        // only allow to blend onto a non-opaque color onto a opaque color\n        return this;\n      }\n      var _this$rgba2 = this.rgba,\n        r = _this$rgba2.r,\n        g = _this$rgba2.g,\n        b = _this$rgba2.b,\n        a = _this$rgba2.a;\n      // https://stackoverflow.com/questions/12228548/finding-equivalent-color-with-opacity\n      return new Color(new RGBA(opaqueBackground.rgba.r - a * (opaqueBackground.rgba.r - r), opaqueBackground.rgba.g - a * (opaqueBackground.rgba.g - g), opaqueBackground.rgba.b - a * (opaqueBackground.rgba.b - b), 1));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (!this._toString) {\n        this._toString = Color.Format.CSS.format(this);\n      }\n      return this._toString;\n    }\n  }], [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      return Color.Format.CSS.parseHex(hex) || Color.red;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(a, b) {\n      if (!a && !b) {\n        return true;\n      }\n      if (!a || !b) {\n        return false;\n      }\n      return a.equals(b);\n    }\n  }, {\n    key: \"_relativeLuminanceForComponent\",\n    value: function _relativeLuminanceForComponent(color) {\n      var c = color / 255;\n      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n    }\n  }, {\n    key: \"getLighterColor\",\n    value: function getLighterColor(of, relative, factor) {\n      if (of.isLighterThan(relative)) {\n        return of;\n      }\n      factor = factor ? factor : 0.5;\n      var lum1 = of.getRelativeLuminance();\n      var lum2 = relative.getRelativeLuminance();\n      factor = factor * (lum2 - lum1) / lum2;\n      return of.lighten(factor);\n    }\n  }, {\n    key: \"getDarkerColor\",\n    value: function getDarkerColor(of, relative, factor) {\n      if (of.isDarkerThan(relative)) {\n        return of;\n      }\n      factor = factor ? factor : 0.5;\n      var lum1 = of.getRelativeLuminance();\n      var lum2 = relative.getRelativeLuminance();\n      factor = factor * (lum1 - lum2) / lum1;\n      return of.darken(factor);\n    }\n  }]);\n}();\nColor.white = new Color(new RGBA(255, 255, 255, 1));\nColor.black = new Color(new RGBA(0, 0, 0, 1));\nColor.red = new Color(new RGBA(255, 0, 0, 1));\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\nColor.green = new Color(new RGBA(0, 255, 0, 1));\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\n(function (Color) {\n  var Format;\n  (function (Format) {\n    var CSS;\n    (function (CSS) {\n      function formatRGB(color) {\n        if (color.rgba.a === 1) {\n          return \"rgb(\".concat(color.rgba.r, \", \").concat(color.rgba.g, \", \").concat(color.rgba.b, \")\");\n        }\n        return Color.Format.CSS.formatRGBA(color);\n      }\n      CSS.formatRGB = formatRGB;\n      function formatRGBA(color) {\n        return \"rgba(\".concat(color.rgba.r, \", \").concat(color.rgba.g, \", \").concat(color.rgba.b, \", \").concat(+color.rgba.a.toFixed(2), \")\");\n      }\n      CSS.formatRGBA = formatRGBA;\n      function formatHSL(color) {\n        if (color.hsla.a === 1) {\n          return \"hsl(\".concat(color.hsla.h, \", \").concat((color.hsla.s * 100).toFixed(2), \"%, \").concat((color.hsla.l * 100).toFixed(2), \"%)\");\n        }\n        return Color.Format.CSS.formatHSLA(color);\n      }\n      CSS.formatHSL = formatHSL;\n      function formatHSLA(color) {\n        return \"hsla(\".concat(color.hsla.h, \", \").concat((color.hsla.s * 100).toFixed(2), \"%, \").concat((color.hsla.l * 100).toFixed(2), \"%, \").concat(color.hsla.a.toFixed(2), \")\");\n      }\n      CSS.formatHSLA = formatHSLA;\n      function _toTwoDigitHex(n) {\n        var r = n.toString(16);\n        return r.length !== 2 ? '0' + r : r;\n      }\n      /**\n       * Formats the color as #RRGGBB\n       */\n      function formatHex(color) {\n        return \"#\".concat(_toTwoDigitHex(color.rgba.r)).concat(_toTwoDigitHex(color.rgba.g)).concat(_toTwoDigitHex(color.rgba.b));\n      }\n      CSS.formatHex = formatHex;\n      /**\n       * Formats the color as #RRGGBBAA\n       * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n       */\n      function formatHexA(color) {\n        var compact = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (compact && color.rgba.a === 1) {\n          return Color.Format.CSS.formatHex(color);\n        }\n        return \"#\".concat(_toTwoDigitHex(color.rgba.r)).concat(_toTwoDigitHex(color.rgba.g)).concat(_toTwoDigitHex(color.rgba.b)).concat(_toTwoDigitHex(Math.round(color.rgba.a * 255)));\n      }\n      CSS.formatHexA = formatHexA;\n      /**\n       * The default format will use HEX if opaque and RGBA otherwise.\n       */\n      function format(color) {\n        if (color.isOpaque()) {\n          return Color.Format.CSS.formatHex(color);\n        }\n        return Color.Format.CSS.formatRGBA(color);\n      }\n      CSS.format = format;\n      /**\n       * Converts an Hex color value to a Color.\n       * returns r, g, and b are contained in the set [0, 255]\n       * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n       */\n      function parseHex(hex) {\n        var length = hex.length;\n        if (length === 0) {\n          // Invalid color\n          return null;\n        }\n        if (hex.charCodeAt(0) !== 35 /* CharCode.Hash */) {\n          // Does not begin with a #\n          return null;\n        }\n        if (length === 7) {\n          // #RRGGBB format\n          var r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n          var g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n          var b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n          return new Color(new RGBA(r, g, b, 1));\n        }\n        if (length === 9) {\n          // #RRGGBBAA format\n          var _r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n          var _g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n          var _b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n          var a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n          return new Color(new RGBA(_r, _g, _b, a / 255));\n        }\n        if (length === 4) {\n          // #RGB format\n          var _r2 = _parseHexDigit(hex.charCodeAt(1));\n          var _g2 = _parseHexDigit(hex.charCodeAt(2));\n          var _b2 = _parseHexDigit(hex.charCodeAt(3));\n          return new Color(new RGBA(16 * _r2 + _r2, 16 * _g2 + _g2, 16 * _b2 + _b2));\n        }\n        if (length === 5) {\n          // #RGBA format\n          var _r3 = _parseHexDigit(hex.charCodeAt(1));\n          var _g3 = _parseHexDigit(hex.charCodeAt(2));\n          var _b3 = _parseHexDigit(hex.charCodeAt(3));\n          var _a = _parseHexDigit(hex.charCodeAt(4));\n          return new Color(new RGBA(16 * _r3 + _r3, 16 * _g3 + _g3, 16 * _b3 + _b3, (16 * _a + _a) / 255));\n        }\n        // Invalid color\n        return null;\n      }\n      CSS.parseHex = parseHex;\n      function _parseHexDigit(charCode) {\n        switch (charCode) {\n          case 48 /* CharCode.Digit0 */:\n            return 0;\n          case 49 /* CharCode.Digit1 */:\n            return 1;\n          case 50 /* CharCode.Digit2 */:\n            return 2;\n          case 51 /* CharCode.Digit3 */:\n            return 3;\n          case 52 /* CharCode.Digit4 */:\n            return 4;\n          case 53 /* CharCode.Digit5 */:\n            return 5;\n          case 54 /* CharCode.Digit6 */:\n            return 6;\n          case 55 /* CharCode.Digit7 */:\n            return 7;\n          case 56 /* CharCode.Digit8 */:\n            return 8;\n          case 57 /* CharCode.Digit9 */:\n            return 9;\n          case 97 /* CharCode.a */:\n            return 10;\n          case 65 /* CharCode.A */:\n            return 10;\n          case 98 /* CharCode.b */:\n            return 11;\n          case 66 /* CharCode.B */:\n            return 11;\n          case 99 /* CharCode.c */:\n            return 12;\n          case 67 /* CharCode.C */:\n            return 12;\n          case 100 /* CharCode.d */:\n            return 13;\n          case 68 /* CharCode.D */:\n            return 13;\n          case 101 /* CharCode.e */:\n            return 14;\n          case 69 /* CharCode.E */:\n            return 14;\n          case 102 /* CharCode.f */:\n            return 15;\n          case 70 /* CharCode.F */:\n            return 15;\n        }\n        return 0;\n      }\n    })(CSS = Format.CSS || (Format.CSS = {}));\n  })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));","map":{"version":3,"names":["roundFloat","number","decimalPoints","decimal","Math","pow","round","RGBA","r","g","b","a","arguments","length","undefined","_classCallCheck","_rgbaBrand","min","max","_createClass","key","value","equals","HSLA","h","s","l","_hslaBrand","fromRGBA","rgba","chroma","_hue2rgb","p","q","t","toRGBA","hsla","HSVA","v","_hsvaBrand","cmax","cmin","delta","m","hsva","c","x","abs","Color","arg","Error","_hsla","_hsva","get","other","getRelativeLuminance","R","_relativeLuminanceForComponent","G","B","luminance","isLighter","yiq","isLighterThan","another","lum1","lum2","isDarkerThan","lighten","factor","darken","transparent","_this$rgba","isTransparent","isOpaque","opposite","makeOpaque","opaqueBackground","_this$rgba2","toString","_toString","Format","CSS","format","fromHex","hex","parseHex","red","color","getLighterColor","of","relative","getDarkerColor","white","black","blue","green","cyan","lightgrey","formatRGB","concat","formatRGBA","toFixed","formatHSL","formatHSLA","_toTwoDigitHex","n","formatHex","formatHexA","compact","charCodeAt","_parseHexDigit","charCode"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/base/common/color.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n    const decimal = Math.pow(10, decimalPoints);\n    return Math.round(number * decimal) / decimal;\n}\nexport class RGBA {\n    constructor(r, g, b, a = 1) {\n        this._rgbaBrand = undefined;\n        this.r = Math.min(255, Math.max(0, r)) | 0;\n        this.g = Math.min(255, Math.max(0, g)) | 0;\n        this.b = Math.min(255, Math.max(0, b)) | 0;\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n    }\n}\nexport class HSLA {\n    constructor(h, s, l, a) {\n        this._hslaBrand = undefined;\n        this.h = Math.max(Math.min(360, h), 0) | 0;\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n        this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n    }\n    /**\n     * Converts an RGB color value to HSL. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes r, g, and b are contained in the set [0, 255] and\n     * returns h in the set [0, 360], s, and l in the set [0, 1].\n     */\n    static fromRGBA(rgba) {\n        const r = rgba.r / 255;\n        const g = rgba.g / 255;\n        const b = rgba.b / 255;\n        const a = rgba.a;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h = 0;\n        let s = 0;\n        const l = (min + max) / 2;\n        const chroma = max - min;\n        if (chroma > 0) {\n            s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);\n            switch (max) {\n                case r:\n                    h = (g - b) / chroma + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / chroma + 2;\n                    break;\n                case b:\n                    h = (r - g) / chroma + 4;\n                    break;\n            }\n            h *= 60;\n            h = Math.round(h);\n        }\n        return new HSLA(h, s, l, a);\n    }\n    static _hue2rgb(p, q, t) {\n        if (t < 0) {\n            t += 1;\n        }\n        if (t > 1) {\n            t -= 1;\n        }\n        if (t < 1 / 6) {\n            return p + (q - p) * 6 * t;\n        }\n        if (t < 1 / 2) {\n            return q;\n        }\n        if (t < 2 / 3) {\n            return p + (q - p) * (2 / 3 - t) * 6;\n        }\n        return p;\n    }\n    /**\n     * Converts an HSL color value to RGB. Conversion formula\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n     * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n     * returns r, g, and b in the set [0, 255].\n     */\n    static toRGBA(hsla) {\n        const h = hsla.h / 360;\n        const { s, l, a } = hsla;\n        let r, g, b;\n        if (s === 0) {\n            r = g = b = l; // achromatic\n        }\n        else {\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = HSLA._hue2rgb(p, q, h + 1 / 3);\n            g = HSLA._hue2rgb(p, q, h);\n            b = HSLA._hue2rgb(p, q, h - 1 / 3);\n        }\n        return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n    }\n}\nexport class HSVA {\n    constructor(h, s, v, a) {\n        this._hsvaBrand = undefined;\n        this.h = Math.max(Math.min(360, h), 0) | 0;\n        this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n        this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n        this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n    }\n    static equals(a, b) {\n        return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n    }\n    // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n    static fromRGBA(rgba) {\n        const r = rgba.r / 255;\n        const g = rgba.g / 255;\n        const b = rgba.b / 255;\n        const cmax = Math.max(r, g, b);\n        const cmin = Math.min(r, g, b);\n        const delta = cmax - cmin;\n        const s = cmax === 0 ? 0 : (delta / cmax);\n        let m;\n        if (delta === 0) {\n            m = 0;\n        }\n        else if (cmax === r) {\n            m = ((((g - b) / delta) % 6) + 6) % 6;\n        }\n        else if (cmax === g) {\n            m = ((b - r) / delta) + 2;\n        }\n        else {\n            m = ((r - g) / delta) + 4;\n        }\n        return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n    }\n    // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n    static toRGBA(hsva) {\n        const { h, s, v, a } = hsva;\n        const c = v * s;\n        const x = c * (1 - Math.abs((h / 60) % 2 - 1));\n        const m = v - c;\n        let [r, g, b] = [0, 0, 0];\n        if (h < 60) {\n            r = c;\n            g = x;\n        }\n        else if (h < 120) {\n            r = x;\n            g = c;\n        }\n        else if (h < 180) {\n            g = c;\n            b = x;\n        }\n        else if (h < 240) {\n            g = x;\n            b = c;\n        }\n        else if (h < 300) {\n            r = x;\n            b = c;\n        }\n        else if (h <= 360) {\n            r = c;\n            b = x;\n        }\n        r = Math.round((r + m) * 255);\n        g = Math.round((g + m) * 255);\n        b = Math.round((b + m) * 255);\n        return new RGBA(r, g, b, a);\n    }\n}\nexport class Color {\n    static fromHex(hex) {\n        return Color.Format.CSS.parseHex(hex) || Color.red;\n    }\n    static equals(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return a.equals(b);\n    }\n    get hsla() {\n        if (this._hsla) {\n            return this._hsla;\n        }\n        else {\n            return HSLA.fromRGBA(this.rgba);\n        }\n    }\n    get hsva() {\n        if (this._hsva) {\n            return this._hsva;\n        }\n        return HSVA.fromRGBA(this.rgba);\n    }\n    constructor(arg) {\n        if (!arg) {\n            throw new Error('Color needs a value');\n        }\n        else if (arg instanceof RGBA) {\n            this.rgba = arg;\n        }\n        else if (arg instanceof HSLA) {\n            this._hsla = arg;\n            this.rgba = HSLA.toRGBA(arg);\n        }\n        else if (arg instanceof HSVA) {\n            this._hsva = arg;\n            this.rgba = HSVA.toRGBA(arg);\n        }\n        else {\n            throw new Error('Invalid color ctor argument');\n        }\n    }\n    equals(other) {\n        return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n    }\n    /**\n     * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n     * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n     */\n    getRelativeLuminance() {\n        const R = Color._relativeLuminanceForComponent(this.rgba.r);\n        const G = Color._relativeLuminanceForComponent(this.rgba.g);\n        const B = Color._relativeLuminanceForComponent(this.rgba.b);\n        const luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n        return roundFloat(luminance, 4);\n    }\n    static _relativeLuminanceForComponent(color) {\n        const c = color / 255;\n        return (c <= 0.03928) ? c / 12.92 : Math.pow(((c + 0.055) / 1.055), 2.4);\n    }\n    /**\n     *\thttp://24ways.org/2010/calculating-color-contrast\n     *  Return 'true' if lighter color otherwise 'false'\n     */\n    isLighter() {\n        const yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n        return yiq >= 128;\n    }\n    isLighterThan(another) {\n        const lum1 = this.getRelativeLuminance();\n        const lum2 = another.getRelativeLuminance();\n        return lum1 > lum2;\n    }\n    isDarkerThan(another) {\n        const lum1 = this.getRelativeLuminance();\n        const lum2 = another.getRelativeLuminance();\n        return lum1 < lum2;\n    }\n    lighten(factor) {\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n    }\n    darken(factor) {\n        return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n    }\n    transparent(factor) {\n        const { r, g, b, a } = this.rgba;\n        return new Color(new RGBA(r, g, b, a * factor));\n    }\n    isTransparent() {\n        return this.rgba.a === 0;\n    }\n    isOpaque() {\n        return this.rgba.a === 1;\n    }\n    opposite() {\n        return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n    }\n    makeOpaque(opaqueBackground) {\n        if (this.isOpaque() || opaqueBackground.rgba.a !== 1) {\n            // only allow to blend onto a non-opaque color onto a opaque color\n            return this;\n        }\n        const { r, g, b, a } = this.rgba;\n        // https://stackoverflow.com/questions/12228548/finding-equivalent-color-with-opacity\n        return new Color(new RGBA(opaqueBackground.rgba.r - a * (opaqueBackground.rgba.r - r), opaqueBackground.rgba.g - a * (opaqueBackground.rgba.g - g), opaqueBackground.rgba.b - a * (opaqueBackground.rgba.b - b), 1));\n    }\n    toString() {\n        if (!this._toString) {\n            this._toString = Color.Format.CSS.format(this);\n        }\n        return this._toString;\n    }\n    static getLighterColor(of, relative, factor) {\n        if (of.isLighterThan(relative)) {\n            return of;\n        }\n        factor = factor ? factor : 0.5;\n        const lum1 = of.getRelativeLuminance();\n        const lum2 = relative.getRelativeLuminance();\n        factor = factor * (lum2 - lum1) / lum2;\n        return of.lighten(factor);\n    }\n    static getDarkerColor(of, relative, factor) {\n        if (of.isDarkerThan(relative)) {\n            return of;\n        }\n        factor = factor ? factor : 0.5;\n        const lum1 = of.getRelativeLuminance();\n        const lum2 = relative.getRelativeLuminance();\n        factor = factor * (lum1 - lum2) / lum1;\n        return of.darken(factor);\n    }\n}\nColor.white = new Color(new RGBA(255, 255, 255, 1));\nColor.black = new Color(new RGBA(0, 0, 0, 1));\nColor.red = new Color(new RGBA(255, 0, 0, 1));\nColor.blue = new Color(new RGBA(0, 0, 255, 1));\nColor.green = new Color(new RGBA(0, 255, 0, 1));\nColor.cyan = new Color(new RGBA(0, 255, 255, 1));\nColor.lightgrey = new Color(new RGBA(211, 211, 211, 1));\nColor.transparent = new Color(new RGBA(0, 0, 0, 0));\n(function (Color) {\n    let Format;\n    (function (Format) {\n        let CSS;\n        (function (CSS) {\n            function formatRGB(color) {\n                if (color.rgba.a === 1) {\n                    return `rgb(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b})`;\n                }\n                return Color.Format.CSS.formatRGBA(color);\n            }\n            CSS.formatRGB = formatRGB;\n            function formatRGBA(color) {\n                return `rgba(${color.rgba.r}, ${color.rgba.g}, ${color.rgba.b}, ${+(color.rgba.a).toFixed(2)})`;\n            }\n            CSS.formatRGBA = formatRGBA;\n            function formatHSL(color) {\n                if (color.hsla.a === 1) {\n                    return `hsl(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%)`;\n                }\n                return Color.Format.CSS.formatHSLA(color);\n            }\n            CSS.formatHSL = formatHSL;\n            function formatHSLA(color) {\n                return `hsla(${color.hsla.h}, ${(color.hsla.s * 100).toFixed(2)}%, ${(color.hsla.l * 100).toFixed(2)}%, ${color.hsla.a.toFixed(2)})`;\n            }\n            CSS.formatHSLA = formatHSLA;\n            function _toTwoDigitHex(n) {\n                const r = n.toString(16);\n                return r.length !== 2 ? '0' + r : r;\n            }\n            /**\n             * Formats the color as #RRGGBB\n             */\n            function formatHex(color) {\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}`;\n            }\n            CSS.formatHex = formatHex;\n            /**\n             * Formats the color as #RRGGBBAA\n             * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n             */\n            function formatHexA(color, compact = false) {\n                if (compact && color.rgba.a === 1) {\n                    return Color.Format.CSS.formatHex(color);\n                }\n                return `#${_toTwoDigitHex(color.rgba.r)}${_toTwoDigitHex(color.rgba.g)}${_toTwoDigitHex(color.rgba.b)}${_toTwoDigitHex(Math.round(color.rgba.a * 255))}`;\n            }\n            CSS.formatHexA = formatHexA;\n            /**\n             * The default format will use HEX if opaque and RGBA otherwise.\n             */\n            function format(color) {\n                if (color.isOpaque()) {\n                    return Color.Format.CSS.formatHex(color);\n                }\n                return Color.Format.CSS.formatRGBA(color);\n            }\n            CSS.format = format;\n            /**\n             * Converts an Hex color value to a Color.\n             * returns r, g, and b are contained in the set [0, 255]\n             * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n             */\n            function parseHex(hex) {\n                const length = hex.length;\n                if (length === 0) {\n                    // Invalid color\n                    return null;\n                }\n                if (hex.charCodeAt(0) !== 35 /* CharCode.Hash */) {\n                    // Does not begin with a #\n                    return null;\n                }\n                if (length === 7) {\n                    // #RRGGBB format\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n                    return new Color(new RGBA(r, g, b, 1));\n                }\n                if (length === 9) {\n                    // #RRGGBBAA format\n                    const r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n                    const g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n                    const b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n                    const a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n                    return new Color(new RGBA(r, g, b, a / 255));\n                }\n                if (length === 4) {\n                    // #RGB format\n                    const r = _parseHexDigit(hex.charCodeAt(1));\n                    const g = _parseHexDigit(hex.charCodeAt(2));\n                    const b = _parseHexDigit(hex.charCodeAt(3));\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n                }\n                if (length === 5) {\n                    // #RGBA format\n                    const r = _parseHexDigit(hex.charCodeAt(1));\n                    const g = _parseHexDigit(hex.charCodeAt(2));\n                    const b = _parseHexDigit(hex.charCodeAt(3));\n                    const a = _parseHexDigit(hex.charCodeAt(4));\n                    return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n                }\n                // Invalid color\n                return null;\n            }\n            CSS.parseHex = parseHex;\n            function _parseHexDigit(charCode) {\n                switch (charCode) {\n                    case 48 /* CharCode.Digit0 */: return 0;\n                    case 49 /* CharCode.Digit1 */: return 1;\n                    case 50 /* CharCode.Digit2 */: return 2;\n                    case 51 /* CharCode.Digit3 */: return 3;\n                    case 52 /* CharCode.Digit4 */: return 4;\n                    case 53 /* CharCode.Digit5 */: return 5;\n                    case 54 /* CharCode.Digit6 */: return 6;\n                    case 55 /* CharCode.Digit7 */: return 7;\n                    case 56 /* CharCode.Digit8 */: return 8;\n                    case 57 /* CharCode.Digit9 */: return 9;\n                    case 97 /* CharCode.a */: return 10;\n                    case 65 /* CharCode.A */: return 10;\n                    case 98 /* CharCode.b */: return 11;\n                    case 66 /* CharCode.B */: return 11;\n                    case 99 /* CharCode.c */: return 12;\n                    case 67 /* CharCode.C */: return 12;\n                    case 100 /* CharCode.d */: return 13;\n                    case 68 /* CharCode.D */: return 13;\n                    case 101 /* CharCode.e */: return 14;\n                    case 69 /* CharCode.E */: return 14;\n                    case 102 /* CharCode.f */: return 15;\n                    case 70 /* CharCode.F */: return 15;\n                }\n                return 0;\n            }\n        })(CSS = Format.CSS || (Format.CSS = {}));\n    })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA,SAASA,UAAUA,CAACC,MAAM,EAAEC,aAAa,EAAE;EACvC,IAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEH,aAAa,CAAC;EAC3C,OAAOE,IAAI,CAACE,KAAK,CAACL,MAAM,GAAGE,OAAO,CAAC,GAAGA,OAAO;AACjD;AACA,WAAaI,IAAI;EACb,SAAAA,KAAYC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAS;IAAA,IAAPC,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAAAG,eAAA,OAAAR,IAAA;IACtB,IAAI,CAACS,UAAU,GAAGF,SAAS;IAC3B,IAAI,CAACN,CAAC,GAAGJ,IAAI,CAACa,GAAG,CAAC,GAAG,EAAEb,IAAI,CAACc,GAAG,CAAC,CAAC,EAAEV,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1C,IAAI,CAACC,CAAC,GAAGL,IAAI,CAACa,GAAG,CAAC,GAAG,EAAEb,IAAI,CAACc,GAAG,CAAC,CAAC,EAAET,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1C,IAAI,CAACC,CAAC,GAAGN,IAAI,CAACa,GAAG,CAAC,GAAG,EAAEb,IAAI,CAACc,GAAG,CAAC,CAAC,EAAER,CAAC,CAAC,CAAC,GAAG,CAAC;IAC1C,IAAI,CAACC,CAAC,GAAGX,UAAU,CAACI,IAAI,CAACc,GAAG,CAACd,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEN,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACvD;EAAC,OAAAQ,YAAA,CAAAZ,IAAA;IAAAa,GAAA;IAAAC,KAAA,EACD,SAAAC,OAAcX,CAAC,EAAED,CAAC,EAAE;MAChB,OAAOC,CAAC,CAACH,CAAC,KAAKE,CAAC,CAACF,CAAC,IAAIG,CAAC,CAACF,CAAC,KAAKC,CAAC,CAACD,CAAC,IAAIE,CAAC,CAACD,CAAC,KAAKA,CAAC,CAACA,CAAC,IAAIC,CAAC,CAACA,CAAC,KAAKD,CAAC,CAACC,CAAC;IACnE;EAAC;AAAA;AAEL,WAAaY,IAAI;EACb,SAAAA,KAAYC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEf,CAAC,EAAE;IAAAI,eAAA,OAAAQ,IAAA;IACpB,IAAI,CAACI,UAAU,GAAGb,SAAS;IAC3B,IAAI,CAACU,CAAC,GAAGpB,IAAI,CAACc,GAAG,CAACd,IAAI,CAACa,GAAG,CAAC,GAAG,EAAEO,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;IAC1C,IAAI,CAACC,CAAC,GAAGzB,UAAU,CAACI,IAAI,CAACc,GAAG,CAACd,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACnD,IAAI,CAACC,CAAC,GAAG1B,UAAU,CAACI,IAAI,CAACc,GAAG,CAACd,IAAI,CAACa,GAAG,CAAC,CAAC,EAAES,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACnD,IAAI,CAACf,CAAC,GAAGX,UAAU,CAACI,IAAI,CAACc,GAAG,CAACd,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEN,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACvD;EAAC,OAAAQ,YAAA,CAAAI,IAAA;IAAAH,GAAA;IAAAC,KAAA,EACD,SAAAC,OAAcX,CAAC,EAAED,CAAC,EAAE;MAChB,OAAOC,CAAC,CAACa,CAAC,KAAKd,CAAC,CAACc,CAAC,IAAIb,CAAC,CAACc,CAAC,KAAKf,CAAC,CAACe,CAAC,IAAId,CAAC,CAACe,CAAC,KAAKhB,CAAC,CAACgB,CAAC,IAAIf,CAAC,CAACA,CAAC,KAAKD,CAAC,CAACC,CAAC;IACnE;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAS,GAAA;IAAAC,KAAA,EAMA,SAAAO,SAAgBC,IAAI,EAAE;MAClB,IAAMrB,CAAC,GAAGqB,IAAI,CAACrB,CAAC,GAAG,GAAG;MACtB,IAAMC,CAAC,GAAGoB,IAAI,CAACpB,CAAC,GAAG,GAAG;MACtB,IAAMC,CAAC,GAAGmB,IAAI,CAACnB,CAAC,GAAG,GAAG;MACtB,IAAMC,CAAC,GAAGkB,IAAI,CAAClB,CAAC;MAChB,IAAMO,GAAG,GAAGd,IAAI,CAACc,GAAG,CAACV,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MAC7B,IAAMO,GAAG,GAAGb,IAAI,CAACa,GAAG,CAACT,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MAC7B,IAAIc,CAAC,GAAG,CAAC;MACT,IAAIC,CAAC,GAAG,CAAC;MACT,IAAMC,CAAC,GAAG,CAACT,GAAG,GAAGC,GAAG,IAAI,CAAC;MACzB,IAAMY,MAAM,GAAGZ,GAAG,GAAGD,GAAG;MACxB,IAAIa,MAAM,GAAG,CAAC,EAAE;QACZL,CAAC,GAAGrB,IAAI,CAACa,GAAG,CAAES,CAAC,IAAI,GAAG,GAAGI,MAAM,IAAI,CAAC,GAAGJ,CAAC,CAAC,GAAGI,MAAM,IAAI,CAAC,GAAI,CAAC,GAAGJ,CAAE,CAAC,EAAG,CAAC,CAAC;QACvE,QAAQR,GAAG;UACP,KAAKV,CAAC;YACFgB,CAAC,GAAG,CAACf,CAAC,GAAGC,CAAC,IAAIoB,MAAM,IAAIrB,CAAC,GAAGC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACtC;UACJ,KAAKD,CAAC;YACFe,CAAC,GAAG,CAACd,CAAC,GAAGF,CAAC,IAAIsB,MAAM,GAAG,CAAC;YACxB;UACJ,KAAKpB,CAAC;YACFc,CAAC,GAAG,CAAChB,CAAC,GAAGC,CAAC,IAAIqB,MAAM,GAAG,CAAC;YACxB;QACR;QACAN,CAAC,IAAI,EAAE;QACPA,CAAC,GAAGpB,IAAI,CAACE,KAAK,CAACkB,CAAC,CAAC;MACrB;MACA,OAAO,IAAID,IAAI,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEf,CAAC,CAAC;IAC/B;EAAC;IAAAS,GAAA;IAAAC,KAAA,EACD,SAAAU,SAAgBC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;MACrB,IAAIA,CAAC,GAAG,CAAC,EAAE;QACPA,CAAC,IAAI,CAAC;MACV;MACA,IAAIA,CAAC,GAAG,CAAC,EAAE;QACPA,CAAC,IAAI,CAAC;MACV;MACA,IAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACX,OAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAC,IAAI,CAAC,GAAGE,CAAC;MAC9B;MACA,IAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACX,OAAOD,CAAC;MACZ;MACA,IAAIC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACX,OAAOF,CAAC,GAAG,CAACC,CAAC,GAAGD,CAAC,KAAK,CAAC,GAAG,CAAC,GAAGE,CAAC,CAAC,GAAG,CAAC;MACxC;MACA,OAAOF,CAAC;IACZ;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAAZ,GAAA;IAAAC,KAAA,EAMA,SAAAc,OAAcC,IAAI,EAAE;MAChB,IAAMZ,CAAC,GAAGY,IAAI,CAACZ,CAAC,GAAG,GAAG;MACtB,IAAQC,CAAC,GAAWW,IAAI,CAAhBX,CAAC;QAAEC,CAAC,GAAQU,IAAI,CAAbV,CAAC;QAAEf,CAAC,GAAKyB,IAAI,CAAVzB,CAAC;MACf,IAAIH,CAAC,EAAEC,CAAC,EAAEC,CAAC;MACX,IAAIe,CAAC,KAAK,CAAC,EAAE;QACTjB,CAAC,GAAGC,CAAC,GAAGC,CAAC,GAAGgB,CAAC,CAAC,CAAC;MACnB,CAAC,MACI;QACD,IAAMO,CAAC,GAAGP,CAAC,GAAG,GAAG,GAAGA,CAAC,IAAI,CAAC,GAAGD,CAAC,CAAC,GAAGC,CAAC,GAAGD,CAAC,GAAGC,CAAC,GAAGD,CAAC;QAC/C,IAAMO,CAAC,GAAG,CAAC,GAAGN,CAAC,GAAGO,CAAC;QACnBzB,CAAC,GAAGe,IAAI,CAACQ,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAET,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClCf,CAAC,GAAGc,IAAI,CAACQ,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAET,CAAC,CAAC;QAC1Bd,CAAC,GAAGa,IAAI,CAACQ,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAET,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACtC;MACA,OAAO,IAAIjB,IAAI,CAACH,IAAI,CAACE,KAAK,CAACE,CAAC,GAAG,GAAG,CAAC,EAAEJ,IAAI,CAACE,KAAK,CAACG,CAAC,GAAG,GAAG,CAAC,EAAEL,IAAI,CAACE,KAAK,CAACI,CAAC,GAAG,GAAG,CAAC,EAAEC,CAAC,CAAC;IACrF;EAAC;AAAA;AAEL,WAAa0B,IAAI;EACb,SAAAA,KAAYb,CAAC,EAAEC,CAAC,EAAEa,CAAC,EAAE3B,CAAC,EAAE;IAAAI,eAAA,OAAAsB,IAAA;IACpB,IAAI,CAACE,UAAU,GAAGzB,SAAS;IAC3B,IAAI,CAACU,CAAC,GAAGpB,IAAI,CAACc,GAAG,CAACd,IAAI,CAACa,GAAG,CAAC,GAAG,EAAEO,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;IAC1C,IAAI,CAACC,CAAC,GAAGzB,UAAU,CAACI,IAAI,CAACc,GAAG,CAACd,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEQ,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACnD,IAAI,CAACa,CAAC,GAAGtC,UAAU,CAACI,IAAI,CAACc,GAAG,CAACd,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEqB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IACnD,IAAI,CAAC3B,CAAC,GAAGX,UAAU,CAACI,IAAI,CAACc,GAAG,CAACd,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEN,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACvD;EAAC,OAAAQ,YAAA,CAAAkB,IAAA;IAAAjB,GAAA;IAAAC,KAAA,EACD,SAAAC,OAAcX,CAAC,EAAED,CAAC,EAAE;MAChB,OAAOC,CAAC,CAACa,CAAC,KAAKd,CAAC,CAACc,CAAC,IAAIb,CAAC,CAACc,CAAC,KAAKf,CAAC,CAACe,CAAC,IAAId,CAAC,CAAC2B,CAAC,KAAK5B,CAAC,CAAC4B,CAAC,IAAI3B,CAAC,CAACA,CAAC,KAAKD,CAAC,CAACC,CAAC;IACnE;IACA;EAAA;IAAAS,GAAA;IAAAC,KAAA,EACA,SAAAO,SAAgBC,IAAI,EAAE;MAClB,IAAMrB,CAAC,GAAGqB,IAAI,CAACrB,CAAC,GAAG,GAAG;MACtB,IAAMC,CAAC,GAAGoB,IAAI,CAACpB,CAAC,GAAG,GAAG;MACtB,IAAMC,CAAC,GAAGmB,IAAI,CAACnB,CAAC,GAAG,GAAG;MACtB,IAAM8B,IAAI,GAAGpC,IAAI,CAACc,GAAG,CAACV,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MAC9B,IAAM+B,IAAI,GAAGrC,IAAI,CAACa,GAAG,CAACT,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MAC9B,IAAMgC,KAAK,GAAGF,IAAI,GAAGC,IAAI;MACzB,IAAMhB,CAAC,GAAGe,IAAI,KAAK,CAAC,GAAG,CAAC,GAAIE,KAAK,GAAGF,IAAK;MACzC,IAAIG,CAAC;MACL,IAAID,KAAK,KAAK,CAAC,EAAE;QACbC,CAAC,GAAG,CAAC;MACT,CAAC,MACI,IAAIH,IAAI,KAAKhC,CAAC,EAAE;QACjBmC,CAAC,GAAG,CAAG,CAAClC,CAAC,GAAGC,CAAC,IAAIgC,KAAK,GAAI,CAAC,GAAI,CAAC,IAAI,CAAC;MACzC,CAAC,MACI,IAAIF,IAAI,KAAK/B,CAAC,EAAE;QACjBkC,CAAC,GAAI,CAACjC,CAAC,GAAGF,CAAC,IAAIkC,KAAK,GAAI,CAAC;MAC7B,CAAC,MACI;QACDC,CAAC,GAAI,CAACnC,CAAC,GAAGC,CAAC,IAAIiC,KAAK,GAAI,CAAC;MAC7B;MACA,OAAO,IAAIL,IAAI,CAACjC,IAAI,CAACE,KAAK,CAACqC,CAAC,GAAG,EAAE,CAAC,EAAElB,CAAC,EAAEe,IAAI,EAAEX,IAAI,CAAClB,CAAC,CAAC;IACxD;IACA;EAAA;IAAAS,GAAA;IAAAC,KAAA,EACA,SAAAc,OAAcS,IAAI,EAAE;MAChB,IAAQpB,CAAC,GAAcoB,IAAI,CAAnBpB,CAAC;QAAEC,CAAC,GAAWmB,IAAI,CAAhBnB,CAAC;QAAEa,CAAC,GAAQM,IAAI,CAAbN,CAAC;QAAE3B,CAAC,GAAKiC,IAAI,CAAVjC,CAAC;MAClB,IAAMkC,CAAC,GAAGP,CAAC,GAAGb,CAAC;MACf,IAAMqB,CAAC,GAAGD,CAAC,IAAI,CAAC,GAAGzC,IAAI,CAAC2C,GAAG,CAAEvB,CAAC,GAAG,EAAE,GAAI,CAAC,GAAG,CAAC,CAAC,CAAC;MAC9C,IAAMmB,CAAC,GAAGL,CAAC,GAAGO,CAAC;MACf,IAAKrC,CAAC,GAAW,CAAC;QAAVC,CAAC,GAAW,CAAC;QAAVC,CAAC,GAAW,CAAC;MACxB,IAAIc,CAAC,GAAG,EAAE,EAAE;QACRhB,CAAC,GAAGqC,CAAC;QACLpC,CAAC,GAAGqC,CAAC;MACT,CAAC,MACI,IAAItB,CAAC,GAAG,GAAG,EAAE;QACdhB,CAAC,GAAGsC,CAAC;QACLrC,CAAC,GAAGoC,CAAC;MACT,CAAC,MACI,IAAIrB,CAAC,GAAG,GAAG,EAAE;QACdf,CAAC,GAAGoC,CAAC;QACLnC,CAAC,GAAGoC,CAAC;MACT,CAAC,MACI,IAAItB,CAAC,GAAG,GAAG,EAAE;QACdf,CAAC,GAAGqC,CAAC;QACLpC,CAAC,GAAGmC,CAAC;MACT,CAAC,MACI,IAAIrB,CAAC,GAAG,GAAG,EAAE;QACdhB,CAAC,GAAGsC,CAAC;QACLpC,CAAC,GAAGmC,CAAC;MACT,CAAC,MACI,IAAIrB,CAAC,IAAI,GAAG,EAAE;QACfhB,CAAC,GAAGqC,CAAC;QACLnC,CAAC,GAAGoC,CAAC;MACT;MACAtC,CAAC,GAAGJ,IAAI,CAACE,KAAK,CAAC,CAACE,CAAC,GAAGmC,CAAC,IAAI,GAAG,CAAC;MAC7BlC,CAAC,GAAGL,IAAI,CAACE,KAAK,CAAC,CAACG,CAAC,GAAGkC,CAAC,IAAI,GAAG,CAAC;MAC7BjC,CAAC,GAAGN,IAAI,CAACE,KAAK,CAAC,CAACI,CAAC,GAAGiC,CAAC,IAAI,GAAG,CAAC;MAC7B,OAAO,IAAIpC,IAAI,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAC/B;EAAC;AAAA;AAEL,WAAaqC,KAAK;EA2Bd,SAAAA,MAAYC,GAAG,EAAE;IAAAlC,eAAA,OAAAiC,KAAA;IACb,IAAI,CAACC,GAAG,EAAE;MACN,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IAC1C,CAAC,MACI,IAAID,GAAG,YAAY1C,IAAI,EAAE;MAC1B,IAAI,CAACsB,IAAI,GAAGoB,GAAG;IACnB,CAAC,MACI,IAAIA,GAAG,YAAY1B,IAAI,EAAE;MAC1B,IAAI,CAAC4B,KAAK,GAAGF,GAAG;MAChB,IAAI,CAACpB,IAAI,GAAGN,IAAI,CAACY,MAAM,CAACc,GAAG,CAAC;IAChC,CAAC,MACI,IAAIA,GAAG,YAAYZ,IAAI,EAAE;MAC1B,IAAI,CAACe,KAAK,GAAGH,GAAG;MAChB,IAAI,CAACpB,IAAI,GAAGQ,IAAI,CAACF,MAAM,CAACc,GAAG,CAAC;IAChC,CAAC,MACI;MACD,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;EACJ;EAAC,OAAA/B,YAAA,CAAA6B,KAAA;IAAA5B,GAAA;IAAAiC,GAAA,EAhCD,SAAAA,IAAA,EAAW;MACP,IAAI,IAAI,CAACF,KAAK,EAAE;QACZ,OAAO,IAAI,CAACA,KAAK;MACrB,CAAC,MACI;QACD,OAAO5B,IAAI,CAACK,QAAQ,CAAC,IAAI,CAACC,IAAI,CAAC;MACnC;IACJ;EAAC;IAAAT,GAAA;IAAAiC,GAAA,EACD,SAAAA,IAAA,EAAW;MACP,IAAI,IAAI,CAACD,KAAK,EAAE;QACZ,OAAO,IAAI,CAACA,KAAK;MACrB;MACA,OAAOf,IAAI,CAACT,QAAQ,CAAC,IAAI,CAACC,IAAI,CAAC;IACnC;EAAC;IAAAT,GAAA;IAAAC,KAAA,EAoBD,SAAAC,OAAOgC,KAAK,EAAE;MACV,OAAO,CAAC,CAACA,KAAK,IAAI/C,IAAI,CAACe,MAAM,CAAC,IAAI,CAACO,IAAI,EAAEyB,KAAK,CAACzB,IAAI,CAAC,IAAIN,IAAI,CAACD,MAAM,CAAC,IAAI,CAACc,IAAI,EAAEkB,KAAK,CAAClB,IAAI,CAAC,IAAIC,IAAI,CAACf,MAAM,CAAC,IAAI,CAACsB,IAAI,EAAEU,KAAK,CAACV,IAAI,CAAC;IACpI;IACA;AACJ;AACA;AACA;EAHI;IAAAxB,GAAA;IAAAC,KAAA,EAIA,SAAAkC,qBAAA,EAAuB;MACnB,IAAMC,CAAC,GAAGR,KAAK,CAACS,8BAA8B,CAAC,IAAI,CAAC5B,IAAI,CAACrB,CAAC,CAAC;MAC3D,IAAMkD,CAAC,GAAGV,KAAK,CAACS,8BAA8B,CAAC,IAAI,CAAC5B,IAAI,CAACpB,CAAC,CAAC;MAC3D,IAAMkD,CAAC,GAAGX,KAAK,CAACS,8BAA8B,CAAC,IAAI,CAAC5B,IAAI,CAACnB,CAAC,CAAC;MAC3D,IAAMkD,SAAS,GAAG,MAAM,GAAGJ,CAAC,GAAG,MAAM,GAAGE,CAAC,GAAG,MAAM,GAAGC,CAAC;MACtD,OAAO3D,UAAU,CAAC4D,SAAS,EAAE,CAAC,CAAC;IACnC;EAAC;IAAAxC,GAAA;IAAAC,KAAA;IAKD;AACJ;AACA;AACA;IACI,SAAAwC,UAAA,EAAY;MACR,IAAMC,GAAG,GAAG,CAAC,IAAI,CAACjC,IAAI,CAACrB,CAAC,GAAG,GAAG,GAAG,IAAI,CAACqB,IAAI,CAACpB,CAAC,GAAG,GAAG,GAAG,IAAI,CAACoB,IAAI,CAACnB,CAAC,GAAG,GAAG,IAAI,IAAI;MAC9E,OAAOoD,GAAG,IAAI,GAAG;IACrB;EAAC;IAAA1C,GAAA;IAAAC,KAAA,EACD,SAAA0C,cAAcC,OAAO,EAAE;MACnB,IAAMC,IAAI,GAAG,IAAI,CAACV,oBAAoB,CAAC,CAAC;MACxC,IAAMW,IAAI,GAAGF,OAAO,CAACT,oBAAoB,CAAC,CAAC;MAC3C,OAAOU,IAAI,GAAGC,IAAI;IACtB;EAAC;IAAA9C,GAAA;IAAAC,KAAA,EACD,SAAA8C,aAAaH,OAAO,EAAE;MAClB,IAAMC,IAAI,GAAG,IAAI,CAACV,oBAAoB,CAAC,CAAC;MACxC,IAAMW,IAAI,GAAGF,OAAO,CAACT,oBAAoB,CAAC,CAAC;MAC3C,OAAOU,IAAI,GAAGC,IAAI;IACtB;EAAC;IAAA9C,GAAA;IAAAC,KAAA,EACD,SAAA+C,QAAQC,MAAM,EAAE;MACZ,OAAO,IAAIrB,KAAK,CAAC,IAAIzB,IAAI,CAAC,IAAI,CAACa,IAAI,CAACZ,CAAC,EAAE,IAAI,CAACY,IAAI,CAACX,CAAC,EAAE,IAAI,CAACW,IAAI,CAACV,CAAC,GAAG,IAAI,CAACU,IAAI,CAACV,CAAC,GAAG2C,MAAM,EAAE,IAAI,CAACjC,IAAI,CAACzB,CAAC,CAAC,CAAC;IACzG;EAAC;IAAAS,GAAA;IAAAC,KAAA,EACD,SAAAiD,OAAOD,MAAM,EAAE;MACX,OAAO,IAAIrB,KAAK,CAAC,IAAIzB,IAAI,CAAC,IAAI,CAACa,IAAI,CAACZ,CAAC,EAAE,IAAI,CAACY,IAAI,CAACX,CAAC,EAAE,IAAI,CAACW,IAAI,CAACV,CAAC,GAAG,IAAI,CAACU,IAAI,CAACV,CAAC,GAAG2C,MAAM,EAAE,IAAI,CAACjC,IAAI,CAACzB,CAAC,CAAC,CAAC;IACzG;EAAC;IAAAS,GAAA;IAAAC,KAAA,EACD,SAAAkD,YAAYF,MAAM,EAAE;MAChB,IAAAG,UAAA,GAAuB,IAAI,CAAC3C,IAAI;QAAxBrB,CAAC,GAAAgE,UAAA,CAADhE,CAAC;QAAEC,CAAC,GAAA+D,UAAA,CAAD/D,CAAC;QAAEC,CAAC,GAAA8D,UAAA,CAAD9D,CAAC;QAAEC,CAAC,GAAA6D,UAAA,CAAD7D,CAAC;MAClB,OAAO,IAAIqC,KAAK,CAAC,IAAIzC,IAAI,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,GAAG0D,MAAM,CAAC,CAAC;IACnD;EAAC;IAAAjD,GAAA;IAAAC,KAAA,EACD,SAAAoD,cAAA,EAAgB;MACZ,OAAO,IAAI,CAAC5C,IAAI,CAAClB,CAAC,KAAK,CAAC;IAC5B;EAAC;IAAAS,GAAA;IAAAC,KAAA,EACD,SAAAqD,SAAA,EAAW;MACP,OAAO,IAAI,CAAC7C,IAAI,CAAClB,CAAC,KAAK,CAAC;IAC5B;EAAC;IAAAS,GAAA;IAAAC,KAAA,EACD,SAAAsD,SAAA,EAAW;MACP,OAAO,IAAI3B,KAAK,CAAC,IAAIzC,IAAI,CAAC,GAAG,GAAG,IAAI,CAACsB,IAAI,CAACrB,CAAC,EAAE,GAAG,GAAG,IAAI,CAACqB,IAAI,CAACpB,CAAC,EAAE,GAAG,GAAG,IAAI,CAACoB,IAAI,CAACnB,CAAC,EAAE,IAAI,CAACmB,IAAI,CAAClB,CAAC,CAAC,CAAC;IACpG;EAAC;IAAAS,GAAA;IAAAC,KAAA,EACD,SAAAuD,WAAWC,gBAAgB,EAAE;MACzB,IAAI,IAAI,CAACH,QAAQ,CAAC,CAAC,IAAIG,gBAAgB,CAAChD,IAAI,CAAClB,CAAC,KAAK,CAAC,EAAE;QAClD;QACA,OAAO,IAAI;MACf;MACA,IAAAmE,WAAA,GAAuB,IAAI,CAACjD,IAAI;QAAxBrB,CAAC,GAAAsE,WAAA,CAADtE,CAAC;QAAEC,CAAC,GAAAqE,WAAA,CAADrE,CAAC;QAAEC,CAAC,GAAAoE,WAAA,CAADpE,CAAC;QAAEC,CAAC,GAAAmE,WAAA,CAADnE,CAAC;MAClB;MACA,OAAO,IAAIqC,KAAK,CAAC,IAAIzC,IAAI,CAACsE,gBAAgB,CAAChD,IAAI,CAACrB,CAAC,GAAGG,CAAC,IAAIkE,gBAAgB,CAAChD,IAAI,CAACrB,CAAC,GAAGA,CAAC,CAAC,EAAEqE,gBAAgB,CAAChD,IAAI,CAACpB,CAAC,GAAGE,CAAC,IAAIkE,gBAAgB,CAAChD,IAAI,CAACpB,CAAC,GAAGA,CAAC,CAAC,EAAEoE,gBAAgB,CAAChD,IAAI,CAACnB,CAAC,GAAGC,CAAC,IAAIkE,gBAAgB,CAAChD,IAAI,CAACnB,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxN;EAAC;IAAAU,GAAA;IAAAC,KAAA,EACD,SAAA0D,SAAA,EAAW;MACP,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;QACjB,IAAI,CAACA,SAAS,GAAGhC,KAAK,CAACiC,MAAM,CAACC,GAAG,CAACC,MAAM,CAAC,IAAI,CAAC;MAClD;MACA,OAAO,IAAI,CAACH,SAAS;IACzB;EAAC;IAAA5D,GAAA;IAAAC,KAAA,EAlHD,SAAA+D,QAAeC,GAAG,EAAE;MAChB,OAAOrC,KAAK,CAACiC,MAAM,CAACC,GAAG,CAACI,QAAQ,CAACD,GAAG,CAAC,IAAIrC,KAAK,CAACuC,GAAG;IACtD;EAAC;IAAAnE,GAAA;IAAAC,KAAA,EACD,SAAAC,OAAcX,CAAC,EAAED,CAAC,EAAE;MAChB,IAAI,CAACC,CAAC,IAAI,CAACD,CAAC,EAAE;QACV,OAAO,IAAI;MACf;MACA,IAAI,CAACC,CAAC,IAAI,CAACD,CAAC,EAAE;QACV,OAAO,KAAK;MAChB;MACA,OAAOC,CAAC,CAACW,MAAM,CAACZ,CAAC,CAAC;IACtB;EAAC;IAAAU,GAAA;IAAAC,KAAA,EAgDD,SAAAoC,+BAAsC+B,KAAK,EAAE;MACzC,IAAM3C,CAAC,GAAG2C,KAAK,GAAG,GAAG;MACrB,OAAQ3C,CAAC,IAAI,OAAO,GAAIA,CAAC,GAAG,KAAK,GAAGzC,IAAI,CAACC,GAAG,CAAE,CAACwC,CAAC,GAAG,KAAK,IAAI,KAAK,EAAG,GAAG,CAAC;IAC5E;EAAC;IAAAzB,GAAA;IAAAC,KAAA,EAqDD,SAAAoE,gBAAuBC,EAAE,EAAEC,QAAQ,EAAEtB,MAAM,EAAE;MACzC,IAAIqB,EAAE,CAAC3B,aAAa,CAAC4B,QAAQ,CAAC,EAAE;QAC5B,OAAOD,EAAE;MACb;MACArB,MAAM,GAAGA,MAAM,GAAGA,MAAM,GAAG,GAAG;MAC9B,IAAMJ,IAAI,GAAGyB,EAAE,CAACnC,oBAAoB,CAAC,CAAC;MACtC,IAAMW,IAAI,GAAGyB,QAAQ,CAACpC,oBAAoB,CAAC,CAAC;MAC5Cc,MAAM,GAAGA,MAAM,IAAIH,IAAI,GAAGD,IAAI,CAAC,GAAGC,IAAI;MACtC,OAAOwB,EAAE,CAACtB,OAAO,CAACC,MAAM,CAAC;IAC7B;EAAC;IAAAjD,GAAA;IAAAC,KAAA,EACD,SAAAuE,eAAsBF,EAAE,EAAEC,QAAQ,EAAEtB,MAAM,EAAE;MACxC,IAAIqB,EAAE,CAACvB,YAAY,CAACwB,QAAQ,CAAC,EAAE;QAC3B,OAAOD,EAAE;MACb;MACArB,MAAM,GAAGA,MAAM,GAAGA,MAAM,GAAG,GAAG;MAC9B,IAAMJ,IAAI,GAAGyB,EAAE,CAACnC,oBAAoB,CAAC,CAAC;MACtC,IAAMW,IAAI,GAAGyB,QAAQ,CAACpC,oBAAoB,CAAC,CAAC;MAC5Cc,MAAM,GAAGA,MAAM,IAAIJ,IAAI,GAAGC,IAAI,CAAC,GAAGD,IAAI;MACtC,OAAOyB,EAAE,CAACpB,MAAM,CAACD,MAAM,CAAC;IAC5B;EAAC;AAAA;AAELrB,KAAK,CAAC6C,KAAK,GAAG,IAAI7C,KAAK,CAAC,IAAIzC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AACnDyC,KAAK,CAAC8C,KAAK,GAAG,IAAI9C,KAAK,CAAC,IAAIzC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7CyC,KAAK,CAACuC,GAAG,GAAG,IAAIvC,KAAK,CAAC,IAAIzC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7CyC,KAAK,CAAC+C,IAAI,GAAG,IAAI/C,KAAK,CAAC,IAAIzC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AAC9CyC,KAAK,CAACgD,KAAK,GAAG,IAAIhD,KAAK,CAAC,IAAIzC,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/CyC,KAAK,CAACiD,IAAI,GAAG,IAAIjD,KAAK,CAAC,IAAIzC,IAAI,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AAChDyC,KAAK,CAACkD,SAAS,GAAG,IAAIlD,KAAK,CAAC,IAAIzC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AACvDyC,KAAK,CAACuB,WAAW,GAAG,IAAIvB,KAAK,CAAC,IAAIzC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACnD,CAAC,UAAUyC,KAAK,EAAE;EACd,IAAIiC,MAAM;EACV,CAAC,UAAUA,MAAM,EAAE;IACf,IAAIC,GAAG;IACP,CAAC,UAAUA,GAAG,EAAE;MACZ,SAASiB,SAASA,CAACX,KAAK,EAAE;QACtB,IAAIA,KAAK,CAAC3D,IAAI,CAAClB,CAAC,KAAK,CAAC,EAAE;UACpB,cAAAyF,MAAA,CAAcZ,KAAK,CAAC3D,IAAI,CAACrB,CAAC,QAAA4F,MAAA,CAAKZ,KAAK,CAAC3D,IAAI,CAACpB,CAAC,QAAA2F,MAAA,CAAKZ,KAAK,CAAC3D,IAAI,CAACnB,CAAC;QAChE;QACA,OAAOsC,KAAK,CAACiC,MAAM,CAACC,GAAG,CAACmB,UAAU,CAACb,KAAK,CAAC;MAC7C;MACAN,GAAG,CAACiB,SAAS,GAAGA,SAAS;MACzB,SAASE,UAAUA,CAACb,KAAK,EAAE;QACvB,eAAAY,MAAA,CAAeZ,KAAK,CAAC3D,IAAI,CAACrB,CAAC,QAAA4F,MAAA,CAAKZ,KAAK,CAAC3D,IAAI,CAACpB,CAAC,QAAA2F,MAAA,CAAKZ,KAAK,CAAC3D,IAAI,CAACnB,CAAC,QAAA0F,MAAA,CAAK,CAAEZ,KAAK,CAAC3D,IAAI,CAAClB,CAAC,CAAE2F,OAAO,CAAC,CAAC,CAAC;MAChG;MACApB,GAAG,CAACmB,UAAU,GAAGA,UAAU;MAC3B,SAASE,SAASA,CAACf,KAAK,EAAE;QACtB,IAAIA,KAAK,CAACpD,IAAI,CAACzB,CAAC,KAAK,CAAC,EAAE;UACpB,cAAAyF,MAAA,CAAcZ,KAAK,CAACpD,IAAI,CAACZ,CAAC,QAAA4E,MAAA,CAAK,CAACZ,KAAK,CAACpD,IAAI,CAACX,CAAC,GAAG,GAAG,EAAE6E,OAAO,CAAC,CAAC,CAAC,SAAAF,MAAA,CAAM,CAACZ,KAAK,CAACpD,IAAI,CAACV,CAAC,GAAG,GAAG,EAAE4E,OAAO,CAAC,CAAC,CAAC;QACvG;QACA,OAAOtD,KAAK,CAACiC,MAAM,CAACC,GAAG,CAACsB,UAAU,CAAChB,KAAK,CAAC;MAC7C;MACAN,GAAG,CAACqB,SAAS,GAAGA,SAAS;MACzB,SAASC,UAAUA,CAAChB,KAAK,EAAE;QACvB,eAAAY,MAAA,CAAeZ,KAAK,CAACpD,IAAI,CAACZ,CAAC,QAAA4E,MAAA,CAAK,CAACZ,KAAK,CAACpD,IAAI,CAACX,CAAC,GAAG,GAAG,EAAE6E,OAAO,CAAC,CAAC,CAAC,SAAAF,MAAA,CAAM,CAACZ,KAAK,CAACpD,IAAI,CAACV,CAAC,GAAG,GAAG,EAAE4E,OAAO,CAAC,CAAC,CAAC,SAAAF,MAAA,CAAMZ,KAAK,CAACpD,IAAI,CAACzB,CAAC,CAAC2F,OAAO,CAAC,CAAC,CAAC;MACrI;MACApB,GAAG,CAACsB,UAAU,GAAGA,UAAU;MAC3B,SAASC,cAAcA,CAACC,CAAC,EAAE;QACvB,IAAMlG,CAAC,GAAGkG,CAAC,CAAC3B,QAAQ,CAAC,EAAE,CAAC;QACxB,OAAOvE,CAAC,CAACK,MAAM,KAAK,CAAC,GAAG,GAAG,GAAGL,CAAC,GAAGA,CAAC;MACvC;MACA;AACZ;AACA;MACY,SAASmG,SAASA,CAACnB,KAAK,EAAE;QACtB,WAAAY,MAAA,CAAWK,cAAc,CAACjB,KAAK,CAAC3D,IAAI,CAACrB,CAAC,CAAC,EAAA4F,MAAA,CAAGK,cAAc,CAACjB,KAAK,CAAC3D,IAAI,CAACpB,CAAC,CAAC,EAAA2F,MAAA,CAAGK,cAAc,CAACjB,KAAK,CAAC3D,IAAI,CAACnB,CAAC,CAAC;MACzG;MACAwE,GAAG,CAACyB,SAAS,GAAGA,SAAS;MACzB;AACZ;AACA;AACA;MACY,SAASC,UAAUA,CAACpB,KAAK,EAAmB;QAAA,IAAjBqB,OAAO,GAAAjG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;QACtC,IAAIiG,OAAO,IAAIrB,KAAK,CAAC3D,IAAI,CAAClB,CAAC,KAAK,CAAC,EAAE;UAC/B,OAAOqC,KAAK,CAACiC,MAAM,CAACC,GAAG,CAACyB,SAAS,CAACnB,KAAK,CAAC;QAC5C;QACA,WAAAY,MAAA,CAAWK,cAAc,CAACjB,KAAK,CAAC3D,IAAI,CAACrB,CAAC,CAAC,EAAA4F,MAAA,CAAGK,cAAc,CAACjB,KAAK,CAAC3D,IAAI,CAACpB,CAAC,CAAC,EAAA2F,MAAA,CAAGK,cAAc,CAACjB,KAAK,CAAC3D,IAAI,CAACnB,CAAC,CAAC,EAAA0F,MAAA,CAAGK,cAAc,CAACrG,IAAI,CAACE,KAAK,CAACkF,KAAK,CAAC3D,IAAI,CAAClB,CAAC,GAAG,GAAG,CAAC,CAAC;MAC1J;MACAuE,GAAG,CAAC0B,UAAU,GAAGA,UAAU;MAC3B;AACZ;AACA;MACY,SAASzB,MAAMA,CAACK,KAAK,EAAE;QACnB,IAAIA,KAAK,CAACd,QAAQ,CAAC,CAAC,EAAE;UAClB,OAAO1B,KAAK,CAACiC,MAAM,CAACC,GAAG,CAACyB,SAAS,CAACnB,KAAK,CAAC;QAC5C;QACA,OAAOxC,KAAK,CAACiC,MAAM,CAACC,GAAG,CAACmB,UAAU,CAACb,KAAK,CAAC;MAC7C;MACAN,GAAG,CAACC,MAAM,GAAGA,MAAM;MACnB;AACZ;AACA;AACA;AACA;MACY,SAASG,QAAQA,CAACD,GAAG,EAAE;QACnB,IAAMxE,MAAM,GAAGwE,GAAG,CAACxE,MAAM;QACzB,IAAIA,MAAM,KAAK,CAAC,EAAE;UACd;UACA,OAAO,IAAI;QACf;QACA,IAAIwE,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,qBAAqB;UAC9C;UACA,OAAO,IAAI;QACf;QACA,IAAIjG,MAAM,KAAK,CAAC,EAAE;UACd;UACA,IAAML,CAAC,GAAG,EAAE,GAAGuG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UACpF,IAAMrG,CAAC,GAAG,EAAE,GAAGsG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UACpF,IAAMpG,CAAC,GAAG,EAAE,GAAGqG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UACpF,OAAO,IAAI9D,KAAK,CAAC,IAAIzC,IAAI,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1C;QACA,IAAIG,MAAM,KAAK,CAAC,EAAE;UACd;UACA,IAAML,EAAC,GAAG,EAAE,GAAGuG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UACpF,IAAMrG,EAAC,GAAG,EAAE,GAAGsG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UACpF,IAAMpG,EAAC,GAAG,EAAE,GAAGqG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UACpF,IAAMnG,CAAC,GAAG,EAAE,GAAGoG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGC,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UACpF,OAAO,IAAI9D,KAAK,CAAC,IAAIzC,IAAI,CAACC,EAAC,EAAEC,EAAC,EAAEC,EAAC,EAAEC,CAAC,GAAG,GAAG,CAAC,CAAC;QAChD;QACA,IAAIE,MAAM,KAAK,CAAC,EAAE;UACd;UACA,IAAML,GAAC,GAAGuG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UAC3C,IAAMrG,GAAC,GAAGsG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UAC3C,IAAMpG,GAAC,GAAGqG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UAC3C,OAAO,IAAI9D,KAAK,CAAC,IAAIzC,IAAI,CAAC,EAAE,GAAGC,GAAC,GAAGA,GAAC,EAAE,EAAE,GAAGC,GAAC,GAAGA,GAAC,EAAE,EAAE,GAAGC,GAAC,GAAGA,GAAC,CAAC,CAAC;QAClE;QACA,IAAIG,MAAM,KAAK,CAAC,EAAE;UACd;UACA,IAAML,GAAC,GAAGuG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UAC3C,IAAMrG,GAAC,GAAGsG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UAC3C,IAAMpG,GAAC,GAAGqG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UAC3C,IAAMnG,EAAC,GAAGoG,cAAc,CAAC1B,GAAG,CAACyB,UAAU,CAAC,CAAC,CAAC,CAAC;UAC3C,OAAO,IAAI9D,KAAK,CAAC,IAAIzC,IAAI,CAAC,EAAE,GAAGC,GAAC,GAAGA,GAAC,EAAE,EAAE,GAAGC,GAAC,GAAGA,GAAC,EAAE,EAAE,GAAGC,GAAC,GAAGA,GAAC,EAAE,CAAC,EAAE,GAAGC,EAAC,GAAGA,EAAC,IAAI,GAAG,CAAC,CAAC;QACtF;QACA;QACA,OAAO,IAAI;MACf;MACAuE,GAAG,CAACI,QAAQ,GAAGA,QAAQ;MACvB,SAASyB,cAAcA,CAACC,QAAQ,EAAE;QAC9B,QAAQA,QAAQ;UACZ,KAAK,EAAE,CAAC;YAAuB,OAAO,CAAC;UACvC,KAAK,EAAE,CAAC;YAAuB,OAAO,CAAC;UACvC,KAAK,EAAE,CAAC;YAAuB,OAAO,CAAC;UACvC,KAAK,EAAE,CAAC;YAAuB,OAAO,CAAC;UACvC,KAAK,EAAE,CAAC;YAAuB,OAAO,CAAC;UACvC,KAAK,EAAE,CAAC;YAAuB,OAAO,CAAC;UACvC,KAAK,EAAE,CAAC;YAAuB,OAAO,CAAC;UACvC,KAAK,EAAE,CAAC;YAAuB,OAAO,CAAC;UACvC,KAAK,EAAE,CAAC;YAAuB,OAAO,CAAC;UACvC,KAAK,EAAE,CAAC;YAAuB,OAAO,CAAC;UACvC,KAAK,EAAE,CAAC;YAAkB,OAAO,EAAE;UACnC,KAAK,EAAE,CAAC;YAAkB,OAAO,EAAE;UACnC,KAAK,EAAE,CAAC;YAAkB,OAAO,EAAE;UACnC,KAAK,EAAE,CAAC;YAAkB,OAAO,EAAE;UACnC,KAAK,EAAE,CAAC;YAAkB,OAAO,EAAE;UACnC,KAAK,EAAE,CAAC;YAAkB,OAAO,EAAE;UACnC,KAAK,GAAG,CAAC;YAAkB,OAAO,EAAE;UACpC,KAAK,EAAE,CAAC;YAAkB,OAAO,EAAE;UACnC,KAAK,GAAG,CAAC;YAAkB,OAAO,EAAE;UACpC,KAAK,EAAE,CAAC;YAAkB,OAAO,EAAE;UACnC,KAAK,GAAG,CAAC;YAAkB,OAAO,EAAE;UACpC,KAAK,EAAE,CAAC;YAAkB,OAAO,EAAE;QACvC;QACA,OAAO,CAAC;MACZ;IACJ,CAAC,EAAE9B,GAAG,GAAGD,MAAM,CAACC,GAAG,KAAKD,MAAM,CAACC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EAC7C,CAAC,EAAED,MAAM,GAAGjC,KAAK,CAACiC,MAAM,KAAKjC,KAAK,CAACiC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,EAAEjC,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}