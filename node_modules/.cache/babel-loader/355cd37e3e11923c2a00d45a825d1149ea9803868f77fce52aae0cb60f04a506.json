{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.map.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, SingleCursorState } from '../cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport var CursorMoveCommands = /*#__PURE__*/function () {\n  function CursorMoveCommands() {\n    _classCallCheck(this, CursorMoveCommands);\n  }\n  return _createClass(CursorMoveCommands, null, [{\n    key: \"addCursorDown\",\n    value: function addCursorDown(viewModel, cursors, useLogicalLine) {\n      var result = [];\n      var resultLen = 0;\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n        if (useLogicalLine) {\n          result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n        } else {\n          result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel, cursor.viewState));\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"addCursorUp\",\n    value: function addCursorUp(viewModel, cursors, useLogicalLine) {\n      var result = [];\n      var resultLen = 0;\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n        if (useLogicalLine) {\n          result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n        } else {\n          result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel, cursor.viewState));\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"moveToBeginningOfLine\",\n    value: function moveToBeginningOfLine(viewModel, cursors, inSelectionMode) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = this._moveToLineStart(viewModel, cursor, inSelectionMode);\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveToLineStart\",\n    value: function _moveToLineStart(viewModel, cursor, inSelectionMode) {\n      var currentViewStateColumn = cursor.viewState.position.column;\n      var currentModelStateColumn = cursor.modelState.position.column;\n      var isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n      var currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n      var firstNonBlankColumn = viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n      var isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n      if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n        return this._moveToLineStartByView(viewModel, cursor, inSelectionMode);\n      } else {\n        return this._moveToLineStartByModel(viewModel, cursor, inSelectionMode);\n      }\n    }\n  }, {\n    key: \"_moveToLineStartByView\",\n    value: function _moveToLineStartByView(viewModel, cursor, inSelectionMode) {\n      return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode));\n    }\n  }, {\n    key: \"_moveToLineStartByModel\",\n    value: function _moveToLineStartByModel(viewModel, cursor, inSelectionMode) {\n      return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n    }\n  }, {\n    key: \"moveToEndOfLine\",\n    value: function moveToEndOfLine(viewModel, cursors, inSelectionMode, sticky) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = this._moveToLineEnd(viewModel, cursor, inSelectionMode, sticky);\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveToLineEnd\",\n    value: function _moveToLineEnd(viewModel, cursor, inSelectionMode, sticky) {\n      var viewStatePosition = cursor.viewState.position;\n      var viewModelMaxColumn = viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n      var isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n      var modelStatePosition = cursor.modelState.position;\n      var modelMaxColumn = viewModel.model.getLineMaxColumn(modelStatePosition.lineNumber);\n      var isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n      if (isEndOfViewLine || isEndLineOfWrappedLine) {\n        return this._moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky);\n      } else {\n        return this._moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky);\n      }\n    }\n  }, {\n    key: \"_moveToLineEndByView\",\n    value: function _moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky) {\n      return CursorState.fromViewState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, sticky));\n    }\n  }, {\n    key: \"_moveToLineEndByModel\",\n    value: function _moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky) {\n      return CursorState.fromModelState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, sticky));\n    }\n  }, {\n    key: \"expandLineSelection\",\n    value: function expandLineSelection(viewModel, cursors) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var startLineNumber = cursor.modelState.selection.startLineNumber;\n        var lineCount = viewModel.model.getLineCount();\n        var endLineNumber = cursor.modelState.selection.endLineNumber;\n        var endColumn = void 0;\n        if (endLineNumber === lineCount) {\n          endColumn = viewModel.model.getLineMaxColumn(lineCount);\n        } else {\n          endLineNumber++;\n          endColumn = 1;\n        }\n        result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(endLineNumber, endColumn), 0));\n      }\n      return result;\n    }\n  }, {\n    key: \"moveToBeginningOfBuffer\",\n    value: function moveToBeginningOfBuffer(viewModel, cursors, inSelectionMode) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n      }\n      return result;\n    }\n  }, {\n    key: \"moveToEndOfBuffer\",\n    value: function moveToEndOfBuffer(viewModel, cursors, inSelectionMode) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n      }\n      return result;\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll(viewModel, cursor) {\n      var lineCount = viewModel.model.getLineCount();\n      var maxColumn = viewModel.model.getLineMaxColumn(lineCount);\n      return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(lineCount, maxColumn), 0));\n    }\n  }, {\n    key: \"line\",\n    value: function line(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n      var position = viewModel.model.validatePosition(_position);\n      var viewPosition = _viewPosition ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position);\n      if (!inSelectionMode) {\n        // Entering line selection for the first time\n        var lineCount = viewModel.model.getLineCount();\n        var selectToLineNumber = position.lineNumber + 1;\n        var selectToColumn = 1;\n        if (selectToLineNumber > lineCount) {\n          selectToLineNumber = lineCount;\n          selectToColumn = viewModel.model.getLineMaxColumn(selectToLineNumber);\n        }\n        return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 2 /* SelectionStartKind.Line */, 0, new Position(selectToLineNumber, selectToColumn), 0));\n      }\n      // Continuing line selection\n      var enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n      if (position.lineNumber < enteringLineNumber) {\n        return CursorState.fromViewState(cursor.viewState.move(true, viewPosition.lineNumber, 1, 0));\n      } else if (position.lineNumber > enteringLineNumber) {\n        var _lineCount = viewModel.getLineCount();\n        var selectToViewLineNumber = viewPosition.lineNumber + 1;\n        var selectToViewColumn = 1;\n        if (selectToViewLineNumber > _lineCount) {\n          selectToViewLineNumber = _lineCount;\n          selectToViewColumn = viewModel.getLineMaxColumn(selectToViewLineNumber);\n        }\n        return CursorState.fromViewState(cursor.viewState.move(true, selectToViewLineNumber, selectToViewColumn, 0));\n      } else {\n        var endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n        return CursorState.fromModelState(cursor.modelState.move(true, endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n      }\n    }\n  }, {\n    key: \"word\",\n    value: function word(viewModel, cursor, inSelectionMode, _position) {\n      var position = viewModel.model.validatePosition(_position);\n      return CursorState.fromModelState(WordOperations.word(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, position));\n    }\n  }, {\n    key: \"cancelSelection\",\n    value: function cancelSelection(viewModel, cursor) {\n      if (!cursor.modelState.hasSelection()) {\n        return new CursorState(cursor.modelState, cursor.viewState);\n      }\n      var lineNumber = cursor.viewState.position.lineNumber;\n      var column = cursor.viewState.position.column;\n      return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, column), 0));\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n      if (inSelectionMode) {\n        if (cursor.modelState.selectionStartKind === 1 /* SelectionStartKind.Word */) {\n          return this.word(viewModel, cursor, inSelectionMode, _position);\n        }\n        if (cursor.modelState.selectionStartKind === 2 /* SelectionStartKind.Line */) {\n          return this.line(viewModel, cursor, inSelectionMode, _position, _viewPosition);\n        }\n      }\n      var position = viewModel.model.validatePosition(_position);\n      var viewPosition = _viewPosition ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position);\n      return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n    }\n  }, {\n    key: \"simpleMove\",\n    value: function simpleMove(viewModel, cursors, direction, inSelectionMode, value, unit) {\n      switch (direction) {\n        case 0 /* CursorMove.Direction.Left */:\n          {\n            if (unit === 4 /* CursorMove.Unit.HalfLine */) {\n              // Move left by half the current line length\n              return this._moveHalfLineLeft(viewModel, cursors, inSelectionMode);\n            } else {\n              // Move left by `moveParams.value` columns\n              return this._moveLeft(viewModel, cursors, inSelectionMode, value);\n            }\n          }\n        case 1 /* CursorMove.Direction.Right */:\n          {\n            if (unit === 4 /* CursorMove.Unit.HalfLine */) {\n              // Move right by half the current line length\n              return this._moveHalfLineRight(viewModel, cursors, inSelectionMode);\n            } else {\n              // Move right by `moveParams.value` columns\n              return this._moveRight(viewModel, cursors, inSelectionMode, value);\n            }\n          }\n        case 2 /* CursorMove.Direction.Up */:\n          {\n            if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n              // Move up by view lines\n              return this._moveUpByViewLines(viewModel, cursors, inSelectionMode, value);\n            } else {\n              // Move up by model lines\n              return this._moveUpByModelLines(viewModel, cursors, inSelectionMode, value);\n            }\n          }\n        case 3 /* CursorMove.Direction.Down */:\n          {\n            if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n              // Move down by view lines\n              return this._moveDownByViewLines(viewModel, cursors, inSelectionMode, value);\n            } else {\n              // Move down by model lines\n              return this._moveDownByModelLines(viewModel, cursors, inSelectionMode, value);\n            }\n          }\n        case 4 /* CursorMove.Direction.PrevBlankLine */:\n          {\n            if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n              return cursors.map(function (cursor) {\n                return CursorState.fromViewState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode));\n              });\n            } else {\n              return cursors.map(function (cursor) {\n                return CursorState.fromModelState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n              });\n            }\n          }\n        case 5 /* CursorMove.Direction.NextBlankLine */:\n          {\n            if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n              return cursors.map(function (cursor) {\n                return CursorState.fromViewState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode));\n              });\n            } else {\n              return cursors.map(function (cursor) {\n                return CursorState.fromModelState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n              });\n            }\n          }\n        case 6 /* CursorMove.Direction.WrappedLineStart */:\n          {\n            // Move to the beginning of the current view line\n            return this._moveToViewMinColumn(viewModel, cursors, inSelectionMode);\n          }\n        case 7 /* CursorMove.Direction.WrappedLineFirstNonWhitespaceCharacter */:\n          {\n            // Move to the first non-whitespace column of the current view line\n            return this._moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n          }\n        case 8 /* CursorMove.Direction.WrappedLineColumnCenter */:\n          {\n            // Move to the \"center\" of the current view line\n            return this._moveToViewCenterColumn(viewModel, cursors, inSelectionMode);\n          }\n        case 9 /* CursorMove.Direction.WrappedLineEnd */:\n          {\n            // Move to the end of the current view line\n            return this._moveToViewMaxColumn(viewModel, cursors, inSelectionMode);\n          }\n        case 10 /* CursorMove.Direction.WrappedLineLastNonWhitespaceCharacter */:\n          {\n            // Move to the last non-whitespace column of the current view line\n            return this._moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n          }\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"viewportMove\",\n    value: function viewportMove(viewModel, cursors, direction, inSelectionMode, value) {\n      var visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n      var visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n      switch (direction) {\n        case 11 /* CursorMove.Direction.ViewPortTop */:\n          {\n            // Move to the nth line start in the viewport (from the top)\n            var modelLineNumber = this._firstLineNumberInRange(viewModel.model, visibleModelRange, value);\n            var modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n            return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n          }\n        case 13 /* CursorMove.Direction.ViewPortBottom */:\n          {\n            // Move to the nth line start in the viewport (from the bottom)\n            var _modelLineNumber = this._lastLineNumberInRange(viewModel.model, visibleModelRange, value);\n            var _modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(_modelLineNumber);\n            return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, _modelLineNumber, _modelColumn)];\n          }\n        case 12 /* CursorMove.Direction.ViewPortCenter */:\n          {\n            // Move to the line start in the viewport center\n            var _modelLineNumber2 = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n            var _modelColumn2 = viewModel.model.getLineFirstNonWhitespaceColumn(_modelLineNumber2);\n            return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, _modelLineNumber2, _modelColumn2)];\n          }\n        case 14 /* CursorMove.Direction.ViewPortIfOutside */:\n          {\n            // Move to a position inside the viewport\n            var result = [];\n            for (var i = 0, len = cursors.length; i < len; i++) {\n              var cursor = cursors[i];\n              result[i] = this.findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode);\n            }\n            return result;\n          }\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"findPositionInViewportIfOutside\",\n    value: function findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode) {\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n        // Nothing to do, cursor is in viewport\n        return new CursorState(cursor.modelState, cursor.viewState);\n      } else {\n        var newViewLineNumber;\n        if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n          newViewLineNumber = visibleViewRange.endLineNumber - 1;\n        } else if (viewLineNumber < visibleViewRange.startLineNumber) {\n          newViewLineNumber = visibleViewRange.startLineNumber;\n        } else {\n          newViewLineNumber = viewLineNumber;\n        }\n        var position = MoveOperations.vertical(viewModel.cursorConfig, viewModel, viewLineNumber, cursor.viewState.position.column, cursor.viewState.leftoverVisibleColumns, newViewLineNumber, false);\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, position.lineNumber, position.column, position.leftoverVisibleColumns));\n      }\n    }\n    /**\n     * Find the nth line start included in the range (from the start).\n     */\n  }, {\n    key: \"_firstLineNumberInRange\",\n    value: function _firstLineNumberInRange(model, range, count) {\n      var startLineNumber = range.startLineNumber;\n      if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n        // Move on to the second line if the first line start is not included in the range\n        startLineNumber++;\n      }\n      return Math.min(range.endLineNumber, startLineNumber + count - 1);\n    }\n    /**\n     * Find the nth line start included in the range (from the end).\n     */\n  }, {\n    key: \"_lastLineNumberInRange\",\n    value: function _lastLineNumberInRange(model, range, count) {\n      var startLineNumber = range.startLineNumber;\n      if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n        // Move on to the second line if the first line start is not included in the range\n        startLineNumber++;\n      }\n      return Math.max(startLineNumber, range.endLineNumber - count + 1);\n    }\n  }, {\n    key: \"_moveLeft\",\n    value: function _moveLeft(viewModel, cursors, inSelectionMode, noOfColumns) {\n      return cursors.map(function (cursor) {\n        return CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns));\n      });\n    }\n  }, {\n    key: \"_moveHalfLineLeft\",\n    value: function _moveHalfLineLeft(viewModel, cursors, inSelectionMode) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var halfLine = Math.round(viewModel.getLineLength(viewLineNumber) / 2);\n        result[i] = CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveRight\",\n    value: function _moveRight(viewModel, cursors, inSelectionMode, noOfColumns) {\n      return cursors.map(function (cursor) {\n        return CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns));\n      });\n    }\n  }, {\n    key: \"_moveHalfLineRight\",\n    value: function _moveHalfLineRight(viewModel, cursors, inSelectionMode) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var halfLine = Math.round(viewModel.getLineLength(viewLineNumber) / 2);\n        result[i] = CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveDownByViewLines\",\n    value: function _moveDownByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromViewState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveDownByModelLines\",\n    value: function _moveDownByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromModelState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveUpByViewLines\",\n    value: function _moveUpByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromViewState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveUpByModelLines\",\n    value: function _moveUpByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        result[i] = CursorState.fromModelState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveToViewPosition\",\n    value: function _moveToViewPosition(viewModel, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n      return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n    }\n  }, {\n    key: \"_moveToModelPosition\",\n    value: function _moveToModelPosition(viewModel, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n      return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n    }\n  }, {\n    key: \"_moveToViewMinColumn\",\n    value: function _moveToViewMinColumn(viewModel, cursors, inSelectionMode) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var viewColumn = viewModel.getLineMinColumn(viewLineNumber);\n        result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveToViewFirstNonWhitespaceColumn\",\n    value: function _moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n        result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveToViewCenterColumn\",\n    value: function _moveToViewCenterColumn(viewModel, cursors, inSelectionMode) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var viewColumn = Math.round((viewModel.getLineMaxColumn(viewLineNumber) + viewModel.getLineMinColumn(viewLineNumber)) / 2);\n        result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveToViewMaxColumn\",\n    value: function _moveToViewMaxColumn(viewModel, cursors, inSelectionMode) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var viewColumn = viewModel.getLineMaxColumn(viewLineNumber);\n        result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n      return result;\n    }\n  }, {\n    key: \"_moveToViewLastNonWhitespaceColumn\",\n    value: function _moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n      var result = [];\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var viewLineNumber = cursor.viewState.position.lineNumber;\n        var viewColumn = viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n        result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n      }\n      return result;\n    }\n  }]);\n}();\nexport var CursorMove;\n(function (CursorMove) {\n  var isCursorMoveArgs = function isCursorMoveArgs(arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n    var cursorMoveArg = arg;\n    if (!types.isString(cursorMoveArg.to)) {\n      return false;\n    }\n    if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n      return false;\n    }\n    if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n      return false;\n    }\n    if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n      return false;\n    }\n    return true;\n  };\n  CursorMove.metadata = {\n    description: 'Move cursor to a logical position in the view',\n    args: [{\n      name: 'Cursor move argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory logical position value providing where to move the cursor.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\\n\\t\\t\\t\\t\\t\\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\\n\\t\\t\\t\\t\\t\\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\\n\\t\\t\\t\\t\\t\\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'character', 'halfLine'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'select': If 'true' makes the selection. Default is 'false'.\\n\\t\\t\\t\\t\",\n      constraint: isCursorMoveArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'select': {\n            'type': 'boolean',\n            'default': false\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Positions in the view for cursor move command.\n   */\n  CursorMove.RawDirection = {\n    Left: 'left',\n    Right: 'right',\n    Up: 'up',\n    Down: 'down',\n    PrevBlankLine: 'prevBlankLine',\n    NextBlankLine: 'nextBlankLine',\n    WrappedLineStart: 'wrappedLineStart',\n    WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n    WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n    WrappedLineEnd: 'wrappedLineEnd',\n    WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n    ViewPortTop: 'viewPortTop',\n    ViewPortCenter: 'viewPortCenter',\n    ViewPortBottom: 'viewPortBottom',\n    ViewPortIfOutside: 'viewPortIfOutside'\n  };\n  /**\n   * Units for Cursor move 'by' argument\n   */\n  CursorMove.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Character: 'character',\n    HalfLine: 'halfLine'\n  };\n  function parse(args) {\n    if (!args.to) {\n      // illegal arguments\n      return null;\n    }\n    var direction;\n    switch (args.to) {\n      case CursorMove.RawDirection.Left:\n        direction = 0 /* Direction.Left */;\n        break;\n      case CursorMove.RawDirection.Right:\n        direction = 1 /* Direction.Right */;\n        break;\n      case CursorMove.RawDirection.Up:\n        direction = 2 /* Direction.Up */;\n        break;\n      case CursorMove.RawDirection.Down:\n        direction = 3 /* Direction.Down */;\n        break;\n      case CursorMove.RawDirection.PrevBlankLine:\n        direction = 4 /* Direction.PrevBlankLine */;\n        break;\n      case CursorMove.RawDirection.NextBlankLine:\n        direction = 5 /* Direction.NextBlankLine */;\n        break;\n      case CursorMove.RawDirection.WrappedLineStart:\n        direction = 6 /* Direction.WrappedLineStart */;\n        break;\n      case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n        direction = 7 /* Direction.WrappedLineFirstNonWhitespaceCharacter */;\n        break;\n      case CursorMove.RawDirection.WrappedLineColumnCenter:\n        direction = 8 /* Direction.WrappedLineColumnCenter */;\n        break;\n      case CursorMove.RawDirection.WrappedLineEnd:\n        direction = 9 /* Direction.WrappedLineEnd */;\n        break;\n      case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n        direction = 10 /* Direction.WrappedLineLastNonWhitespaceCharacter */;\n        break;\n      case CursorMove.RawDirection.ViewPortTop:\n        direction = 11 /* Direction.ViewPortTop */;\n        break;\n      case CursorMove.RawDirection.ViewPortBottom:\n        direction = 13 /* Direction.ViewPortBottom */;\n        break;\n      case CursorMove.RawDirection.ViewPortCenter:\n        direction = 12 /* Direction.ViewPortCenter */;\n        break;\n      case CursorMove.RawDirection.ViewPortIfOutside:\n        direction = 14 /* Direction.ViewPortIfOutside */;\n        break;\n      default:\n        // illegal arguments\n        return null;\n    }\n    var unit = 0 /* Unit.None */;\n    switch (args.by) {\n      case CursorMove.RawUnit.Line:\n        unit = 1 /* Unit.Line */;\n        break;\n      case CursorMove.RawUnit.WrappedLine:\n        unit = 2 /* Unit.WrappedLine */;\n        break;\n      case CursorMove.RawUnit.Character:\n        unit = 3 /* Unit.Character */;\n        break;\n      case CursorMove.RawUnit.HalfLine:\n        unit = 4 /* Unit.HalfLine */;\n        break;\n    }\n    return {\n      direction: direction,\n      unit: unit,\n      select: !!args.select,\n      value: args.value || 1\n    };\n  }\n  CursorMove.parse = parse;\n})(CursorMove || (CursorMove = {}));","map":{"version":3,"names":["types","CursorState","SingleCursorState","MoveOperations","WordOperations","Position","Range","CursorMoveCommands","_classCallCheck","_createClass","key","value","addCursorDown","viewModel","cursors","useLogicalLine","result","resultLen","i","len","length","cursor","modelState","viewState","fromModelState","translateDown","cursorConfig","model","fromViewState","addCursorUp","translateUp","moveToBeginningOfLine","inSelectionMode","_moveToLineStart","currentViewStateColumn","position","column","currentModelStateColumn","isFirstLineOfWrappedLine","currentViewStatelineNumber","lineNumber","firstNonBlankColumn","getLineFirstNonWhitespaceColumn","isBeginningOfViewLine","_moveToLineStartByView","_moveToLineStartByModel","moveToEndOfLine","sticky","_moveToLineEnd","viewStatePosition","viewModelMaxColumn","getLineMaxColumn","isEndOfViewLine","modelStatePosition","modelMaxColumn","isEndLineOfWrappedLine","_moveToLineEndByModel","_moveToLineEndByView","expandLineSelection","startLineNumber","selection","lineCount","getLineCount","endLineNumber","endColumn","moveToBeginningOfBuffer","moveToEndOfBuffer","selectAll","maxColumn","line","_position","_viewPosition","validatePosition","viewPosition","coordinatesConverter","validateViewPosition","convertModelPositionToViewPosition","selectToLineNumber","selectToColumn","enteringLineNumber","selectionStart","getStartPosition","move","selectToViewLineNumber","selectToViewColumn","endPositionOfSelectionStart","getEndPosition","word","cancelSelection","hasSelection","moveTo","selectionStartKind","simpleMove","direction","unit","_moveHalfLineLeft","_moveLeft","_moveHalfLineRight","_moveRight","_moveUpByViewLines","_moveUpByModelLines","_moveDownByViewLines","_moveDownByModelLines","map","moveToPrevBlankLine","moveToNextBlankLine","_moveToViewMinColumn","_moveToViewFirstNonWhitespaceColumn","_moveToViewCenterColumn","_moveToViewMaxColumn","_moveToViewLastNonWhitespaceColumn","viewportMove","visibleViewRange","getCompletelyVisibleViewRange","visibleModelRange","convertViewRangeToModelRange","modelLineNumber","_firstLineNumberInRange","modelColumn","_moveToModelPosition","_lastLineNumberInRange","Math","round","findPositionInViewportIfOutside","viewLineNumber","newViewLineNumber","vertical","leftoverVisibleColumns","range","count","startColumn","getLineMinColumn","min","max","noOfColumns","moveLeft","halfLine","getLineLength","moveRight","linesCount","moveDown","moveUp","_moveToViewPosition","toViewLineNumber","toViewColumn","toModelLineNumber","toModelColumn","viewColumn","getLineLastNonWhitespaceColumn","CursorMove","isCursorMoveArgs","arg","isObject","cursorMoveArg","isString","to","isUndefined","select","isBoolean","by","isNumber","metadata","description","args","name","constraint","schema","RawDirection","Left","Right","Up","Down","PrevBlankLine","NextBlankLine","WrappedLineStart","WrappedLineFirstNonWhitespaceCharacter","WrappedLineColumnCenter","WrappedLineEnd","WrappedLineLastNonWhitespaceCharacter","ViewPortTop","ViewPortCenter","ViewPortBottom","ViewPortIfOutside","RawUnit","Line","WrappedLine","Character","HalfLine","parse"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorMoveCommands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, SingleCursorState } from '../cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class CursorMoveCommands {\n    static addCursorDown(viewModel, cursors, useLogicalLine) {\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n            if (useLogicalLine) {\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n            }\n            else {\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(viewModel.cursorConfig, viewModel, cursor.viewState));\n            }\n        }\n        return result;\n    }\n    static addCursorUp(viewModel, cursors, useLogicalLine) {\n        const result = [];\n        let resultLen = 0;\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n            if (useLogicalLine) {\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel.model, cursor.modelState));\n            }\n            else {\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(viewModel.cursorConfig, viewModel, cursor.viewState));\n            }\n        }\n        return result;\n    }\n    static moveToBeginningOfLine(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = this._moveToLineStart(viewModel, cursor, inSelectionMode);\n        }\n        return result;\n    }\n    static _moveToLineStart(viewModel, cursor, inSelectionMode) {\n        const currentViewStateColumn = cursor.viewState.position.column;\n        const currentModelStateColumn = cursor.modelState.position.column;\n        const isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n        const currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n        const firstNonBlankColumn = viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n        const isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n        if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n            return this._moveToLineStartByView(viewModel, cursor, inSelectionMode);\n        }\n        else {\n            return this._moveToLineStartByModel(viewModel, cursor, inSelectionMode);\n        }\n    }\n    static _moveToLineStartByView(viewModel, cursor, inSelectionMode) {\n        return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode));\n    }\n    static _moveToLineStartByModel(viewModel, cursor, inSelectionMode) {\n        return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n    }\n    static moveToEndOfLine(viewModel, cursors, inSelectionMode, sticky) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = this._moveToLineEnd(viewModel, cursor, inSelectionMode, sticky);\n        }\n        return result;\n    }\n    static _moveToLineEnd(viewModel, cursor, inSelectionMode, sticky) {\n        const viewStatePosition = cursor.viewState.position;\n        const viewModelMaxColumn = viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n        const isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n        const modelStatePosition = cursor.modelState.position;\n        const modelMaxColumn = viewModel.model.getLineMaxColumn(modelStatePosition.lineNumber);\n        const isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n        if (isEndOfViewLine || isEndLineOfWrappedLine) {\n            return this._moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky);\n        }\n        else {\n            return this._moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky);\n        }\n    }\n    static _moveToLineEndByView(viewModel, cursor, inSelectionMode, sticky) {\n        return CursorState.fromViewState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, sticky));\n    }\n    static _moveToLineEndByModel(viewModel, cursor, inSelectionMode, sticky) {\n        return CursorState.fromModelState(MoveOperations.moveToEndOfLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, sticky));\n    }\n    static expandLineSelection(viewModel, cursors) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const startLineNumber = cursor.modelState.selection.startLineNumber;\n            const lineCount = viewModel.model.getLineCount();\n            let endLineNumber = cursor.modelState.selection.endLineNumber;\n            let endColumn;\n            if (endLineNumber === lineCount) {\n                endColumn = viewModel.model.getLineMaxColumn(lineCount);\n            }\n            else {\n                endLineNumber++;\n                endColumn = 1;\n            }\n            result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(endLineNumber, endColumn), 0));\n        }\n        return result;\n    }\n    static moveToBeginningOfBuffer(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n        }\n        return result;\n    }\n    static moveToEndOfBuffer(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode));\n        }\n        return result;\n    }\n    static selectAll(viewModel, cursor) {\n        const lineCount = viewModel.model.getLineCount();\n        const maxColumn = viewModel.model.getLineMaxColumn(lineCount);\n        return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0 /* SelectionStartKind.Simple */, 0, new Position(lineCount, maxColumn), 0));\n    }\n    static line(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n        const position = viewModel.model.validatePosition(_position);\n        const viewPosition = (_viewPosition\n            ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n            : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position));\n        if (!inSelectionMode) {\n            // Entering line selection for the first time\n            const lineCount = viewModel.model.getLineCount();\n            let selectToLineNumber = position.lineNumber + 1;\n            let selectToColumn = 1;\n            if (selectToLineNumber > lineCount) {\n                selectToLineNumber = lineCount;\n                selectToColumn = viewModel.model.getLineMaxColumn(selectToLineNumber);\n            }\n            return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 2 /* SelectionStartKind.Line */, 0, new Position(selectToLineNumber, selectToColumn), 0));\n        }\n        // Continuing line selection\n        const enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n        if (position.lineNumber < enteringLineNumber) {\n            return CursorState.fromViewState(cursor.viewState.move(true, viewPosition.lineNumber, 1, 0));\n        }\n        else if (position.lineNumber > enteringLineNumber) {\n            const lineCount = viewModel.getLineCount();\n            let selectToViewLineNumber = viewPosition.lineNumber + 1;\n            let selectToViewColumn = 1;\n            if (selectToViewLineNumber > lineCount) {\n                selectToViewLineNumber = lineCount;\n                selectToViewColumn = viewModel.getLineMaxColumn(selectToViewLineNumber);\n            }\n            return CursorState.fromViewState(cursor.viewState.move(true, selectToViewLineNumber, selectToViewColumn, 0));\n        }\n        else {\n            const endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n            return CursorState.fromModelState(cursor.modelState.move(true, endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n        }\n    }\n    static word(viewModel, cursor, inSelectionMode, _position) {\n        const position = viewModel.model.validatePosition(_position);\n        return CursorState.fromModelState(WordOperations.word(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, position));\n    }\n    static cancelSelection(viewModel, cursor) {\n        if (!cursor.modelState.hasSelection()) {\n            return new CursorState(cursor.modelState, cursor.viewState);\n        }\n        const lineNumber = cursor.viewState.position.lineNumber;\n        const column = cursor.viewState.position.column;\n        return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, column), 0));\n    }\n    static moveTo(viewModel, cursor, inSelectionMode, _position, _viewPosition) {\n        if (inSelectionMode) {\n            if (cursor.modelState.selectionStartKind === 1 /* SelectionStartKind.Word */) {\n                return this.word(viewModel, cursor, inSelectionMode, _position);\n            }\n            if (cursor.modelState.selectionStartKind === 2 /* SelectionStartKind.Line */) {\n                return this.line(viewModel, cursor, inSelectionMode, _position, _viewPosition);\n            }\n        }\n        const position = viewModel.model.validatePosition(_position);\n        const viewPosition = (_viewPosition\n            ? viewModel.coordinatesConverter.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\n            : viewModel.coordinatesConverter.convertModelPositionToViewPosition(position));\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n    }\n    static simpleMove(viewModel, cursors, direction, inSelectionMode, value, unit) {\n        switch (direction) {\n            case 0 /* CursorMove.Direction.Left */: {\n                if (unit === 4 /* CursorMove.Unit.HalfLine */) {\n                    // Move left by half the current line length\n                    return this._moveHalfLineLeft(viewModel, cursors, inSelectionMode);\n                }\n                else {\n                    // Move left by `moveParams.value` columns\n                    return this._moveLeft(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 1 /* CursorMove.Direction.Right */: {\n                if (unit === 4 /* CursorMove.Unit.HalfLine */) {\n                    // Move right by half the current line length\n                    return this._moveHalfLineRight(viewModel, cursors, inSelectionMode);\n                }\n                else {\n                    // Move right by `moveParams.value` columns\n                    return this._moveRight(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 2 /* CursorMove.Direction.Up */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    // Move up by view lines\n                    return this._moveUpByViewLines(viewModel, cursors, inSelectionMode, value);\n                }\n                else {\n                    // Move up by model lines\n                    return this._moveUpByModelLines(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 3 /* CursorMove.Direction.Down */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    // Move down by view lines\n                    return this._moveDownByViewLines(viewModel, cursors, inSelectionMode, value);\n                }\n                else {\n                    // Move down by model lines\n                    return this._moveDownByModelLines(viewModel, cursors, inSelectionMode, value);\n                }\n            }\n            case 4 /* CursorMove.Direction.PrevBlankLine */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n                }\n                else {\n                    return cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToPrevBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n                }\n            }\n            case 5 /* CursorMove.Direction.NextBlankLine */: {\n                if (unit === 2 /* CursorMove.Unit.WrappedLine */) {\n                    return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode)));\n                }\n                else {\n                    return cursors.map(cursor => CursorState.fromModelState(MoveOperations.moveToNextBlankLine(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode)));\n                }\n            }\n            case 6 /* CursorMove.Direction.WrappedLineStart */: {\n                // Move to the beginning of the current view line\n                return this._moveToViewMinColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 7 /* CursorMove.Direction.WrappedLineFirstNonWhitespaceCharacter */: {\n                // Move to the first non-whitespace column of the current view line\n                return this._moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 8 /* CursorMove.Direction.WrappedLineColumnCenter */: {\n                // Move to the \"center\" of the current view line\n                return this._moveToViewCenterColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 9 /* CursorMove.Direction.WrappedLineEnd */: {\n                // Move to the end of the current view line\n                return this._moveToViewMaxColumn(viewModel, cursors, inSelectionMode);\n            }\n            case 10 /* CursorMove.Direction.WrappedLineLastNonWhitespaceCharacter */: {\n                // Move to the last non-whitespace column of the current view line\n                return this._moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode);\n            }\n            default:\n                return null;\n        }\n    }\n    static viewportMove(viewModel, cursors, direction, inSelectionMode, value) {\n        const visibleViewRange = viewModel.getCompletelyVisibleViewRange();\n        const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        switch (direction) {\n            case 11 /* CursorMove.Direction.ViewPortTop */: {\n                // Move to the nth line start in the viewport (from the top)\n                const modelLineNumber = this._firstLineNumberInRange(viewModel.model, visibleModelRange, value);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 13 /* CursorMove.Direction.ViewPortBottom */: {\n                // Move to the nth line start in the viewport (from the bottom)\n                const modelLineNumber = this._lastLineNumberInRange(viewModel.model, visibleModelRange, value);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 12 /* CursorMove.Direction.ViewPortCenter */: {\n                // Move to the line start in the viewport center\n                const modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n                const modelColumn = viewModel.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n                return [this._moveToModelPosition(viewModel, cursors[0], inSelectionMode, modelLineNumber, modelColumn)];\n            }\n            case 14 /* CursorMove.Direction.ViewPortIfOutside */: {\n                // Move to a position inside the viewport\n                const result = [];\n                for (let i = 0, len = cursors.length; i < len; i++) {\n                    const cursor = cursors[i];\n                    result[i] = this.findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode);\n                }\n                return result;\n            }\n            default:\n                return null;\n        }\n    }\n    static findPositionInViewportIfOutside(viewModel, cursor, visibleViewRange, inSelectionMode) {\n        const viewLineNumber = cursor.viewState.position.lineNumber;\n        if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n            // Nothing to do, cursor is in viewport\n            return new CursorState(cursor.modelState, cursor.viewState);\n        }\n        else {\n            let newViewLineNumber;\n            if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n                newViewLineNumber = visibleViewRange.endLineNumber - 1;\n            }\n            else if (viewLineNumber < visibleViewRange.startLineNumber) {\n                newViewLineNumber = visibleViewRange.startLineNumber;\n            }\n            else {\n                newViewLineNumber = viewLineNumber;\n            }\n            const position = MoveOperations.vertical(viewModel.cursorConfig, viewModel, viewLineNumber, cursor.viewState.position.column, cursor.viewState.leftoverVisibleColumns, newViewLineNumber, false);\n            return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, position.lineNumber, position.column, position.leftoverVisibleColumns));\n        }\n    }\n    /**\n     * Find the nth line start included in the range (from the start).\n     */\n    static _firstLineNumberInRange(model, range, count) {\n        let startLineNumber = range.startLineNumber;\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n            // Move on to the second line if the first line start is not included in the range\n            startLineNumber++;\n        }\n        return Math.min(range.endLineNumber, startLineNumber + count - 1);\n    }\n    /**\n     * Find the nth line start included in the range (from the end).\n     */\n    static _lastLineNumberInRange(model, range, count) {\n        let startLineNumber = range.startLineNumber;\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n            // Move on to the second line if the first line start is not included in the range\n            startLineNumber++;\n        }\n        return Math.max(startLineNumber, range.endLineNumber - count + 1);\n    }\n    static _moveLeft(viewModel, cursors, inSelectionMode, noOfColumns) {\n        return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)));\n    }\n    static _moveHalfLineLeft(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const halfLine = Math.round(viewModel.getLineLength(viewLineNumber) / 2);\n            result[i] = CursorState.fromViewState(MoveOperations.moveLeft(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n        }\n        return result;\n    }\n    static _moveRight(viewModel, cursors, inSelectionMode, noOfColumns) {\n        return cursors.map(cursor => CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, noOfColumns)));\n    }\n    static _moveHalfLineRight(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const halfLine = Math.round(viewModel.getLineLength(viewLineNumber) / 2);\n            result[i] = CursorState.fromViewState(MoveOperations.moveRight(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, halfLine));\n        }\n        return result;\n    }\n    static _moveDownByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromViewState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveDownByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveDown(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveUpByViewLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromViewState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel, cursor.viewState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveUpByModelLines(viewModel, cursors, inSelectionMode, linesCount) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            result[i] = CursorState.fromModelState(MoveOperations.moveUp(viewModel.cursorConfig, viewModel.model, cursor.modelState, inSelectionMode, linesCount));\n        }\n        return result;\n    }\n    static _moveToViewPosition(viewModel, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n    }\n    static _moveToModelPosition(viewModel, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n        return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n    }\n    static _moveToViewMinColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineMinColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewFirstNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewCenterColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = Math.round((viewModel.getLineMaxColumn(viewLineNumber) + viewModel.getLineMinColumn(viewLineNumber)) / 2);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewMaxColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineMaxColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n    static _moveToViewLastNonWhitespaceColumn(viewModel, cursors, inSelectionMode) {\n        const result = [];\n        for (let i = 0, len = cursors.length; i < len; i++) {\n            const cursor = cursors[i];\n            const viewLineNumber = cursor.viewState.position.lineNumber;\n            const viewColumn = viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n            result[i] = this._moveToViewPosition(viewModel, cursor, inSelectionMode, viewLineNumber, viewColumn);\n        }\n        return result;\n    }\n}\nexport var CursorMove;\n(function (CursorMove) {\n    const isCursorMoveArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const cursorMoveArg = arg;\n        if (!types.isString(cursorMoveArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n            return false;\n        }\n        return true;\n    };\n    CursorMove.metadata = {\n        description: 'Move cursor to a logical position in the view',\n        args: [\n            {\n                name: 'Cursor move argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory logical position value providing where to move the cursor.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine',\n\t\t\t\t\t\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\n\t\t\t\t\t\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\n\t\t\t\t\t\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'character', 'halfLine'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'select': If 'true' makes the selection. Default is 'false'.\n\t\t\t\t`,\n                constraint: isCursorMoveArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['left', 'right', 'up', 'down', 'prevBlankLine', 'nextBlankLine', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'select': {\n                            'type': 'boolean',\n                            'default': false\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Positions in the view for cursor move command.\n     */\n    CursorMove.RawDirection = {\n        Left: 'left',\n        Right: 'right',\n        Up: 'up',\n        Down: 'down',\n        PrevBlankLine: 'prevBlankLine',\n        NextBlankLine: 'nextBlankLine',\n        WrappedLineStart: 'wrappedLineStart',\n        WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n        WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n        WrappedLineEnd: 'wrappedLineEnd',\n        WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n        ViewPortTop: 'viewPortTop',\n        ViewPortCenter: 'viewPortCenter',\n        ViewPortBottom: 'viewPortBottom',\n        ViewPortIfOutside: 'viewPortIfOutside'\n    };\n    /**\n     * Units for Cursor move 'by' argument\n     */\n    CursorMove.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Character: 'character',\n        HalfLine: 'halfLine'\n    };\n    function parse(args) {\n        if (!args.to) {\n            // illegal arguments\n            return null;\n        }\n        let direction;\n        switch (args.to) {\n            case CursorMove.RawDirection.Left:\n                direction = 0 /* Direction.Left */;\n                break;\n            case CursorMove.RawDirection.Right:\n                direction = 1 /* Direction.Right */;\n                break;\n            case CursorMove.RawDirection.Up:\n                direction = 2 /* Direction.Up */;\n                break;\n            case CursorMove.RawDirection.Down:\n                direction = 3 /* Direction.Down */;\n                break;\n            case CursorMove.RawDirection.PrevBlankLine:\n                direction = 4 /* Direction.PrevBlankLine */;\n                break;\n            case CursorMove.RawDirection.NextBlankLine:\n                direction = 5 /* Direction.NextBlankLine */;\n                break;\n            case CursorMove.RawDirection.WrappedLineStart:\n                direction = 6 /* Direction.WrappedLineStart */;\n                break;\n            case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n                direction = 7 /* Direction.WrappedLineFirstNonWhitespaceCharacter */;\n                break;\n            case CursorMove.RawDirection.WrappedLineColumnCenter:\n                direction = 8 /* Direction.WrappedLineColumnCenter */;\n                break;\n            case CursorMove.RawDirection.WrappedLineEnd:\n                direction = 9 /* Direction.WrappedLineEnd */;\n                break;\n            case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n                direction = 10 /* Direction.WrappedLineLastNonWhitespaceCharacter */;\n                break;\n            case CursorMove.RawDirection.ViewPortTop:\n                direction = 11 /* Direction.ViewPortTop */;\n                break;\n            case CursorMove.RawDirection.ViewPortBottom:\n                direction = 13 /* Direction.ViewPortBottom */;\n                break;\n            case CursorMove.RawDirection.ViewPortCenter:\n                direction = 12 /* Direction.ViewPortCenter */;\n                break;\n            case CursorMove.RawDirection.ViewPortIfOutside:\n                direction = 14 /* Direction.ViewPortIfOutside */;\n                break;\n            default:\n                // illegal arguments\n                return null;\n        }\n        let unit = 0 /* Unit.None */;\n        switch (args.by) {\n            case CursorMove.RawUnit.Line:\n                unit = 1 /* Unit.Line */;\n                break;\n            case CursorMove.RawUnit.WrappedLine:\n                unit = 2 /* Unit.WrappedLine */;\n                break;\n            case CursorMove.RawUnit.Character:\n                unit = 3 /* Unit.Character */;\n                break;\n            case CursorMove.RawUnit.HalfLine:\n                unit = 4 /* Unit.HalfLine */;\n                break;\n        }\n        return {\n            direction: direction,\n            unit: unit,\n            select: (!!args.select),\n            value: (args.value || 1)\n        };\n    }\n    CursorMove.parse = parse;\n})(CursorMove || (CursorMove = {}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}