{"ast":null,"code":"import _get from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\nvar SMOOTH_SCROLLING_TIME = 125;\nvar EditorScrollDimensions = /*#__PURE__*/function () {\n  function EditorScrollDimensions(width, contentWidth, height, contentHeight) {\n    _classCallCheck(this, EditorScrollDimensions);\n    width = width | 0;\n    contentWidth = contentWidth | 0;\n    height = height | 0;\n    contentHeight = contentHeight | 0;\n    if (width < 0) {\n      width = 0;\n    }\n    if (contentWidth < 0) {\n      contentWidth = 0;\n    }\n    if (height < 0) {\n      height = 0;\n    }\n    if (contentHeight < 0) {\n      contentHeight = 0;\n    }\n    this.width = width;\n    this.contentWidth = contentWidth;\n    this.scrollWidth = Math.max(width, contentWidth);\n    this.height = height;\n    this.contentHeight = contentHeight;\n    this.scrollHeight = Math.max(height, contentHeight);\n  }\n  return _createClass(EditorScrollDimensions, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return this.width === other.width && this.contentWidth === other.contentWidth && this.height === other.height && this.contentHeight === other.contentHeight;\n    }\n  }]);\n}();\nvar EditorScrollable = /*#__PURE__*/function (_Disposable) {\n  function EditorScrollable(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n    var _this;\n    _classCallCheck(this, EditorScrollable);\n    _this = _callSuper(this, EditorScrollable);\n    _this._onDidContentSizeChange = _this._register(new Emitter());\n    _this.onDidContentSizeChange = _this._onDidContentSizeChange.event;\n    _this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n    _this._scrollable = _this._register(new Scrollable({\n      forceIntegerValues: true,\n      smoothScrollDuration: smoothScrollDuration,\n      scheduleAtNextAnimationFrame: scheduleAtNextAnimationFrame\n    }));\n    _this.onDidScroll = _this._scrollable.onScroll;\n    return _this;\n  }\n  _inherits(EditorScrollable, _Disposable);\n  return _createClass(EditorScrollable, [{\n    key: \"getScrollable\",\n    value: function getScrollable() {\n      return this._scrollable;\n    }\n  }, {\n    key: \"setSmoothScrollDuration\",\n    value: function setSmoothScrollDuration(smoothScrollDuration) {\n      this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n  }, {\n    key: \"validateScrollPosition\",\n    value: function validateScrollPosition(scrollPosition) {\n      return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n  }, {\n    key: \"getScrollDimensions\",\n    value: function getScrollDimensions() {\n      return this._dimensions;\n    }\n  }, {\n    key: \"setScrollDimensions\",\n    value: function setScrollDimensions(dimensions) {\n      if (this._dimensions.equals(dimensions)) {\n        return;\n      }\n      var oldDimensions = this._dimensions;\n      this._dimensions = dimensions;\n      this._scrollable.setScrollDimensions({\n        width: dimensions.width,\n        scrollWidth: dimensions.scrollWidth,\n        height: dimensions.height,\n        scrollHeight: dimensions.scrollHeight\n      }, true);\n      var contentWidthChanged = oldDimensions.contentWidth !== dimensions.contentWidth;\n      var contentHeightChanged = oldDimensions.contentHeight !== dimensions.contentHeight;\n      if (contentWidthChanged || contentHeightChanged) {\n        this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n      }\n    }\n  }, {\n    key: \"getFutureScrollPosition\",\n    value: function getFutureScrollPosition() {\n      return this._scrollable.getFutureScrollPosition();\n    }\n  }, {\n    key: \"getCurrentScrollPosition\",\n    value: function getCurrentScrollPosition() {\n      return this._scrollable.getCurrentScrollPosition();\n    }\n  }, {\n    key: \"setScrollPositionNow\",\n    value: function setScrollPositionNow(update) {\n      this._scrollable.setScrollPositionNow(update);\n    }\n  }, {\n    key: \"setScrollPositionSmooth\",\n    value: function setScrollPositionSmooth(update) {\n      this._scrollable.setScrollPositionSmooth(update);\n    }\n  }, {\n    key: \"hasPendingScrollAnimation\",\n    value: function hasPendingScrollAnimation() {\n      return this._scrollable.hasPendingScrollAnimation();\n    }\n  }]);\n}(Disposable);\nexport var ViewLayout = /*#__PURE__*/function (_Disposable2) {\n  function ViewLayout(configuration, lineCount, scheduleAtNextAnimationFrame) {\n    var _this2;\n    _classCallCheck(this, ViewLayout);\n    _this2 = _callSuper(this, ViewLayout);\n    _this2._configuration = configuration;\n    var options = _this2._configuration.options;\n    var layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n    var padding = options.get(84 /* EditorOption.padding */);\n    _this2._linesLayout = new LinesLayout(lineCount, options.get(67 /* EditorOption.lineHeight */), padding.top, padding.bottom);\n    _this2._maxLineWidth = 0;\n    _this2._overlayWidgetsMinWidth = 0;\n    _this2._scrollable = _this2._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n    _this2._configureSmoothScrollDuration();\n    _this2._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n    _this2.onDidScroll = _this2._scrollable.onDidScroll;\n    _this2.onDidContentSizeChange = _this2._scrollable.onDidContentSizeChange;\n    _this2._updateHeight();\n    return _this2;\n  }\n  _inherits(ViewLayout, _Disposable2);\n  return _createClass(ViewLayout, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ViewLayout.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"getScrollable\",\n    value: function getScrollable() {\n      return this._scrollable.getScrollable();\n    }\n  }, {\n    key: \"onHeightMaybeChanged\",\n    value: function onHeightMaybeChanged() {\n      this._updateHeight();\n    }\n  }, {\n    key: \"_configureSmoothScrollDuration\",\n    value: function _configureSmoothScrollDuration() {\n      this._scrollable.setSmoothScrollDuration(this._configuration.options.get(114 /* EditorOption.smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n    }\n    // ---- begin view event handlers\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      var options = this._configuration.options;\n      if (e.hasChanged(67 /* EditorOption.lineHeight */)) {\n        this._linesLayout.setLineHeight(options.get(67 /* EditorOption.lineHeight */));\n      }\n      if (e.hasChanged(84 /* EditorOption.padding */)) {\n        var padding = options.get(84 /* EditorOption.padding */);\n        this._linesLayout.setPadding(padding.top, padding.bottom);\n      }\n      if (e.hasChanged(145 /* EditorOption.layoutInfo */)) {\n        var layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        var width = layoutInfo.contentWidth;\n        var height = layoutInfo.height;\n        var scrollDimensions = this._scrollable.getScrollDimensions();\n        var contentWidth = scrollDimensions.contentWidth;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n      } else {\n        this._updateHeight();\n      }\n      if (e.hasChanged(114 /* EditorOption.smoothScrolling */)) {\n        this._configureSmoothScrollDuration();\n      }\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(lineCount) {\n      this._linesLayout.onFlushed(lineCount);\n    }\n  }, {\n    key: \"onLinesDeleted\",\n    value: function onLinesDeleted(fromLineNumber, toLineNumber) {\n      this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n  }, {\n    key: \"onLinesInserted\",\n    value: function onLinesInserted(fromLineNumber, toLineNumber) {\n      this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    }\n    // ---- end view event handlers\n  }, {\n    key: \"_getHorizontalScrollbarHeight\",\n    value: function _getHorizontalScrollbarHeight(width, scrollWidth) {\n      var options = this._configuration.options;\n      var scrollbar = options.get(103 /* EditorOption.scrollbar */);\n      if (scrollbar.horizontal === 2 /* ScrollbarVisibility.Hidden */) {\n        // horizontal scrollbar not visible\n        return 0;\n      }\n      if (width >= scrollWidth) {\n        // horizontal scrollbar not visible\n        return 0;\n      }\n      return scrollbar.horizontalScrollbarSize;\n    }\n  }, {\n    key: \"_getContentHeight\",\n    value: function _getContentHeight(width, height, contentWidth) {\n      var options = this._configuration.options;\n      var result = this._linesLayout.getLinesTotalHeight();\n      if (options.get(105 /* EditorOption.scrollBeyondLastLine */)) {\n        result += Math.max(0, height - options.get(67 /* EditorOption.lineHeight */) - options.get(84 /* EditorOption.padding */).bottom);\n      } else if (!options.get(103 /* EditorOption.scrollbar */).ignoreHorizontalScrollbarInContentHeight) {\n        result += this._getHorizontalScrollbarHeight(width, contentWidth);\n      }\n      return result;\n    }\n  }, {\n    key: \"_updateHeight\",\n    value: function _updateHeight() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n      var width = scrollDimensions.width;\n      var height = scrollDimensions.height;\n      var contentWidth = scrollDimensions.contentWidth;\n      this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    }\n    // ---- Layouting logic\n  }, {\n    key: \"getCurrentViewport\",\n    value: function getCurrentViewport() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n      var currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n      return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n  }, {\n    key: \"getFutureViewport\",\n    value: function getFutureViewport() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n      var currentScrollPosition = this._scrollable.getFutureScrollPosition();\n      return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n  }, {\n    key: \"_computeContentWidth\",\n    value: function _computeContentWidth() {\n      var options = this._configuration.options;\n      var maxLineWidth = this._maxLineWidth;\n      var wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n      var fontInfo = options.get(50 /* EditorOption.fontInfo */);\n      var layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n      if (wrappingInfo.isViewportWrapping) {\n        var minimap = options.get(73 /* EditorOption.minimap */);\n        if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n          // This is a case where viewport wrapping is on, but the line extends above the viewport\n          if (minimap.enabled && minimap.side === 'right') {\n            // We need to accomodate the scrollbar width\n            return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n          }\n        }\n        return maxLineWidth;\n      } else {\n        var extraHorizontalSpace = options.get(104 /* EditorOption.scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n        var whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n        return Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth, this._overlayWidgetsMinWidth);\n      }\n    }\n  }, {\n    key: \"setMaxLineWidth\",\n    value: function setMaxLineWidth(maxLineWidth) {\n      this._maxLineWidth = maxLineWidth;\n      this._updateContentWidth();\n    }\n  }, {\n    key: \"setOverlayWidgetsMinWidth\",\n    value: function setOverlayWidgetsMinWidth(maxMinWidth) {\n      this._overlayWidgetsMinWidth = maxMinWidth;\n      this._updateContentWidth();\n    }\n  }, {\n    key: \"_updateContentWidth\",\n    value: function _updateContentWidth() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n      this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(), scrollDimensions.height, scrollDimensions.contentHeight));\n      // The height might depend on the fact that there is a horizontal scrollbar or not\n      this._updateHeight();\n    }\n    // ---- view state\n  }, {\n    key: \"saveState\",\n    value: function saveState() {\n      var currentScrollPosition = this._scrollable.getFutureScrollPosition();\n      var scrollTop = currentScrollPosition.scrollTop;\n      var firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n      var whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n      return {\n        scrollTop: scrollTop,\n        scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n        scrollLeft: currentScrollPosition.scrollLeft\n      };\n    }\n    // ----\n  }, {\n    key: \"changeWhitespace\",\n    value: function changeWhitespace(callback) {\n      var hadAChange = this._linesLayout.changeWhitespace(callback);\n      if (hadAChange) {\n        this.onHeightMaybeChanged();\n      }\n      return hadAChange;\n    }\n  }, {\n    key: \"getVerticalOffsetForLineNumber\",\n    value: function getVerticalOffsetForLineNumber(lineNumber) {\n      var includeViewZones = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n    }\n  }, {\n    key: \"getVerticalOffsetAfterLineNumber\",\n    value: function getVerticalOffsetAfterLineNumber(lineNumber) {\n      var includeViewZones = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n    }\n  }, {\n    key: \"isAfterLines\",\n    value: function isAfterLines(verticalOffset) {\n      return this._linesLayout.isAfterLines(verticalOffset);\n    }\n  }, {\n    key: \"isInTopPadding\",\n    value: function isInTopPadding(verticalOffset) {\n      return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n  }, {\n    key: \"isInBottomPadding\",\n    value: function isInBottomPadding(verticalOffset) {\n      return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n  }, {\n    key: \"getLineNumberAtVerticalOffset\",\n    value: function getLineNumberAtVerticalOffset(verticalOffset) {\n      return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n  }, {\n    key: \"getWhitespaceAtVerticalOffset\",\n    value: function getWhitespaceAtVerticalOffset(verticalOffset) {\n      return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n  }, {\n    key: \"getLinesViewportData\",\n    value: function getLinesViewportData() {\n      var visibleBox = this.getCurrentViewport();\n      return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n  }, {\n    key: \"getLinesViewportDataAtScrollTop\",\n    value: function getLinesViewportDataAtScrollTop(scrollTop) {\n      // do some minimal validations on scrollTop\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n      if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n        scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n      }\n      if (scrollTop < 0) {\n        scrollTop = 0;\n      }\n      return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n  }, {\n    key: \"getWhitespaceViewportData\",\n    value: function getWhitespaceViewportData() {\n      var visibleBox = this.getCurrentViewport();\n      return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n  }, {\n    key: \"getWhitespaces\",\n    value: function getWhitespaces() {\n      return this._linesLayout.getWhitespaces();\n    }\n    // ----\n  }, {\n    key: \"getContentWidth\",\n    value: function getContentWidth() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n      return scrollDimensions.contentWidth;\n    }\n  }, {\n    key: \"getScrollWidth\",\n    value: function getScrollWidth() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n      return scrollDimensions.scrollWidth;\n    }\n  }, {\n    key: \"getContentHeight\",\n    value: function getContentHeight() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n      return scrollDimensions.contentHeight;\n    }\n  }, {\n    key: \"getScrollHeight\",\n    value: function getScrollHeight() {\n      var scrollDimensions = this._scrollable.getScrollDimensions();\n      return scrollDimensions.scrollHeight;\n    }\n  }, {\n    key: \"getCurrentScrollLeft\",\n    value: function getCurrentScrollLeft() {\n      var currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n      return currentScrollPosition.scrollLeft;\n    }\n  }, {\n    key: \"getCurrentScrollTop\",\n    value: function getCurrentScrollTop() {\n      var currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n      return currentScrollPosition.scrollTop;\n    }\n  }, {\n    key: \"validateScrollPosition\",\n    value: function validateScrollPosition(scrollPosition) {\n      return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n  }, {\n    key: \"setScrollPosition\",\n    value: function setScrollPosition(position, type) {\n      if (type === 1 /* ScrollType.Immediate */) {\n        this._scrollable.setScrollPositionNow(position);\n      } else {\n        this._scrollable.setScrollPositionSmooth(position);\n      }\n    }\n  }, {\n    key: \"hasPendingScrollAnimation\",\n    value: function hasPendingScrollAnimation() {\n      return this._scrollable.hasPendingScrollAnimation();\n    }\n  }, {\n    key: \"deltaScrollNow\",\n    value: function deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n      var currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n      this._scrollable.setScrollPositionNow({\n        scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n        scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n      });\n    }\n  }]);\n}(Disposable);","map":{"version":3,"names":["Emitter","Disposable","Scrollable","LinesLayout","Viewport","ContentSizeChangedEvent","SMOOTH_SCROLLING_TIME","EditorScrollDimensions","width","contentWidth","height","contentHeight","_classCallCheck","scrollWidth","Math","max","scrollHeight","_createClass","key","value","equals","other","EditorScrollable","_Disposable","smoothScrollDuration","scheduleAtNextAnimationFrame","_this","_callSuper","_onDidContentSizeChange","_register","onDidContentSizeChange","event","_dimensions","_scrollable","forceIntegerValues","onDidScroll","onScroll","_inherits","getScrollable","setSmoothScrollDuration","validateScrollPosition","scrollPosition","getScrollDimensions","setScrollDimensions","dimensions","oldDimensions","contentWidthChanged","contentHeightChanged","fire","getFutureScrollPosition","getCurrentScrollPosition","setScrollPositionNow","update","setScrollPositionSmooth","hasPendingScrollAnimation","ViewLayout","_Disposable2","configuration","lineCount","_this2","_configuration","options","layoutInfo","get","padding","_linesLayout","top","bottom","_maxLineWidth","_overlayWidgetsMinWidth","_configureSmoothScrollDuration","_updateHeight","dispose","_get","_getPrototypeOf","prototype","call","onHeightMaybeChanged","onConfigurationChanged","e","hasChanged","setLineHeight","setPadding","scrollDimensions","_getContentHeight","onFlushed","onLinesDeleted","fromLineNumber","toLineNumber","onLinesInserted","_getHorizontalScrollbarHeight","scrollbar","horizontal","horizontalScrollbarSize","result","getLinesTotalHeight","ignoreHorizontalScrollbarInContentHeight","getCurrentViewport","currentScrollPosition","scrollTop","scrollLeft","getFutureViewport","_computeContentWidth","maxLineWidth","wrappingInfo","fontInfo","isViewportWrapping","minimap","typicalHalfwidthCharacterWidth","enabled","side","verticalScrollbarWidth","extraHorizontalSpace","whitespaceMinWidth","getWhitespaceMinWidth","setMaxLineWidth","_updateContentWidth","setOverlayWidgetsMinWidth","maxMinWidth","saveState","firstLineNumberInViewport","getLineNumberAtOrAfterVerticalOffset","whitespaceAboveFirstLine","getWhitespaceAccumulatedHeightBeforeLineNumber","scrollTopWithoutViewZones","changeWhitespace","callback","hadAChange","getVerticalOffsetForLineNumber","lineNumber","includeViewZones","arguments","length","undefined","getVerticalOffsetAfterLineNumber","isAfterLines","verticalOffset","isInTopPadding","isInBottomPadding","getLineNumberAtVerticalOffset","getWhitespaceAtVerticalOffset","getLinesViewportData","visibleBox","getLinesViewportDataAtScrollTop","getWhitespaceViewportData","getWhitespaces","getContentWidth","getScrollWidth","getContentHeight","getScrollHeight","getCurrentScrollLeft","getCurrentScrollTop","setScrollPosition","position","type","deltaScrollNow","deltaScrollLeft","deltaScrollTop"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/viewLayout/viewLayout.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel.js';\nimport { ContentSizeChangedEvent } from '../viewModelEventDispatcher.js';\nconst SMOOTH_SCROLLING_TIME = 125;\nclass EditorScrollDimensions {\n    constructor(width, contentWidth, height, contentHeight) {\n        width = width | 0;\n        contentWidth = contentWidth | 0;\n        height = height | 0;\n        contentHeight = contentHeight | 0;\n        if (width < 0) {\n            width = 0;\n        }\n        if (contentWidth < 0) {\n            contentWidth = 0;\n        }\n        if (height < 0) {\n            height = 0;\n        }\n        if (contentHeight < 0) {\n            contentHeight = 0;\n        }\n        this.width = width;\n        this.contentWidth = contentWidth;\n        this.scrollWidth = Math.max(width, contentWidth);\n        this.height = height;\n        this.contentHeight = contentHeight;\n        this.scrollHeight = Math.max(height, contentHeight);\n    }\n    equals(other) {\n        return (this.width === other.width\n            && this.contentWidth === other.contentWidth\n            && this.height === other.height\n            && this.contentHeight === other.contentHeight);\n    }\n}\nclass EditorScrollable extends Disposable {\n    constructor(smoothScrollDuration, scheduleAtNextAnimationFrame) {\n        super();\n        this._onDidContentSizeChange = this._register(new Emitter());\n        this.onDidContentSizeChange = this._onDidContentSizeChange.event;\n        this._dimensions = new EditorScrollDimensions(0, 0, 0, 0);\n        this._scrollable = this._register(new Scrollable({\n            forceIntegerValues: true,\n            smoothScrollDuration,\n            scheduleAtNextAnimationFrame\n        }));\n        this.onDidScroll = this._scrollable.onScroll;\n    }\n    getScrollable() {\n        return this._scrollable;\n    }\n    setSmoothScrollDuration(smoothScrollDuration) {\n        this._scrollable.setSmoothScrollDuration(smoothScrollDuration);\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    getScrollDimensions() {\n        return this._dimensions;\n    }\n    setScrollDimensions(dimensions) {\n        if (this._dimensions.equals(dimensions)) {\n            return;\n        }\n        const oldDimensions = this._dimensions;\n        this._dimensions = dimensions;\n        this._scrollable.setScrollDimensions({\n            width: dimensions.width,\n            scrollWidth: dimensions.scrollWidth,\n            height: dimensions.height,\n            scrollHeight: dimensions.scrollHeight\n        }, true);\n        const contentWidthChanged = (oldDimensions.contentWidth !== dimensions.contentWidth);\n        const contentHeightChanged = (oldDimensions.contentHeight !== dimensions.contentHeight);\n        if (contentWidthChanged || contentHeightChanged) {\n            this._onDidContentSizeChange.fire(new ContentSizeChangedEvent(oldDimensions.contentWidth, oldDimensions.contentHeight, dimensions.contentWidth, dimensions.contentHeight));\n        }\n    }\n    getFutureScrollPosition() {\n        return this._scrollable.getFutureScrollPosition();\n    }\n    getCurrentScrollPosition() {\n        return this._scrollable.getCurrentScrollPosition();\n    }\n    setScrollPositionNow(update) {\n        this._scrollable.setScrollPositionNow(update);\n    }\n    setScrollPositionSmooth(update) {\n        this._scrollable.setScrollPositionSmooth(update);\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n}\nexport class ViewLayout extends Disposable {\n    constructor(configuration, lineCount, scheduleAtNextAnimationFrame) {\n        super();\n        this._configuration = configuration;\n        const options = this._configuration.options;\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        const padding = options.get(84 /* EditorOption.padding */);\n        this._linesLayout = new LinesLayout(lineCount, options.get(67 /* EditorOption.lineHeight */), padding.top, padding.bottom);\n        this._maxLineWidth = 0;\n        this._overlayWidgetsMinWidth = 0;\n        this._scrollable = this._register(new EditorScrollable(0, scheduleAtNextAnimationFrame));\n        this._configureSmoothScrollDuration();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(layoutInfo.contentWidth, 0, layoutInfo.height, 0));\n        this.onDidScroll = this._scrollable.onDidScroll;\n        this.onDidContentSizeChange = this._scrollable.onDidContentSizeChange;\n        this._updateHeight();\n    }\n    dispose() {\n        super.dispose();\n    }\n    getScrollable() {\n        return this._scrollable.getScrollable();\n    }\n    onHeightMaybeChanged() {\n        this._updateHeight();\n    }\n    _configureSmoothScrollDuration() {\n        this._scrollable.setSmoothScrollDuration(this._configuration.options.get(114 /* EditorOption.smoothScrolling */) ? SMOOTH_SCROLLING_TIME : 0);\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        const options = this._configuration.options;\n        if (e.hasChanged(67 /* EditorOption.lineHeight */)) {\n            this._linesLayout.setLineHeight(options.get(67 /* EditorOption.lineHeight */));\n        }\n        if (e.hasChanged(84 /* EditorOption.padding */)) {\n            const padding = options.get(84 /* EditorOption.padding */);\n            this._linesLayout.setPadding(padding.top, padding.bottom);\n        }\n        if (e.hasChanged(145 /* EditorOption.layoutInfo */)) {\n            const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n            const width = layoutInfo.contentWidth;\n            const height = layoutInfo.height;\n            const scrollDimensions = this._scrollable.getScrollDimensions();\n            const contentWidth = scrollDimensions.contentWidth;\n            this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n        }\n        else {\n            this._updateHeight();\n        }\n        if (e.hasChanged(114 /* EditorOption.smoothScrolling */)) {\n            this._configureSmoothScrollDuration();\n        }\n    }\n    onFlushed(lineCount) {\n        this._linesLayout.onFlushed(lineCount);\n    }\n    onLinesDeleted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n    }\n    onLinesInserted(fromLineNumber, toLineNumber) {\n        this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n    }\n    // ---- end view event handlers\n    _getHorizontalScrollbarHeight(width, scrollWidth) {\n        const options = this._configuration.options;\n        const scrollbar = options.get(103 /* EditorOption.scrollbar */);\n        if (scrollbar.horizontal === 2 /* ScrollbarVisibility.Hidden */) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        if (width >= scrollWidth) {\n            // horizontal scrollbar not visible\n            return 0;\n        }\n        return scrollbar.horizontalScrollbarSize;\n    }\n    _getContentHeight(width, height, contentWidth) {\n        const options = this._configuration.options;\n        let result = this._linesLayout.getLinesTotalHeight();\n        if (options.get(105 /* EditorOption.scrollBeyondLastLine */)) {\n            result += Math.max(0, height - options.get(67 /* EditorOption.lineHeight */) - options.get(84 /* EditorOption.padding */).bottom);\n        }\n        else if (!options.get(103 /* EditorOption.scrollbar */).ignoreHorizontalScrollbarInContentHeight) {\n            result += this._getHorizontalScrollbarHeight(width, contentWidth);\n        }\n        return result;\n    }\n    _updateHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const width = scrollDimensions.width;\n        const height = scrollDimensions.height;\n        const contentWidth = scrollDimensions.contentWidth;\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(width, scrollDimensions.contentWidth, height, this._getContentHeight(width, height, contentWidth)));\n    }\n    // ---- Layouting logic\n    getCurrentViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    getFutureViewport() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n    }\n    _computeContentWidth() {\n        const options = this._configuration.options;\n        const maxLineWidth = this._maxLineWidth;\n        const wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        if (wrappingInfo.isViewportWrapping) {\n            const minimap = options.get(73 /* EditorOption.minimap */);\n            if (maxLineWidth > layoutInfo.contentWidth + fontInfo.typicalHalfwidthCharacterWidth) {\n                // This is a case where viewport wrapping is on, but the line extends above the viewport\n                if (minimap.enabled && minimap.side === 'right') {\n                    // We need to accomodate the scrollbar width\n                    return maxLineWidth + layoutInfo.verticalScrollbarWidth;\n                }\n            }\n            return maxLineWidth;\n        }\n        else {\n            const extraHorizontalSpace = options.get(104 /* EditorOption.scrollBeyondLastColumn */) * fontInfo.typicalHalfwidthCharacterWidth;\n            const whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n            return Math.max(maxLineWidth + extraHorizontalSpace + layoutInfo.verticalScrollbarWidth, whitespaceMinWidth, this._overlayWidgetsMinWidth);\n        }\n    }\n    setMaxLineWidth(maxLineWidth) {\n        this._maxLineWidth = maxLineWidth;\n        this._updateContentWidth();\n    }\n    setOverlayWidgetsMinWidth(maxMinWidth) {\n        this._overlayWidgetsMinWidth = maxMinWidth;\n        this._updateContentWidth();\n    }\n    _updateContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        this._scrollable.setScrollDimensions(new EditorScrollDimensions(scrollDimensions.width, this._computeContentWidth(), scrollDimensions.height, scrollDimensions.contentHeight));\n        // The height might depend on the fact that there is a horizontal scrollbar or not\n        this._updateHeight();\n    }\n    // ---- view state\n    saveState() {\n        const currentScrollPosition = this._scrollable.getFutureScrollPosition();\n        const scrollTop = currentScrollPosition.scrollTop;\n        const firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n        const whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n        return {\n            scrollTop: scrollTop,\n            scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n            scrollLeft: currentScrollPosition.scrollLeft\n        };\n    }\n    // ----\n    changeWhitespace(callback) {\n        const hadAChange = this._linesLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this.onHeightMaybeChanged();\n        }\n        return hadAChange;\n    }\n    getVerticalOffsetForLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber, includeViewZones);\n    }\n    getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones = false) {\n        return this._linesLayout.getVerticalOffsetAfterLineNumber(lineNumber, includeViewZones);\n    }\n    isAfterLines(verticalOffset) {\n        return this._linesLayout.isAfterLines(verticalOffset);\n    }\n    isInTopPadding(verticalOffset) {\n        return this._linesLayout.isInTopPadding(verticalOffset);\n    }\n    isInBottomPadding(verticalOffset) {\n        return this._linesLayout.isInBottomPadding(verticalOffset);\n    }\n    getLineNumberAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n    }\n    getWhitespaceAtVerticalOffset(verticalOffset) {\n        return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n    }\n    getLinesViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getLinesViewportDataAtScrollTop(scrollTop) {\n        // do some minimal validations on scrollTop\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n            scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n        }\n        if (scrollTop < 0) {\n            scrollTop = 0;\n        }\n        return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n    }\n    getWhitespaceViewportData() {\n        const visibleBox = this.getCurrentViewport();\n        return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n    }\n    getWhitespaces() {\n        return this._linesLayout.getWhitespaces();\n    }\n    // ----\n    getContentWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentWidth;\n    }\n    getScrollWidth() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollWidth;\n    }\n    getContentHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.contentHeight;\n    }\n    getScrollHeight() {\n        const scrollDimensions = this._scrollable.getScrollDimensions();\n        return scrollDimensions.scrollHeight;\n    }\n    getCurrentScrollLeft() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollLeft;\n    }\n    getCurrentScrollTop() {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        return currentScrollPosition.scrollTop;\n    }\n    validateScrollPosition(scrollPosition) {\n        return this._scrollable.validateScrollPosition(scrollPosition);\n    }\n    setScrollPosition(position, type) {\n        if (type === 1 /* ScrollType.Immediate */) {\n            this._scrollable.setScrollPositionNow(position);\n        }\n        else {\n            this._scrollable.setScrollPositionSmooth(position);\n        }\n    }\n    hasPendingScrollAnimation() {\n        return this._scrollable.hasPendingScrollAnimation();\n    }\n    deltaScrollNow(deltaScrollLeft, deltaScrollTop) {\n        const currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n        this._scrollable.setScrollPositionNow({\n            scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n            scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}