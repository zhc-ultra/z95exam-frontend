{"ast":null,"code":"import _toConsumableArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _get from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.create.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nimport { GlyphMarginLanesModel } from './glyphLanesModel.js';\nvar USE_IDENTITY_LINES_COLLECTION = true;\nexport var ViewModel = /*#__PURE__*/function (_Disposable) {\n  function ViewModel(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService, _attachedView) {\n    var _this;\n    _classCallCheck(this, ViewModel);\n    _this = _callSuper(this, ViewModel);\n    _this.languageConfigurationService = languageConfigurationService;\n    _this._themeService = _themeService;\n    _this._attachedView = _attachedView;\n    _this.hiddenAreasModel = new HiddenAreasModel();\n    _this.previousHiddenAreas = [];\n    _this._editorId = editorId;\n    _this._configuration = configuration;\n    _this.model = model;\n    _this._eventDispatcher = new ViewModelEventDispatcher();\n    _this.onEvent = _this._eventDispatcher.onEvent;\n    _this.cursorConfig = new CursorConfiguration(_this.model.getLanguageId(), _this.model.getOptions(), _this._configuration, _this.languageConfigurationService);\n    _this._updateConfigurationViewLineCount = _this._register(new RunOnceScheduler(function () {\n      return _this._updateConfigurationViewLineCountNow();\n    }, 0));\n    _this._hasFocus = false;\n    _this._viewportStart = ViewportStart.create(_this.model);\n    _this.glyphLanes = new GlyphMarginLanesModel(0);\n    if (USE_IDENTITY_LINES_COLLECTION && _this.model.isTooLargeForTokenization()) {\n      _this._lines = new ViewModelLinesFromModelAsIs(_this.model);\n    } else {\n      var options = _this._configuration.options;\n      var fontInfo = options.get(50 /* EditorOption.fontInfo */);\n      var wrappingStrategy = options.get(139 /* EditorOption.wrappingStrategy */);\n      var wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n      var wrappingIndent = options.get(138 /* EditorOption.wrappingIndent */);\n      var wordBreak = options.get(129 /* EditorOption.wordBreak */);\n      _this._lines = new ViewModelLinesFromProjectedModel(_this._editorId, _this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, _this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak);\n    }\n    _this.coordinatesConverter = _this._lines.createCoordinatesConverter();\n    _this._cursor = _this._register(new CursorsController(model, _this, _this.coordinatesConverter, _this.cursorConfig));\n    _this.viewLayout = _this._register(new ViewLayout(_this._configuration, _this.getLineCount(), scheduleAtNextAnimationFrame));\n    _this._register(_this.viewLayout.onDidScroll(function (e) {\n      if (e.scrollTopChanged) {\n        _this._handleVisibleLinesChanged();\n      }\n      if (e.scrollTopChanged) {\n        _this._viewportStart.invalidate();\n      }\n      _this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n      _this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n    }));\n    _this._register(_this.viewLayout.onDidContentSizeChange(function (e) {\n      _this._eventDispatcher.emitOutgoingEvent(e);\n    }));\n    _this._decorations = new ViewModelDecorations(_this._editorId, _this.model, _this._configuration, _this._lines, _this.coordinatesConverter);\n    _this._registerModelEvents();\n    _this._register(_this._configuration.onDidChangeFast(function (e) {\n      try {\n        var eventsCollector = _this._eventDispatcher.beginEmitViewEvents();\n        _this._onConfigurationChanged(eventsCollector, e);\n      } finally {\n        _this._eventDispatcher.endEmitViewEvents();\n      }\n    }));\n    _this._register(MinimapTokensColorTracker.getInstance().onDidChange(function () {\n      _this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n    }));\n    _this._register(_this._themeService.onDidColorThemeChange(function (theme) {\n      _this._invalidateDecorationsColorCache();\n      _this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n    }));\n    _this._updateConfigurationViewLineCountNow();\n    return _this;\n  }\n  _inherits(ViewModel, _Disposable);\n  return _createClass(ViewModel, [{\n    key: \"dispose\",\n    value: function dispose() {\n      // First remove listeners, as disposing the lines might end up sending\n      // model decoration changed events ... and we no longer care about them ...\n      _get(_getPrototypeOf(ViewModel.prototype), \"dispose\", this).call(this);\n      this._decorations.dispose();\n      this._lines.dispose();\n      this._viewportStart.dispose();\n      this._eventDispatcher.dispose();\n    }\n  }, {\n    key: \"createLineBreaksComputer\",\n    value: function createLineBreaksComputer() {\n      return this._lines.createLineBreaksComputer();\n    }\n  }, {\n    key: \"addViewEventHandler\",\n    value: function addViewEventHandler(eventHandler) {\n      this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n  }, {\n    key: \"removeViewEventHandler\",\n    value: function removeViewEventHandler(eventHandler) {\n      this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n  }, {\n    key: \"_updateConfigurationViewLineCountNow\",\n    value: function _updateConfigurationViewLineCountNow() {\n      this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n  }, {\n    key: \"getModelVisibleRanges\",\n    value: function getModelVisibleRanges() {\n      var linesViewportData = this.viewLayout.getLinesViewportData();\n      var viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n      var modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n      return modelVisibleRanges;\n    }\n  }, {\n    key: \"visibleLinesStabilized\",\n    value: function visibleLinesStabilized() {\n      var modelVisibleRanges = this.getModelVisibleRanges();\n      this._attachedView.setVisibleLines(modelVisibleRanges, true);\n    }\n  }, {\n    key: \"_handleVisibleLinesChanged\",\n    value: function _handleVisibleLinesChanged() {\n      var modelVisibleRanges = this.getModelVisibleRanges();\n      this._attachedView.setVisibleLines(modelVisibleRanges, false);\n    }\n  }, {\n    key: \"setHasFocus\",\n    value: function setHasFocus(hasFocus) {\n      this._hasFocus = hasFocus;\n      this._cursor.setHasFocus(hasFocus);\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n      this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n  }, {\n    key: \"onCompositionStart\",\n    value: function onCompositionStart() {\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n  }, {\n    key: \"onCompositionEnd\",\n    value: function onCompositionEnd() {\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n  }, {\n    key: \"_captureStableViewport\",\n    value: function _captureStableViewport() {\n      // We might need to restore the current start view range, so save it (if available)\n      // But only if the scroll position is not at the top of the file\n      if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n        var previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n        var previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n        return new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n      }\n      return new StableViewport(null, 0);\n    }\n  }, {\n    key: \"_onConfigurationChanged\",\n    value: function _onConfigurationChanged(eventsCollector, e) {\n      var stableViewport = this._captureStableViewport();\n      var options = this._configuration.options;\n      var fontInfo = options.get(50 /* EditorOption.fontInfo */);\n      var wrappingStrategy = options.get(139 /* EditorOption.wrappingStrategy */);\n      var wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n      var wrappingIndent = options.get(138 /* EditorOption.wrappingIndent */);\n      var wordBreak = options.get(129 /* EditorOption.wordBreak */);\n      if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n        eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n        eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n        eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        this._cursor.onLineMappingChanged(eventsCollector);\n        this._decorations.onLineMappingChanged();\n        this.viewLayout.onFlushed(this.getLineCount());\n        this._updateConfigurationViewLineCount.schedule();\n      }\n      if (e.hasChanged(91 /* EditorOption.readOnly */)) {\n        // Must read again all decorations due to readOnly filtering\n        this._decorations.reset();\n        eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n      }\n      if (e.hasChanged(98 /* EditorOption.renderValidationDecorations */)) {\n        this._decorations.reset();\n        eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n      }\n      eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n      this.viewLayout.onConfigurationChanged(e);\n      stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n      if (CursorConfiguration.shouldRecreate(e)) {\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n        this._cursor.updateConfiguration(this.cursorConfig);\n      }\n    }\n  }, {\n    key: \"_registerModelEvents\",\n    value: function _registerModelEvents() {\n      var _this2 = this;\n      this._register(this.model.onDidChangeContentOrInjectedText(function (e) {\n        try {\n          var eventsCollector = _this2._eventDispatcher.beginEmitViewEvents();\n          var hadOtherModelChange = false;\n          var hadModelLineChangeThatChangedLineMapping = false;\n          var changes = e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes;\n          var versionId = e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null;\n          // Do a first pass to compute line mappings, and a second pass to actually interpret them\n          var lineBreaksComputer = _this2._lines.createLineBreaksComputer();\n          var _iterator = _createForOfIteratorHelper(changes),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var change = _step.value;\n              switch (change.changeType) {\n                case 4 /* textModelEvents.RawContentChangedType.LinesInserted */:\n                  {\n                    for (var lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                      var line = change.detail[lineIdx];\n                      var injectedText = change.injectedTexts[lineIdx];\n                      if (injectedText) {\n                        injectedText = injectedText.filter(function (element) {\n                          return !element.ownerId || element.ownerId === _this2._editorId;\n                        });\n                      }\n                      lineBreaksComputer.addRequest(line, injectedText, null);\n                    }\n                    break;\n                  }\n                case 2 /* textModelEvents.RawContentChangedType.LineChanged */:\n                  {\n                    var _injectedText = null;\n                    if (change.injectedText) {\n                      _injectedText = change.injectedText.filter(function (element) {\n                        return !element.ownerId || element.ownerId === _this2._editorId;\n                      });\n                    }\n                    lineBreaksComputer.addRequest(change.detail, _injectedText, null);\n                    break;\n                  }\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          var lineBreaks = lineBreaksComputer.finalize();\n          var lineBreakQueue = new ArrayQueue(lineBreaks);\n          var _iterator2 = _createForOfIteratorHelper(changes),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _change = _step2.value;\n              switch (_change.changeType) {\n                case 1 /* textModelEvents.RawContentChangedType.Flush */:\n                  {\n                    _this2._lines.onModelFlushed();\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                    _this2._decorations.reset();\n                    _this2.viewLayout.onFlushed(_this2.getLineCount());\n                    hadOtherModelChange = true;\n                    break;\n                  }\n                case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */:\n                  {\n                    var linesDeletedEvent = _this2._lines.onModelLinesDeleted(versionId, _change.fromLineNumber, _change.toLineNumber);\n                    if (linesDeletedEvent !== null) {\n                      eventsCollector.emitViewEvent(linesDeletedEvent);\n                      _this2.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                    }\n                    hadOtherModelChange = true;\n                    break;\n                  }\n                case 4 /* textModelEvents.RawContentChangedType.LinesInserted */:\n                  {\n                    var insertedLineBreaks = lineBreakQueue.takeCount(_change.detail.length);\n                    var linesInsertedEvent = _this2._lines.onModelLinesInserted(versionId, _change.fromLineNumber, _change.toLineNumber, insertedLineBreaks);\n                    if (linesInsertedEvent !== null) {\n                      eventsCollector.emitViewEvent(linesInsertedEvent);\n                      _this2.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                    }\n                    hadOtherModelChange = true;\n                    break;\n                  }\n                case 2 /* textModelEvents.RawContentChangedType.LineChanged */:\n                  {\n                    var changedLineBreakData = lineBreakQueue.dequeue();\n                    var _this2$_lines$onModel = _this2._lines.onModelLineChanged(versionId, _change.lineNumber, changedLineBreakData),\n                      _this2$_lines$onModel2 = _slicedToArray(_this2$_lines$onModel, 4),\n                      lineMappingChanged = _this2$_lines$onModel2[0],\n                      linesChangedEvent = _this2$_lines$onModel2[1],\n                      _linesInsertedEvent = _this2$_lines$onModel2[2],\n                      _linesDeletedEvent = _this2$_lines$onModel2[3];\n                    hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                    if (linesChangedEvent) {\n                      eventsCollector.emitViewEvent(linesChangedEvent);\n                    }\n                    if (_linesInsertedEvent) {\n                      eventsCollector.emitViewEvent(_linesInsertedEvent);\n                      _this2.viewLayout.onLinesInserted(_linesInsertedEvent.fromLineNumber, _linesInsertedEvent.toLineNumber);\n                    }\n                    if (_linesDeletedEvent) {\n                      eventsCollector.emitViewEvent(_linesDeletedEvent);\n                      _this2.viewLayout.onLinesDeleted(_linesDeletedEvent.fromLineNumber, _linesDeletedEvent.toLineNumber);\n                    }\n                    break;\n                  }\n                case 5 /* textModelEvents.RawContentChangedType.EOLChanged */:\n                  {\n                    // Nothing to do. The new version will be accepted below\n                    break;\n                  }\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          if (versionId !== null) {\n            _this2._lines.acceptVersionId(versionId);\n          }\n          _this2.viewLayout.onHeightMaybeChanged();\n          if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            _this2._cursor.onLineMappingChanged(eventsCollector);\n            _this2._decorations.onLineMappingChanged();\n          }\n        } finally {\n          _this2._eventDispatcher.endEmitViewEvents();\n        }\n        // Update the configuration and reset the centered view line\n        var viewportStartWasValid = _this2._viewportStart.isValid;\n        _this2._viewportStart.invalidate();\n        _this2._configuration.setModelLineCount(_this2.model.getLineCount());\n        _this2._updateConfigurationViewLineCountNow();\n        // Recover viewport\n        if (!_this2._hasFocus && _this2.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n          var modelRange = _this2.model._getTrackedRange(_this2._viewportStart.modelTrackedRange);\n          if (modelRange) {\n            var viewPosition = _this2.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n            var viewPositionTop = _this2.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            _this2.viewLayout.setScrollPosition({\n              scrollTop: viewPositionTop + _this2._viewportStart.startLineDelta\n            }, 1 /* ScrollType.Immediate */);\n          }\n        }\n        try {\n          var _eventsCollector = _this2._eventDispatcher.beginEmitViewEvents();\n          if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n            _eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n          }\n          _this2._cursor.onModelContentChanged(_eventsCollector, e);\n        } finally {\n          _this2._eventDispatcher.endEmitViewEvents();\n        }\n        _this2._handleVisibleLinesChanged();\n      }));\n      this._register(this.model.onDidChangeTokens(function (e) {\n        var viewRanges = [];\n        for (var j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n          var modelRange = e.ranges[j];\n          var viewStartLineNumber = _this2.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n          var viewEndLineNumber = _this2.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, _this2.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n          viewRanges[j] = {\n            fromLineNumber: viewStartLineNumber,\n            toLineNumber: viewEndLineNumber\n          };\n        }\n        _this2._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n        _this2._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n      }));\n      this._register(this.model.onDidChangeLanguageConfiguration(function (e) {\n        _this2._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n        _this2.cursorConfig = new CursorConfiguration(_this2.model.getLanguageId(), _this2.model.getOptions(), _this2._configuration, _this2.languageConfigurationService);\n        _this2._cursor.updateConfiguration(_this2.cursorConfig);\n        _this2._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n      }));\n      this._register(this.model.onDidChangeLanguage(function (e) {\n        _this2.cursorConfig = new CursorConfiguration(_this2.model.getLanguageId(), _this2.model.getOptions(), _this2._configuration, _this2.languageConfigurationService);\n        _this2._cursor.updateConfiguration(_this2.cursorConfig);\n        _this2._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n      }));\n      this._register(this.model.onDidChangeOptions(function (e) {\n        // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n        if (_this2._lines.setTabSize(_this2.model.getOptions().tabSize)) {\n          try {\n            var eventsCollector = _this2._eventDispatcher.beginEmitViewEvents();\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            _this2._cursor.onLineMappingChanged(eventsCollector);\n            _this2._decorations.onLineMappingChanged();\n            _this2.viewLayout.onFlushed(_this2.getLineCount());\n          } finally {\n            _this2._eventDispatcher.endEmitViewEvents();\n          }\n          _this2._updateConfigurationViewLineCount.schedule();\n        }\n        _this2.cursorConfig = new CursorConfiguration(_this2.model.getLanguageId(), _this2.model.getOptions(), _this2._configuration, _this2.languageConfigurationService);\n        _this2._cursor.updateConfiguration(_this2.cursorConfig);\n        _this2._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n      }));\n      this._register(this.model.onDidChangeDecorations(function (e) {\n        _this2._decorations.onModelDecorationsChanged();\n        _this2._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n        _this2._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n      }));\n    }\n  }, {\n    key: \"setHiddenAreas\",\n    value: function setHiddenAreas(ranges, source) {\n      var _a;\n      this.hiddenAreasModel.setHiddenAreas(source, ranges);\n      var mergedRanges = this.hiddenAreasModel.getMergedRanges();\n      if (mergedRanges === this.previousHiddenAreas) {\n        return;\n      }\n      this.previousHiddenAreas = mergedRanges;\n      var stableViewport = this._captureStableViewport();\n      var lineMappingChanged = false;\n      try {\n        var eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n        lineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n        if (lineMappingChanged) {\n          eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n          eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n          eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n          this._cursor.onLineMappingChanged(eventsCollector);\n          this._decorations.onLineMappingChanged();\n          this.viewLayout.onFlushed(this.getLineCount());\n          this.viewLayout.onHeightMaybeChanged();\n        }\n        var firstModelLineInViewPort = (_a = stableViewport.viewportStartModelPosition) === null || _a === void 0 ? void 0 : _a.lineNumber;\n        var firstModelLineIsHidden = firstModelLineInViewPort && mergedRanges.some(function (range) {\n          return range.startLineNumber <= firstModelLineInViewPort && firstModelLineInViewPort <= range.endLineNumber;\n        });\n        if (!firstModelLineIsHidden) {\n          stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        }\n      } finally {\n        this._eventDispatcher.endEmitViewEvents();\n      }\n      this._updateConfigurationViewLineCount.schedule();\n      if (lineMappingChanged) {\n        this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n      }\n    }\n  }, {\n    key: \"getVisibleRangesPlusViewportAboveBelow\",\n    value: function getVisibleRangesPlusViewportAboveBelow() {\n      var layoutInfo = this._configuration.options.get(145 /* EditorOption.layoutInfo */);\n      var lineHeight = this._configuration.options.get(67 /* EditorOption.lineHeight */);\n      var linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n      var partialData = this.viewLayout.getLinesViewportData();\n      var startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n      var endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n      return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n  }, {\n    key: \"getVisibleRanges\",\n    value: function getVisibleRanges() {\n      var visibleViewRange = this.getCompletelyVisibleViewRange();\n      return this._toModelVisibleRanges(visibleViewRange);\n    }\n  }, {\n    key: \"getHiddenAreas\",\n    value: function getHiddenAreas() {\n      return this._lines.getHiddenAreas();\n    }\n  }, {\n    key: \"_toModelVisibleRanges\",\n    value: function _toModelVisibleRanges(visibleViewRange) {\n      var visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n      var hiddenAreas = this._lines.getHiddenAreas();\n      if (hiddenAreas.length === 0) {\n        return [visibleRange];\n      }\n      var result = [];\n      var resultLen = 0;\n      var startLineNumber = visibleRange.startLineNumber;\n      var startColumn = visibleRange.startColumn;\n      var endLineNumber = visibleRange.endLineNumber;\n      var endColumn = visibleRange.endColumn;\n      for (var i = 0, len = hiddenAreas.length; i < len; i++) {\n        var hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n        var hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n        if (hiddenEndLineNumber < startLineNumber) {\n          continue;\n        }\n        if (hiddenStartLineNumber > endLineNumber) {\n          continue;\n        }\n        if (startLineNumber < hiddenStartLineNumber) {\n          result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n        }\n        startLineNumber = hiddenEndLineNumber + 1;\n        startColumn = 1;\n      }\n      if (startLineNumber < endLineNumber || startLineNumber === endLineNumber && startColumn < endColumn) {\n        result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n      }\n      return result;\n    }\n  }, {\n    key: \"getCompletelyVisibleViewRange\",\n    value: function getCompletelyVisibleViewRange() {\n      var partialData = this.viewLayout.getLinesViewportData();\n      var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n      var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n      return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n  }, {\n    key: \"getCompletelyVisibleViewRangeAtScrollTop\",\n    value: function getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n      var partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n      var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n      var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n      return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n  }, {\n    key: \"saveState\",\n    value: function saveState() {\n      var compatViewState = this.viewLayout.saveState();\n      var scrollTop = compatViewState.scrollTop;\n      var firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n      var firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n      var firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n      return {\n        scrollLeft: compatViewState.scrollLeft,\n        firstPosition: firstPosition,\n        firstPositionDeltaTop: firstPositionDeltaTop\n      };\n    }\n  }, {\n    key: \"reduceRestoreState\",\n    value: function reduceRestoreState(state) {\n      if (typeof state.firstPosition === 'undefined') {\n        // This is a view state serialized by an older version\n        return this._reduceRestoreStateCompatibility(state);\n      }\n      var modelPosition = this.model.validatePosition(state.firstPosition);\n      var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n      var scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n      return {\n        scrollLeft: state.scrollLeft,\n        scrollTop: scrollTop\n      };\n    }\n  }, {\n    key: \"_reduceRestoreStateCompatibility\",\n    value: function _reduceRestoreStateCompatibility(state) {\n      return {\n        scrollLeft: state.scrollLeft,\n        scrollTop: state.scrollTopWithoutViewZones\n      };\n    }\n  }, {\n    key: \"getTabSize\",\n    value: function getTabSize() {\n      return this.model.getOptions().tabSize;\n    }\n  }, {\n    key: \"getLineCount\",\n    value: function getLineCount() {\n      return this._lines.getViewLineCount();\n    }\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n  }, {\n    key: \"setViewport\",\n    value: function setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n      this._viewportStart.update(this, startLineNumber);\n    }\n  }, {\n    key: \"getActiveIndentGuide\",\n    value: function getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n      return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n  }, {\n    key: \"getLinesIndentGuides\",\n    value: function getLinesIndentGuides(startLineNumber, endLineNumber) {\n      return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n  }, {\n    key: \"getBracketGuidesInRangeByLine\",\n    value: function getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n      return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n    }\n  }, {\n    key: \"getLineContent\",\n    value: function getLineContent(lineNumber) {\n      return this._lines.getViewLineContent(lineNumber);\n    }\n  }, {\n    key: \"getLineLength\",\n    value: function getLineLength(lineNumber) {\n      return this._lines.getViewLineLength(lineNumber);\n    }\n  }, {\n    key: \"getLineMinColumn\",\n    value: function getLineMinColumn(lineNumber) {\n      return this._lines.getViewLineMinColumn(lineNumber);\n    }\n  }, {\n    key: \"getLineMaxColumn\",\n    value: function getLineMaxColumn(lineNumber) {\n      return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n  }, {\n    key: \"getLineFirstNonWhitespaceColumn\",\n    value: function getLineFirstNonWhitespaceColumn(lineNumber) {\n      var result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n      if (result === -1) {\n        return 0;\n      }\n      return result + 1;\n    }\n  }, {\n    key: \"getLineLastNonWhitespaceColumn\",\n    value: function getLineLastNonWhitespaceColumn(lineNumber) {\n      var result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n      if (result === -1) {\n        return 0;\n      }\n      return result + 2;\n    }\n  }, {\n    key: \"getMinimapDecorationsInRange\",\n    value: function getMinimapDecorationsInRange(range) {\n      return this._decorations.getMinimapDecorationsInRange(range);\n    }\n  }, {\n    key: \"getDecorationsInViewport\",\n    value: function getDecorationsInViewport(visibleRange) {\n      return this._decorations.getDecorationsViewportData(visibleRange).decorations;\n    }\n  }, {\n    key: \"getInjectedTextAt\",\n    value: function getInjectedTextAt(viewPosition) {\n      return this._lines.getInjectedTextAt(viewPosition);\n    }\n  }, {\n    key: \"getViewportViewLineRenderingData\",\n    value: function getViewportViewLineRenderingData(visibleRange, lineNumber) {\n      var allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n      var inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n      return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n  }, {\n    key: \"getViewLineRenderingData\",\n    value: function getViewLineRenderingData(lineNumber) {\n      var inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n      return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n  }, {\n    key: \"_getViewLineRenderingData\",\n    value: function _getViewLineRenderingData(lineNumber, inlineDecorations) {\n      var mightContainRTL = this.model.mightContainRTL();\n      var mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n      var tabSize = this.getTabSize();\n      var lineData = this._lines.getViewLineData(lineNumber);\n      if (lineData.inlineDecorations) {\n        inlineDecorations = [].concat(_toConsumableArray(inlineDecorations), _toConsumableArray(lineData.inlineDecorations.map(function (d) {\n          return d.toInlineDecoration(lineNumber);\n        })));\n      }\n      return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n  }, {\n    key: \"getViewLineData\",\n    value: function getViewLineData(lineNumber) {\n      return this._lines.getViewLineData(lineNumber);\n    }\n  }, {\n    key: \"getMinimapLinesRenderingData\",\n    value: function getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n      var result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n      return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n  }, {\n    key: \"getAllOverviewRulerDecorations\",\n    value: function getAllOverviewRulerDecorations(theme) {\n      var decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n      var result = new OverviewRulerDecorations();\n      var _iterator3 = _createForOfIteratorHelper(decorations),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var decoration = _step3.value;\n          var decorationOptions = decoration.options;\n          var opts = decorationOptions.overviewRuler;\n          if (!opts) {\n            continue;\n          }\n          var lane = opts.position;\n          if (lane === 0) {\n            continue;\n          }\n          var color = opts.getColor(theme.value);\n          var viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n          var viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n          result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return result.asArray;\n    }\n  }, {\n    key: \"_invalidateDecorationsColorCache\",\n    value: function _invalidateDecorationsColorCache() {\n      var decorations = this.model.getOverviewRulerDecorations();\n      var _iterator4 = _createForOfIteratorHelper(decorations),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var decoration = _step4.value;\n          var opts1 = decoration.options.overviewRuler;\n          opts1 === null || opts1 === void 0 ? void 0 : opts1.invalidateCachedColor();\n          var opts2 = decoration.options.minimap;\n          opts2 === null || opts2 === void 0 ? void 0 : opts2.invalidateCachedColor();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"getValueInRange\",\n    value: function getValueInRange(range, eol) {\n      var modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n      return this.model.getValueInRange(modelRange, eol);\n    }\n  }, {\n    key: \"getValueLengthInRange\",\n    value: function getValueLengthInRange(range, eol) {\n      var modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n      return this.model.getValueLengthInRange(modelRange, eol);\n    }\n  }, {\n    key: \"modifyPosition\",\n    value: function modifyPosition(position, offset) {\n      var modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n      var resultModelPosition = this.model.modifyPosition(modelPosition, offset);\n      return this.coordinatesConverter.convertModelPositionToViewPosition(resultModelPosition);\n    }\n  }, {\n    key: \"deduceModelPositionRelativeToViewPosition\",\n    value: function deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n      var modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n      if (this.model.getEOL().length === 2) {\n        // This model uses CRLF, so the delta must take that into account\n        if (deltaOffset < 0) {\n          deltaOffset -= lineFeedCnt;\n        } else {\n          deltaOffset += lineFeedCnt;\n        }\n      }\n      var modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n      var resultOffset = modelAnchorOffset + deltaOffset;\n      return this.model.getPositionAt(resultOffset);\n    }\n  }, {\n    key: \"getPlainTextToCopy\",\n    value: function getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n      var newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n      modelRanges = modelRanges.slice(0);\n      modelRanges.sort(Range.compareRangesUsingStarts);\n      var hasEmptyRange = false;\n      var hasNonEmptyRange = false;\n      var _iterator5 = _createForOfIteratorHelper(modelRanges),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var range = _step5.value;\n          if (range.isEmpty()) {\n            hasEmptyRange = true;\n          } else {\n            hasNonEmptyRange = true;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      if (!hasNonEmptyRange) {\n        // all ranges are empty\n        if (!emptySelectionClipboard) {\n          return '';\n        }\n        var modelLineNumbers = modelRanges.map(function (r) {\n          return r.startLineNumber;\n        });\n        var _result = '';\n        for (var i = 0; i < modelLineNumbers.length; i++) {\n          if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n            continue;\n          }\n          _result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n        }\n        return _result;\n      }\n      if (hasEmptyRange && emptySelectionClipboard) {\n        // mixed empty selections and non-empty selections\n        var _result2 = [];\n        var prevModelLineNumber = 0;\n        var _iterator6 = _createForOfIteratorHelper(modelRanges),\n          _step6;\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var modelRange = _step6.value;\n            var modelLineNumber = modelRange.startLineNumber;\n            if (modelRange.isEmpty()) {\n              if (modelLineNumber !== prevModelLineNumber) {\n                _result2.push(this.model.getLineContent(modelLineNumber));\n              }\n            } else {\n              _result2.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n            }\n            prevModelLineNumber = modelLineNumber;\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n        return _result2.length === 1 ? _result2[0] : _result2;\n      }\n      var result = [];\n      var _iterator7 = _createForOfIteratorHelper(modelRanges),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _modelRange = _step7.value;\n          if (!_modelRange.isEmpty()) {\n            result.push(this.model.getValueInRange(_modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return result.length === 1 ? result[0] : result;\n    }\n  }, {\n    key: \"getRichTextToCopy\",\n    value: function getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n      var languageId = this.model.getLanguageId();\n      if (languageId === PLAINTEXT_LANGUAGE_ID) {\n        return null;\n      }\n      if (modelRanges.length !== 1) {\n        // no multiple selection support at this time\n        return null;\n      }\n      var range = modelRanges[0];\n      if (range.isEmpty()) {\n        if (!emptySelectionClipboard) {\n          // nothing to copy\n          return null;\n        }\n        var lineNumber = range.startLineNumber;\n        range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n      }\n      var fontInfo = this._configuration.options.get(50 /* EditorOption.fontInfo */);\n      var colorMap = this._getColorMap();\n      var hasBadChars = /[:;\\\\\\/<>]/.test(fontInfo.fontFamily);\n      var useDefaultFontFamily = hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily;\n      var fontFamily;\n      if (useDefaultFontFamily) {\n        fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n      } else {\n        fontFamily = fontInfo.fontFamily;\n        fontFamily = fontFamily.replace(/\"/g, '\\'');\n        var hasQuotesOrIsList = /[,']/.test(fontFamily);\n        if (!hasQuotesOrIsList) {\n          var needsQuotes = /[+ ]/.test(fontFamily);\n          if (needsQuotes) {\n            fontFamily = \"'\".concat(fontFamily, \"'\");\n          }\n        }\n        fontFamily = \"\".concat(fontFamily, \", \").concat(EDITOR_FONT_DEFAULTS.fontFamily);\n      }\n      return {\n        mode: languageId,\n        html: \"<div style=\\\"\" + \"color: \".concat(colorMap[1 /* ColorId.DefaultForeground */], \";\") + \"background-color: \".concat(colorMap[2 /* ColorId.DefaultBackground */], \";\") + \"font-family: \".concat(fontFamily, \";\") + \"font-weight: \".concat(fontInfo.fontWeight, \";\") + \"font-size: \".concat(fontInfo.fontSize, \"px;\") + \"line-height: \".concat(fontInfo.lineHeight, \"px;\") + \"white-space: pre;\" + \"\\\">\" + this._getHTMLToCopy(range, colorMap) + '</div>'\n      };\n    }\n  }, {\n    key: \"_getHTMLToCopy\",\n    value: function _getHTMLToCopy(modelRange, colorMap) {\n      var startLineNumber = modelRange.startLineNumber;\n      var startColumn = modelRange.startColumn;\n      var endLineNumber = modelRange.endLineNumber;\n      var endColumn = modelRange.endColumn;\n      var tabSize = this.getTabSize();\n      var result = '';\n      for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        var lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n        var lineContent = lineTokens.getLineContent();\n        var startOffset = lineNumber === startLineNumber ? startColumn - 1 : 0;\n        var endOffset = lineNumber === endLineNumber ? endColumn - 1 : lineContent.length;\n        if (lineContent === '') {\n          result += '<br>';\n        } else {\n          result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"_getColorMap\",\n    value: function _getColorMap() {\n      var colorMap = TokenizationRegistry.getColorMap();\n      var result = ['#000000'];\n      if (colorMap) {\n        for (var i = 1, len = colorMap.length; i < len; i++) {\n          result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n        }\n      }\n      return result;\n    }\n    //#region cursor operations\n  }, {\n    key: \"getPrimaryCursorState\",\n    value: function getPrimaryCursorState() {\n      return this._cursor.getPrimaryCursorState();\n    }\n  }, {\n    key: \"getLastAddedCursorIndex\",\n    value: function getLastAddedCursorIndex() {\n      return this._cursor.getLastAddedCursorIndex();\n    }\n  }, {\n    key: \"getCursorStates\",\n    value: function getCursorStates() {\n      return this._cursor.getCursorStates();\n    }\n  }, {\n    key: \"setCursorStates\",\n    value: function setCursorStates(source, reason, states) {\n      var _this3 = this;\n      return this._withViewEventsCollector(function (eventsCollector) {\n        return _this3._cursor.setStates(eventsCollector, source, reason, states);\n      });\n    }\n  }, {\n    key: \"getCursorColumnSelectData\",\n    value: function getCursorColumnSelectData() {\n      return this._cursor.getCursorColumnSelectData();\n    }\n  }, {\n    key: \"getCursorAutoClosedCharacters\",\n    value: function getCursorAutoClosedCharacters() {\n      return this._cursor.getAutoClosedCharacters();\n    }\n  }, {\n    key: \"setCursorColumnSelectData\",\n    value: function setCursorColumnSelectData(columnSelectData) {\n      this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n  }, {\n    key: \"getPrevEditOperationType\",\n    value: function getPrevEditOperationType() {\n      return this._cursor.getPrevEditOperationType();\n    }\n  }, {\n    key: \"setPrevEditOperationType\",\n    value: function setPrevEditOperationType(type) {\n      this._cursor.setPrevEditOperationType(type);\n    }\n  }, {\n    key: \"getSelection\",\n    value: function getSelection() {\n      return this._cursor.getSelection();\n    }\n  }, {\n    key: \"getSelections\",\n    value: function getSelections() {\n      return this._cursor.getSelections();\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n  }, {\n    key: \"setSelections\",\n    value: function setSelections(source, selections) {\n      var _this4 = this;\n      var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      this._withViewEventsCollector(function (eventsCollector) {\n        return _this4._cursor.setSelections(eventsCollector, source, selections, reason);\n      });\n    }\n  }, {\n    key: \"saveCursorState\",\n    value: function saveCursorState() {\n      return this._cursor.saveState();\n    }\n  }, {\n    key: \"restoreCursorState\",\n    value: function restoreCursorState(states) {\n      var _this5 = this;\n      this._withViewEventsCollector(function (eventsCollector) {\n        return _this5._cursor.restoreState(eventsCollector, states);\n      });\n    }\n  }, {\n    key: \"_executeCursorEdit\",\n    value: function _executeCursorEdit(callback) {\n      if (this._cursor.context.cursorConfig.readOnly) {\n        // we cannot edit when read only...\n        this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n        return;\n      }\n      this._withViewEventsCollector(callback);\n    }\n  }, {\n    key: \"executeEdits\",\n    value: function executeEdits(source, edits, cursorStateComputer) {\n      var _this6 = this;\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this6._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer);\n      });\n    }\n  }, {\n    key: \"startComposition\",\n    value: function startComposition() {\n      var _this7 = this;\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this7._cursor.startComposition(eventsCollector);\n      });\n    }\n  }, {\n    key: \"endComposition\",\n    value: function endComposition(source) {\n      var _this8 = this;\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this8._cursor.endComposition(eventsCollector, source);\n      });\n    }\n  }, {\n    key: \"type\",\n    value: function type(text, source) {\n      var _this9 = this;\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this9._cursor.type(eventsCollector, text, source);\n      });\n    }\n  }, {\n    key: \"compositionType\",\n    value: function compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n      var _this10 = this;\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this10._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source);\n      });\n    }\n  }, {\n    key: \"paste\",\n    value: function paste(text, pasteOnNewLine, multicursorText, source) {\n      var _this11 = this;\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this11._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source);\n      });\n    }\n  }, {\n    key: \"cut\",\n    value: function cut(source) {\n      var _this12 = this;\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this12._cursor.cut(eventsCollector, source);\n      });\n    }\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(command, source) {\n      var _this13 = this;\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this13._cursor.executeCommand(eventsCollector, command, source);\n      });\n    }\n  }, {\n    key: \"executeCommands\",\n    value: function executeCommands(commands, source) {\n      var _this14 = this;\n      this._executeCursorEdit(function (eventsCollector) {\n        return _this14._cursor.executeCommands(eventsCollector, commands, source);\n      });\n    }\n  }, {\n    key: \"revealAllCursors\",\n    value: function revealAllCursors(source, revealHorizontal) {\n      var _this15 = this;\n      var minimalReveal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._withViewEventsCollector(function (eventsCollector) {\n        return _this15._cursor.revealAll(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */);\n      });\n    }\n  }, {\n    key: \"revealPrimaryCursor\",\n    value: function revealPrimaryCursor(source, revealHorizontal) {\n      var _this16 = this;\n      var minimalReveal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._withViewEventsCollector(function (eventsCollector) {\n        return _this16._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */);\n      });\n    }\n  }, {\n    key: \"revealTopMostCursor\",\n    value: function revealTopMostCursor(source) {\n      var viewPosition = this._cursor.getTopMostViewPosition();\n      var viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n      this._withViewEventsCollector(function (eventsCollector) {\n        return eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */));\n      });\n    }\n  }, {\n    key: \"revealBottomMostCursor\",\n    value: function revealBottomMostCursor(source) {\n      var viewPosition = this._cursor.getBottomMostViewPosition();\n      var viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n      this._withViewEventsCollector(function (eventsCollector) {\n        return eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */));\n      });\n    }\n  }, {\n    key: \"revealRange\",\n    value: function revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n      this._withViewEventsCollector(function (eventsCollector) {\n        return eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType));\n      });\n    }\n    //#endregion\n    //#region viewLayout\n  }, {\n    key: \"changeWhitespace\",\n    value: function changeWhitespace(callback) {\n      var hadAChange = this.viewLayout.changeWhitespace(callback);\n      if (hadAChange) {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n        this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n      }\n    }\n    //#endregion\n  }, {\n    key: \"_withViewEventsCollector\",\n    value: function _withViewEventsCollector(callback) {\n      try {\n        var eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n        return callback(eventsCollector);\n      } finally {\n        this._eventDispatcher.endEmitViewEvents();\n      }\n    }\n  }, {\n    key: \"normalizePosition\",\n    value: function normalizePosition(position, affinity) {\n      return this._lines.normalizePosition(position, affinity);\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n  }, {\n    key: \"getLineIndentColumn\",\n    value: function getLineIndentColumn(lineNumber) {\n      return this._lines.getLineIndentColumn(lineNumber);\n    }\n  }]);\n}(Disposable);\nvar ViewportStart = /*#__PURE__*/function () {\n  function ViewportStart(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n    _classCallCheck(this, ViewportStart);\n    this._model = _model;\n    this._viewLineNumber = _viewLineNumber;\n    this._isValid = _isValid;\n    this._modelTrackedRange = _modelTrackedRange;\n    this._startLineDelta = _startLineDelta;\n  }\n  return _createClass(ViewportStart, [{\n    key: \"viewLineNumber\",\n    get: function get() {\n      return this._viewLineNumber;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return this._isValid;\n    }\n  }, {\n    key: \"modelTrackedRange\",\n    get: function get() {\n      return this._modelTrackedRange;\n    }\n  }, {\n    key: \"startLineDelta\",\n    get: function get() {\n      return this._startLineDelta;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    }\n  }, {\n    key: \"update\",\n    value: function update(viewModel, startLineNumber) {\n      var position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n      var viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n      var viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n      var scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n      this._viewLineNumber = startLineNumber;\n      this._isValid = true;\n      this._modelTrackedRange = viewportStartLineTrackedRange;\n      this._startLineDelta = scrollTop - viewportStartLineTop;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      this._isValid = false;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(model) {\n      var viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n      return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n    }\n  }]);\n}();\nvar OverviewRulerDecorations = /*#__PURE__*/function () {\n  function OverviewRulerDecorations() {\n    _classCallCheck(this, OverviewRulerDecorations);\n    this._asMap = Object.create(null);\n    this.asArray = [];\n  }\n  return _createClass(OverviewRulerDecorations, [{\n    key: \"accept\",\n    value: function accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n      var prevGroup = this._asMap[color];\n      if (prevGroup) {\n        var prevData = prevGroup.data;\n        var prevLane = prevData[prevData.length - 3];\n        var prevEndLineNumber = prevData[prevData.length - 1];\n        if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n          // merge into prev\n          if (endLineNumber > prevEndLineNumber) {\n            prevData[prevData.length - 1] = endLineNumber;\n          }\n          return;\n        }\n        // push\n        prevData.push(lane, startLineNumber, endLineNumber);\n      } else {\n        var group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n        this._asMap[color] = group;\n        this.asArray.push(group);\n      }\n    }\n  }]);\n}();\nvar HiddenAreasModel = /*#__PURE__*/function () {\n  function HiddenAreasModel() {\n    _classCallCheck(this, HiddenAreasModel);\n    this.hiddenAreas = new Map();\n    this.shouldRecompute = false;\n    this.ranges = [];\n  }\n  return _createClass(HiddenAreasModel, [{\n    key: \"setHiddenAreas\",\n    value: function setHiddenAreas(source, ranges) {\n      var existing = this.hiddenAreas.get(source);\n      if (existing && rangeArraysEqual(existing, ranges)) {\n        return;\n      }\n      this.hiddenAreas.set(source, ranges);\n      this.shouldRecompute = true;\n    }\n    /**\n     * The returned array is immutable.\n    */\n  }, {\n    key: \"getMergedRanges\",\n    value: function getMergedRanges() {\n      if (!this.shouldRecompute) {\n        return this.ranges;\n      }\n      this.shouldRecompute = false;\n      var newRanges = Array.from(this.hiddenAreas.values()).reduce(function (r, hiddenAreas) {\n        return mergeLineRangeArray(r, hiddenAreas);\n      }, []);\n      if (rangeArraysEqual(this.ranges, newRanges)) {\n        return this.ranges;\n      }\n      this.ranges = newRanges;\n      return this.ranges;\n    }\n  }]);\n}();\nfunction mergeLineRangeArray(arr1, arr2) {\n  var result = [];\n  var i = 0;\n  var j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    var item1 = arr1[i];\n    var item2 = arr2[j];\n    if (item1.endLineNumber < item2.startLineNumber - 1) {\n      result.push(arr1[i++]);\n    } else if (item2.endLineNumber < item1.startLineNumber - 1) {\n      result.push(arr2[j++]);\n    } else {\n      var startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n      var endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n      result.push(new Range(startLineNumber, 1, endLineNumber, 1));\n      i++;\n      j++;\n    }\n  }\n  while (i < arr1.length) {\n    result.push(arr1[i++]);\n  }\n  while (j < arr2.length) {\n    result.push(arr2[j++]);\n  }\n  return result;\n}\nfunction rangeArraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (var i = 0; i < arr1.length; i++) {\n    if (!arr1[i].equalsRange(arr2[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nvar StableViewport = /*#__PURE__*/function () {\n  function StableViewport(viewportStartModelPosition, startLineDelta) {\n    _classCallCheck(this, StableViewport);\n    this.viewportStartModelPosition = viewportStartModelPosition;\n    this.startLineDelta = startLineDelta;\n  }\n  return _createClass(StableViewport, [{\n    key: \"recoverViewportStart\",\n    value: function recoverViewportStart(coordinatesConverter, viewLayout) {\n      if (!this.viewportStartModelPosition) {\n        return;\n      }\n      var viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n      var viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n      viewLayout.setScrollPosition({\n        scrollTop: viewPositionTop + this.startLineDelta\n      }, 1 /* ScrollType.Immediate */);\n    }\n  }]);\n}();","map":{"version":3,"names":["ArrayQueue","RunOnceScheduler","Color","Disposable","platform","strings","EDITOR_FONT_DEFAULTS","filterValidationDecorations","CursorsController","CursorConfiguration","Position","Range","textModelEvents","TokenizationRegistry","PLAINTEXT_LANGUAGE_ID","tokenizeLineToHTML","viewEvents","ViewLayout","MinimapTokensColorTracker","MinimapLinesRenderingData","OverviewRulerDecorationsGroup","ViewLineRenderingData","ViewModelDecorations","FocusChangedEvent","HiddenAreasChangedEvent","ModelContentChangedEvent","ModelDecorationsChangedEvent","ModelLanguageChangedEvent","ModelLanguageConfigurationChangedEvent","ModelOptionsChangedEvent","ModelTokensChangedEvent","ReadOnlyEditAttemptEvent","ScrollChangedEvent","ViewModelEventDispatcher","ViewZonesChangedEvent","ViewModelLinesFromModelAsIs","ViewModelLinesFromProjectedModel","GlyphMarginLanesModel","USE_IDENTITY_LINES_COLLECTION","ViewModel","_Disposable","editorId","configuration","model","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","scheduleAtNextAnimationFrame","languageConfigurationService","_themeService","_attachedView","_this","_classCallCheck","_callSuper","hiddenAreasModel","HiddenAreasModel","previousHiddenAreas","_editorId","_configuration","_eventDispatcher","onEvent","cursorConfig","getLanguageId","getOptions","_updateConfigurationViewLineCount","_register","_updateConfigurationViewLineCountNow","_hasFocus","_viewportStart","ViewportStart","create","glyphLanes","isTooLargeForTokenization","_lines","options","fontInfo","get","wrappingStrategy","wrappingInfo","wrappingIndent","wordBreak","tabSize","wrappingColumn","coordinatesConverter","createCoordinatesConverter","_cursor","viewLayout","getLineCount","onDidScroll","e","scrollTopChanged","_handleVisibleLinesChanged","invalidate","emitSingleViewEvent","ViewScrollChangedEvent","emitOutgoingEvent","oldScrollWidth","oldScrollLeft","oldScrollHeight","oldScrollTop","scrollWidth","scrollLeft","scrollHeight","scrollTop","onDidContentSizeChange","_decorations","_registerModelEvents","onDidChangeFast","eventsCollector","beginEmitViewEvents","_onConfigurationChanged","endEmitViewEvents","getInstance","onDidChange","ViewTokensColorsChangedEvent","onDidColorThemeChange","theme","_invalidateDecorationsColorCache","ViewThemeChangedEvent","_inherits","_createClass","key","value","dispose","_get","_getPrototypeOf","prototype","call","createLineBreaksComputer","addViewEventHandler","eventHandler","removeViewEventHandler","setViewLineCount","getViewLineCount","getModelVisibleRanges","linesViewportData","getLinesViewportData","viewVisibleRange","startLineNumber","getLineMinColumn","endLineNumber","getLineMaxColumn","modelVisibleRanges","_toModelVisibleRanges","visibleLinesStabilized","setVisibleLines","setHasFocus","hasFocus","ViewFocusChangedEvent","onCompositionStart","ViewCompositionStartEvent","onCompositionEnd","ViewCompositionEndEvent","_captureStableViewport","isValid","getCurrentScrollTop","previousViewportStartViewPosition","viewLineNumber","previousViewportStartModelPosition","convertViewPositionToModelPosition","StableViewport","startLineDelta","stableViewport","setWrappingSettings","emitViewEvent","ViewFlushedEvent","ViewLineMappingChangedEvent","ViewDecorationsChangedEvent","onLineMappingChanged","onFlushed","schedule","hasChanged","reset","ViewConfigurationChangedEvent","onConfigurationChanged","recoverViewportStart","shouldRecreate","updateConfiguration","_this2","onDidChangeContentOrInjectedText","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","changes","InternalModelContentChangeEvent","rawContentChangedEvent","versionId","lineBreaksComputer","_iterator","_createForOfIteratorHelper","_step","s","n","done","change","changeType","lineIdx","detail","length","line","injectedText","injectedTexts","filter","element","ownerId","addRequest","err","f","lineBreaks","finalize","lineBreakQueue","_iterator2","_step2","onModelFlushed","linesDeletedEvent","onModelLinesDeleted","fromLineNumber","toLineNumber","onLinesDeleted","insertedLineBreaks","takeCount","linesInsertedEvent","onModelLinesInserted","onLinesInserted","changedLineBreakData","dequeue","_this2$_lines$onModel","onModelLineChanged","lineNumber","_this2$_lines$onModel2","_slicedToArray","lineMappingChanged","linesChangedEvent","acceptVersionId","onHeightMaybeChanged","viewportStartWasValid","setModelLineCount","getAttachedEditorCount","modelRange","_getTrackedRange","modelTrackedRange","viewPosition","convertModelPositionToViewPosition","getStartPosition","viewPositionTop","getVerticalOffsetForLineNumber","setScrollPosition","contentChangedEvent","onModelContentChanged","onDidChangeTokens","viewRanges","j","lenJ","ranges","viewStartLineNumber","viewEndLineNumber","ViewTokensChangedEvent","onDidChangeLanguageConfiguration","ViewLanguageConfigurationEvent","onDidChangeLanguage","onDidChangeOptions","setTabSize","onDidChangeDecorations","onModelDecorationsChanged","setHiddenAreas","source","_a","mergedRanges","getMergedRanges","firstModelLineInViewPort","viewportStartModelPosition","firstModelLineIsHidden","some","range","getVisibleRangesPlusViewportAboveBelow","layoutInfo","lineHeight","linesAround","Math","max","round","height","partialData","startViewLineNumber","completelyVisibleStartLineNumber","endViewLineNumber","min","completelyVisibleEndLineNumber","getVisibleRanges","visibleViewRange","getCompletelyVisibleViewRange","getHiddenAreas","visibleRange","convertViewRangeToModelRange","hiddenAreas","result","resultLen","startColumn","endColumn","i","len","hiddenStartLineNumber","hiddenEndLineNumber","getCompletelyVisibleViewRangeAtScrollTop","getLinesViewportDataAtScrollTop","saveState","compatViewState","firstViewLineNumber","getLineNumberAtVerticalOffset","firstPosition","firstPositionDeltaTop","reduceRestoreState","state","_reduceRestoreStateCompatibility","modelPosition","validatePosition","scrollTopWithoutViewZones","getTabSize","setViewport","centeredLineNumber","update","getActiveIndentGuide","minLineNumber","maxLineNumber","getLinesIndentGuides","getViewLinesIndentGuides","getBracketGuidesInRangeByLine","activePosition","getViewLinesBracketGuides","getLineContent","getViewLineContent","getLineLength","getViewLineLength","getViewLineMinColumn","getViewLineMaxColumn","getLineFirstNonWhitespaceColumn","firstNonWhitespaceIndex","getLineLastNonWhitespaceColumn","lastNonWhitespaceIndex","getMinimapDecorationsInRange","getDecorationsInViewport","getDecorationsViewportData","decorations","getInjectedTextAt","getViewportViewLineRenderingData","allInlineDecorations","inlineDecorations","_getViewLineRenderingData","getViewLineRenderingData","getInlineDecorationsOnLine","mightContainRTL","mightContainNonBasicASCII","lineData","getViewLineData","concat","_toConsumableArray","map","d","toInlineDecoration","minColumn","maxColumn","content","continuesWithWrappedLine","tokens","startVisibleColumn","getMinimapLinesRenderingData","needed","getViewLinesData","getAllOverviewRulerDecorations","getOverviewRulerDecorations","OverviewRulerDecorations","_iterator3","_step3","decoration","decorationOptions","opts","overviewRuler","lane","position","color","getColor","getViewLineNumberOfModelPosition","accept","zIndex","asArray","_iterator4","_step4","opts1","invalidateCachedColor","opts2","minimap","getValueInRange","eol","getValueLengthInRange","modifyPosition","offset","resultModelPosition","deduceModelPositionRelativeToViewPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","modelAnchor","getEOL","modelAnchorOffset","getOffsetAt","resultOffset","getPositionAt","getPlainTextToCopy","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","slice","sort","compareRangesUsingStarts","hasEmptyRange","hasNonEmptyRange","_iterator5","_step5","isEmpty","modelLineNumbers","r","prevModelLineNumber","_iterator6","_step6","modelLineNumber","push","_iterator7","_step7","getRichTextToCopy","languageId","colorMap","_getColorMap","hasBadChars","test","fontFamily","useDefaultFontFamily","replace","hasQuotesOrIsList","needsQuotes","mode","html","fontWeight","fontSize","_getHTMLToCopy","lineTokens","tokenization","getLineTokens","lineContent","startOffset","endOffset","inflate","isWindows","getColorMap","Format","CSS","formatHex","getPrimaryCursorState","getLastAddedCursorIndex","getCursorStates","setCursorStates","reason","states","_this3","_withViewEventsCollector","setStates","getCursorColumnSelectData","getCursorAutoClosedCharacters","getAutoClosedCharacters","setCursorColumnSelectData","columnSelectData","getPrevEditOperationType","setPrevEditOperationType","type","getSelection","getSelections","getPosition","modelState","setSelections","selections","_this4","arguments","undefined","saveCursorState","restoreCursorState","_this5","restoreState","_executeCursorEdit","callback","context","readOnly","executeEdits","edits","cursorStateComputer","_this6","startComposition","_this7","endComposition","_this8","text","_this9","compositionType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","_this10","paste","pasteOnNewLine","multicursorText","_this11","cut","_this12","executeCommand","command","_this13","executeCommands","commands","_this14","revealAllCursors","revealHorizontal","_this15","minimalReveal","revealAll","revealPrimaryCursor","_this16","revealPrimary","revealTopMostCursor","getTopMostViewPosition","viewRange","column","ViewRevealRangeRequestEvent","revealBottomMostCursor","getBottomMostViewPosition","revealRange","verticalType","scrollType","changeWhitespace","hadAChange","normalizePosition","affinity","getLineIndentColumn","_model","_viewLineNumber","_isValid","_modelTrackedRange","_startLineDelta","_setTrackedRange","viewModel","viewportStartLineTrackedRange","viewportStartLineTop","_asMap","Object","prevGroup","prevData","data","prevLane","prevEndLineNumber","group","Map","shouldRecompute","existing","rangeArraysEqual","set","newRanges","Array","from","values","reduce","mergeLineRangeArray","arr1","arr2","item1","item2","equalsRange"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nimport { GlyphMarginLanesModel } from './glyphLanesModel.js';\nconst USE_IDENTITY_LINES_COLLECTION = true;\nexport class ViewModel extends Disposable {\n    constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService, _attachedView) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._themeService = _themeService;\n        this._attachedView = _attachedView;\n        this.hiddenAreasModel = new HiddenAreasModel();\n        this.previousHiddenAreas = [];\n        this._editorId = editorId;\n        this._configuration = configuration;\n        this.model = model;\n        this._eventDispatcher = new ViewModelEventDispatcher();\n        this.onEvent = this._eventDispatcher.onEvent;\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n        this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n        this._hasFocus = false;\n        this._viewportStart = ViewportStart.create(this.model);\n        this.glyphLanes = new GlyphMarginLanesModel(0);\n        if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n            this._lines = new ViewModelLinesFromModelAsIs(this.model);\n        }\n        else {\n            const options = this._configuration.options;\n            const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n            const wrappingStrategy = options.get(139 /* EditorOption.wrappingStrategy */);\n            const wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n            const wrappingIndent = options.get(138 /* EditorOption.wrappingIndent */);\n            const wordBreak = options.get(129 /* EditorOption.wordBreak */);\n            this._lines = new ViewModelLinesFromProjectedModel(this._editorId, this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak);\n        }\n        this.coordinatesConverter = this._lines.createCoordinatesConverter();\n        this._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n        this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n        this._register(this.viewLayout.onDidScroll((e) => {\n            if (e.scrollTopChanged) {\n                this._handleVisibleLinesChanged();\n            }\n            if (e.scrollTopChanged) {\n                this._viewportStart.invalidate();\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n        }));\n        this._register(this.viewLayout.onDidContentSizeChange((e) => {\n            this._eventDispatcher.emitOutgoingEvent(e);\n        }));\n        this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n        this._registerModelEvents();\n        this._register(this._configuration.onDidChangeFast((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                this._onConfigurationChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n        }));\n        this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n        }));\n        this._register(this._themeService.onDidColorThemeChange((theme) => {\n            this._invalidateDecorationsColorCache();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n        }));\n        this._updateConfigurationViewLineCountNow();\n    }\n    dispose() {\n        // First remove listeners, as disposing the lines might end up sending\n        // model decoration changed events ... and we no longer care about them ...\n        super.dispose();\n        this._decorations.dispose();\n        this._lines.dispose();\n        this._viewportStart.dispose();\n        this._eventDispatcher.dispose();\n    }\n    createLineBreaksComputer() {\n        return this._lines.createLineBreaksComputer();\n    }\n    addViewEventHandler(eventHandler) {\n        this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n    _updateConfigurationViewLineCountNow() {\n        this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n    getModelVisibleRanges() {\n        const linesViewportData = this.viewLayout.getLinesViewportData();\n        const viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n        const modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n        return modelVisibleRanges;\n    }\n    visibleLinesStabilized() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, true);\n    }\n    _handleVisibleLinesChanged() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, false);\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n        this._cursor.setHasFocus(hasFocus);\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n        this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n    onCompositionStart() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n    onCompositionEnd() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n    _captureStableViewport() {\n        // We might need to restore the current start view range, so save it (if available)\n        // But only if the scroll position is not at the top of the file\n        if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n            const previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n            const previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n            return new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n        }\n        return new StableViewport(null, 0);\n    }\n    _onConfigurationChanged(eventsCollector, e) {\n        const stableViewport = this._captureStableViewport();\n        const options = this._configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingStrategy = options.get(139 /* EditorOption.wrappingStrategy */);\n        const wrappingInfo = options.get(146 /* EditorOption.wrappingInfo */);\n        const wrappingIndent = options.get(138 /* EditorOption.wrappingIndent */);\n        const wordBreak = options.get(129 /* EditorOption.wordBreak */);\n        if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            this._cursor.onLineMappingChanged(eventsCollector);\n            this._decorations.onLineMappingChanged();\n            this.viewLayout.onFlushed(this.getLineCount());\n            this._updateConfigurationViewLineCount.schedule();\n        }\n        if (e.hasChanged(91 /* EditorOption.readOnly */)) {\n            // Must read again all decorations due to readOnly filtering\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        if (e.hasChanged(98 /* EditorOption.renderValidationDecorations */)) {\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n        this.viewLayout.onConfigurationChanged(e);\n        stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        if (CursorConfiguration.shouldRecreate(e)) {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n        }\n    }\n    _registerModelEvents() {\n        this._register(this.model.onDidChangeContentOrInjectedText((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                let hadOtherModelChange = false;\n                let hadModelLineChangeThatChangedLineMapping = false;\n                const changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n                const versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\n                const lineBreaksComputer = this._lines.createLineBreaksComputer();\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            for (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                                const line = change.detail[lineIdx];\n                                let injectedText = change.injectedTexts[lineIdx];\n                                if (injectedText) {\n                                    injectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                                }\n                                lineBreaksComputer.addRequest(line, injectedText, null);\n                            }\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            let injectedText = null;\n                            if (change.injectedText) {\n                                injectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                            }\n                            lineBreaksComputer.addRequest(change.detail, injectedText, null);\n                            break;\n                        }\n                    }\n                }\n                const lineBreaks = lineBreaksComputer.finalize();\n                const lineBreakQueue = new ArrayQueue(lineBreaks);\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 1 /* textModelEvents.RawContentChangedType.Flush */: {\n                            this._lines.onModelFlushed();\n                            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                            this._decorations.reset();\n                            this.viewLayout.onFlushed(this.getLineCount());\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */: {\n                            const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                            if (linesDeletedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            const insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n                            const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                            if (linesInsertedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            const changedLineBreakData = lineBreakQueue.dequeue();\n                            const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                            if (linesChangedEvent) {\n                                eventsCollector.emitViewEvent(linesChangedEvent);\n                            }\n                            if (linesInsertedEvent) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            if (linesDeletedEvent) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            break;\n                        }\n                        case 5 /* textModelEvents.RawContentChangedType.EOLChanged */: {\n                            // Nothing to do. The new version will be accepted below\n                            break;\n                        }\n                    }\n                }\n                if (versionId !== null) {\n                    this._lines.acceptVersionId(versionId);\n                }\n                this.viewLayout.onHeightMaybeChanged();\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                }\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            // Update the configuration and reset the centered view line\n            const viewportStartWasValid = this._viewportStart.isValid;\n            this._viewportStart.invalidate();\n            this._configuration.setModelLineCount(this.model.getLineCount());\n            this._updateConfigurationViewLineCountNow();\n            // Recover viewport\n            if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n                const modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n                if (modelRange) {\n                    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n                    const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n                    this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, 1 /* ScrollType.Immediate */);\n                }\n            }\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n                    eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n                }\n                this._cursor.onModelContentChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            this._handleVisibleLinesChanged();\n        }));\n        this._register(this.model.onDidChangeTokens((e) => {\n            const viewRanges = [];\n            for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n                const modelRange = e.ranges[j];\n                const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n                const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n                viewRanges[j] = {\n                    fromLineNumber: viewStartLineNumber,\n                    toLineNumber: viewEndLineNumber\n                };\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n            this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguageConfiguration((e) => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguage((e) => {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeOptions((e) => {\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n            if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n                try {\n                    const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                    this.viewLayout.onFlushed(this.getLineCount());\n                }\n                finally {\n                    this._eventDispatcher.endEmitViewEvents();\n                }\n                this._updateConfigurationViewLineCount.schedule();\n            }\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeDecorations((e) => {\n            this._decorations.onModelDecorationsChanged();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n        }));\n    }\n    setHiddenAreas(ranges, source) {\n        var _a;\n        this.hiddenAreasModel.setHiddenAreas(source, ranges);\n        const mergedRanges = this.hiddenAreasModel.getMergedRanges();\n        if (mergedRanges === this.previousHiddenAreas) {\n            return;\n        }\n        this.previousHiddenAreas = mergedRanges;\n        const stableViewport = this._captureStableViewport();\n        let lineMappingChanged = false;\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            lineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n            if (lineMappingChanged) {\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                this._cursor.onLineMappingChanged(eventsCollector);\n                this._decorations.onLineMappingChanged();\n                this.viewLayout.onFlushed(this.getLineCount());\n                this.viewLayout.onHeightMaybeChanged();\n            }\n            const firstModelLineInViewPort = (_a = stableViewport.viewportStartModelPosition) === null || _a === void 0 ? void 0 : _a.lineNumber;\n            const firstModelLineIsHidden = firstModelLineInViewPort && mergedRanges.some(range => range.startLineNumber <= firstModelLineInViewPort && firstModelLineInViewPort <= range.endLineNumber);\n            if (!firstModelLineIsHidden) {\n                stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n            }\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n        this._updateConfigurationViewLineCount.schedule();\n        if (lineMappingChanged) {\n            this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n        }\n    }\n    getVisibleRangesPlusViewportAboveBelow() {\n        const layoutInfo = this._configuration.options.get(145 /* EditorOption.layoutInfo */);\n        const lineHeight = this._configuration.options.get(67 /* EditorOption.lineHeight */);\n        const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n        const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n        return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n    getVisibleRanges() {\n        const visibleViewRange = this.getCompletelyVisibleViewRange();\n        return this._toModelVisibleRanges(visibleViewRange);\n    }\n    getHiddenAreas() {\n        return this._lines.getHiddenAreas();\n    }\n    _toModelVisibleRanges(visibleViewRange) {\n        const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        const hiddenAreas = this._lines.getHiddenAreas();\n        if (hiddenAreas.length === 0) {\n            return [visibleRange];\n        }\n        const result = [];\n        let resultLen = 0;\n        let startLineNumber = visibleRange.startLineNumber;\n        let startColumn = visibleRange.startColumn;\n        const endLineNumber = visibleRange.endLineNumber;\n        const endColumn = visibleRange.endColumn;\n        for (let i = 0, len = hiddenAreas.length; i < len; i++) {\n            const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n            const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n            if (hiddenEndLineNumber < startLineNumber) {\n                continue;\n            }\n            if (hiddenStartLineNumber > endLineNumber) {\n                continue;\n            }\n            if (startLineNumber < hiddenStartLineNumber) {\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n            }\n            startLineNumber = hiddenEndLineNumber + 1;\n            startColumn = 1;\n        }\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return result;\n    }\n    getCompletelyVisibleViewRange() {\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n        const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    saveState() {\n        const compatViewState = this.viewLayout.saveState();\n        const scrollTop = compatViewState.scrollTop;\n        const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n        const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n        const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n        return {\n            scrollLeft: compatViewState.scrollLeft,\n            firstPosition: firstPosition,\n            firstPositionDeltaTop: firstPositionDeltaTop\n        };\n    }\n    reduceRestoreState(state) {\n        if (typeof state.firstPosition === 'undefined') {\n            // This is a view state serialized by an older version\n            return this._reduceRestoreStateCompatibility(state);\n        }\n        const modelPosition = this.model.validatePosition(state.firstPosition);\n        const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: scrollTop\n        };\n    }\n    _reduceRestoreStateCompatibility(state) {\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: state.scrollTopWithoutViewZones\n        };\n    }\n    getTabSize() {\n        return this.model.getOptions().tabSize;\n    }\n    getLineCount() {\n        return this._lines.getViewLineCount();\n    }\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n    setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n        this._viewportStart.update(this, startLineNumber);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n    getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n        return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n    }\n    getLineContent(lineNumber) {\n        return this._lines.getViewLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        return this._lines.getViewLineLength(lineNumber);\n    }\n    getLineMinColumn(lineNumber) {\n        return this._lines.getViewLineMinColumn(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    getMinimapDecorationsInRange(range) {\n        return this._decorations.getMinimapDecorationsInRange(range);\n    }\n    getDecorationsInViewport(visibleRange) {\n        return this._decorations.getDecorationsViewportData(visibleRange).decorations;\n    }\n    getInjectedTextAt(viewPosition) {\n        return this._lines.getInjectedTextAt(viewPosition);\n    }\n    getViewportViewLineRenderingData(visibleRange, lineNumber) {\n        const allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n        const inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    getViewLineRenderingData(lineNumber) {\n        const inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    _getViewLineRenderingData(lineNumber, inlineDecorations) {\n        const mightContainRTL = this.model.mightContainRTL();\n        const mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n        const tabSize = this.getTabSize();\n        const lineData = this._lines.getViewLineData(lineNumber);\n        if (lineData.inlineDecorations) {\n            inlineDecorations = [\n                ...inlineDecorations,\n                ...lineData.inlineDecorations.map(d => d.toInlineDecoration(lineNumber))\n            ];\n        }\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n    getViewLineData(lineNumber) {\n        return this._lines.getViewLineData(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        const result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n    getAllOverviewRulerDecorations(theme) {\n        const decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n        const result = new OverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const decorationOptions = decoration.options;\n            const opts = decorationOptions.overviewRuler;\n            if (!opts) {\n                continue;\n            }\n            const lane = opts.position;\n            if (lane === 0) {\n                continue;\n            }\n            const color = opts.getColor(theme.value);\n            const viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n            const viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n            result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n        }\n        return result.asArray;\n    }\n    _invalidateDecorationsColorCache() {\n        const decorations = this.model.getOverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const opts1 = decoration.options.overviewRuler;\n            opts1 === null || opts1 === void 0 ? void 0 : opts1.invalidateCachedColor();\n            const opts2 = decoration.options.minimap;\n            opts2 === null || opts2 === void 0 ? void 0 : opts2.invalidateCachedColor();\n        }\n    }\n    getValueInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueInRange(modelRange, eol);\n    }\n    getValueLengthInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueLengthInRange(modelRange, eol);\n    }\n    modifyPosition(position, offset) {\n        const modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n        const resultModelPosition = this.model.modifyPosition(modelPosition, offset);\n        return this.coordinatesConverter.convertModelPositionToViewPosition(resultModelPosition);\n    }\n    deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n        if (this.model.getEOL().length === 2) {\n            // This model uses CRLF, so the delta must take that into account\n            if (deltaOffset < 0) {\n                deltaOffset -= lineFeedCnt;\n            }\n            else {\n                deltaOffset += lineFeedCnt;\n            }\n        }\n        const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n        const resultOffset = modelAnchorOffset + deltaOffset;\n        return this.model.getPositionAt(resultOffset);\n    }\n    getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n        const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n        modelRanges = modelRanges.slice(0);\n        modelRanges.sort(Range.compareRangesUsingStarts);\n        let hasEmptyRange = false;\n        let hasNonEmptyRange = false;\n        for (const range of modelRanges) {\n            if (range.isEmpty()) {\n                hasEmptyRange = true;\n            }\n            else {\n                hasNonEmptyRange = true;\n            }\n        }\n        if (!hasNonEmptyRange) {\n            // all ranges are empty\n            if (!emptySelectionClipboard) {\n                return '';\n            }\n            const modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n            let result = '';\n            for (let i = 0; i < modelLineNumbers.length; i++) {\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n                    continue;\n                }\n                result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n            }\n            return result;\n        }\n        if (hasEmptyRange && emptySelectionClipboard) {\n            // mixed empty selections and non-empty selections\n            const result = [];\n            let prevModelLineNumber = 0;\n            for (const modelRange of modelRanges) {\n                const modelLineNumber = modelRange.startLineNumber;\n                if (modelRange.isEmpty()) {\n                    if (modelLineNumber !== prevModelLineNumber) {\n                        result.push(this.model.getLineContent(modelLineNumber));\n                    }\n                }\n                else {\n                    result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n                }\n                prevModelLineNumber = modelLineNumber;\n            }\n            return result.length === 1 ? result[0] : result;\n        }\n        const result = [];\n        for (const modelRange of modelRanges) {\n            if (!modelRange.isEmpty()) {\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n            }\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n    getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n        const languageId = this.model.getLanguageId();\n        if (languageId === PLAINTEXT_LANGUAGE_ID) {\n            return null;\n        }\n        if (modelRanges.length !== 1) {\n            // no multiple selection support at this time\n            return null;\n        }\n        let range = modelRanges[0];\n        if (range.isEmpty()) {\n            if (!emptySelectionClipboard) {\n                // nothing to copy\n                return null;\n            }\n            const lineNumber = range.startLineNumber;\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n        }\n        const fontInfo = this._configuration.options.get(50 /* EditorOption.fontInfo */);\n        const colorMap = this._getColorMap();\n        const hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n        const useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n        let fontFamily;\n        if (useDefaultFontFamily) {\n            fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        }\n        else {\n            fontFamily = fontInfo.fontFamily;\n            fontFamily = fontFamily.replace(/\"/g, '\\'');\n            const hasQuotesOrIsList = /[,']/.test(fontFamily);\n            if (!hasQuotesOrIsList) {\n                const needsQuotes = /[+ ]/.test(fontFamily);\n                if (needsQuotes) {\n                    fontFamily = `'${fontFamily}'`;\n                }\n            }\n            fontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n        }\n        return {\n            mode: languageId,\n            html: (`<div style=\"`\n                + `color: ${colorMap[1 /* ColorId.DefaultForeground */]};`\n                + `background-color: ${colorMap[2 /* ColorId.DefaultBackground */]};`\n                + `font-family: ${fontFamily};`\n                + `font-weight: ${fontInfo.fontWeight};`\n                + `font-size: ${fontInfo.fontSize}px;`\n                + `line-height: ${fontInfo.lineHeight}px;`\n                + `white-space: pre;`\n                + `\">`\n                + this._getHTMLToCopy(range, colorMap)\n                + '</div>')\n        };\n    }\n    _getHTMLToCopy(modelRange, colorMap) {\n        const startLineNumber = modelRange.startLineNumber;\n        const startColumn = modelRange.startColumn;\n        const endLineNumber = modelRange.endLineNumber;\n        const endColumn = modelRange.endColumn;\n        const tabSize = this.getTabSize();\n        let result = '';\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n            const lineContent = lineTokens.getLineContent();\n            const startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n            const endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n            if (lineContent === '') {\n                result += '<br>';\n            }\n            else {\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n            }\n        }\n        return result;\n    }\n    _getColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const result = ['#000000'];\n        if (colorMap) {\n            for (let i = 1, len = colorMap.length; i < len; i++) {\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n            }\n        }\n        return result;\n    }\n    //#region cursor operations\n    getPrimaryCursorState() {\n        return this._cursor.getPrimaryCursorState();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursor.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursor.getCursorStates();\n    }\n    setCursorStates(source, reason, states) {\n        return this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n    }\n    getCursorColumnSelectData() {\n        return this._cursor.getCursorColumnSelectData();\n    }\n    getCursorAutoClosedCharacters() {\n        return this._cursor.getAutoClosedCharacters();\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n    getPrevEditOperationType() {\n        return this._cursor.getPrevEditOperationType();\n    }\n    setPrevEditOperationType(type) {\n        this._cursor.setPrevEditOperationType(type);\n    }\n    getSelection() {\n        return this._cursor.getSelection();\n    }\n    getSelections() {\n        return this._cursor.getSelections();\n    }\n    getPosition() {\n        return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n    setSelections(source, selections, reason = 0 /* CursorChangeReason.NotSet */) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n    }\n    saveCursorState() {\n        return this._cursor.saveState();\n    }\n    restoreCursorState(states) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n    }\n    _executeCursorEdit(callback) {\n        if (this._cursor.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n            return;\n        }\n        this._withViewEventsCollector(callback);\n    }\n    executeEdits(source, edits, cursorStateComputer) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n    }\n    startComposition() {\n        this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n    }\n    endComposition(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n    }\n    type(text, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n    }\n    paste(text, pasteOnNewLine, multicursorText, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n    }\n    cut(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n    }\n    executeCommand(command, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n    }\n    executeCommands(commands, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n    }\n    revealAllCursors(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealAll(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealPrimaryCursor(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealTopMostCursor(source) {\n        const viewPosition = this._cursor.getTopMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealBottomMostCursor(source) {\n        const viewPosition = this._cursor.getBottomMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n    }\n    //#endregion\n    //#region viewLayout\n    changeWhitespace(callback) {\n        const hadAChange = this.viewLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n            this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n        }\n    }\n    //#endregion\n    _withViewEventsCollector(callback) {\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            return callback(eventsCollector);\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n    }\n    normalizePosition(position, affinity) {\n        return this._lines.normalizePosition(position, affinity);\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        return this._lines.getLineIndentColumn(lineNumber);\n    }\n}\nclass ViewportStart {\n    static create(model) {\n        const viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n    }\n    get viewLineNumber() {\n        return this._viewLineNumber;\n    }\n    get isValid() {\n        return this._isValid;\n    }\n    get modelTrackedRange() {\n        return this._modelTrackedRange;\n    }\n    get startLineDelta() {\n        return this._startLineDelta;\n    }\n    constructor(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n        this._model = _model;\n        this._viewLineNumber = _viewLineNumber;\n        this._isValid = _isValid;\n        this._modelTrackedRange = _modelTrackedRange;\n        this._startLineDelta = _startLineDelta;\n    }\n    dispose() {\n        this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    }\n    update(viewModel, startLineNumber) {\n        const position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n        const viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        const viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n        const scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n        this._viewLineNumber = startLineNumber;\n        this._isValid = true;\n        this._modelTrackedRange = viewportStartLineTrackedRange;\n        this._startLineDelta = scrollTop - viewportStartLineTop;\n    }\n    invalidate() {\n        this._isValid = false;\n    }\n}\nclass OverviewRulerDecorations {\n    constructor() {\n        this._asMap = Object.create(null);\n        this.asArray = [];\n    }\n    accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n        const prevGroup = this._asMap[color];\n        if (prevGroup) {\n            const prevData = prevGroup.data;\n            const prevLane = prevData[prevData.length - 3];\n            const prevEndLineNumber = prevData[prevData.length - 1];\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n                // merge into prev\n                if (endLineNumber > prevEndLineNumber) {\n                    prevData[prevData.length - 1] = endLineNumber;\n                }\n                return;\n            }\n            // push\n            prevData.push(lane, startLineNumber, endLineNumber);\n        }\n        else {\n            const group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n            this._asMap[color] = group;\n            this.asArray.push(group);\n        }\n    }\n}\nclass HiddenAreasModel {\n    constructor() {\n        this.hiddenAreas = new Map();\n        this.shouldRecompute = false;\n        this.ranges = [];\n    }\n    setHiddenAreas(source, ranges) {\n        const existing = this.hiddenAreas.get(source);\n        if (existing && rangeArraysEqual(existing, ranges)) {\n            return;\n        }\n        this.hiddenAreas.set(source, ranges);\n        this.shouldRecompute = true;\n    }\n    /**\n     * The returned array is immutable.\n    */\n    getMergedRanges() {\n        if (!this.shouldRecompute) {\n            return this.ranges;\n        }\n        this.shouldRecompute = false;\n        const newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n        if (rangeArraysEqual(this.ranges, newRanges)) {\n            return this.ranges;\n        }\n        this.ranges = newRanges;\n        return this.ranges;\n    }\n}\nfunction mergeLineRangeArray(arr1, arr2) {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n        const item1 = arr1[i];\n        const item2 = arr2[j];\n        if (item1.endLineNumber < item2.startLineNumber - 1) {\n            result.push(arr1[i++]);\n        }\n        else if (item2.endLineNumber < item1.startLineNumber - 1) {\n            result.push(arr2[j++]);\n        }\n        else {\n            const startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n            const endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n            result.push(new Range(startLineNumber, 1, endLineNumber, 1));\n            i++;\n            j++;\n        }\n    }\n    while (i < arr1.length) {\n        result.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j++]);\n    }\n    return result;\n}\nfunction rangeArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!arr1[i].equalsRange(arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n    constructor(viewportStartModelPosition, startLineDelta) {\n        this.viewportStartModelPosition = viewportStartModelPosition;\n        this.startLineDelta = startLineDelta;\n    }\n    recoverViewportStart(coordinatesConverter, viewLayout) {\n        if (!this.viewportStartModelPosition) {\n            return;\n        }\n        const viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n        const viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n        viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, 1 /* ScrollType.Immediate */);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}