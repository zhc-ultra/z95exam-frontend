{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lessProminent, darken, lighten } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { scrollbarShadow, badgeBackground } from './miscColors.js';\n// ----- editor\nexport var editorBackground = registerColor('editor.background', {\n  light: '#ffffff',\n  dark: '#1E1E1E',\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('editorBackground', \"Editor background color.\"));\nexport var editorForeground = registerColor('editor.foreground', {\n  light: '#333333',\n  dark: '#BBBBBB',\n  hcDark: Color.white,\n  hcLight: foreground\n}, nls.localize('editorForeground', \"Editor default foreground color.\"));\nexport var editorStickyScrollBackground = registerColor('editorStickyScroll.background', {\n  light: editorBackground,\n  dark: editorBackground,\n  hcDark: editorBackground,\n  hcLight: editorBackground\n}, nls.localize('editorStickyScrollBackground', \"Background color of sticky scroll in the editor\"));\nexport var editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', {\n  dark: '#2A2D2E',\n  light: '#F0F0F0',\n  hcDark: null,\n  hcLight: Color.fromHex('#0F4A85').transparent(0.1)\n}, nls.localize('editorStickyScrollHoverBackground', \"Background color of sticky scroll on hover in the editor\"));\nexport var editorStickyScrollBorder = registerColor('editorStickyScroll.border', {\n  dark: null,\n  light: null,\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('editorStickyScrollBorder', \"Border color of sticky scroll in the editor\"));\nexport var editorStickyScrollShadow = registerColor('editorStickyScroll.shadow', {\n  dark: scrollbarShadow,\n  light: scrollbarShadow,\n  hcDark: scrollbarShadow,\n  hcLight: scrollbarShadow\n}, nls.localize('editorStickyScrollShadow', \" Shadow color of sticky scroll in the editor\"));\nexport var editorWidgetBackground = registerColor('editorWidget.background', {\n  dark: '#252526',\n  light: '#F3F3F3',\n  hcDark: '#0C141F',\n  hcLight: Color.white\n}, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport var editorWidgetForeground = registerColor('editorWidget.foreground', {\n  dark: foreground,\n  light: foreground,\n  hcDark: foreground,\n  hcLight: foreground\n}, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport var editorWidgetBorder = registerColor('editorWidget.border', {\n  dark: '#454545',\n  light: '#C8C8C8',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport var editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', {\n  light: null,\n  dark: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\nexport var editorErrorBackground = registerColor('editorError.background', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorErrorForeground = registerColor('editorError.foreground', {\n  dark: '#F14C4C',\n  light: '#E51400',\n  hcDark: '#F48771',\n  hcLight: '#B5200D'\n}, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport var editorErrorBorder = registerColor('editorError.border', {\n  dark: null,\n  light: null,\n  hcDark: Color.fromHex('#E47777').transparent(0.8),\n  hcLight: '#B5200D'\n}, nls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));\nexport var editorWarningBackground = registerColor('editorWarning.background', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorWarningForeground = registerColor('editorWarning.foreground', {\n  dark: '#CCA700',\n  light: '#BF8803',\n  hcDark: '#FFD370',\n  hcLight: '#895503'\n}, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport var editorWarningBorder = registerColor('editorWarning.border', {\n  dark: null,\n  light: null,\n  hcDark: Color.fromHex('#FFCC00').transparent(0.8),\n  hcLight: Color.fromHex('#FFCC00').transparent(0.8)\n}, nls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));\nexport var editorInfoBackground = registerColor('editorInfo.background', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorInfoForeground = registerColor('editorInfo.foreground', {\n  dark: '#3794FF',\n  light: '#1a85ff',\n  hcDark: '#3794FF',\n  hcLight: '#1a85ff'\n}, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport var editorInfoBorder = registerColor('editorInfo.border', {\n  dark: null,\n  light: null,\n  hcDark: Color.fromHex('#3794FF').transparent(0.8),\n  hcLight: '#292929'\n}, nls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));\nexport var editorHintForeground = registerColor('editorHint.foreground', {\n  dark: Color.fromHex('#eeeeee').transparent(0.7),\n  light: '#6c6c6c',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport var editorHintBorder = registerColor('editorHint.border', {\n  dark: null,\n  light: null,\n  hcDark: Color.fromHex('#eeeeee').transparent(0.8),\n  hcLight: '#292929'\n}, nls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));\nexport var editorActiveLinkForeground = registerColor('editorLink.activeForeground', {\n  dark: '#4E94CE',\n  light: Color.blue,\n  hcDark: Color.cyan,\n  hcLight: '#292929'\n}, nls.localize('activeLinkForeground', 'Color of active links.'));\n// ----- editor selection\nexport var editorSelectionBackground = registerColor('editor.selectionBackground', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hcDark: '#f3f518',\n  hcLight: '#0F4A85'\n}, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport var editorSelectionForeground = registerColor('editor.selectionForeground', {\n  light: null,\n  dark: null,\n  hcDark: '#000000',\n  hcLight: Color.white\n}, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport var editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', {\n  light: transparent(editorSelectionBackground, 0.5),\n  dark: transparent(editorSelectionBackground, 0.5),\n  hcDark: transparent(editorSelectionBackground, 0.7),\n  hcLight: transparent(editorSelectionBackground, 0.5)\n}, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport var editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', {\n  light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', {\n  light: null,\n  dark: null,\n  hcDark: activeContrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n// ----- editor find\nexport var editorFindMatch = registerColor('editor.findMatchBackground', {\n  light: '#A8AC94',\n  dark: '#515C6A',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport var editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', {\n  light: '#EA5C0055',\n  dark: '#EA5C0055',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport var editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', {\n  dark: '#3a3d4166',\n  light: '#b4b4b44d',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport var editorFindMatchBorder = registerColor('editor.findMatchBorder', {\n  light: null,\n  dark: null,\n  hcDark: activeContrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport var editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', {\n  light: null,\n  dark: null,\n  hcDark: activeContrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport var editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', {\n  dark: null,\n  light: null,\n  hcDark: transparent(activeContrastBorder, 0.4),\n  hcLight: transparent(activeContrastBorder, 0.4)\n}, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n// ----- editor hover\nexport var editorHoverHighlight = registerColor('editor.hoverHighlightBackground', {\n  light: '#ADD6FF26',\n  dark: '#264f7840',\n  hcDark: '#ADD6FF26',\n  hcLight: null\n}, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorHoverBackground = registerColor('editorHoverWidget.background', {\n  light: editorWidgetBackground,\n  dark: editorWidgetBackground,\n  hcDark: editorWidgetBackground,\n  hcLight: editorWidgetBackground\n}, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport var editorHoverForeground = registerColor('editorHoverWidget.foreground', {\n  light: editorWidgetForeground,\n  dark: editorWidgetForeground,\n  hcDark: editorWidgetForeground,\n  hcLight: editorWidgetForeground\n}, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport var editorHoverBorder = registerColor('editorHoverWidget.border', {\n  light: editorWidgetBorder,\n  dark: editorWidgetBorder,\n  hcDark: editorWidgetBorder,\n  hcLight: editorWidgetBorder\n}, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport var editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', {\n  dark: lighten(editorHoverBackground, 0.2),\n  light: darken(editorHoverBackground, 0.05),\n  hcDark: editorWidgetBackground,\n  hcLight: editorWidgetBackground\n}, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n// ----- editor inlay hint\nexport var editorInlayHintForeground = registerColor('editorInlayHint.foreground', {\n  dark: '#969696',\n  light: '#969696',\n  hcDark: Color.white,\n  hcLight: Color.black\n}, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport var editorInlayHintBackground = registerColor('editorInlayHint.background', {\n  dark: transparent(badgeBackground, .10),\n  light: transparent(badgeBackground, .10),\n  hcDark: transparent(Color.white, .10),\n  hcLight: transparent(badgeBackground, .10)\n}, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport var editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', {\n  dark: editorInlayHintForeground,\n  light: editorInlayHintForeground,\n  hcDark: editorInlayHintForeground,\n  hcLight: editorInlayHintForeground\n}, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport var editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', {\n  dark: editorInlayHintBackground,\n  light: editorInlayHintBackground,\n  hcDark: editorInlayHintBackground,\n  hcLight: editorInlayHintBackground\n}, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport var editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', {\n  dark: editorInlayHintForeground,\n  light: editorInlayHintForeground,\n  hcDark: editorInlayHintForeground,\n  hcLight: editorInlayHintForeground\n}, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport var editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', {\n  dark: editorInlayHintBackground,\n  light: editorInlayHintBackground,\n  hcDark: editorInlayHintBackground,\n  hcLight: editorInlayHintBackground\n}, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n// ----- editor lightbulb\nexport var editorLightBulbForeground = registerColor('editorLightBulb.foreground', {\n  dark: '#FFCC00',\n  light: '#DDB100',\n  hcDark: '#FFCC00',\n  hcLight: '#007ACC'\n}, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport var editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', {\n  dark: '#75BEFF',\n  light: '#007ACC',\n  hcDark: '#75BEFF',\n  hcLight: '#007ACC'\n}, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\nexport var editorLightBulbAiForeground = registerColor('editorLightBulbAi.foreground', {\n  dark: editorLightBulbForeground,\n  light: editorLightBulbForeground,\n  hcDark: editorLightBulbForeground,\n  hcLight: editorLightBulbForeground\n}, nls.localize('editorLightBulbAiForeground', \"The color used for the lightbulb AI icon.\"));\n// ----- editor snippet\nexport var snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', {\n  dark: new Color(new RGBA(124, 124, 124, 0.3)),\n  light: new Color(new RGBA(10, 50, 100, 0.2)),\n  hcDark: new Color(new RGBA(124, 124, 124, 0.3)),\n  hcLight: new Color(new RGBA(10, 50, 100, 0.2))\n}, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport var snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport var snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport var snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', {\n  dark: '#525252',\n  light: new Color(new RGBA(10, 50, 100, 0.5)),\n  hcDark: '#525252',\n  hcLight: '#292929'\n}, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n// ----- diff editor\nexport var defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport var defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\nexport var diffInserted = registerColor('diffEditor.insertedTextBackground', {\n  dark: '#9ccc2c33',\n  light: '#9ccc2c40',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var diffRemoved = registerColor('diffEditor.removedTextBackground', {\n  dark: '#ff000033',\n  light: '#ff000033',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var diffInsertedLine = registerColor('diffEditor.insertedLineBackground', {\n  dark: defaultInsertColor,\n  light: defaultInsertColor,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var diffRemovedLine = registerColor('diffEditor.removedLineBackground', {\n  dark: defaultRemoveColor,\n  light: defaultRemoveColor,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\nexport var diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\nexport var diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\nexport var diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\nexport var diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', {\n  dark: null,\n  light: null,\n  hcDark: '#33ff2eff',\n  hcLight: '#374E06'\n}, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport var diffRemovedOutline = registerColor('diffEditor.removedTextBorder', {\n  dark: null,\n  light: null,\n  hcDark: '#FF008F',\n  hcLight: '#AD0707'\n}, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport var diffBorder = registerColor('diffEditor.border', {\n  dark: null,\n  light: null,\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport var diffDiagonalFill = registerColor('diffEditor.diagonalFill', {\n  dark: '#cccccc33',\n  light: '#22222233',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\nexport var diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground', {\n  dark: 'sideBar.background',\n  light: 'sideBar.background',\n  hcDark: 'sideBar.background',\n  hcLight: 'sideBar.background'\n}, nls.localize('diffEditor.unchangedRegionBackground', \"The background color of unchanged blocks in the diff editor.\"));\nexport var diffUnchangedRegionForeground = registerColor('diffEditor.unchangedRegionForeground', {\n  dark: 'foreground',\n  light: 'foreground',\n  hcDark: 'foreground',\n  hcLight: 'foreground'\n}, nls.localize('diffEditor.unchangedRegionForeground', \"The foreground color of unchanged blocks in the diff editor.\"));\nexport var diffUnchangedTextBackground = registerColor('diffEditor.unchangedCodeBackground', {\n  dark: '#74747429',\n  light: '#b8b8b829',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('diffEditor.unchangedCodeBackground', \"The background color of unchanged code in the diff editor.\"));\n// ----- widget\nexport var widgetShadow = registerColor('widget.shadow', {\n  dark: transparent(Color.black, .36),\n  light: transparent(Color.black, .16),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport var widgetBorder = registerColor('widget.border', {\n  dark: null,\n  light: null,\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));\n// ----- toolbar\nexport var toolbarHoverBackground = registerColor('toolbar.hoverBackground', {\n  dark: '#5a5d5e50',\n  light: '#b8b8b850',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport var toolbarHoverOutline = registerColor('toolbar.hoverOutline', {\n  dark: null,\n  light: null,\n  hcDark: activeContrastBorder,\n  hcLight: activeContrastBorder\n}, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport var toolbarActiveBackground = registerColor('toolbar.activeBackground', {\n  dark: lighten(toolbarHoverBackground, 0.1),\n  light: darken(toolbarHoverBackground, 0.1),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n// ----- breadcumbs\nexport var breadcrumbsForeground = registerColor('breadcrumb.foreground', {\n  light: transparent(foreground, 0.8),\n  dark: transparent(foreground, 0.8),\n  hcDark: transparent(foreground, 0.8),\n  hcLight: transparent(foreground, 0.8)\n}, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport var breadcrumbsBackground = registerColor('breadcrumb.background', {\n  light: editorBackground,\n  dark: editorBackground,\n  hcDark: editorBackground,\n  hcLight: editorBackground\n}, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport var breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', {\n  light: darken(foreground, 0.2),\n  dark: lighten(foreground, 0.1),\n  hcDark: lighten(foreground, 0.1),\n  hcLight: lighten(foreground, 0.1)\n}, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport var breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', {\n  light: darken(foreground, 0.2),\n  dark: lighten(foreground, 0.1),\n  hcDark: lighten(foreground, 0.1),\n  hcLight: lighten(foreground, 0.1)\n}, nls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\nexport var breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', {\n  light: editorWidgetBackground,\n  dark: editorWidgetBackground,\n  hcDark: editorWidgetBackground,\n  hcLight: editorWidgetBackground\n}, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n// ----- merge\nvar headerTransparency = 0.5;\nvar currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nvar incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nvar commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nvar contentTransparency = 0.4;\nvar rulerTransparency = 1;\nexport var mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', {\n  dark: currentBaseColor,\n  light: currentBaseColor,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var mergeCurrentContentBackground = registerColor('merge.currentContentBackground', {\n  dark: transparent(mergeCurrentHeaderBackground, contentTransparency),\n  light: transparent(mergeCurrentHeaderBackground, contentTransparency),\n  hcDark: transparent(mergeCurrentHeaderBackground, contentTransparency),\n  hcLight: transparent(mergeCurrentHeaderBackground, contentTransparency)\n}, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', {\n  dark: incomingBaseColor,\n  light: incomingBaseColor,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', {\n  dark: transparent(mergeIncomingHeaderBackground, contentTransparency),\n  light: transparent(mergeIncomingHeaderBackground, contentTransparency),\n  hcDark: transparent(mergeIncomingHeaderBackground, contentTransparency),\n  hcLight: transparent(mergeIncomingHeaderBackground, contentTransparency)\n}, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', {\n  dark: commonBaseColor,\n  light: commonBaseColor,\n  hcDark: null,\n  hcLight: null\n}, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var mergeCommonContentBackground = registerColor('merge.commonContentBackground', {\n  dark: transparent(mergeCommonHeaderBackground, contentTransparency),\n  light: transparent(mergeCommonHeaderBackground, contentTransparency),\n  hcDark: transparent(mergeCommonHeaderBackground, contentTransparency),\n  hcLight: transparent(mergeCommonHeaderBackground, contentTransparency)\n}, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var mergeBorder = registerColor('merge.border', {\n  dark: null,\n  light: null,\n  hcDark: '#C3DF6F',\n  hcLight: '#007ACC'\n}, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport var overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', {\n  dark: transparent(mergeCurrentHeaderBackground, rulerTransparency),\n  light: transparent(mergeCurrentHeaderBackground, rulerTransparency),\n  hcDark: mergeBorder,\n  hcLight: mergeBorder\n}, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport var overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', {\n  dark: transparent(mergeIncomingHeaderBackground, rulerTransparency),\n  light: transparent(mergeIncomingHeaderBackground, rulerTransparency),\n  hcDark: mergeBorder,\n  hcLight: mergeBorder\n}, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport var overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', {\n  dark: transparent(mergeCommonHeaderBackground, rulerTransparency),\n  light: transparent(mergeCommonHeaderBackground, rulerTransparency),\n  hcDark: mergeBorder,\n  hcLight: mergeBorder\n}, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport var overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', {\n  dark: '#d186167e',\n  light: '#d186167e',\n  hcDark: '#AB5A00',\n  hcLight: ''\n}, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', {\n  dark: '#A0A0A0CC',\n  light: '#A0A0A0CC',\n  hcDark: '#A0A0A0CC',\n  hcLight: '#A0A0A0CC'\n}, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\n// ----- problems\nexport var problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', {\n  dark: editorErrorForeground,\n  light: editorErrorForeground,\n  hcDark: editorErrorForeground,\n  hcLight: editorErrorForeground\n}, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport var problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hcDark: editorWarningForeground,\n  hcLight: editorWarningForeground\n}, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport var problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', {\n  dark: editorInfoForeground,\n  light: editorInfoForeground,\n  hcDark: editorInfoForeground,\n  hcLight: editorInfoForeground\n}, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));","map":{"version":3,"names":["nls","Color","RGBA","registerColor","transparent","lessProminent","darken","lighten","foreground","contrastBorder","activeContrastBorder","scrollbarShadow","badgeBackground","editorBackground","light","dark","hcDark","black","hcLight","white","localize","editorForeground","editorStickyScrollBackground","editorStickyScrollHoverBackground","fromHex","editorStickyScrollBorder","editorStickyScrollShadow","editorWidgetBackground","editorWidgetForeground","editorWidgetBorder","editorWidgetResizeBorder","editorErrorBackground","editorErrorForeground","editorErrorBorder","editorWarningBackground","editorWarningForeground","editorWarningBorder","editorInfoBackground","editorInfoForeground","editorInfoBorder","editorHintForeground","editorHintBorder","editorActiveLinkForeground","blue","cyan","editorSelectionBackground","editorSelectionForeground","editorInactiveSelection","editorSelectionHighlight","editorSelectionHighlightBorder","editorFindMatch","editorFindMatchHighlight","editorFindRangeHighlight","editorFindMatchBorder","editorFindMatchHighlightBorder","editorFindRangeHighlightBorder","editorHoverHighlight","editorHoverBackground","editorHoverForeground","editorHoverBorder","editorHoverStatusBarBackground","editorInlayHintForeground","editorInlayHintBackground","editorInlayHintTypeForeground","editorInlayHintTypeBackground","editorInlayHintParameterForeground","editorInlayHintParameterBackground","editorLightBulbForeground","editorLightBulbAutoFixForeground","editorLightBulbAiForeground","snippetTabstopHighlightBackground","snippetTabstopHighlightBorder","snippetFinalTabstopHighlightBackground","snippetFinalTabstopHighlightBorder","defaultInsertColor","defaultRemoveColor","diffInserted","diffRemoved","diffInsertedLine","diffRemovedLine","diffInsertedLineGutter","diffRemovedLineGutter","diffOverviewRulerInserted","diffOverviewRulerRemoved","diffInsertedOutline","diffRemovedOutline","diffBorder","diffDiagonalFill","diffUnchangedRegionBackground","diffUnchangedRegionForeground","diffUnchangedTextBackground","widgetShadow","widgetBorder","toolbarHoverBackground","toolbarHoverOutline","toolbarActiveBackground","breadcrumbsForeground","breadcrumbsBackground","breadcrumbsFocusForeground","breadcrumbsActiveSelectionForeground","breadcrumbsPickerBackground","headerTransparency","currentBaseColor","incomingBaseColor","commonBaseColor","contentTransparency","rulerTransparency","mergeCurrentHeaderBackground","mergeCurrentContentBackground","mergeIncomingHeaderBackground","mergeIncomingContentBackground","mergeCommonHeaderBackground","mergeCommonContentBackground","mergeBorder","overviewRulerCurrentContentForeground","overviewRulerIncomingContentForeground","overviewRulerCommonContentForeground","overviewRulerFindMatchForeground","overviewRulerSelectionHighlightForeground","problemsErrorIconForeground","problemsWarningIconForeground","problemsInfoIconForeground"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/editorColors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lessProminent, darken, lighten } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder } from './baseColors.js';\nimport { scrollbarShadow, badgeBackground } from './miscColors.js';\n// ----- editor\nexport const editorBackground = registerColor('editor.background', { light: '#ffffff', dark: '#1E1E1E', hcDark: Color.black, hcLight: Color.white }, nls.localize('editorBackground', \"Editor background color.\"));\nexport const editorForeground = registerColor('editor.foreground', { light: '#333333', dark: '#BBBBBB', hcDark: Color.white, hcLight: foreground }, nls.localize('editorForeground', \"Editor default foreground color.\"));\nexport const editorStickyScrollBackground = registerColor('editorStickyScroll.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('editorStickyScrollBackground', \"Background color of sticky scroll in the editor\"));\nexport const editorStickyScrollHoverBackground = registerColor('editorStickyScrollHover.background', { dark: '#2A2D2E', light: '#F0F0F0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) }, nls.localize('editorStickyScrollHoverBackground', \"Background color of sticky scroll on hover in the editor\"));\nexport const editorStickyScrollBorder = registerColor('editorStickyScroll.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorStickyScrollBorder', \"Border color of sticky scroll in the editor\"));\nexport const editorStickyScrollShadow = registerColor('editorStickyScroll.shadow', { dark: scrollbarShadow, light: scrollbarShadow, hcDark: scrollbarShadow, hcLight: scrollbarShadow }, nls.localize('editorStickyScrollShadow', \" Shadow color of sticky scroll in the editor\"));\nexport const editorWidgetBackground = registerColor('editorWidget.background', { dark: '#252526', light: '#F3F3F3', hcDark: '#0C141F', hcLight: Color.white }, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport const editorWidgetForeground = registerColor('editorWidget.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport const editorWidgetBorder = registerColor('editorWidget.border', { dark: '#454545', light: '#C8C8C8', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport const editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', { light: null, dark: null, hcDark: null, hcLight: null }, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\nexport const editorErrorBackground = registerColor('editorError.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorError.background', 'Background color of error text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorErrorForeground = registerColor('editorError.foreground', { dark: '#F14C4C', light: '#E51400', hcDark: '#F48771', hcLight: '#B5200D' }, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport const editorErrorBorder = registerColor('editorError.border', { dark: null, light: null, hcDark: Color.fromHex('#E47777').transparent(0.8), hcLight: '#B5200D' }, nls.localize('errorBorder', 'If set, color of double underlines for errors in the editor.'));\nexport const editorWarningBackground = registerColor('editorWarning.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorWarning.background', 'Background color of warning text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorWarningForeground = registerColor('editorWarning.foreground', { dark: '#CCA700', light: '#BF8803', hcDark: '#FFD370', hcLight: '#895503' }, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport const editorWarningBorder = registerColor('editorWarning.border', { dark: null, light: null, hcDark: Color.fromHex('#FFCC00').transparent(0.8), hcLight: Color.fromHex('#FFCC00').transparent(0.8) }, nls.localize('warningBorder', 'If set, color of double underlines for warnings in the editor.'));\nexport const editorInfoBackground = registerColor('editorInfo.background', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('editorInfo.background', 'Background color of info text in the editor. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorInfoForeground = registerColor('editorInfo.foreground', { dark: '#3794FF', light: '#1a85ff', hcDark: '#3794FF', hcLight: '#1a85ff' }, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport const editorInfoBorder = registerColor('editorInfo.border', { dark: null, light: null, hcDark: Color.fromHex('#3794FF').transparent(0.8), hcLight: '#292929' }, nls.localize('infoBorder', 'If set, color of double underlines for infos in the editor.'));\nexport const editorHintForeground = registerColor('editorHint.foreground', { dark: Color.fromHex('#eeeeee').transparent(0.7), light: '#6c6c6c', hcDark: null, hcLight: null }, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport const editorHintBorder = registerColor('editorHint.border', { dark: null, light: null, hcDark: Color.fromHex('#eeeeee').transparent(0.8), hcLight: '#292929' }, nls.localize('hintBorder', 'If set, color of double underlines for hints in the editor.'));\nexport const editorActiveLinkForeground = registerColor('editorLink.activeForeground', { dark: '#4E94CE', light: Color.blue, hcDark: Color.cyan, hcLight: '#292929' }, nls.localize('activeLinkForeground', 'Color of active links.'));\n// ----- editor selection\nexport const editorSelectionBackground = registerColor('editor.selectionBackground', { light: '#ADD6FF', dark: '#264F78', hcDark: '#f3f518', hcLight: '#0F4A85' }, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport const editorSelectionForeground = registerColor('editor.selectionForeground', { light: null, dark: null, hcDark: '#000000', hcLight: Color.white }, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport const editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', { light: transparent(editorSelectionBackground, 0.5), dark: transparent(editorSelectionBackground, 0.5), hcDark: transparent(editorSelectionBackground, 0.7), hcLight: transparent(editorSelectionBackground, 0.5) }, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', { light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6), hcDark: null, hcLight: null }, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n// ----- editor find\nexport const editorFindMatch = registerColor('editor.findMatchBackground', { light: '#A8AC94', dark: '#515C6A', hcDark: null, hcLight: null }, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport const editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', { light: '#EA5C0055', dark: '#EA5C0055', hcDark: null, hcLight: null }, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', { dark: '#3a3d4166', light: '#b4b4b44d', hcDark: null, hcLight: null }, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport const editorFindMatchBorder = registerColor('editor.findMatchBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport const editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', { light: null, dark: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport const editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', { dark: null, light: null, hcDark: transparent(activeContrastBorder, 0.4), hcLight: transparent(activeContrastBorder, 0.4) }, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n// ----- editor hover\nexport const editorHoverHighlight = registerColor('editor.hoverHighlightBackground', { light: '#ADD6FF26', dark: '#264f7840', hcDark: '#ADD6FF26', hcLight: null }, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const editorHoverBackground = registerColor('editorHoverWidget.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport const editorHoverForeground = registerColor('editorHoverWidget.foreground', { light: editorWidgetForeground, dark: editorWidgetForeground, hcDark: editorWidgetForeground, hcLight: editorWidgetForeground }, nls.localize('hoverForeground', 'Foreground color of the editor hover.'));\nexport const editorHoverBorder = registerColor('editorHoverWidget.border', { light: editorWidgetBorder, dark: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport const editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', { dark: lighten(editorHoverBackground, 0.2), light: darken(editorHoverBackground, 0.05), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n// ----- editor inlay hint\nexport const editorInlayHintForeground = registerColor('editorInlayHint.foreground', { dark: '#969696', light: '#969696', hcDark: Color.white, hcLight: Color.black }, nls.localize('editorInlayHintForeground', 'Foreground color of inline hints'));\nexport const editorInlayHintBackground = registerColor('editorInlayHint.background', { dark: transparent(badgeBackground, .10), light: transparent(badgeBackground, .10), hcDark: transparent(Color.white, .10), hcLight: transparent(badgeBackground, .10) }, nls.localize('editorInlayHintBackground', 'Background color of inline hints'));\nexport const editorInlayHintTypeForeground = registerColor('editorInlayHint.typeForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundTypes', 'Foreground color of inline hints for types'));\nexport const editorInlayHintTypeBackground = registerColor('editorInlayHint.typeBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundTypes', 'Background color of inline hints for types'));\nexport const editorInlayHintParameterForeground = registerColor('editorInlayHint.parameterForeground', { dark: editorInlayHintForeground, light: editorInlayHintForeground, hcDark: editorInlayHintForeground, hcLight: editorInlayHintForeground }, nls.localize('editorInlayHintForegroundParameter', 'Foreground color of inline hints for parameters'));\nexport const editorInlayHintParameterBackground = registerColor('editorInlayHint.parameterBackground', { dark: editorInlayHintBackground, light: editorInlayHintBackground, hcDark: editorInlayHintBackground, hcLight: editorInlayHintBackground }, nls.localize('editorInlayHintBackgroundParameter', 'Background color of inline hints for parameters'));\n// ----- editor lightbulb\nexport const editorLightBulbForeground = registerColor('editorLightBulb.foreground', { dark: '#FFCC00', light: '#DDB100', hcDark: '#FFCC00', hcLight: '#007ACC' }, nls.localize('editorLightBulbForeground', \"The color used for the lightbulb actions icon.\"));\nexport const editorLightBulbAutoFixForeground = registerColor('editorLightBulbAutoFix.foreground', { dark: '#75BEFF', light: '#007ACC', hcDark: '#75BEFF', hcLight: '#007ACC' }, nls.localize('editorLightBulbAutoFixForeground', \"The color used for the lightbulb auto fix actions icon.\"));\nexport const editorLightBulbAiForeground = registerColor('editorLightBulbAi.foreground', { dark: editorLightBulbForeground, light: editorLightBulbForeground, hcDark: editorLightBulbForeground, hcLight: editorLightBulbForeground }, nls.localize('editorLightBulbAiForeground', \"The color used for the lightbulb AI icon.\"));\n// ----- editor snippet\nexport const snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', { dark: new Color(new RGBA(124, 124, 124, 0.3)), light: new Color(new RGBA(10, 50, 100, 0.2)), hcDark: new Color(new RGBA(124, 124, 124, 0.3)), hcLight: new Color(new RGBA(10, 50, 100, 0.2)) }, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport const snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport const snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport const snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', { dark: '#525252', light: new Color(new RGBA(10, 50, 100, 0.5)), hcDark: '#525252', hcLight: '#292929' }, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final tabstop of a snippet.\"));\n// ----- diff editor\nexport const defaultInsertColor = new Color(new RGBA(155, 185, 85, .2));\nexport const defaultRemoveColor = new Color(new RGBA(255, 0, 0, .2));\nexport const diffInserted = registerColor('diffEditor.insertedTextBackground', { dark: '#9ccc2c33', light: '#9ccc2c40', hcDark: null, hcLight: null }, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemoved = registerColor('diffEditor.removedTextBackground', { dark: '#ff000033', light: '#ff000033', hcDark: null, hcLight: null }, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLine = registerColor('diffEditor.insertedLineBackground', { dark: defaultInsertColor, light: defaultInsertColor, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLines', 'Background color for lines that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffRemovedLine = registerColor('diffEditor.removedLineBackground', { dark: defaultRemoveColor, light: defaultRemoveColor, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLines', 'Background color for lines that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const diffInsertedLineGutter = registerColor('diffEditorGutter.insertedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorInsertedLineGutter', 'Background color for the margin where lines got inserted.'));\nexport const diffRemovedLineGutter = registerColor('diffEditorGutter.removedLineBackground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorRemovedLineGutter', 'Background color for the margin where lines got removed.'));\nexport const diffOverviewRulerInserted = registerColor('diffEditorOverview.insertedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewInserted', 'Diff overview ruler foreground for inserted content.'));\nexport const diffOverviewRulerRemoved = registerColor('diffEditorOverview.removedForeground', { dark: null, light: null, hcDark: null, hcLight: null }, nls.localize('diffEditorOverviewRemoved', 'Diff overview ruler foreground for removed content.'));\nexport const diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', { dark: null, light: null, hcDark: '#33ff2eff', hcLight: '#374E06' }, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport const diffRemovedOutline = registerColor('diffEditor.removedTextBorder', { dark: null, light: null, hcDark: '#FF008F', hcLight: '#AD0707' }, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport const diffBorder = registerColor('diffEditor.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\nexport const diffDiagonalFill = registerColor('diffEditor.diagonalFill', { dark: '#cccccc33', light: '#22222233', hcDark: null, hcLight: null }, nls.localize('diffDiagonalFill', \"Color of the diff editor's diagonal fill. The diagonal fill is used in side-by-side diff views.\"));\nexport const diffUnchangedRegionBackground = registerColor('diffEditor.unchangedRegionBackground', { dark: 'sideBar.background', light: 'sideBar.background', hcDark: 'sideBar.background', hcLight: 'sideBar.background' }, nls.localize('diffEditor.unchangedRegionBackground', \"The background color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedRegionForeground = registerColor('diffEditor.unchangedRegionForeground', { dark: 'foreground', light: 'foreground', hcDark: 'foreground', hcLight: 'foreground' }, nls.localize('diffEditor.unchangedRegionForeground', \"The foreground color of unchanged blocks in the diff editor.\"));\nexport const diffUnchangedTextBackground = registerColor('diffEditor.unchangedCodeBackground', { dark: '#74747429', light: '#b8b8b829', hcDark: null, hcLight: null }, nls.localize('diffEditor.unchangedCodeBackground', \"The background color of unchanged code in the diff editor.\"));\n// ----- widget\nexport const widgetShadow = registerColor('widget.shadow', { dark: transparent(Color.black, .36), light: transparent(Color.black, .16), hcDark: null, hcLight: null }, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport const widgetBorder = registerColor('widget.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('widgetBorder', 'Border color of widgets such as find/replace inside the editor.'));\n// ----- toolbar\nexport const toolbarHoverBackground = registerColor('toolbar.hoverBackground', { dark: '#5a5d5e50', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('toolbarHoverBackground', \"Toolbar background when hovering over actions using the mouse\"));\nexport const toolbarHoverOutline = registerColor('toolbar.hoverOutline', { dark: null, light: null, hcDark: activeContrastBorder, hcLight: activeContrastBorder }, nls.localize('toolbarHoverOutline', \"Toolbar outline when hovering over actions using the mouse\"));\nexport const toolbarActiveBackground = registerColor('toolbar.activeBackground', { dark: lighten(toolbarHoverBackground, 0.1), light: darken(toolbarHoverBackground, 0.1), hcDark: null, hcLight: null }, nls.localize('toolbarActiveBackground', \"Toolbar background when holding the mouse over actions\"));\n// ----- breadcumbs\nexport const breadcrumbsForeground = registerColor('breadcrumb.foreground', { light: transparent(foreground, 0.8), dark: transparent(foreground, 0.8), hcDark: transparent(foreground, 0.8), hcLight: transparent(foreground, 0.8) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsBackground = registerColor('breadcrumb.background', { light: editorBackground, dark: editorBackground, hcDark: editorBackground, hcLight: editorBackground }, nls.localize('breadcrumbsBackground', \"Background color of breadcrumb items.\"));\nexport const breadcrumbsFocusForeground = registerColor('breadcrumb.focusForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsFocusForeground', \"Color of focused breadcrumb items.\"));\nexport const breadcrumbsActiveSelectionForeground = registerColor('breadcrumb.activeSelectionForeground', { light: darken(foreground, 0.2), dark: lighten(foreground, 0.1), hcDark: lighten(foreground, 0.1), hcLight: lighten(foreground, 0.1) }, nls.localize('breadcrumbsSelectedForeground', \"Color of selected breadcrumb items.\"));\nexport const breadcrumbsPickerBackground = registerColor('breadcrumbPicker.background', { light: editorWidgetBackground, dark: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, nls.localize('breadcrumbsSelectedBackground', \"Background color of breadcrumb item picker.\"));\n// ----- merge\nconst headerTransparency = 0.5;\nconst currentBaseColor = Color.fromHex('#40C8AE').transparent(headerTransparency);\nconst incomingBaseColor = Color.fromHex('#40A6FF').transparent(headerTransparency);\nconst commonBaseColor = Color.fromHex('#606060').transparent(0.4);\nconst contentTransparency = 0.4;\nconst rulerTransparency = 1;\nexport const mergeCurrentHeaderBackground = registerColor('merge.currentHeaderBackground', { dark: currentBaseColor, light: currentBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCurrentHeaderBackground', 'Current header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCurrentContentBackground = registerColor('merge.currentContentBackground', { dark: transparent(mergeCurrentHeaderBackground, contentTransparency), light: transparent(mergeCurrentHeaderBackground, contentTransparency), hcDark: transparent(mergeCurrentHeaderBackground, contentTransparency), hcLight: transparent(mergeCurrentHeaderBackground, contentTransparency) }, nls.localize('mergeCurrentContentBackground', 'Current content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingHeaderBackground = registerColor('merge.incomingHeaderBackground', { dark: incomingBaseColor, light: incomingBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeIncomingHeaderBackground', 'Incoming header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeIncomingContentBackground = registerColor('merge.incomingContentBackground', { dark: transparent(mergeIncomingHeaderBackground, contentTransparency), light: transparent(mergeIncomingHeaderBackground, contentTransparency), hcDark: transparent(mergeIncomingHeaderBackground, contentTransparency), hcLight: transparent(mergeIncomingHeaderBackground, contentTransparency) }, nls.localize('mergeIncomingContentBackground', 'Incoming content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonHeaderBackground = registerColor('merge.commonHeaderBackground', { dark: commonBaseColor, light: commonBaseColor, hcDark: null, hcLight: null }, nls.localize('mergeCommonHeaderBackground', 'Common ancestor header background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeCommonContentBackground = registerColor('merge.commonContentBackground', { dark: transparent(mergeCommonHeaderBackground, contentTransparency), light: transparent(mergeCommonHeaderBackground, contentTransparency), hcDark: transparent(mergeCommonHeaderBackground, contentTransparency), hcLight: transparent(mergeCommonHeaderBackground, contentTransparency) }, nls.localize('mergeCommonContentBackground', 'Common ancestor content background in inline merge-conflicts. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const mergeBorder = registerColor('merge.border', { dark: null, light: null, hcDark: '#C3DF6F', hcLight: '#007ACC' }, nls.localize('mergeBorder', 'Border color on headers and the splitter in inline merge-conflicts.'));\nexport const overviewRulerCurrentContentForeground = registerColor('editorOverviewRuler.currentContentForeground', { dark: transparent(mergeCurrentHeaderBackground, rulerTransparency), light: transparent(mergeCurrentHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCurrentContentForeground', 'Current overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerIncomingContentForeground = registerColor('editorOverviewRuler.incomingContentForeground', { dark: transparent(mergeIncomingHeaderBackground, rulerTransparency), light: transparent(mergeIncomingHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerIncomingContentForeground', 'Incoming overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerCommonContentForeground = registerColor('editorOverviewRuler.commonContentForeground', { dark: transparent(mergeCommonHeaderBackground, rulerTransparency), light: transparent(mergeCommonHeaderBackground, rulerTransparency), hcDark: mergeBorder, hcLight: mergeBorder }, nls.localize('overviewRulerCommonContentForeground', 'Common ancestor overview ruler foreground for inline merge-conflicts.'));\nexport const overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', { dark: '#d186167e', light: '#d186167e', hcDark: '#AB5A00', hcLight: '' }, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport const overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', { dark: '#A0A0A0CC', light: '#A0A0A0CC', hcDark: '#A0A0A0CC', hcLight: '#A0A0A0CC' }, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\n// ----- problems\nexport const problemsErrorIconForeground = registerColor('problemsErrorIcon.foreground', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('problemsErrorIconForeground', \"The color used for the problems error icon.\"));\nexport const problemsWarningIconForeground = registerColor('problemsWarningIcon.foreground', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('problemsWarningIconForeground', \"The color used for the problems warning icon.\"));\nexport const problemsInfoIconForeground = registerColor('problemsInfoIcon.foreground', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('problemsInfoIconForeground', \"The color used for the problems info icon.\"));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}