{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.includes.js\";\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('katex').KatexOptions} Options\n */\n\nimport katex from 'katex';\nimport { visit } from 'unist-util-visit';\nimport { toText } from 'hast-util-to-text';\nimport { fromHtmlIsomorphic } from 'hast-util-from-html-isomorphic';\nvar assign = Object.assign;\nvar source = 'rehype-katex';\n\n/**\n * Plugin to transform `<span class=math-inline>` and `<div class=math-display>`\n * with KaTeX.\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function rehypeKatex(options) {\n  var settings = options || {};\n  var throwOnError = settings.throwOnError || false;\n  return function (tree, file) {\n    visit(tree, 'element', function (element) {\n      var classes = element.properties && Array.isArray(element.properties.className) ? element.properties.className : [];\n      var inline = classes.includes('math-inline');\n      var displayMode = classes.includes('math-display');\n      if (!inline && !displayMode) {\n        return;\n      }\n      var value = toText(element, {\n        whitespace: 'pre'\n      });\n\n      /** @type {string} */\n      var result;\n      try {\n        result = katex.renderToString(value, assign({}, settings, {\n          displayMode: displayMode,\n          throwOnError: true\n        }));\n      } catch (error_) {\n        var error = /** @type {Error} */error_;\n        var fn = throwOnError ? 'fail' : 'message';\n        var origin = [source, error.name.toLowerCase()].join(':');\n        file[fn](error.message, element.position, origin);\n\n        // KaTeX can handle `ParseError` itself, but not others.\n        // Generate similar markup if this is an other error.\n        // See: <https://github.com/KaTeX/KaTeX/blob/5dc7af0/docs/error.md>.\n        if (error.name !== 'ParseError') {\n          element.children = [{\n            type: 'element',\n            tagName: 'span',\n            properties: {\n              className: ['katex-error'],\n              title: String(error),\n              style: 'color:' + (settings.errorColor || '#cc0000')\n            },\n            children: [{\n              type: 'text',\n              value: value\n            }]\n          }];\n          return;\n        }\n        result = katex.renderToString(value, assign({}, settings, {\n          displayMode: displayMode,\n          throwOnError: false,\n          strict: 'ignore'\n        }));\n      }\n      var root = fromHtmlIsomorphic(result, {\n        fragment: true\n      });\n      // @ts-expect-error: assume no `doctypes` in KaTeX result.\n      element.children = root.children;\n    });\n  };\n}","map":{"version":3,"names":["katex","visit","toText","fromHtmlIsomorphic","assign","Object","source","rehypeKatex","options","settings","throwOnError","tree","file","element","classes","properties","Array","isArray","className","inline","includes","displayMode","value","whitespace","result","renderToString","error_","error","fn","origin","name","toLowerCase","join","message","position","children","type","tagName","title","String","style","errorColor","strict","root","fragment"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/rehype-katex/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('katex').KatexOptions} Options\n */\n\nimport katex from 'katex'\nimport {visit} from 'unist-util-visit'\nimport {toText} from 'hast-util-to-text'\nimport {fromHtmlIsomorphic} from 'hast-util-from-html-isomorphic'\n\nconst assign = Object.assign\n\nconst source = 'rehype-katex'\n\n/**\n * Plugin to transform `<span class=math-inline>` and `<div class=math-display>`\n * with KaTeX.\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function rehypeKatex(options) {\n  const settings = options || {}\n  const throwOnError = settings.throwOnError || false\n\n  return (tree, file) => {\n    visit(tree, 'element', (element) => {\n      const classes =\n        element.properties && Array.isArray(element.properties.className)\n          ? element.properties.className\n          : []\n      const inline = classes.includes('math-inline')\n      const displayMode = classes.includes('math-display')\n\n      if (!inline && !displayMode) {\n        return\n      }\n\n      const value = toText(element, {whitespace: 'pre'})\n\n      /** @type {string} */\n      let result\n\n      try {\n        result = katex.renderToString(\n          value,\n          assign({}, settings, {displayMode, throwOnError: true})\n        )\n      } catch (error_) {\n        const error = /** @type {Error} */ (error_)\n        const fn = throwOnError ? 'fail' : 'message'\n        const origin = [source, error.name.toLowerCase()].join(':')\n\n        file[fn](error.message, element.position, origin)\n\n        // KaTeX can handle `ParseError` itself, but not others.\n        // Generate similar markup if this is an other error.\n        // See: <https://github.com/KaTeX/KaTeX/blob/5dc7af0/docs/error.md>.\n        if (error.name !== 'ParseError') {\n          element.children = [\n            {\n              type: 'element',\n              tagName: 'span',\n              properties: {\n                className: ['katex-error'],\n                title: String(error),\n                style: 'color:' + (settings.errorColor || '#cc0000')\n              },\n              children: [{type: 'text', value}]\n            }\n          ]\n          return\n        }\n\n        result = katex.renderToString(\n          value,\n          assign({}, settings, {\n            displayMode,\n            throwOnError: false,\n            strict: 'ignore'\n          })\n        )\n      }\n\n      const root = fromHtmlIsomorphic(result, {fragment: true})\n      // @ts-expect-error: assume no `doctypes` in KaTeX result.\n      element.children = root.children\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}