{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\nexport var ViewController = /*#__PURE__*/function () {\n  function ViewController(configuration, viewModel, userInputEvents, commandDelegate) {\n    _classCallCheck(this, ViewController);\n    this.configuration = configuration;\n    this.viewModel = viewModel;\n    this.userInputEvents = userInputEvents;\n    this.commandDelegate = commandDelegate;\n  }\n  return _createClass(ViewController, [{\n    key: \"paste\",\n    value: function paste(text, pasteOnNewLine, multicursorText, mode) {\n      this.commandDelegate.paste(text, pasteOnNewLine, multicursorText, mode);\n    }\n  }, {\n    key: \"type\",\n    value: function type(text) {\n      this.commandDelegate.type(text);\n    }\n  }, {\n    key: \"compositionType\",\n    value: function compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n      this.commandDelegate.compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n    }\n  }, {\n    key: \"compositionStart\",\n    value: function compositionStart() {\n      this.commandDelegate.startComposition();\n    }\n  }, {\n    key: \"compositionEnd\",\n    value: function compositionEnd() {\n      this.commandDelegate.endComposition();\n    }\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      this.commandDelegate.cut();\n    }\n  }, {\n    key: \"setSelection\",\n    value: function setSelection(modelSelection) {\n      CoreNavigationCommands.SetSelection.runCoreEditorCommand(this.viewModel, {\n        source: 'keyboard',\n        selection: modelSelection\n      });\n    }\n  }, {\n    key: \"_validateViewColumn\",\n    value: function _validateViewColumn(viewPosition) {\n      var minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n      if (viewPosition.column < minColumn) {\n        return new Position(viewPosition.lineNumber, minColumn);\n      }\n      return viewPosition;\n    }\n  }, {\n    key: \"_hasMulticursorModifier\",\n    value: function _hasMulticursorModifier(data) {\n      switch (this.configuration.options.get(78 /* EditorOption.multiCursorModifier */)) {\n        case 'altKey':\n          return data.altKey;\n        case 'ctrlKey':\n          return data.ctrlKey;\n        case 'metaKey':\n          return data.metaKey;\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"_hasNonMulticursorModifier\",\n    value: function _hasNonMulticursorModifier(data) {\n      switch (this.configuration.options.get(78 /* EditorOption.multiCursorModifier */)) {\n        case 'altKey':\n          return data.ctrlKey || data.metaKey;\n        case 'ctrlKey':\n          return data.altKey || data.metaKey;\n        case 'metaKey':\n          return data.ctrlKey || data.altKey;\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"dispatchMouse\",\n    value: function dispatchMouse(data) {\n      var options = this.configuration.options;\n      var selectionClipboardIsOn = platform.isLinux && options.get(107 /* EditorOption.selectionClipboard */);\n      var columnSelection = options.get(22 /* EditorOption.columnSelection */);\n      if (data.middleButton && !selectionClipboardIsOn) {\n        this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n      } else if (data.startedOnLineNumbers) {\n        // If the dragging started on the gutter, then have operations work on the entire line\n        if (this._hasMulticursorModifier(data)) {\n          if (data.inSelectionMode) {\n            this._lastCursorLineSelect(data.position, data.revealType);\n          } else {\n            this._createCursor(data.position, true);\n          }\n        } else {\n          if (data.inSelectionMode) {\n            this._lineSelectDrag(data.position, data.revealType);\n          } else {\n            this._lineSelect(data.position, data.revealType);\n          }\n        }\n      } else if (data.mouseDownCount >= 4) {\n        this._selectAll();\n      } else if (data.mouseDownCount === 3) {\n        if (this._hasMulticursorModifier(data)) {\n          if (data.inSelectionMode) {\n            this._lastCursorLineSelectDrag(data.position, data.revealType);\n          } else {\n            this._lastCursorLineSelect(data.position, data.revealType);\n          }\n        } else {\n          if (data.inSelectionMode) {\n            this._lineSelectDrag(data.position, data.revealType);\n          } else {\n            this._lineSelect(data.position, data.revealType);\n          }\n        }\n      } else if (data.mouseDownCount === 2) {\n        if (!data.onInjectedText) {\n          if (this._hasMulticursorModifier(data)) {\n            this._lastCursorWordSelect(data.position, data.revealType);\n          } else {\n            if (data.inSelectionMode) {\n              this._wordSelectDrag(data.position, data.revealType);\n            } else {\n              this._wordSelect(data.position, data.revealType);\n            }\n          }\n        }\n      } else {\n        if (this._hasMulticursorModifier(data)) {\n          if (!this._hasNonMulticursorModifier(data)) {\n            if (data.shiftKey) {\n              this._columnSelect(data.position, data.mouseColumn, true);\n            } else {\n              // Do multi-cursor operations only when purely alt is pressed\n              if (data.inSelectionMode) {\n                this._lastCursorMoveToSelect(data.position, data.revealType);\n              } else {\n                this._createCursor(data.position, false);\n              }\n            }\n          }\n        } else {\n          if (data.inSelectionMode) {\n            if (data.altKey) {\n              this._columnSelect(data.position, data.mouseColumn, true);\n            } else {\n              if (columnSelection) {\n                this._columnSelect(data.position, data.mouseColumn, true);\n              } else {\n                this._moveToSelect(data.position, data.revealType);\n              }\n            }\n          } else {\n            this.moveTo(data.position, data.revealType);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_usualArgs\",\n    value: function _usualArgs(viewPosition, revealType) {\n      viewPosition = this._validateViewColumn(viewPosition);\n      return {\n        source: 'mouse',\n        position: this._convertViewToModelPosition(viewPosition),\n        viewPosition: viewPosition,\n        revealType: revealType\n      };\n    }\n  }, {\n    key: \"moveTo\",\n    value: function moveTo(viewPosition, revealType) {\n      CoreNavigationCommands.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n  }, {\n    key: \"_moveToSelect\",\n    value: function _moveToSelect(viewPosition, revealType) {\n      CoreNavigationCommands.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n  }, {\n    key: \"_columnSelect\",\n    value: function _columnSelect(viewPosition, mouseColumn, doColumnSelect) {\n      viewPosition = this._validateViewColumn(viewPosition);\n      CoreNavigationCommands.ColumnSelect.runCoreEditorCommand(this.viewModel, {\n        source: 'mouse',\n        position: this._convertViewToModelPosition(viewPosition),\n        viewPosition: viewPosition,\n        mouseColumn: mouseColumn,\n        doColumnSelect: doColumnSelect\n      });\n    }\n  }, {\n    key: \"_createCursor\",\n    value: function _createCursor(viewPosition, wholeLine) {\n      viewPosition = this._validateViewColumn(viewPosition);\n      CoreNavigationCommands.CreateCursor.runCoreEditorCommand(this.viewModel, {\n        source: 'mouse',\n        position: this._convertViewToModelPosition(viewPosition),\n        viewPosition: viewPosition,\n        wholeLine: wholeLine\n      });\n    }\n  }, {\n    key: \"_lastCursorMoveToSelect\",\n    value: function _lastCursorMoveToSelect(viewPosition, revealType) {\n      CoreNavigationCommands.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n  }, {\n    key: \"_wordSelect\",\n    value: function _wordSelect(viewPosition, revealType) {\n      CoreNavigationCommands.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n  }, {\n    key: \"_wordSelectDrag\",\n    value: function _wordSelectDrag(viewPosition, revealType) {\n      CoreNavigationCommands.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n  }, {\n    key: \"_lastCursorWordSelect\",\n    value: function _lastCursorWordSelect(viewPosition, revealType) {\n      CoreNavigationCommands.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n  }, {\n    key: \"_lineSelect\",\n    value: function _lineSelect(viewPosition, revealType) {\n      CoreNavigationCommands.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n  }, {\n    key: \"_lineSelectDrag\",\n    value: function _lineSelectDrag(viewPosition, revealType) {\n      CoreNavigationCommands.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n  }, {\n    key: \"_lastCursorLineSelect\",\n    value: function _lastCursorLineSelect(viewPosition, revealType) {\n      CoreNavigationCommands.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n  }, {\n    key: \"_lastCursorLineSelectDrag\",\n    value: function _lastCursorLineSelectDrag(viewPosition, revealType) {\n      CoreNavigationCommands.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n  }, {\n    key: \"_selectAll\",\n    value: function _selectAll() {\n      CoreNavigationCommands.SelectAll.runCoreEditorCommand(this.viewModel, {\n        source: 'mouse'\n      });\n    }\n    // ----------------------\n  }, {\n    key: \"_convertViewToModelPosition\",\n    value: function _convertViewToModelPosition(viewPosition) {\n      return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n    }\n  }, {\n    key: \"emitKeyDown\",\n    value: function emitKeyDown(e) {\n      this.userInputEvents.emitKeyDown(e);\n    }\n  }, {\n    key: \"emitKeyUp\",\n    value: function emitKeyUp(e) {\n      this.userInputEvents.emitKeyUp(e);\n    }\n  }, {\n    key: \"emitContextMenu\",\n    value: function emitContextMenu(e) {\n      this.userInputEvents.emitContextMenu(e);\n    }\n  }, {\n    key: \"emitMouseMove\",\n    value: function emitMouseMove(e) {\n      this.userInputEvents.emitMouseMove(e);\n    }\n  }, {\n    key: \"emitMouseLeave\",\n    value: function emitMouseLeave(e) {\n      this.userInputEvents.emitMouseLeave(e);\n    }\n  }, {\n    key: \"emitMouseUp\",\n    value: function emitMouseUp(e) {\n      this.userInputEvents.emitMouseUp(e);\n    }\n  }, {\n    key: \"emitMouseDown\",\n    value: function emitMouseDown(e) {\n      this.userInputEvents.emitMouseDown(e);\n    }\n  }, {\n    key: \"emitMouseDrag\",\n    value: function emitMouseDrag(e) {\n      this.userInputEvents.emitMouseDrag(e);\n    }\n  }, {\n    key: \"emitMouseDrop\",\n    value: function emitMouseDrop(e) {\n      this.userInputEvents.emitMouseDrop(e);\n    }\n  }, {\n    key: \"emitMouseDropCanceled\",\n    value: function emitMouseDropCanceled() {\n      this.userInputEvents.emitMouseDropCanceled();\n    }\n  }, {\n    key: \"emitMouseWheel\",\n    value: function emitMouseWheel(e) {\n      this.userInputEvents.emitMouseWheel(e);\n    }\n  }]);\n}();","map":{"version":3,"names":["CoreNavigationCommands","Position","platform","ViewController","configuration","viewModel","userInputEvents","commandDelegate","_classCallCheck","_createClass","key","value","paste","text","pasteOnNewLine","multicursorText","mode","type","compositionType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","compositionStart","startComposition","compositionEnd","endComposition","cut","setSelection","modelSelection","SetSelection","runCoreEditorCommand","source","selection","_validateViewColumn","viewPosition","minColumn","getLineMinColumn","lineNumber","column","_hasMulticursorModifier","data","options","get","altKey","ctrlKey","metaKey","_hasNonMulticursorModifier","dispatchMouse","selectionClipboardIsOn","isLinux","columnSelection","middleButton","_columnSelect","position","mouseColumn","inSelectionMode","startedOnLineNumbers","_lastCursorLineSelect","revealType","_createCursor","_lineSelectDrag","_lineSelect","mouseDownCount","_selectAll","_lastCursorLineSelectDrag","onInjectedText","_lastCursorWordSelect","_wordSelectDrag","_wordSelect","shiftKey","_lastCursorMoveToSelect","_moveToSelect","moveTo","_usualArgs","_convertViewToModelPosition","MoveTo","MoveToSelect","doColumnSelect","ColumnSelect","wholeLine","CreateCursor","LastCursorMoveToSelect","WordSelect","WordSelectDrag","LastCursorWordSelect","LineSelect","LineSelectDrag","LastCursorLineSelect","LastCursorLineSelectDrag","SelectAll","coordinatesConverter","convertViewPositionToModelPosition","emitKeyDown","e","emitKeyUp","emitContextMenu","emitMouseMove","emitMouseLeave","emitMouseUp","emitMouseDown","emitMouseDrag","emitMouseDrop","emitMouseDropCanceled","emitMouseWheel"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/browser/view/viewController.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../coreCommands.js';\nimport { Position } from '../../common/core/position.js';\nimport * as platform from '../../../base/common/platform.js';\nexport class ViewController {\n    constructor(configuration, viewModel, userInputEvents, commandDelegate) {\n        this.configuration = configuration;\n        this.viewModel = viewModel;\n        this.userInputEvents = userInputEvents;\n        this.commandDelegate = commandDelegate;\n    }\n    paste(text, pasteOnNewLine, multicursorText, mode) {\n        this.commandDelegate.paste(text, pasteOnNewLine, multicursorText, mode);\n    }\n    type(text) {\n        this.commandDelegate.type(text);\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        this.commandDelegate.compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n    }\n    compositionStart() {\n        this.commandDelegate.startComposition();\n    }\n    compositionEnd() {\n        this.commandDelegate.endComposition();\n    }\n    cut() {\n        this.commandDelegate.cut();\n    }\n    setSelection(modelSelection) {\n        CoreNavigationCommands.SetSelection.runCoreEditorCommand(this.viewModel, {\n            source: 'keyboard',\n            selection: modelSelection\n        });\n    }\n    _validateViewColumn(viewPosition) {\n        const minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n        if (viewPosition.column < minColumn) {\n            return new Position(viewPosition.lineNumber, minColumn);\n        }\n        return viewPosition;\n    }\n    _hasMulticursorModifier(data) {\n        switch (this.configuration.options.get(78 /* EditorOption.multiCursorModifier */)) {\n            case 'altKey':\n                return data.altKey;\n            case 'ctrlKey':\n                return data.ctrlKey;\n            case 'metaKey':\n                return data.metaKey;\n            default:\n                return false;\n        }\n    }\n    _hasNonMulticursorModifier(data) {\n        switch (this.configuration.options.get(78 /* EditorOption.multiCursorModifier */)) {\n            case 'altKey':\n                return data.ctrlKey || data.metaKey;\n            case 'ctrlKey':\n                return data.altKey || data.metaKey;\n            case 'metaKey':\n                return data.ctrlKey || data.altKey;\n            default:\n                return false;\n        }\n    }\n    dispatchMouse(data) {\n        const options = this.configuration.options;\n        const selectionClipboardIsOn = (platform.isLinux && options.get(107 /* EditorOption.selectionClipboard */));\n        const columnSelection = options.get(22 /* EditorOption.columnSelection */);\n        if (data.middleButton && !selectionClipboardIsOn) {\n            this._columnSelect(data.position, data.mouseColumn, data.inSelectionMode);\n        }\n        else if (data.startedOnLineNumbers) {\n            // If the dragging started on the gutter, then have operations work on the entire line\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelect(data.position, data.revealType);\n                }\n                else {\n                    this._createCursor(data.position, true);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position, data.revealType);\n                }\n                else {\n                    this._lineSelect(data.position, data.revealType);\n                }\n            }\n        }\n        else if (data.mouseDownCount >= 4) {\n            this._selectAll();\n        }\n        else if (data.mouseDownCount === 3) {\n            if (this._hasMulticursorModifier(data)) {\n                if (data.inSelectionMode) {\n                    this._lastCursorLineSelectDrag(data.position, data.revealType);\n                }\n                else {\n                    this._lastCursorLineSelect(data.position, data.revealType);\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    this._lineSelectDrag(data.position, data.revealType);\n                }\n                else {\n                    this._lineSelect(data.position, data.revealType);\n                }\n            }\n        }\n        else if (data.mouseDownCount === 2) {\n            if (!data.onInjectedText) {\n                if (this._hasMulticursorModifier(data)) {\n                    this._lastCursorWordSelect(data.position, data.revealType);\n                }\n                else {\n                    if (data.inSelectionMode) {\n                        this._wordSelectDrag(data.position, data.revealType);\n                    }\n                    else {\n                        this._wordSelect(data.position, data.revealType);\n                    }\n                }\n            }\n        }\n        else {\n            if (this._hasMulticursorModifier(data)) {\n                if (!this._hasNonMulticursorModifier(data)) {\n                    if (data.shiftKey) {\n                        this._columnSelect(data.position, data.mouseColumn, true);\n                    }\n                    else {\n                        // Do multi-cursor operations only when purely alt is pressed\n                        if (data.inSelectionMode) {\n                            this._lastCursorMoveToSelect(data.position, data.revealType);\n                        }\n                        else {\n                            this._createCursor(data.position, false);\n                        }\n                    }\n                }\n            }\n            else {\n                if (data.inSelectionMode) {\n                    if (data.altKey) {\n                        this._columnSelect(data.position, data.mouseColumn, true);\n                    }\n                    else {\n                        if (columnSelection) {\n                            this._columnSelect(data.position, data.mouseColumn, true);\n                        }\n                        else {\n                            this._moveToSelect(data.position, data.revealType);\n                        }\n                    }\n                }\n                else {\n                    this.moveTo(data.position, data.revealType);\n                }\n            }\n        }\n    }\n    _usualArgs(viewPosition, revealType) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        return {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition,\n            revealType\n        };\n    }\n    moveTo(viewPosition, revealType) {\n        CoreNavigationCommands.MoveTo.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _moveToSelect(viewPosition, revealType) {\n        CoreNavigationCommands.MoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _columnSelect(viewPosition, mouseColumn, doColumnSelect) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        CoreNavigationCommands.ColumnSelect.runCoreEditorCommand(this.viewModel, {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            mouseColumn: mouseColumn,\n            doColumnSelect: doColumnSelect\n        });\n    }\n    _createCursor(viewPosition, wholeLine) {\n        viewPosition = this._validateViewColumn(viewPosition);\n        CoreNavigationCommands.CreateCursor.runCoreEditorCommand(this.viewModel, {\n            source: 'mouse',\n            position: this._convertViewToModelPosition(viewPosition),\n            viewPosition: viewPosition,\n            wholeLine: wholeLine\n        });\n    }\n    _lastCursorMoveToSelect(viewPosition, revealType) {\n        CoreNavigationCommands.LastCursorMoveToSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _wordSelect(viewPosition, revealType) {\n        CoreNavigationCommands.WordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _wordSelectDrag(viewPosition, revealType) {\n        CoreNavigationCommands.WordSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _lastCursorWordSelect(viewPosition, revealType) {\n        CoreNavigationCommands.LastCursorWordSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _lineSelect(viewPosition, revealType) {\n        CoreNavigationCommands.LineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _lineSelectDrag(viewPosition, revealType) {\n        CoreNavigationCommands.LineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _lastCursorLineSelect(viewPosition, revealType) {\n        CoreNavigationCommands.LastCursorLineSelect.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _lastCursorLineSelectDrag(viewPosition, revealType) {\n        CoreNavigationCommands.LastCursorLineSelectDrag.runCoreEditorCommand(this.viewModel, this._usualArgs(viewPosition, revealType));\n    }\n    _selectAll() {\n        CoreNavigationCommands.SelectAll.runCoreEditorCommand(this.viewModel, { source: 'mouse' });\n    }\n    // ----------------------\n    _convertViewToModelPosition(viewPosition) {\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n    }\n    emitKeyDown(e) {\n        this.userInputEvents.emitKeyDown(e);\n    }\n    emitKeyUp(e) {\n        this.userInputEvents.emitKeyUp(e);\n    }\n    emitContextMenu(e) {\n        this.userInputEvents.emitContextMenu(e);\n    }\n    emitMouseMove(e) {\n        this.userInputEvents.emitMouseMove(e);\n    }\n    emitMouseLeave(e) {\n        this.userInputEvents.emitMouseLeave(e);\n    }\n    emitMouseUp(e) {\n        this.userInputEvents.emitMouseUp(e);\n    }\n    emitMouseDown(e) {\n        this.userInputEvents.emitMouseDown(e);\n    }\n    emitMouseDrag(e) {\n        this.userInputEvents.emitMouseDrag(e);\n    }\n    emitMouseDrop(e) {\n        this.userInputEvents.emitMouseDrop(e);\n    }\n    emitMouseDropCanceled() {\n        this.userInputEvents.emitMouseDropCanceled();\n    }\n    emitMouseWheel(e) {\n        this.userInputEvents.emitMouseWheel(e);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}