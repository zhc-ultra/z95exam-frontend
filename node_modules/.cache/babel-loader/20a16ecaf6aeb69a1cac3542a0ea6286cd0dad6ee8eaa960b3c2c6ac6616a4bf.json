{"ast":null,"code":"import _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { autorun } from '../../../../base/common/observable.js';\nimport { firstNonWhitespaceIndex } from '../../../../base/common/strings.js';\nimport { CursorColumns } from '../../../common/core/cursorColumns.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../nls.js';\nexport var InlineCompletionContextKeys = /*#__PURE__*/function (_Disposable) {\n  function InlineCompletionContextKeys(contextKeyService, model) {\n    var _this;\n    _classCallCheck(this, InlineCompletionContextKeys);\n    _this = _callSuper(this, InlineCompletionContextKeys);\n    _this.contextKeyService = contextKeyService;\n    _this.model = model;\n    _this.inlineCompletionVisible = InlineCompletionContextKeys.inlineSuggestionVisible.bindTo(_this.contextKeyService);\n    _this.inlineCompletionSuggestsIndentation = InlineCompletionContextKeys.inlineSuggestionHasIndentation.bindTo(_this.contextKeyService);\n    _this.inlineCompletionSuggestsIndentationLessThanTabSize = InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize.bindTo(_this.contextKeyService);\n    _this.suppressSuggestions = InlineCompletionContextKeys.suppressSuggestions.bindTo(_this.contextKeyService);\n    _this._register(autorun(function (reader) {\n      /** @description update context key: inlineCompletionVisible, suppressSuggestions */\n      var model = _this.model.read(reader);\n      var state = model === null || model === void 0 ? void 0 : model.state.read(reader);\n      var isInlineCompletionVisible = !!(state === null || state === void 0 ? void 0 : state.inlineCompletion) && (state === null || state === void 0 ? void 0 : state.primaryGhostText) !== undefined && !(state === null || state === void 0 ? void 0 : state.primaryGhostText.isEmpty());\n      _this.inlineCompletionVisible.set(isInlineCompletionVisible);\n      if ((state === null || state === void 0 ? void 0 : state.primaryGhostText) && (state === null || state === void 0 ? void 0 : state.inlineCompletion)) {\n        _this.suppressSuggestions.set(state.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions);\n      }\n    }));\n    _this._register(autorun(function (reader) {\n      /** @description update context key: inlineCompletionSuggestsIndentation, inlineCompletionSuggestsIndentationLessThanTabSize */\n      var model = _this.model.read(reader);\n      var startsWithIndentation = false;\n      var startsWithIndentationLessThanTabSize = true;\n      var ghostText = model === null || model === void 0 ? void 0 : model.primaryGhostText.read(reader);\n      if (!!(model === null || model === void 0 ? void 0 : model.selectedSuggestItem) && ghostText && ghostText.parts.length > 0) {\n        var _ghostText$parts$ = ghostText.parts[0],\n          column = _ghostText$parts$.column,\n          lines = _ghostText$parts$.lines;\n        var firstLine = lines[0];\n        var indentationEndColumn = model.textModel.getLineIndentColumn(ghostText.lineNumber);\n        var inIndentation = column <= indentationEndColumn;\n        if (inIndentation) {\n          var firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n          if (firstNonWsIdx === -1) {\n            firstNonWsIdx = firstLine.length - 1;\n          }\n          startsWithIndentation = firstNonWsIdx > 0;\n          var tabSize = model.textModel.getOptions().tabSize;\n          var visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n          startsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n        }\n      }\n      _this.inlineCompletionSuggestsIndentation.set(startsWithIndentation);\n      _this.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);\n    }));\n    return _this;\n  }\n  _inherits(InlineCompletionContextKeys, _Disposable);\n  return _createClass(InlineCompletionContextKeys);\n}(Disposable);\nInlineCompletionContextKeys.inlineSuggestionVisible = new RawContextKey('inlineSuggestionVisible', false, localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\nInlineCompletionContextKeys.inlineSuggestionHasIndentation = new RawContextKey('inlineSuggestionHasIndentation', false, localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\nInlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\nInlineCompletionContextKeys.suppressSuggestions = new RawContextKey('inlineSuggestionSuppressSuggestions', undefined, localize('suppressSuggestions', \"Whether suggestions should be suppressed for the current suggestion\"));","map":{"version":3,"names":["autorun","firstNonWhitespaceIndex","CursorColumns","RawContextKey","Disposable","localize","InlineCompletionContextKeys","_Disposable","contextKeyService","model","_this","_classCallCheck","_callSuper","inlineCompletionVisible","inlineSuggestionVisible","bindTo","inlineCompletionSuggestsIndentation","inlineSuggestionHasIndentation","inlineCompletionSuggestsIndentationLessThanTabSize","inlineSuggestionHasIndentationLessThanTabSize","suppressSuggestions","_register","reader","read","state","isInlineCompletionVisible","inlineCompletion","primaryGhostText","undefined","isEmpty","set","source","inlineCompletions","startsWithIndentation","startsWithIndentationLessThanTabSize","ghostText","selectedSuggestItem","parts","length","_ghostText$parts$","column","lines","firstLine","indentationEndColumn","textModel","getLineIndentColumn","lineNumber","inIndentation","firstNonWsIdx","tabSize","getOptions","visibleColumnIndentation","visibleColumnFromColumn","_inherits","_createClass"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/inlineCompletionContextKeys.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { autorun } from '../../../../base/common/observable.js';\nimport { firstNonWhitespaceIndex } from '../../../../base/common/strings.js';\nimport { CursorColumns } from '../../../common/core/cursorColumns.js';\nimport { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { localize } from '../../../../nls.js';\nexport class InlineCompletionContextKeys extends Disposable {\n    constructor(contextKeyService, model) {\n        super();\n        this.contextKeyService = contextKeyService;\n        this.model = model;\n        this.inlineCompletionVisible = InlineCompletionContextKeys.inlineSuggestionVisible.bindTo(this.contextKeyService);\n        this.inlineCompletionSuggestsIndentation = InlineCompletionContextKeys.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);\n        this.inlineCompletionSuggestsIndentationLessThanTabSize = InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);\n        this.suppressSuggestions = InlineCompletionContextKeys.suppressSuggestions.bindTo(this.contextKeyService);\n        this._register(autorun(reader => {\n            /** @description update context key: inlineCompletionVisible, suppressSuggestions */\n            const model = this.model.read(reader);\n            const state = model === null || model === void 0 ? void 0 : model.state.read(reader);\n            const isInlineCompletionVisible = !!(state === null || state === void 0 ? void 0 : state.inlineCompletion) && (state === null || state === void 0 ? void 0 : state.primaryGhostText) !== undefined && !(state === null || state === void 0 ? void 0 : state.primaryGhostText.isEmpty());\n            this.inlineCompletionVisible.set(isInlineCompletionVisible);\n            if ((state === null || state === void 0 ? void 0 : state.primaryGhostText) && (state === null || state === void 0 ? void 0 : state.inlineCompletion)) {\n                this.suppressSuggestions.set(state.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions);\n            }\n        }));\n        this._register(autorun(reader => {\n            /** @description update context key: inlineCompletionSuggestsIndentation, inlineCompletionSuggestsIndentationLessThanTabSize */\n            const model = this.model.read(reader);\n            let startsWithIndentation = false;\n            let startsWithIndentationLessThanTabSize = true;\n            const ghostText = model === null || model === void 0 ? void 0 : model.primaryGhostText.read(reader);\n            if (!!(model === null || model === void 0 ? void 0 : model.selectedSuggestItem) && ghostText && ghostText.parts.length > 0) {\n                const { column, lines } = ghostText.parts[0];\n                const firstLine = lines[0];\n                const indentationEndColumn = model.textModel.getLineIndentColumn(ghostText.lineNumber);\n                const inIndentation = column <= indentationEndColumn;\n                if (inIndentation) {\n                    let firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n                    if (firstNonWsIdx === -1) {\n                        firstNonWsIdx = firstLine.length - 1;\n                    }\n                    startsWithIndentation = firstNonWsIdx > 0;\n                    const tabSize = model.textModel.getOptions().tabSize;\n                    const visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n                    startsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n                }\n            }\n            this.inlineCompletionSuggestsIndentation.set(startsWithIndentation);\n            this.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);\n        }));\n    }\n}\nInlineCompletionContextKeys.inlineSuggestionVisible = new RawContextKey('inlineSuggestionVisible', false, localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\nInlineCompletionContextKeys.inlineSuggestionHasIndentation = new RawContextKey('inlineSuggestionHasIndentation', false, localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\nInlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey('inlineSuggestionHasIndentationLessThanTabSize', true, localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\nInlineCompletionContextKeys.suppressSuggestions = new RawContextKey('inlineSuggestionSuppressSuggestions', undefined, localize('suppressSuggestions', \"Whether suggestions should be suppressed for the current suggestion\"));\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,uCAAuC;AAC/D,SAASC,uBAAuB,QAAQ,oCAAoC;AAC5E,SAASC,aAAa,QAAQ,uCAAuC;AACrE,SAASC,aAAa,QAAQ,sDAAsD;AACpF,SAASC,UAAU,QAAQ,sCAAsC;AACjE,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,WAAaC,2BAA2B,0BAAAC,WAAA;EACpC,SAAAD,4BAAYE,iBAAiB,EAAEC,KAAK,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAL,2BAAA;IAClCI,KAAA,GAAAE,UAAA,OAAAN,2BAAA;IACAI,KAAA,CAAKF,iBAAiB,GAAGA,iBAAiB;IAC1CE,KAAA,CAAKD,KAAK,GAAGA,KAAK;IAClBC,KAAA,CAAKG,uBAAuB,GAAGP,2BAA2B,CAACQ,uBAAuB,CAACC,MAAM,CAACL,KAAA,CAAKF,iBAAiB,CAAC;IACjHE,KAAA,CAAKM,mCAAmC,GAAGV,2BAA2B,CAACW,8BAA8B,CAACF,MAAM,CAACL,KAAA,CAAKF,iBAAiB,CAAC;IACpIE,KAAA,CAAKQ,kDAAkD,GAAGZ,2BAA2B,CAACa,6CAA6C,CAACJ,MAAM,CAACL,KAAA,CAAKF,iBAAiB,CAAC;IAClKE,KAAA,CAAKU,mBAAmB,GAAGd,2BAA2B,CAACc,mBAAmB,CAACL,MAAM,CAACL,KAAA,CAAKF,iBAAiB,CAAC;IACzGE,KAAA,CAAKW,SAAS,CAACrB,OAAO,CAAC,UAAAsB,MAAM,EAAI;MAC7B;MACA,IAAMb,KAAK,GAAGC,KAAA,CAAKD,KAAK,CAACc,IAAI,CAACD,MAAM,CAAC;MACrC,IAAME,KAAK,GAAGf,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACe,KAAK,CAACD,IAAI,CAACD,MAAM,CAAC;MACpF,IAAMG,yBAAyB,GAAG,CAAC,EAAED,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACE,gBAAgB,CAAC,IAAI,CAACF,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACG,gBAAgB,MAAMC,SAAS,IAAI,EAAEJ,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACG,gBAAgB,CAACE,OAAO,CAAC,CAAC,CAAC;MACvRnB,KAAA,CAAKG,uBAAuB,CAACiB,GAAG,CAACL,yBAAyB,CAAC;MAC3D,IAAI,CAACD,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACG,gBAAgB,MAAMH,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACE,gBAAgB,CAAC,EAAE;QAClJhB,KAAA,CAAKU,mBAAmB,CAACU,GAAG,CAACN,KAAK,CAACE,gBAAgB,CAACA,gBAAgB,CAACK,MAAM,CAACC,iBAAiB,CAACZ,mBAAmB,CAAC;MACtH;IACJ,CAAC,CAAC,CAAC;IACHV,KAAA,CAAKW,SAAS,CAACrB,OAAO,CAAC,UAAAsB,MAAM,EAAI;MAC7B;MACA,IAAMb,KAAK,GAAGC,KAAA,CAAKD,KAAK,CAACc,IAAI,CAACD,MAAM,CAAC;MACrC,IAAIW,qBAAqB,GAAG,KAAK;MACjC,IAAIC,oCAAoC,GAAG,IAAI;MAC/C,IAAMC,SAAS,GAAG1B,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACkB,gBAAgB,CAACJ,IAAI,CAACD,MAAM,CAAC;MACnG,IAAI,CAAC,EAAEb,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAAC2B,mBAAmB,CAAC,IAAID,SAAS,IAAIA,SAAS,CAACE,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QACxH,IAAAC,iBAAA,GAA0BJ,SAAS,CAACE,KAAK,CAAC,CAAC,CAAC;UAApCG,MAAM,GAAAD,iBAAA,CAANC,MAAM;UAAEC,KAAK,GAAAF,iBAAA,CAALE,KAAK;QACrB,IAAMC,SAAS,GAAGD,KAAK,CAAC,CAAC,CAAC;QAC1B,IAAME,oBAAoB,GAAGlC,KAAK,CAACmC,SAAS,CAACC,mBAAmB,CAACV,SAAS,CAACW,UAAU,CAAC;QACtF,IAAMC,aAAa,GAAGP,MAAM,IAAIG,oBAAoB;QACpD,IAAII,aAAa,EAAE;UACf,IAAIC,aAAa,GAAG/C,uBAAuB,CAACyC,SAAS,CAAC;UACtD,IAAIM,aAAa,KAAK,CAAC,CAAC,EAAE;YACtBA,aAAa,GAAGN,SAAS,CAACJ,MAAM,GAAG,CAAC;UACxC;UACAL,qBAAqB,GAAGe,aAAa,GAAG,CAAC;UACzC,IAAMC,OAAO,GAAGxC,KAAK,CAACmC,SAAS,CAACM,UAAU,CAAC,CAAC,CAACD,OAAO;UACpD,IAAME,wBAAwB,GAAGjD,aAAa,CAACkD,uBAAuB,CAACV,SAAS,EAAEM,aAAa,GAAG,CAAC,EAAEC,OAAO,CAAC;UAC7Gf,oCAAoC,GAAGiB,wBAAwB,GAAGF,OAAO;QAC7E;MACJ;MACAvC,KAAA,CAAKM,mCAAmC,CAACc,GAAG,CAACG,qBAAqB,CAAC;MACnEvB,KAAA,CAAKQ,kDAAkD,CAACY,GAAG,CAACI,oCAAoC,CAAC;IACrG,CAAC,CAAC,CAAC;IAAC,OAAAxB,KAAA;EACR;EAAC2C,SAAA,CAAA/C,2BAAA,EAAAC,WAAA;EAAA,OAAA+C,YAAA,CAAAhD,2BAAA;AAAA,EA5C4CF,UAAU;AA8C3DE,2BAA2B,CAACQ,uBAAuB,GAAG,IAAIX,aAAa,CAAC,yBAAyB,EAAE,KAAK,EAAEE,QAAQ,CAAC,yBAAyB,EAAE,yCAAyC,CAAC,CAAC;AACzLC,2BAA2B,CAACW,8BAA8B,GAAG,IAAId,aAAa,CAAC,gCAAgC,EAAE,KAAK,EAAEE,QAAQ,CAAC,gCAAgC,EAAE,sDAAsD,CAAC,CAAC;AAC3NC,2BAA2B,CAACa,6CAA6C,GAAG,IAAIhB,aAAa,CAAC,+CAA+C,EAAE,IAAI,EAAEE,QAAQ,CAAC,+CAA+C,EAAE,sGAAsG,CAAC,CAAC;AACvTC,2BAA2B,CAACc,mBAAmB,GAAG,IAAIjB,aAAa,CAAC,qCAAqC,EAAEyB,SAAS,EAAEvB,QAAQ,CAAC,qBAAqB,EAAE,qEAAqE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}