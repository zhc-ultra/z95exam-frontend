{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _get from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _slicedToArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground, editorMultiCursorSecondaryForeground, editorMultiCursorPrimaryForeground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nimport { equals } from '../../../../base/common/arrays.js';\nvar Settings = /*#__PURE__*/function () {\n  function Settings(config, theme) {\n    _classCallCheck(this, Settings);\n    var options = config.options;\n    this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n    this.pixelRatio = options.get(143 /* EditorOption.pixelRatio */);\n    this.overviewRulerLanes = options.get(83 /* EditorOption.overviewRulerLanes */);\n    this.renderBorder = options.get(82 /* EditorOption.overviewRulerBorder */);\n    var borderColor = theme.getColor(editorOverviewRulerBorder);\n    this.borderColor = borderColor ? borderColor.toString() : null;\n    this.hideCursor = options.get(59 /* EditorOption.hideCursorInOverviewRuler */);\n    var cursorColorSingle = theme.getColor(editorCursorForeground);\n    this.cursorColorSingle = cursorColorSingle ? cursorColorSingle.transparent(0.7).toString() : null;\n    var cursorColorPrimary = theme.getColor(editorMultiCursorPrimaryForeground);\n    this.cursorColorPrimary = cursorColorPrimary ? cursorColorPrimary.transparent(0.7).toString() : null;\n    var cursorColorSecondary = theme.getColor(editorMultiCursorSecondaryForeground);\n    this.cursorColorSecondary = cursorColorSecondary ? cursorColorSecondary.transparent(0.7).toString() : null;\n    this.themeType = theme.type;\n    var minimapOpts = options.get(73 /* EditorOption.minimap */);\n    var minimapEnabled = minimapOpts.enabled;\n    var minimapSide = minimapOpts.side;\n    var themeColor = theme.getColor(editorOverviewRulerBackground);\n    var defaultBackground = TokenizationRegistry.getDefaultBackground();\n    if (themeColor) {\n      this.backgroundColor = themeColor;\n    } else if (minimapEnabled && minimapSide === 'right') {\n      this.backgroundColor = defaultBackground;\n    } else {\n      this.backgroundColor = null;\n    }\n    var layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n    var position = layoutInfo.overviewRuler;\n    this.top = position.top;\n    this.right = position.right;\n    this.domWidth = position.width;\n    this.domHeight = position.height;\n    if (this.overviewRulerLanes === 0) {\n      // overview ruler is off\n      this.canvasWidth = 0;\n      this.canvasHeight = 0;\n    } else {\n      this.canvasWidth = this.domWidth * this.pixelRatio | 0;\n      this.canvasHeight = this.domHeight * this.pixelRatio | 0;\n    }\n    var _this$_initLanes = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes),\n      _this$_initLanes2 = _slicedToArray(_this$_initLanes, 2),\n      x = _this$_initLanes2[0],\n      w = _this$_initLanes2[1];\n    this.x = x;\n    this.w = w;\n  }\n  return _createClass(Settings, [{\n    key: \"_initLanes\",\n    value: function _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n      var remainingWidth = canvasWidth - canvasLeftOffset;\n      if (laneCount >= 3) {\n        var leftWidth = Math.floor(remainingWidth / 3);\n        var rightWidth = Math.floor(remainingWidth / 3);\n        var centerWidth = remainingWidth - leftWidth - rightWidth;\n        var leftOffset = canvasLeftOffset;\n        var centerOffset = leftOffset + leftWidth;\n        var rightOffset = leftOffset + leftWidth + centerWidth;\n        return [[0, leftOffset,\n        // Left\n        centerOffset,\n        // Center\n        leftOffset,\n        // Left | Center\n        rightOffset,\n        // Right\n        leftOffset,\n        // Left | Right\n        centerOffset,\n        // Center | Right\n        leftOffset // Left | Center | Right\n        ], [0, leftWidth,\n        // Left\n        centerWidth,\n        // Center\n        leftWidth + centerWidth,\n        // Left | Center\n        rightWidth,\n        // Right\n        leftWidth + centerWidth + rightWidth,\n        // Left | Right\n        centerWidth + rightWidth,\n        // Center | Right\n        leftWidth + centerWidth + rightWidth // Left | Center | Right\n        ]];\n      } else if (laneCount === 2) {\n        var _leftWidth = Math.floor(remainingWidth / 2);\n        var _rightWidth = remainingWidth - _leftWidth;\n        var _leftOffset = canvasLeftOffset;\n        var _rightOffset = _leftOffset + _leftWidth;\n        return [[0, _leftOffset,\n        // Left\n        _leftOffset,\n        // Center\n        _leftOffset,\n        // Left | Center\n        _rightOffset,\n        // Right\n        _leftOffset,\n        // Left | Right\n        _leftOffset,\n        // Center | Right\n        _leftOffset // Left | Center | Right\n        ], [0, _leftWidth,\n        // Left\n        _leftWidth,\n        // Center\n        _leftWidth,\n        // Left | Center\n        _rightWidth,\n        // Right\n        _leftWidth + _rightWidth,\n        // Left | Right\n        _leftWidth + _rightWidth,\n        // Center | Right\n        _leftWidth + _rightWidth // Left | Center | Right\n        ]];\n      } else {\n        var offset = canvasLeftOffset;\n        var width = remainingWidth;\n        return [[0, offset,\n        // Left\n        offset,\n        // Center\n        offset,\n        // Left | Center\n        offset,\n        // Right\n        offset,\n        // Left | Right\n        offset,\n        // Center | Right\n        offset // Left | Center | Right\n        ], [0, width,\n        // Left\n        width,\n        // Center\n        width,\n        // Left | Center\n        width,\n        // Right\n        width,\n        // Left | Right\n        width,\n        // Center | Right\n        width // Left | Center | Right\n        ]];\n      }\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.lineHeight === other.lineHeight && this.pixelRatio === other.pixelRatio && this.overviewRulerLanes === other.overviewRulerLanes && this.renderBorder === other.renderBorder && this.borderColor === other.borderColor && this.hideCursor === other.hideCursor && this.cursorColorSingle === other.cursorColorSingle && this.cursorColorPrimary === other.cursorColorPrimary && this.cursorColorSecondary === other.cursorColorSecondary && this.themeType === other.themeType && Color.equals(this.backgroundColor, other.backgroundColor) && this.top === other.top && this.right === other.right && this.domWidth === other.domWidth && this.domHeight === other.domHeight && this.canvasWidth === other.canvasWidth && this.canvasHeight === other.canvasHeight;\n    }\n  }]);\n}();\nexport var DecorationsOverviewRuler = /*#__PURE__*/function (_ViewPart) {\n  function DecorationsOverviewRuler(context) {\n    var _this;\n    _classCallCheck(this, DecorationsOverviewRuler);\n    _this = _callSuper(this, DecorationsOverviewRuler, [context]);\n    _this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n    _this._renderedDecorations = [];\n    _this._renderedCursorPositions = [];\n    _this._domNode = createFastDomNode(document.createElement('canvas'));\n    _this._domNode.setClassName('decorationsOverviewRuler');\n    _this._domNode.setPosition('absolute');\n    _this._domNode.setLayerHinting(true);\n    _this._domNode.setContain('strict');\n    _this._domNode.setAttribute('aria-hidden', 'true');\n    _this._updateSettings(false);\n    _this._tokensColorTrackerListener = TokenizationRegistry.onDidChange(function (e) {\n      if (e.changedColorMap) {\n        _this._updateSettings(true);\n      }\n    });\n    _this._cursorPositions = [{\n      position: new Position(1, 1),\n      color: _this._settings.cursorColorSingle\n    }];\n    return _this;\n  }\n  _inherits(DecorationsOverviewRuler, _ViewPart);\n  return _createClass(DecorationsOverviewRuler, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(DecorationsOverviewRuler.prototype), \"dispose\", this).call(this);\n      this._tokensColorTrackerListener.dispose();\n    }\n  }, {\n    key: \"_updateSettings\",\n    value: function _updateSettings(renderNow) {\n      var newSettings = new Settings(this._context.configuration, this._context.theme);\n      if (this._settings && this._settings.equals(newSettings)) {\n        // nothing to do\n        return false;\n      }\n      this._settings = newSettings;\n      this._domNode.setTop(this._settings.top);\n      this._domNode.setRight(this._settings.right);\n      this._domNode.setWidth(this._settings.domWidth);\n      this._domNode.setHeight(this._settings.domHeight);\n      this._domNode.domNode.width = this._settings.canvasWidth;\n      this._domNode.domNode.height = this._settings.canvasHeight;\n      if (renderNow) {\n        this._render();\n      }\n      return true;\n    }\n    // ---- begin view event handlers\n  }, {\n    key: \"_markRenderingIsNeeded\",\n    value: function _markRenderingIsNeeded() {\n      this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n      return true;\n    }\n  }, {\n    key: \"_markRenderingIsMaybeNeeded\",\n    value: function _markRenderingIsMaybeNeeded() {\n      this._actualShouldRender = 1 /* ShouldRenderValue.Maybe */;\n      return true;\n    }\n  }, {\n    key: \"onConfigurationChanged\",\n    value: function onConfigurationChanged(e) {\n      return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n  }, {\n    key: \"onCursorStateChanged\",\n    value: function onCursorStateChanged(e) {\n      this._cursorPositions = [];\n      for (var i = 0, len = e.selections.length; i < len; i++) {\n        var color = this._settings.cursorColorSingle;\n        if (len > 1) {\n          color = i === 0 ? this._settings.cursorColorPrimary : this._settings.cursorColorSecondary;\n        }\n        this._cursorPositions.push({\n          position: e.selections[i].getPosition(),\n          color: color\n        });\n      }\n      this._cursorPositions.sort(function (a, b) {\n        return Position.compare(a.position, b.position);\n      });\n      return this._markRenderingIsMaybeNeeded();\n    }\n  }, {\n    key: \"onDecorationsChanged\",\n    value: function onDecorationsChanged(e) {\n      if (e.affectsOverviewRuler) {\n        return this._markRenderingIsMaybeNeeded();\n      }\n      return false;\n    }\n  }, {\n    key: \"onFlushed\",\n    value: function onFlushed(e) {\n      return this._markRenderingIsNeeded();\n    }\n  }, {\n    key: \"onScrollChanged\",\n    value: function onScrollChanged(e) {\n      return e.scrollHeightChanged ? this._markRenderingIsNeeded() : false;\n    }\n  }, {\n    key: \"onZonesChanged\",\n    value: function onZonesChanged(e) {\n      return this._markRenderingIsNeeded();\n    }\n  }, {\n    key: \"onThemeChanged\",\n    value: function onThemeChanged(e) {\n      return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    // ---- end view event handlers\n  }, {\n    key: \"getDomNode\",\n    value: function getDomNode() {\n      return this._domNode.domNode;\n    }\n  }, {\n    key: \"prepareRender\",\n    value: function prepareRender(ctx) {\n      // Nothing to read\n    }\n  }, {\n    key: \"render\",\n    value: function render(editorCtx) {\n      this._render();\n      this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      var backgroundColor = this._settings.backgroundColor;\n      if (this._settings.overviewRulerLanes === 0) {\n        // overview ruler is off\n        this._domNode.setBackgroundColor(backgroundColor ? Color.Format.CSS.formatHexA(backgroundColor) : '');\n        this._domNode.setDisplay('none');\n        return;\n      }\n      var decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n      decorations.sort(OverviewRulerDecorationsGroup.compareByRenderingProps);\n      if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !OverviewRulerDecorationsGroup.equalsArr(this._renderedDecorations, decorations)) {\n        this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n      }\n      if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !equals(this._renderedCursorPositions, this._cursorPositions, function (a, b) {\n        return a.position.lineNumber === b.position.lineNumber && a.color === b.color;\n      })) {\n        this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n      }\n      if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */) {\n        // both decorations and cursor positions are unchanged, nothing to do\n        return;\n      }\n      this._renderedDecorations = decorations;\n      this._renderedCursorPositions = this._cursorPositions;\n      this._domNode.setDisplay('block');\n      var canvasWidth = this._settings.canvasWidth;\n      var canvasHeight = this._settings.canvasHeight;\n      var lineHeight = this._settings.lineHeight;\n      var viewLayout = this._context.viewLayout;\n      var outerHeight = this._context.viewLayout.getScrollHeight();\n      var heightRatio = canvasHeight / outerHeight;\n      var minDecorationHeight = 6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio | 0;\n      var halfMinDecorationHeight = minDecorationHeight / 2 | 0;\n      var canvasCtx = this._domNode.domNode.getContext('2d');\n      if (backgroundColor) {\n        if (backgroundColor.isOpaque()) {\n          // We have a background color which is opaque, we can just paint the entire surface with it\n          canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n          canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n        } else {\n          // We have a background color which is transparent, we need to first clear the surface and\n          // then fill it\n          canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n          canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n          canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n        }\n      } else {\n        // We don't have a background color\n        canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n      }\n      var x = this._settings.x;\n      var w = this._settings.w;\n      var _iterator = _createForOfIteratorHelper(decorations),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var decorationGroup = _step.value;\n          var _color = decorationGroup.color;\n          var decorationGroupData = decorationGroup.data;\n          canvasCtx.fillStyle = _color;\n          var prevLane = 0;\n          var _prevY = 0;\n          var _prevY2 = 0;\n          for (var _i = 0, _len = decorationGroupData.length / 3; _i < _len; _i++) {\n            var lane = decorationGroupData[3 * _i];\n            var startLineNumber = decorationGroupData[3 * _i + 1];\n            var endLineNumber = decorationGroupData[3 * _i + 2];\n            var _y = viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio | 0;\n            var _y2 = (viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio | 0;\n            var height = _y2 - _y;\n            if (height < minDecorationHeight) {\n              var _yCenter = (_y + _y2) / 2 | 0;\n              if (_yCenter < halfMinDecorationHeight) {\n                _yCenter = halfMinDecorationHeight;\n              } else if (_yCenter + halfMinDecorationHeight > canvasHeight) {\n                _yCenter = canvasHeight - halfMinDecorationHeight;\n              }\n              _y = _yCenter - halfMinDecorationHeight;\n              _y2 = _yCenter + halfMinDecorationHeight;\n            }\n            if (_y > _prevY2 + 1 || lane !== prevLane) {\n              // flush prev\n              if (_i !== 0) {\n                canvasCtx.fillRect(x[prevLane], _prevY, w[prevLane], _prevY2 - _prevY);\n              }\n              prevLane = lane;\n              _prevY = _y;\n              _prevY2 = _y2;\n            } else {\n              // merge into prev\n              if (_y2 > _prevY2) {\n                _prevY2 = _y2;\n              }\n            }\n          }\n          canvasCtx.fillRect(x[prevLane], _prevY, w[prevLane], _prevY2 - _prevY);\n        }\n        // Draw cursors\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (!this._settings.hideCursor) {\n        var cursorHeight = 2 * this._settings.pixelRatio | 0;\n        var halfCursorHeight = cursorHeight / 2 | 0;\n        var cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n        var cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n        var prevY1 = -100;\n        var prevY2 = -100;\n        var prevColor = null;\n        for (var i = 0, len = this._cursorPositions.length; i < len; i++) {\n          var color = this._cursorPositions[i].color;\n          if (!color) {\n            continue;\n          }\n          var cursor = this._cursorPositions[i].position;\n          var yCenter = viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio | 0;\n          if (yCenter < halfCursorHeight) {\n            yCenter = halfCursorHeight;\n          } else if (yCenter + halfCursorHeight > canvasHeight) {\n            yCenter = canvasHeight - halfCursorHeight;\n          }\n          var y1 = yCenter - halfCursorHeight;\n          var y2 = y1 + cursorHeight;\n          if (y1 > prevY2 + 1 || color !== prevColor) {\n            // flush prev\n            if (i !== 0 && prevColor) {\n              canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n            }\n            prevY1 = y1;\n            prevY2 = y2;\n          } else {\n            // merge into prev\n            if (y2 > prevY2) {\n              prevY2 = y2;\n            }\n          }\n          prevColor = color;\n          canvasCtx.fillStyle = color;\n        }\n        if (prevColor) {\n          canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n        }\n      }\n      if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n        canvasCtx.beginPath();\n        canvasCtx.lineWidth = 1;\n        canvasCtx.strokeStyle = this._settings.borderColor;\n        canvasCtx.moveTo(0, 0);\n        canvasCtx.lineTo(0, canvasHeight);\n        canvasCtx.stroke();\n        canvasCtx.moveTo(0, 0);\n        canvasCtx.lineTo(canvasWidth, 0);\n        canvasCtx.stroke();\n      }\n    }\n  }]);\n}(ViewPart);","map":{"version":3,"names":["createFastDomNode","Color","ViewPart","Position","TokenizationRegistry","editorCursorForeground","editorOverviewRulerBorder","editorOverviewRulerBackground","editorMultiCursorSecondaryForeground","editorMultiCursorPrimaryForeground","OverviewRulerDecorationsGroup","equals","Settings","config","theme","_classCallCheck","options","lineHeight","get","pixelRatio","overviewRulerLanes","renderBorder","borderColor","getColor","toString","hideCursor","cursorColorSingle","transparent","cursorColorPrimary","cursorColorSecondary","themeType","type","minimapOpts","minimapEnabled","enabled","minimapSide","side","themeColor","defaultBackground","getDefaultBackground","backgroundColor","layoutInfo","position","overviewRuler","top","right","domWidth","width","domHeight","height","canvasWidth","canvasHeight","_this$_initLanes","_initLanes","_this$_initLanes2","_slicedToArray","x","w","_createClass","key","value","canvasLeftOffset","laneCount","remainingWidth","leftWidth","Math","floor","rightWidth","centerWidth","leftOffset","centerOffset","rightOffset","offset","other","DecorationsOverviewRuler","_ViewPart","context","_this","_callSuper","_actualShouldRender","_renderedDecorations","_renderedCursorPositions","_domNode","document","createElement","setClassName","setPosition","setLayerHinting","setContain","setAttribute","_updateSettings","_tokensColorTrackerListener","onDidChange","e","changedColorMap","_cursorPositions","color","_settings","_inherits","dispose","_get","_getPrototypeOf","prototype","call","renderNow","newSettings","_context","configuration","setTop","setRight","setWidth","setHeight","domNode","_render","_markRenderingIsNeeded","_markRenderingIsMaybeNeeded","onConfigurationChanged","onCursorStateChanged","i","len","selections","length","push","getPosition","sort","a","b","compare","onDecorationsChanged","affectsOverviewRuler","onFlushed","onScrollChanged","scrollHeightChanged","onZonesChanged","onThemeChanged","getDomNode","prepareRender","ctx","render","editorCtx","setBackgroundColor","Format","CSS","formatHexA","setDisplay","decorations","viewModel","getAllOverviewRulerDecorations","compareByRenderingProps","equalsArr","lineNumber","viewLayout","outerHeight","getScrollHeight","heightRatio","minDecorationHeight","halfMinDecorationHeight","canvasCtx","getContext","isOpaque","fillStyle","fillRect","clearRect","_iterator","_createForOfIteratorHelper","_step","s","n","done","decorationGroup","decorationGroupData","data","prevLane","prevY1","prevY2","lane","startLineNumber","endLineNumber","y1","getVerticalOffsetForLineNumber","y2","yCenter","err","f","cursorHeight","halfCursorHeight","cursorX","cursorW","prevColor","cursor","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/overviewRuler/decorationsOverviewRuler.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { editorCursorForeground, editorOverviewRulerBorder, editorOverviewRulerBackground, editorMultiCursorSecondaryForeground, editorMultiCursorPrimaryForeground } from '../../../common/core/editorColorRegistry.js';\nimport { OverviewRulerDecorationsGroup } from '../../../common/viewModel.js';\nimport { equals } from '../../../../base/common/arrays.js';\nclass Settings {\n    constructor(config, theme) {\n        const options = config.options;\n        this.lineHeight = options.get(67 /* EditorOption.lineHeight */);\n        this.pixelRatio = options.get(143 /* EditorOption.pixelRatio */);\n        this.overviewRulerLanes = options.get(83 /* EditorOption.overviewRulerLanes */);\n        this.renderBorder = options.get(82 /* EditorOption.overviewRulerBorder */);\n        const borderColor = theme.getColor(editorOverviewRulerBorder);\n        this.borderColor = borderColor ? borderColor.toString() : null;\n        this.hideCursor = options.get(59 /* EditorOption.hideCursorInOverviewRuler */);\n        const cursorColorSingle = theme.getColor(editorCursorForeground);\n        this.cursorColorSingle = cursorColorSingle ? cursorColorSingle.transparent(0.7).toString() : null;\n        const cursorColorPrimary = theme.getColor(editorMultiCursorPrimaryForeground);\n        this.cursorColorPrimary = cursorColorPrimary ? cursorColorPrimary.transparent(0.7).toString() : null;\n        const cursorColorSecondary = theme.getColor(editorMultiCursorSecondaryForeground);\n        this.cursorColorSecondary = cursorColorSecondary ? cursorColorSecondary.transparent(0.7).toString() : null;\n        this.themeType = theme.type;\n        const minimapOpts = options.get(73 /* EditorOption.minimap */);\n        const minimapEnabled = minimapOpts.enabled;\n        const minimapSide = minimapOpts.side;\n        const themeColor = theme.getColor(editorOverviewRulerBackground);\n        const defaultBackground = TokenizationRegistry.getDefaultBackground();\n        if (themeColor) {\n            this.backgroundColor = themeColor;\n        }\n        else if (minimapEnabled && minimapSide === 'right') {\n            this.backgroundColor = defaultBackground;\n        }\n        else {\n            this.backgroundColor = null;\n        }\n        const layoutInfo = options.get(145 /* EditorOption.layoutInfo */);\n        const position = layoutInfo.overviewRuler;\n        this.top = position.top;\n        this.right = position.right;\n        this.domWidth = position.width;\n        this.domHeight = position.height;\n        if (this.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this.canvasWidth = 0;\n            this.canvasHeight = 0;\n        }\n        else {\n            this.canvasWidth = (this.domWidth * this.pixelRatio) | 0;\n            this.canvasHeight = (this.domHeight * this.pixelRatio) | 0;\n        }\n        const [x, w] = this._initLanes(1, this.canvasWidth, this.overviewRulerLanes);\n        this.x = x;\n        this.w = w;\n    }\n    _initLanes(canvasLeftOffset, canvasWidth, laneCount) {\n        const remainingWidth = canvasWidth - canvasLeftOffset;\n        if (laneCount >= 3) {\n            const leftWidth = Math.floor(remainingWidth / 3);\n            const rightWidth = Math.floor(remainingWidth / 3);\n            const centerWidth = remainingWidth - leftWidth - rightWidth;\n            const leftOffset = canvasLeftOffset;\n            const centerOffset = leftOffset + leftWidth;\n            const rightOffset = leftOffset + leftWidth + centerWidth;\n            return [\n                [\n                    0,\n                    leftOffset, // Left\n                    centerOffset, // Center\n                    leftOffset, // Left | Center\n                    rightOffset, // Right\n                    leftOffset, // Left | Right\n                    centerOffset, // Center | Right\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth, // Left\n                    centerWidth, // Center\n                    leftWidth + centerWidth, // Left | Center\n                    rightWidth, // Right\n                    leftWidth + centerWidth + rightWidth, // Left | Right\n                    centerWidth + rightWidth, // Center | Right\n                    leftWidth + centerWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else if (laneCount === 2) {\n            const leftWidth = Math.floor(remainingWidth / 2);\n            const rightWidth = remainingWidth - leftWidth;\n            const leftOffset = canvasLeftOffset;\n            const rightOffset = leftOffset + leftWidth;\n            return [\n                [\n                    0,\n                    leftOffset, // Left\n                    leftOffset, // Center\n                    leftOffset, // Left | Center\n                    rightOffset, // Right\n                    leftOffset, // Left | Right\n                    leftOffset, // Center | Right\n                    leftOffset, // Left | Center | Right\n                ], [\n                    0,\n                    leftWidth, // Left\n                    leftWidth, // Center\n                    leftWidth, // Left | Center\n                    rightWidth, // Right\n                    leftWidth + rightWidth, // Left | Right\n                    leftWidth + rightWidth, // Center | Right\n                    leftWidth + rightWidth, // Left | Center | Right\n                ]\n            ];\n        }\n        else {\n            const offset = canvasLeftOffset;\n            const width = remainingWidth;\n            return [\n                [\n                    0,\n                    offset, // Left\n                    offset, // Center\n                    offset, // Left | Center\n                    offset, // Right\n                    offset, // Left | Right\n                    offset, // Center | Right\n                    offset, // Left | Center | Right\n                ], [\n                    0,\n                    width, // Left\n                    width, // Center\n                    width, // Left | Center\n                    width, // Right\n                    width, // Left | Right\n                    width, // Center | Right\n                    width, // Left | Center | Right\n                ]\n            ];\n        }\n    }\n    equals(other) {\n        return (this.lineHeight === other.lineHeight\n            && this.pixelRatio === other.pixelRatio\n            && this.overviewRulerLanes === other.overviewRulerLanes\n            && this.renderBorder === other.renderBorder\n            && this.borderColor === other.borderColor\n            && this.hideCursor === other.hideCursor\n            && this.cursorColorSingle === other.cursorColorSingle\n            && this.cursorColorPrimary === other.cursorColorPrimary\n            && this.cursorColorSecondary === other.cursorColorSecondary\n            && this.themeType === other.themeType\n            && Color.equals(this.backgroundColor, other.backgroundColor)\n            && this.top === other.top\n            && this.right === other.right\n            && this.domWidth === other.domWidth\n            && this.domHeight === other.domHeight\n            && this.canvasWidth === other.canvasWidth\n            && this.canvasHeight === other.canvasHeight);\n    }\n}\nexport class DecorationsOverviewRuler extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n        this._renderedDecorations = [];\n        this._renderedCursorPositions = [];\n        this._domNode = createFastDomNode(document.createElement('canvas'));\n        this._domNode.setClassName('decorationsOverviewRuler');\n        this._domNode.setPosition('absolute');\n        this._domNode.setLayerHinting(true);\n        this._domNode.setContain('strict');\n        this._domNode.setAttribute('aria-hidden', 'true');\n        this._updateSettings(false);\n        this._tokensColorTrackerListener = TokenizationRegistry.onDidChange((e) => {\n            if (e.changedColorMap) {\n                this._updateSettings(true);\n            }\n        });\n        this._cursorPositions = [{ position: new Position(1, 1), color: this._settings.cursorColorSingle }];\n    }\n    dispose() {\n        super.dispose();\n        this._tokensColorTrackerListener.dispose();\n    }\n    _updateSettings(renderNow) {\n        const newSettings = new Settings(this._context.configuration, this._context.theme);\n        if (this._settings && this._settings.equals(newSettings)) {\n            // nothing to do\n            return false;\n        }\n        this._settings = newSettings;\n        this._domNode.setTop(this._settings.top);\n        this._domNode.setRight(this._settings.right);\n        this._domNode.setWidth(this._settings.domWidth);\n        this._domNode.setHeight(this._settings.domHeight);\n        this._domNode.domNode.width = this._settings.canvasWidth;\n        this._domNode.domNode.height = this._settings.canvasHeight;\n        if (renderNow) {\n            this._render();\n        }\n        return true;\n    }\n    // ---- begin view event handlers\n    _markRenderingIsNeeded() {\n        this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        return true;\n    }\n    _markRenderingIsMaybeNeeded() {\n        this._actualShouldRender = 1 /* ShouldRenderValue.Maybe */;\n        return true;\n    }\n    onConfigurationChanged(e) {\n        return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    onCursorStateChanged(e) {\n        this._cursorPositions = [];\n        for (let i = 0, len = e.selections.length; i < len; i++) {\n            let color = this._settings.cursorColorSingle;\n            if (len > 1) {\n                color = i === 0 ? this._settings.cursorColorPrimary : this._settings.cursorColorSecondary;\n            }\n            this._cursorPositions.push({ position: e.selections[i].getPosition(), color });\n        }\n        this._cursorPositions.sort((a, b) => Position.compare(a.position, b.position));\n        return this._markRenderingIsMaybeNeeded();\n    }\n    onDecorationsChanged(e) {\n        if (e.affectsOverviewRuler) {\n            return this._markRenderingIsMaybeNeeded();\n        }\n        return false;\n    }\n    onFlushed(e) {\n        return this._markRenderingIsNeeded();\n    }\n    onScrollChanged(e) {\n        return e.scrollHeightChanged ? this._markRenderingIsNeeded() : false;\n    }\n    onZonesChanged(e) {\n        return this._markRenderingIsNeeded();\n    }\n    onThemeChanged(e) {\n        return this._updateSettings(false) ? this._markRenderingIsNeeded() : false;\n    }\n    // ---- end view event handlers\n    getDomNode() {\n        return this._domNode.domNode;\n    }\n    prepareRender(ctx) {\n        // Nothing to read\n    }\n    render(editorCtx) {\n        this._render();\n        this._actualShouldRender = 0 /* ShouldRenderValue.NotNeeded */;\n    }\n    _render() {\n        const backgroundColor = this._settings.backgroundColor;\n        if (this._settings.overviewRulerLanes === 0) {\n            // overview ruler is off\n            this._domNode.setBackgroundColor(backgroundColor ? Color.Format.CSS.formatHexA(backgroundColor) : '');\n            this._domNode.setDisplay('none');\n            return;\n        }\n        const decorations = this._context.viewModel.getAllOverviewRulerDecorations(this._context.theme);\n        decorations.sort(OverviewRulerDecorationsGroup.compareByRenderingProps);\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !OverviewRulerDecorationsGroup.equalsArr(this._renderedDecorations, decorations)) {\n            this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        }\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */ && !equals(this._renderedCursorPositions, this._cursorPositions, (a, b) => a.position.lineNumber === b.position.lineNumber && a.color === b.color)) {\n            this._actualShouldRender = 2 /* ShouldRenderValue.Needed */;\n        }\n        if (this._actualShouldRender === 1 /* ShouldRenderValue.Maybe */) {\n            // both decorations and cursor positions are unchanged, nothing to do\n            return;\n        }\n        this._renderedDecorations = decorations;\n        this._renderedCursorPositions = this._cursorPositions;\n        this._domNode.setDisplay('block');\n        const canvasWidth = this._settings.canvasWidth;\n        const canvasHeight = this._settings.canvasHeight;\n        const lineHeight = this._settings.lineHeight;\n        const viewLayout = this._context.viewLayout;\n        const outerHeight = this._context.viewLayout.getScrollHeight();\n        const heightRatio = canvasHeight / outerHeight;\n        const minDecorationHeight = (6 /* Constants.MIN_DECORATION_HEIGHT */ * this._settings.pixelRatio) | 0;\n        const halfMinDecorationHeight = (minDecorationHeight / 2) | 0;\n        const canvasCtx = this._domNode.domNode.getContext('2d');\n        if (backgroundColor) {\n            if (backgroundColor.isOpaque()) {\n                // We have a background color which is opaque, we can just paint the entire surface with it\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n            else {\n                // We have a background color which is transparent, we need to first clear the surface and\n                // then fill it\n                canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n                canvasCtx.fillStyle = Color.Format.CSS.formatHexA(backgroundColor);\n                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n            }\n        }\n        else {\n            // We don't have a background color\n            canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n        }\n        const x = this._settings.x;\n        const w = this._settings.w;\n        for (const decorationGroup of decorations) {\n            const color = decorationGroup.color;\n            const decorationGroupData = decorationGroup.data;\n            canvasCtx.fillStyle = color;\n            let prevLane = 0;\n            let prevY1 = 0;\n            let prevY2 = 0;\n            for (let i = 0, len = decorationGroupData.length / 3; i < len; i++) {\n                const lane = decorationGroupData[3 * i];\n                const startLineNumber = decorationGroupData[3 * i + 1];\n                const endLineNumber = decorationGroupData[3 * i + 2];\n                let y1 = (viewLayout.getVerticalOffsetForLineNumber(startLineNumber) * heightRatio) | 0;\n                let y2 = ((viewLayout.getVerticalOffsetForLineNumber(endLineNumber) + lineHeight) * heightRatio) | 0;\n                const height = y2 - y1;\n                if (height < minDecorationHeight) {\n                    let yCenter = ((y1 + y2) / 2) | 0;\n                    if (yCenter < halfMinDecorationHeight) {\n                        yCenter = halfMinDecorationHeight;\n                    }\n                    else if (yCenter + halfMinDecorationHeight > canvasHeight) {\n                        yCenter = canvasHeight - halfMinDecorationHeight;\n                    }\n                    y1 = yCenter - halfMinDecorationHeight;\n                    y2 = yCenter + halfMinDecorationHeight;\n                }\n                if (y1 > prevY2 + 1 || lane !== prevLane) {\n                    // flush prev\n                    if (i !== 0) {\n                        canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n                    }\n                    prevLane = lane;\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n            }\n            canvasCtx.fillRect(x[prevLane], prevY1, w[prevLane], prevY2 - prevY1);\n        }\n        // Draw cursors\n        if (!this._settings.hideCursor) {\n            const cursorHeight = (2 * this._settings.pixelRatio) | 0;\n            const halfCursorHeight = (cursorHeight / 2) | 0;\n            const cursorX = this._settings.x[7 /* OverviewRulerLane.Full */];\n            const cursorW = this._settings.w[7 /* OverviewRulerLane.Full */];\n            let prevY1 = -100;\n            let prevY2 = -100;\n            let prevColor = null;\n            for (let i = 0, len = this._cursorPositions.length; i < len; i++) {\n                const color = this._cursorPositions[i].color;\n                if (!color) {\n                    continue;\n                }\n                const cursor = this._cursorPositions[i].position;\n                let yCenter = (viewLayout.getVerticalOffsetForLineNumber(cursor.lineNumber) * heightRatio) | 0;\n                if (yCenter < halfCursorHeight) {\n                    yCenter = halfCursorHeight;\n                }\n                else if (yCenter + halfCursorHeight > canvasHeight) {\n                    yCenter = canvasHeight - halfCursorHeight;\n                }\n                const y1 = yCenter - halfCursorHeight;\n                const y2 = y1 + cursorHeight;\n                if (y1 > prevY2 + 1 || color !== prevColor) {\n                    // flush prev\n                    if (i !== 0 && prevColor) {\n                        canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n                    }\n                    prevY1 = y1;\n                    prevY2 = y2;\n                }\n                else {\n                    // merge into prev\n                    if (y2 > prevY2) {\n                        prevY2 = y2;\n                    }\n                }\n                prevColor = color;\n                canvasCtx.fillStyle = color;\n            }\n            if (prevColor) {\n                canvasCtx.fillRect(cursorX, prevY1, cursorW, prevY2 - prevY1);\n            }\n        }\n        if (this._settings.renderBorder && this._settings.borderColor && this._settings.overviewRulerLanes > 0) {\n            canvasCtx.beginPath();\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = this._settings.borderColor;\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(0, canvasHeight);\n            canvasCtx.stroke();\n            canvasCtx.moveTo(0, 0);\n            canvasCtx.lineTo(canvasWidth, 0);\n            canvasCtx.stroke();\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}