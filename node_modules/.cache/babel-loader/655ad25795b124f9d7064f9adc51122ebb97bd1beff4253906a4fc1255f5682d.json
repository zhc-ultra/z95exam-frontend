{"ast":null,"code":"import \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Lazy } from './lazy.js';\n// When comparing large numbers of strings it's better for performance to create an\n// Intl.Collator object and use the function provided by its compare property\n// than it is to use String.prototype.localeCompare()\n// A collator with numeric sorting enabled, and no sensitivity to case, accents or diacritics.\nvar intlFileNameCollatorBaseNumeric = new Lazy(function () {\n  var collator = new Intl.Collator(undefined, {\n    numeric: true,\n    sensitivity: 'base'\n  });\n  return {\n    collator: collator,\n    collatorIsNumeric: collator.resolvedOptions().numeric\n  };\n});\n// A collator with numeric sorting enabled.\nvar intlFileNameCollatorNumeric = new Lazy(function () {\n  var collator = new Intl.Collator(undefined, {\n    numeric: true\n  });\n  return {\n    collator: collator\n  };\n});\n// A collator with numeric sorting enabled, and sensitivity to accents and diacritics but not case.\nvar intlFileNameCollatorNumericCaseInsensitive = new Lazy(function () {\n  var collator = new Intl.Collator(undefined, {\n    numeric: true,\n    sensitivity: 'accent'\n  });\n  return {\n    collator: collator\n  };\n});\n/** Compares filenames without distinguishing the name from the extension. Disambiguates by unicode comparison. */\nexport function compareFileNames(one, other) {\n  var caseSensitive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var a = one || '';\n  var b = other || '';\n  var result = intlFileNameCollatorBaseNumeric.value.collator.compare(a, b);\n  // Using the numeric option will make compare(`foo1`, `foo01`) === 0. Disambiguate.\n  if (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && a !== b) {\n    return a < b ? -1 : 1;\n  }\n  return result;\n}\nexport function compareAnything(one, other, lookFor) {\n  var elementAName = one.toLowerCase();\n  var elementBName = other.toLowerCase();\n  // Sort prefix matches over non prefix matches\n  var prefixCompare = compareByPrefix(one, other, lookFor);\n  if (prefixCompare) {\n    return prefixCompare;\n  }\n  // Sort suffix matches over non suffix matches\n  var elementASuffixMatch = elementAName.endsWith(lookFor);\n  var elementBSuffixMatch = elementBName.endsWith(lookFor);\n  if (elementASuffixMatch !== elementBSuffixMatch) {\n    return elementASuffixMatch ? -1 : 1;\n  }\n  // Understand file names\n  var r = compareFileNames(elementAName, elementBName);\n  if (r !== 0) {\n    return r;\n  }\n  // Compare by name\n  return elementAName.localeCompare(elementBName);\n}\nexport function compareByPrefix(one, other, lookFor) {\n  var elementAName = one.toLowerCase();\n  var elementBName = other.toLowerCase();\n  // Sort prefix matches over non prefix matches\n  var elementAPrefixMatch = elementAName.startsWith(lookFor);\n  var elementBPrefixMatch = elementBName.startsWith(lookFor);\n  if (elementAPrefixMatch !== elementBPrefixMatch) {\n    return elementAPrefixMatch ? -1 : 1;\n  }\n  // Same prefix: Sort shorter matches to the top to have those on top that match more precisely\n  else if (elementAPrefixMatch && elementBPrefixMatch) {\n    if (elementAName.length < elementBName.length) {\n      return -1;\n    }\n    if (elementAName.length > elementBName.length) {\n      return 1;\n    }\n  }\n  return 0;\n}","map":{"version":3,"names":["Lazy","intlFileNameCollatorBaseNumeric","collator","Intl","Collator","undefined","numeric","sensitivity","collatorIsNumeric","resolvedOptions","intlFileNameCollatorNumeric","intlFileNameCollatorNumericCaseInsensitive","compareFileNames","one","other","caseSensitive","arguments","length","a","b","result","value","compare","compareAnything","lookFor","elementAName","toLowerCase","elementBName","prefixCompare","compareByPrefix","elementASuffixMatch","endsWith","elementBSuffixMatch","r","localeCompare","elementAPrefixMatch","startsWith","elementBPrefixMatch"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/base/common/comparers.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Lazy } from './lazy.js';\n// When comparing large numbers of strings it's better for performance to create an\n// Intl.Collator object and use the function provided by its compare property\n// than it is to use String.prototype.localeCompare()\n// A collator with numeric sorting enabled, and no sensitivity to case, accents or diacritics.\nconst intlFileNameCollatorBaseNumeric = new Lazy(() => {\n    const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n    return {\n        collator,\n        collatorIsNumeric: collator.resolvedOptions().numeric\n    };\n});\n// A collator with numeric sorting enabled.\nconst intlFileNameCollatorNumeric = new Lazy(() => {\n    const collator = new Intl.Collator(undefined, { numeric: true });\n    return {\n        collator\n    };\n});\n// A collator with numeric sorting enabled, and sensitivity to accents and diacritics but not case.\nconst intlFileNameCollatorNumericCaseInsensitive = new Lazy(() => {\n    const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'accent' });\n    return {\n        collator\n    };\n});\n/** Compares filenames without distinguishing the name from the extension. Disambiguates by unicode comparison. */\nexport function compareFileNames(one, other, caseSensitive = false) {\n    const a = one || '';\n    const b = other || '';\n    const result = intlFileNameCollatorBaseNumeric.value.collator.compare(a, b);\n    // Using the numeric option will make compare(`foo1`, `foo01`) === 0. Disambiguate.\n    if (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && a !== b) {\n        return a < b ? -1 : 1;\n    }\n    return result;\n}\nexport function compareAnything(one, other, lookFor) {\n    const elementAName = one.toLowerCase();\n    const elementBName = other.toLowerCase();\n    // Sort prefix matches over non prefix matches\n    const prefixCompare = compareByPrefix(one, other, lookFor);\n    if (prefixCompare) {\n        return prefixCompare;\n    }\n    // Sort suffix matches over non suffix matches\n    const elementASuffixMatch = elementAName.endsWith(lookFor);\n    const elementBSuffixMatch = elementBName.endsWith(lookFor);\n    if (elementASuffixMatch !== elementBSuffixMatch) {\n        return elementASuffixMatch ? -1 : 1;\n    }\n    // Understand file names\n    const r = compareFileNames(elementAName, elementBName);\n    if (r !== 0) {\n        return r;\n    }\n    // Compare by name\n    return elementAName.localeCompare(elementBName);\n}\nexport function compareByPrefix(one, other, lookFor) {\n    const elementAName = one.toLowerCase();\n    const elementBName = other.toLowerCase();\n    // Sort prefix matches over non prefix matches\n    const elementAPrefixMatch = elementAName.startsWith(lookFor);\n    const elementBPrefixMatch = elementBName.startsWith(lookFor);\n    if (elementAPrefixMatch !== elementBPrefixMatch) {\n        return elementAPrefixMatch ? -1 : 1;\n    }\n    // Same prefix: Sort shorter matches to the top to have those on top that match more precisely\n    else if (elementAPrefixMatch && elementBPrefixMatch) {\n        if (elementAName.length < elementBName.length) {\n            return -1;\n        }\n        if (elementAName.length > elementBName.length) {\n            return 1;\n        }\n    }\n    return 0;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}