{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\nimport { registerColor, transparent } from '../colorUtils.js';\nimport { foreground } from './baseColors.js';\nimport { editorErrorForeground, editorInfoForeground, editorWarningForeground } from './editorColors.js';\nimport { minimapFindMatch } from './minimapColors.js';\nexport var chartsForeground = registerColor('charts.foreground', {\n  dark: foreground,\n  light: foreground,\n  hcDark: foreground,\n  hcLight: foreground\n}, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport var chartsLines = registerColor('charts.lines', {\n  dark: transparent(foreground, .5),\n  light: transparent(foreground, .5),\n  hcDark: transparent(foreground, .5),\n  hcLight: transparent(foreground, .5)\n}, nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport var chartsRed = registerColor('charts.red', {\n  dark: editorErrorForeground,\n  light: editorErrorForeground,\n  hcDark: editorErrorForeground,\n  hcLight: editorErrorForeground\n}, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport var chartsBlue = registerColor('charts.blue', {\n  dark: editorInfoForeground,\n  light: editorInfoForeground,\n  hcDark: editorInfoForeground,\n  hcLight: editorInfoForeground\n}, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport var chartsYellow = registerColor('charts.yellow', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hcDark: editorWarningForeground,\n  hcLight: editorWarningForeground\n}, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport var chartsOrange = registerColor('charts.orange', {\n  dark: minimapFindMatch,\n  light: minimapFindMatch,\n  hcDark: minimapFindMatch,\n  hcLight: minimapFindMatch\n}, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport var chartsGreen = registerColor('charts.green', {\n  dark: '#89D185',\n  light: '#388A34',\n  hcDark: '#89D185',\n  hcLight: '#374e06'\n}, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport var chartsPurple = registerColor('charts.purple', {\n  dark: '#B180D7',\n  light: '#652D90',\n  hcDark: '#B180D7',\n  hcLight: '#652D90'\n}, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));","map":{"version":3,"names":["nls","registerColor","transparent","foreground","editorErrorForeground","editorInfoForeground","editorWarningForeground","minimapFindMatch","chartsForeground","dark","light","hcDark","hcLight","localize","chartsLines","chartsRed","chartsBlue","chartsYellow","chartsOrange","chartsGreen","chartsPurple"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/chartsColors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\nimport { registerColor, transparent } from '../colorUtils.js';\nimport { foreground } from './baseColors.js';\nimport { editorErrorForeground, editorInfoForeground, editorWarningForeground } from './editorColors.js';\nimport { minimapFindMatch } from './minimapColors.js';\nexport const chartsForeground = registerColor('charts.foreground', { dark: foreground, light: foreground, hcDark: foreground, hcLight: foreground }, nls.localize('chartsForeground', \"The foreground color used in charts.\"));\nexport const chartsLines = registerColor('charts.lines', { dark: transparent(foreground, .5), light: transparent(foreground, .5), hcDark: transparent(foreground, .5), hcLight: transparent(foreground, .5) }, nls.localize('chartsLines', \"The color used for horizontal lines in charts.\"));\nexport const chartsRed = registerColor('charts.red', { dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorErrorForeground, hcLight: editorErrorForeground }, nls.localize('chartsRed', \"The red color used in chart visualizations.\"));\nexport const chartsBlue = registerColor('charts.blue', { dark: editorInfoForeground, light: editorInfoForeground, hcDark: editorInfoForeground, hcLight: editorInfoForeground }, nls.localize('chartsBlue', \"The blue color used in chart visualizations.\"));\nexport const chartsYellow = registerColor('charts.yellow', { dark: editorWarningForeground, light: editorWarningForeground, hcDark: editorWarningForeground, hcLight: editorWarningForeground }, nls.localize('chartsYellow', \"The yellow color used in chart visualizations.\"));\nexport const chartsOrange = registerColor('charts.orange', { dark: minimapFindMatch, light: minimapFindMatch, hcDark: minimapFindMatch, hcLight: minimapFindMatch }, nls.localize('chartsOrange', \"The orange color used in chart visualizations.\"));\nexport const chartsGreen = registerColor('charts.green', { dark: '#89D185', light: '#388A34', hcDark: '#89D185', hcLight: '#374e06' }, nls.localize('chartsGreen', \"The green color used in chart visualizations.\"));\nexport const chartsPurple = registerColor('charts.purple', { dark: '#B180D7', light: '#652D90', hcDark: '#B180D7', hcLight: '#652D90' }, nls.localize('chartsPurple', \"The purple color used in chart visualizations.\"));\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,GAAG,MAAM,oBAAoB;AACzC,SAASC,aAAa,EAAEC,WAAW,QAAQ,kBAAkB;AAC7D,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,qBAAqB,EAAEC,oBAAoB,EAAEC,uBAAuB,QAAQ,mBAAmB;AACxG,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,OAAO,IAAMC,gBAAgB,GAAGP,aAAa,CAAC,mBAAmB,EAAE;EAAEQ,IAAI,EAAEN,UAAU;EAAEO,KAAK,EAAEP,UAAU;EAAEQ,MAAM,EAAER,UAAU;EAAES,OAAO,EAAET;AAAW,CAAC,EAAEH,GAAG,CAACa,QAAQ,CAAC,kBAAkB,EAAE,sCAAsC,CAAC,CAAC;AAC9N,OAAO,IAAMC,WAAW,GAAGb,aAAa,CAAC,cAAc,EAAE;EAAEQ,IAAI,EAAEP,WAAW,CAACC,UAAU,EAAE,EAAE,CAAC;EAAEO,KAAK,EAAER,WAAW,CAACC,UAAU,EAAE,EAAE,CAAC;EAAEQ,MAAM,EAAET,WAAW,CAACC,UAAU,EAAE,EAAE,CAAC;EAAES,OAAO,EAAEV,WAAW,CAACC,UAAU,EAAE,EAAE;AAAE,CAAC,EAAEH,GAAG,CAACa,QAAQ,CAAC,aAAa,EAAE,gDAAgD,CAAC,CAAC;AAC7R,OAAO,IAAME,SAAS,GAAGd,aAAa,CAAC,YAAY,EAAE;EAAEQ,IAAI,EAAEL,qBAAqB;EAAEM,KAAK,EAAEN,qBAAqB;EAAEO,MAAM,EAAEP,qBAAqB;EAAEQ,OAAO,EAAER;AAAsB,CAAC,EAAEJ,GAAG,CAACa,QAAQ,CAAC,WAAW,EAAE,6CAA6C,CAAC,CAAC;AAC5P,OAAO,IAAMG,UAAU,GAAGf,aAAa,CAAC,aAAa,EAAE;EAAEQ,IAAI,EAAEJ,oBAAoB;EAAEK,KAAK,EAAEL,oBAAoB;EAAEM,MAAM,EAAEN,oBAAoB;EAAEO,OAAO,EAAEP;AAAqB,CAAC,EAAEL,GAAG,CAACa,QAAQ,CAAC,YAAY,EAAE,8CAA8C,CAAC,CAAC;AAC5P,OAAO,IAAMI,YAAY,GAAGhB,aAAa,CAAC,eAAe,EAAE;EAAEQ,IAAI,EAAEH,uBAAuB;EAAEI,KAAK,EAAEJ,uBAAuB;EAAEK,MAAM,EAAEL,uBAAuB;EAAEM,OAAO,EAAEN;AAAwB,CAAC,EAAEN,GAAG,CAACa,QAAQ,CAAC,cAAc,EAAE,gDAAgD,CAAC,CAAC;AAChR,OAAO,IAAMK,YAAY,GAAGjB,aAAa,CAAC,eAAe,EAAE;EAAEQ,IAAI,EAAEF,gBAAgB;EAAEG,KAAK,EAAEH,gBAAgB;EAAEI,MAAM,EAAEJ,gBAAgB;EAAEK,OAAO,EAAEL;AAAiB,CAAC,EAAEP,GAAG,CAACa,QAAQ,CAAC,cAAc,EAAE,gDAAgD,CAAC,CAAC;AACpP,OAAO,IAAMM,WAAW,GAAGlB,aAAa,CAAC,cAAc,EAAE;EAAEQ,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE,SAAS;EAAEC,MAAM,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAU,CAAC,EAAEZ,GAAG,CAACa,QAAQ,CAAC,aAAa,EAAE,+CAA+C,CAAC,CAAC;AACpN,OAAO,IAAMO,YAAY,GAAGnB,aAAa,CAAC,eAAe,EAAE;EAAEQ,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE,SAAS;EAAEC,MAAM,EAAE,SAAS;EAAEC,OAAO,EAAE;AAAU,CAAC,EAAEZ,GAAG,CAACa,QAAQ,CAAC,cAAc,EAAE,gDAAgD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}