{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LRUCache } from '../../../base/common/map.js';\nimport { CharacterClassifier } from './characterClassifier.js';\nexport var WordCharacterClassifier = /*#__PURE__*/function (_CharacterClassifier) {\n  function WordCharacterClassifier(wordSeparators, intlSegmenterLocales) {\n    var _this;\n    _classCallCheck(this, WordCharacterClassifier);\n    _this = _callSuper(this, WordCharacterClassifier, [0 /* WordCharacterClass.Regular */]);\n    _this._segmenter = null;\n    _this._cachedLine = null;\n    _this._cachedSegments = [];\n    _this.intlSegmenterLocales = intlSegmenterLocales;\n    if (_this.intlSegmenterLocales.length > 0) {\n      _this._segmenter = new Intl.Segmenter(_this.intlSegmenterLocales, {\n        granularity: 'word'\n      });\n    } else {\n      _this._segmenter = null;\n    }\n    for (var i = 0, len = wordSeparators.length; i < len; i++) {\n      _this.set(wordSeparators.charCodeAt(i), 2 /* WordCharacterClass.WordSeparator */);\n    }\n    _this.set(32 /* CharCode.Space */, 1 /* WordCharacterClass.Whitespace */);\n    _this.set(9 /* CharCode.Tab */, 1 /* WordCharacterClass.Whitespace */);\n    return _this;\n  }\n  _inherits(WordCharacterClassifier, _CharacterClassifier);\n  return _createClass(WordCharacterClassifier, [{\n    key: \"findPrevIntlWordBeforeOrAtOffset\",\n    value: function findPrevIntlWordBeforeOrAtOffset(line, offset) {\n      var candidate = null;\n      var _iterator = _createForOfIteratorHelper(this._getIntlSegmenterWordsOnLine(line)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var segment = _step.value;\n          if (segment.index > offset) {\n            break;\n          }\n          candidate = segment;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return candidate;\n    }\n  }, {\n    key: \"findNextIntlWordAtOrAfterOffset\",\n    value: function findNextIntlWordAtOrAfterOffset(lineContent, offset) {\n      var _iterator2 = _createForOfIteratorHelper(this._getIntlSegmenterWordsOnLine(lineContent)),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var segment = _step2.value;\n          if (segment.index < offset) {\n            continue;\n          }\n          return segment;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return null;\n    }\n  }, {\n    key: \"_getIntlSegmenterWordsOnLine\",\n    value: function _getIntlSegmenterWordsOnLine(line) {\n      if (!this._segmenter) {\n        return [];\n      }\n      // Check if the line has changed from the previous call\n      if (this._cachedLine === line) {\n        return this._cachedSegments;\n      }\n      // Update the cache with the new line\n      this._cachedLine = line;\n      this._cachedSegments = this._filterWordSegments(this._segmenter.segment(line));\n      return this._cachedSegments;\n    }\n  }, {\n    key: \"_filterWordSegments\",\n    value: function _filterWordSegments(segments) {\n      var result = [];\n      var _iterator3 = _createForOfIteratorHelper(segments),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var segment = _step3.value;\n          if (this._isWordLike(segment)) {\n            result.push(segment);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return result;\n    }\n  }, {\n    key: \"_isWordLike\",\n    value: function _isWordLike(segment) {\n      if (segment.isWordLike) {\n        return true;\n      }\n      return false;\n    }\n  }]);\n}(CharacterClassifier);\nvar wordClassifierCache = new LRUCache(10);\nexport function getMapForWordSeparators(wordSeparators, intlSegmenterLocales) {\n  var key = \"\".concat(wordSeparators, \"/\").concat(intlSegmenterLocales.join(','));\n  var result = wordClassifierCache.get(key);\n  if (!result) {\n    result = new WordCharacterClassifier(wordSeparators, intlSegmenterLocales);\n    wordClassifierCache.set(key, result);\n  }\n  return result;\n}","map":{"version":3,"names":["LRUCache","CharacterClassifier","WordCharacterClassifier","_CharacterClassifier","wordSeparators","intlSegmenterLocales","_this","_classCallCheck","_callSuper","_segmenter","_cachedLine","_cachedSegments","length","Intl","Segmenter","granularity","i","len","set","charCodeAt","_inherits","_createClass","key","value","findPrevIntlWordBeforeOrAtOffset","line","offset","candidate","_iterator","_createForOfIteratorHelper","_getIntlSegmenterWordsOnLine","_step","s","n","done","segment","index","err","e","f","findNextIntlWordAtOrAfterOffset","lineContent","_iterator2","_step2","_filterWordSegments","segments","result","_iterator3","_step3","_isWordLike","push","isWordLike","wordClassifierCache","getMapForWordSeparators","concat","join","get"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/core/wordCharacterClassifier.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { LRUCache } from '../../../base/common/map.js';\nimport { CharacterClassifier } from './characterClassifier.js';\nexport class WordCharacterClassifier extends CharacterClassifier {\n    constructor(wordSeparators, intlSegmenterLocales) {\n        super(0 /* WordCharacterClass.Regular */);\n        this._segmenter = null;\n        this._cachedLine = null;\n        this._cachedSegments = [];\n        this.intlSegmenterLocales = intlSegmenterLocales;\n        if (this.intlSegmenterLocales.length > 0) {\n            this._segmenter = new Intl.Segmenter(this.intlSegmenterLocales, { granularity: 'word' });\n        }\n        else {\n            this._segmenter = null;\n        }\n        for (let i = 0, len = wordSeparators.length; i < len; i++) {\n            this.set(wordSeparators.charCodeAt(i), 2 /* WordCharacterClass.WordSeparator */);\n        }\n        this.set(32 /* CharCode.Space */, 1 /* WordCharacterClass.Whitespace */);\n        this.set(9 /* CharCode.Tab */, 1 /* WordCharacterClass.Whitespace */);\n    }\n    findPrevIntlWordBeforeOrAtOffset(line, offset) {\n        let candidate = null;\n        for (const segment of this._getIntlSegmenterWordsOnLine(line)) {\n            if (segment.index > offset) {\n                break;\n            }\n            candidate = segment;\n        }\n        return candidate;\n    }\n    findNextIntlWordAtOrAfterOffset(lineContent, offset) {\n        for (const segment of this._getIntlSegmenterWordsOnLine(lineContent)) {\n            if (segment.index < offset) {\n                continue;\n            }\n            return segment;\n        }\n        return null;\n    }\n    _getIntlSegmenterWordsOnLine(line) {\n        if (!this._segmenter) {\n            return [];\n        }\n        // Check if the line has changed from the previous call\n        if (this._cachedLine === line) {\n            return this._cachedSegments;\n        }\n        // Update the cache with the new line\n        this._cachedLine = line;\n        this._cachedSegments = this._filterWordSegments(this._segmenter.segment(line));\n        return this._cachedSegments;\n    }\n    _filterWordSegments(segments) {\n        const result = [];\n        for (const segment of segments) {\n            if (this._isWordLike(segment)) {\n                result.push(segment);\n            }\n        }\n        return result;\n    }\n    _isWordLike(segment) {\n        if (segment.isWordLike) {\n            return true;\n        }\n        return false;\n    }\n}\nconst wordClassifierCache = new LRUCache(10);\nexport function getMapForWordSeparators(wordSeparators, intlSegmenterLocales) {\n    const key = `${wordSeparators}/${intlSegmenterLocales.join(',')}`;\n    let result = wordClassifierCache.get(key);\n    if (!result) {\n        result = new WordCharacterClassifier(wordSeparators, intlSegmenterLocales);\n        wordClassifierCache.set(key, result);\n    }\n    return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}