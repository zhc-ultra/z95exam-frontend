{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalArgument } from './errors.js';\nexport function decodeKeybinding(keybinding, OS) {\n  if (typeof keybinding === 'number') {\n    if (keybinding === 0) {\n      return null;\n    }\n    var firstChord = (keybinding & 0x0000FFFF) >>> 0;\n    var secondChord = (keybinding & 0xFFFF0000) >>> 16;\n    if (secondChord !== 0) {\n      return new Keybinding([createSimpleKeybinding(firstChord, OS), createSimpleKeybinding(secondChord, OS)]);\n    }\n    return new Keybinding([createSimpleKeybinding(firstChord, OS)]);\n  } else {\n    var chords = [];\n    for (var i = 0; i < keybinding.length; i++) {\n      chords.push(createSimpleKeybinding(keybinding[i], OS));\n    }\n    return new Keybinding(chords);\n  }\n}\nexport function createSimpleKeybinding(keybinding, OS) {\n  var ctrlCmd = keybinding & 2048 /* BinaryKeybindingsMask.CtrlCmd */ ? true : false;\n  var winCtrl = keybinding & 256 /* BinaryKeybindingsMask.WinCtrl */ ? true : false;\n  var ctrlKey = OS === 2 /* OperatingSystem.Macintosh */ ? winCtrl : ctrlCmd;\n  var shiftKey = keybinding & 1024 /* BinaryKeybindingsMask.Shift */ ? true : false;\n  var altKey = keybinding & 512 /* BinaryKeybindingsMask.Alt */ ? true : false;\n  var metaKey = OS === 2 /* OperatingSystem.Macintosh */ ? ctrlCmd : winCtrl;\n  var keyCode = keybinding & 255 /* BinaryKeybindingsMask.KeyCode */;\n  return new KeyCodeChord(ctrlKey, shiftKey, altKey, metaKey, keyCode);\n}\n/**\n * Represents a chord which uses the `keyCode` field of keyboard events.\n * A chord is a combination of keys pressed simultaneously.\n */\nexport var KeyCodeChord = /*#__PURE__*/function () {\n  function KeyCodeChord(ctrlKey, shiftKey, altKey, metaKey, keyCode) {\n    _classCallCheck(this, KeyCodeChord);\n    this.ctrlKey = ctrlKey;\n    this.shiftKey = shiftKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.keyCode = keyCode;\n  }\n  return _createClass(KeyCodeChord, [{\n    key: \"equals\",\n    value: function equals(other) {\n      return other instanceof KeyCodeChord && this.ctrlKey === other.ctrlKey && this.shiftKey === other.shiftKey && this.altKey === other.altKey && this.metaKey === other.metaKey && this.keyCode === other.keyCode;\n    }\n  }, {\n    key: \"isModifierKey\",\n    value: function isModifierKey() {\n      return this.keyCode === 0 /* KeyCode.Unknown */ || this.keyCode === 5 /* KeyCode.Ctrl */ || this.keyCode === 57 /* KeyCode.Meta */ || this.keyCode === 6 /* KeyCode.Alt */ || this.keyCode === 4 /* KeyCode.Shift */;\n    }\n    /**\n     * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n     */\n  }, {\n    key: \"isDuplicateModifierCase\",\n    value: function isDuplicateModifierCase() {\n      return this.ctrlKey && this.keyCode === 5 /* KeyCode.Ctrl */ || this.shiftKey && this.keyCode === 4 /* KeyCode.Shift */ || this.altKey && this.keyCode === 6 /* KeyCode.Alt */ || this.metaKey && this.keyCode === 57 /* KeyCode.Meta */;\n    }\n  }]);\n}();\n/**\n * Represents a chord which uses the `code` field of keyboard events.\n * A chord is a combination of keys pressed simultaneously.\n */\nexport var ScanCodeChord = /*#__PURE__*/function () {\n  function ScanCodeChord(ctrlKey, shiftKey, altKey, metaKey, scanCode) {\n    _classCallCheck(this, ScanCodeChord);\n    this.ctrlKey = ctrlKey;\n    this.shiftKey = shiftKey;\n    this.altKey = altKey;\n    this.metaKey = metaKey;\n    this.scanCode = scanCode;\n  }\n  /**\n   * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n   */\n  return _createClass(ScanCodeChord, [{\n    key: \"isDuplicateModifierCase\",\n    value: function isDuplicateModifierCase() {\n      return this.ctrlKey && (this.scanCode === 157 /* ScanCode.ControlLeft */ || this.scanCode === 161 /* ScanCode.ControlRight */) || this.shiftKey && (this.scanCode === 158 /* ScanCode.ShiftLeft */ || this.scanCode === 162 /* ScanCode.ShiftRight */) || this.altKey && (this.scanCode === 159 /* ScanCode.AltLeft */ || this.scanCode === 163 /* ScanCode.AltRight */) || this.metaKey && (this.scanCode === 160 /* ScanCode.MetaLeft */ || this.scanCode === 164 /* ScanCode.MetaRight */);\n    }\n  }]);\n}();\n/**\n * A keybinding is a sequence of chords.\n */\nexport var Keybinding = /*#__PURE__*/_createClass(function Keybinding(chords) {\n  _classCallCheck(this, Keybinding);\n  if (chords.length === 0) {\n    throw illegalArgument(\"chords\");\n  }\n  this.chords = chords;\n});\nexport var ResolvedChord = /*#__PURE__*/_createClass(function ResolvedChord(ctrlKey, shiftKey, altKey, metaKey, keyLabel, keyAriaLabel) {\n  _classCallCheck(this, ResolvedChord);\n  this.ctrlKey = ctrlKey;\n  this.shiftKey = shiftKey;\n  this.altKey = altKey;\n  this.metaKey = metaKey;\n  this.keyLabel = keyLabel;\n  this.keyAriaLabel = keyAriaLabel;\n});\n/**\n * A resolved keybinding. Consists of one or multiple chords.\n */\nexport var ResolvedKeybinding = /*#__PURE__*/_createClass(function ResolvedKeybinding() {\n  _classCallCheck(this, ResolvedKeybinding);\n});","map":{"version":3,"names":["illegalArgument","decodeKeybinding","keybinding","OS","firstChord","secondChord","Keybinding","createSimpleKeybinding","chords","i","length","push","ctrlCmd","winCtrl","ctrlKey","shiftKey","altKey","metaKey","keyCode","KeyCodeChord","_classCallCheck","_createClass","key","value","equals","other","isModifierKey","isDuplicateModifierCase","ScanCodeChord","scanCode","ResolvedChord","keyLabel","keyAriaLabel","ResolvedKeybinding"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/base/common/keybindings.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { illegalArgument } from './errors.js';\nexport function decodeKeybinding(keybinding, OS) {\n    if (typeof keybinding === 'number') {\n        if (keybinding === 0) {\n            return null;\n        }\n        const firstChord = (keybinding & 0x0000FFFF) >>> 0;\n        const secondChord = (keybinding & 0xFFFF0000) >>> 16;\n        if (secondChord !== 0) {\n            return new Keybinding([\n                createSimpleKeybinding(firstChord, OS),\n                createSimpleKeybinding(secondChord, OS)\n            ]);\n        }\n        return new Keybinding([createSimpleKeybinding(firstChord, OS)]);\n    }\n    else {\n        const chords = [];\n        for (let i = 0; i < keybinding.length; i++) {\n            chords.push(createSimpleKeybinding(keybinding[i], OS));\n        }\n        return new Keybinding(chords);\n    }\n}\nexport function createSimpleKeybinding(keybinding, OS) {\n    const ctrlCmd = (keybinding & 2048 /* BinaryKeybindingsMask.CtrlCmd */ ? true : false);\n    const winCtrl = (keybinding & 256 /* BinaryKeybindingsMask.WinCtrl */ ? true : false);\n    const ctrlKey = (OS === 2 /* OperatingSystem.Macintosh */ ? winCtrl : ctrlCmd);\n    const shiftKey = (keybinding & 1024 /* BinaryKeybindingsMask.Shift */ ? true : false);\n    const altKey = (keybinding & 512 /* BinaryKeybindingsMask.Alt */ ? true : false);\n    const metaKey = (OS === 2 /* OperatingSystem.Macintosh */ ? ctrlCmd : winCtrl);\n    const keyCode = (keybinding & 255 /* BinaryKeybindingsMask.KeyCode */);\n    return new KeyCodeChord(ctrlKey, shiftKey, altKey, metaKey, keyCode);\n}\n/**\n * Represents a chord which uses the `keyCode` field of keyboard events.\n * A chord is a combination of keys pressed simultaneously.\n */\nexport class KeyCodeChord {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, keyCode) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.keyCode = keyCode;\n    }\n    equals(other) {\n        return (other instanceof KeyCodeChord\n            && this.ctrlKey === other.ctrlKey\n            && this.shiftKey === other.shiftKey\n            && this.altKey === other.altKey\n            && this.metaKey === other.metaKey\n            && this.keyCode === other.keyCode);\n    }\n    isModifierKey() {\n        return (this.keyCode === 0 /* KeyCode.Unknown */\n            || this.keyCode === 5 /* KeyCode.Ctrl */\n            || this.keyCode === 57 /* KeyCode.Meta */\n            || this.keyCode === 6 /* KeyCode.Alt */\n            || this.keyCode === 4 /* KeyCode.Shift */);\n    }\n    /**\n     * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n     */\n    isDuplicateModifierCase() {\n        return ((this.ctrlKey && this.keyCode === 5 /* KeyCode.Ctrl */)\n            || (this.shiftKey && this.keyCode === 4 /* KeyCode.Shift */)\n            || (this.altKey && this.keyCode === 6 /* KeyCode.Alt */)\n            || (this.metaKey && this.keyCode === 57 /* KeyCode.Meta */));\n    }\n}\n/**\n * Represents a chord which uses the `code` field of keyboard events.\n * A chord is a combination of keys pressed simultaneously.\n */\nexport class ScanCodeChord {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, scanCode) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.scanCode = scanCode;\n    }\n    /**\n     * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n     */\n    isDuplicateModifierCase() {\n        return ((this.ctrlKey && (this.scanCode === 157 /* ScanCode.ControlLeft */ || this.scanCode === 161 /* ScanCode.ControlRight */))\n            || (this.shiftKey && (this.scanCode === 158 /* ScanCode.ShiftLeft */ || this.scanCode === 162 /* ScanCode.ShiftRight */))\n            || (this.altKey && (this.scanCode === 159 /* ScanCode.AltLeft */ || this.scanCode === 163 /* ScanCode.AltRight */))\n            || (this.metaKey && (this.scanCode === 160 /* ScanCode.MetaLeft */ || this.scanCode === 164 /* ScanCode.MetaRight */)));\n    }\n}\n/**\n * A keybinding is a sequence of chords.\n */\nexport class Keybinding {\n    constructor(chords) {\n        if (chords.length === 0) {\n            throw illegalArgument(`chords`);\n        }\n        this.chords = chords;\n    }\n}\nexport class ResolvedChord {\n    constructor(ctrlKey, shiftKey, altKey, metaKey, keyLabel, keyAriaLabel) {\n        this.ctrlKey = ctrlKey;\n        this.shiftKey = shiftKey;\n        this.altKey = altKey;\n        this.metaKey = metaKey;\n        this.keyLabel = keyLabel;\n        this.keyAriaLabel = keyAriaLabel;\n    }\n}\n/**\n * A resolved keybinding. Consists of one or multiple chords.\n */\nexport class ResolvedKeybinding {\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}