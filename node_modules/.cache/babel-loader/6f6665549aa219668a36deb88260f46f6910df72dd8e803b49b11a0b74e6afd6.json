{"ast":null,"code":"/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"], [\"<\", \">\"]],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"{\",\n    close: \"}\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"[\",\n    close: \"]\",\n    notIn: [\"string\", \"comment\"]\n  }, {\n    open: \"(\",\n    close: \")\",\n    notIn: [\"string\", \"comment\"]\n  }]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  // TODO: staload and dynload are followed by a special kind of string literals\n  // with {$IDENTIFER} variables, and it also may make sense to highlight\n  // the punctuation (. and / and \\) differently.\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: \"invalid\",\n  // keyword reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing_token.dats\n  keywords: [\n  //\n  \"abstype\",\n  // ABSTYPE\n  \"abst0ype\",\n  // ABST0YPE\n  \"absprop\",\n  // ABSPROP\n  \"absview\",\n  // ABSVIEW\n  \"absvtype\",\n  // ABSVIEWTYPE\n  \"absviewtype\",\n  // ABSVIEWTYPE\n  \"absvt0ype\",\n  // ABSVIEWT0YPE\n  \"absviewt0ype\",\n  // ABSVIEWT0YPE\n  //\n  \"as\",\n  // T_AS\n  //\n  \"and\",\n  // T_AND\n  //\n  \"assume\",\n  // T_ASSUME\n  //\n  \"begin\",\n  // T_BEGIN\n  //\n  /*\n  \t\t\"case\", // CASE\n  */\n  //\n  \"classdec\",\n  // T_CLASSDEC\n  //\n  \"datasort\",\n  // T_DATASORT\n  //\n  \"datatype\",\n  // DATATYPE\n  \"dataprop\",\n  // DATAPROP\n  \"dataview\",\n  // DATAVIEW\n  \"datavtype\",\n  // DATAVIEWTYPE\n  \"dataviewtype\",\n  // DATAVIEWTYPE\n  //\n  \"do\",\n  // T_DO\n  //\n  \"end\",\n  // T_END\n  //\n  \"extern\",\n  // T_EXTERN\n  \"extype\",\n  // T_EXTYPE\n  \"extvar\",\n  // T_EXTVAR\n  //\n  \"exception\",\n  // T_EXCEPTION\n  //\n  \"fn\",\n  // FN // non-recursive\n  \"fnx\",\n  // FNX // mutual tail-rec.\n  \"fun\",\n  // FUN // general-recursive\n  //\n  \"prfn\",\n  // PRFN\n  \"prfun\",\n  // PRFUN\n  //\n  \"praxi\",\n  // PRAXI\n  \"castfn\",\n  // CASTFN\n  //\n  \"if\",\n  // T_IF\n  \"then\",\n  // T_THEN\n  \"else\",\n  // T_ELSE\n  //\n  \"ifcase\",\n  // T_IFCASE\n  //\n  \"in\",\n  // T_IN\n  //\n  \"infix\",\n  // INFIX\n  \"infixl\",\n  // INFIXL\n  \"infixr\",\n  // INFIXR\n  \"prefix\",\n  // PREFIX\n  \"postfix\",\n  // POSTFIX\n  //\n  \"implmnt\",\n  // IMPLMNT // 0\n  \"implement\",\n  // IMPLEMENT // 1\n  //\n  \"primplmnt\",\n  // PRIMPLMNT // ~1\n  \"primplement\",\n  // PRIMPLMNT // ~1\n  //\n  \"import\",\n  // T_IMPORT // for importing packages\n  //\n  /*\n  \t\t\"lam\", // LAM\n  \t\t\"llam\", // LLAM\n  \t\t\"fix\", // FIX\n  */\n  //\n  \"let\",\n  // T_LET\n  //\n  \"local\",\n  // T_LOCAL\n  //\n  \"macdef\",\n  // MACDEF\n  \"macrodef\",\n  // MACRODEF\n  //\n  \"nonfix\",\n  // T_NONFIX\n  //\n  \"symelim\",\n  // T_SYMELIM\n  \"symintr\",\n  // T_SYMINTR\n  \"overload\",\n  // T_OVERLOAD\n  //\n  \"of\",\n  // T_OF\n  \"op\",\n  // T_OP\n  //\n  \"rec\",\n  // T_REC\n  //\n  \"sif\",\n  // T_SIF\n  \"scase\",\n  // T_SCASE\n  //\n  \"sortdef\",\n  // T_SORTDEF\n  /*\n  // HX: [sta] is now deprecated\n  */\n  \"sta\",\n  // T_STACST\n  \"stacst\",\n  // T_STACST\n  \"stadef\",\n  // T_STADEF\n  \"static\",\n  // T_STATIC\n  /*\n  \t\t\"stavar\", // T_STAVAR\n  */\n  //\n  \"staload\",\n  // T_STALOAD\n  \"dynload\",\n  // T_DYNLOAD\n  //\n  \"try\",\n  // T_TRY\n  //\n  \"tkindef\",\n  // T_TKINDEF // HX-2012-05-23\n  //\n  /*\n  \t\t\"type\", // TYPE\n  */\n  \"typedef\",\n  // TYPEDEF\n  \"propdef\",\n  // PROPDEF\n  \"viewdef\",\n  // VIEWDEF\n  \"vtypedef\",\n  // VIEWTYPEDEF\n  \"viewtypedef\",\n  // VIEWTYPEDEF\n  //\n  /*\n  \t\t\"val\", // VAL\n  */\n  \"prval\",\n  // PRVAL\n  //\n  \"var\",\n  // VAR\n  \"prvar\",\n  // PRVAR\n  //\n  \"when\",\n  // T_WHEN\n  \"where\",\n  // T_WHERE\n  //\n  /*\n  \t\t\"for\", // T_FOR\n  \t\t\"while\", // T_WHILE\n  */\n  //\n  \"with\",\n  // T_WITH\n  //\n  \"withtype\",\n  // WITHTYPE\n  \"withprop\",\n  // WITHPROP\n  \"withview\",\n  // WITHVIEW\n  \"withvtype\",\n  // WITHVIEWTYPE\n  \"withviewtype\"\n  // WITHVIEWTYPE\n  //\n  ],\n  keywords_dlr: [\"$delay\",\n  // DLRDELAY\n  \"$ldelay\",\n  // DLRLDELAY\n  //\n  \"$arrpsz\",\n  // T_DLRARRPSZ\n  \"$arrptrsize\",\n  // T_DLRARRPSZ\n  //\n  \"$d2ctype\",\n  // T_DLRD2CTYPE\n  //\n  \"$effmask\",\n  // DLREFFMASK\n  \"$effmask_ntm\",\n  // DLREFFMASK_NTM\n  \"$effmask_exn\",\n  // DLREFFMASK_EXN\n  \"$effmask_ref\",\n  // DLREFFMASK_REF\n  \"$effmask_wrt\",\n  // DLREFFMASK_WRT\n  \"$effmask_all\",\n  // DLREFFMASK_ALL\n  //\n  \"$extern\",\n  // T_DLREXTERN\n  \"$extkind\",\n  // T_DLREXTKIND\n  \"$extype\",\n  // T_DLREXTYPE\n  \"$extype_struct\",\n  // T_DLREXTYPE_STRUCT\n  //\n  \"$extval\",\n  // T_DLREXTVAL\n  \"$extfcall\",\n  // T_DLREXTFCALL\n  \"$extmcall\",\n  // T_DLREXTMCALL\n  //\n  \"$literal\",\n  // T_DLRLITERAL\n  //\n  \"$myfilename\",\n  // T_DLRMYFILENAME\n  \"$mylocation\",\n  // T_DLRMYLOCATION\n  \"$myfunction\",\n  // T_DLRMYFUNCTION\n  //\n  \"$lst\",\n  // DLRLST\n  \"$lst_t\",\n  // DLRLST_T\n  \"$lst_vt\",\n  // DLRLST_VT\n  \"$list\",\n  // DLRLST\n  \"$list_t\",\n  // DLRLST_T\n  \"$list_vt\",\n  // DLRLST_VT\n  //\n  \"$rec\",\n  // DLRREC\n  \"$rec_t\",\n  // DLRREC_T\n  \"$rec_vt\",\n  // DLRREC_VT\n  \"$record\",\n  // DLRREC\n  \"$record_t\",\n  // DLRREC_T\n  \"$record_vt\",\n  // DLRREC_VT\n  //\n  \"$tup\",\n  // DLRTUP\n  \"$tup_t\",\n  // DLRTUP_T\n  \"$tup_vt\",\n  // DLRTUP_VT\n  \"$tuple\",\n  // DLRTUP\n  \"$tuple_t\",\n  // DLRTUP_T\n  \"$tuple_vt\",\n  // DLRTUP_VT\n  //\n  \"$break\",\n  // T_DLRBREAK\n  \"$continue\",\n  // T_DLRCONTINUE\n  //\n  \"$raise\",\n  // T_DLRRAISE\n  //\n  \"$showtype\",\n  // T_DLRSHOWTYPE\n  //\n  \"$vcopyenv_v\",\n  // DLRVCOPYENV_V\n  \"$vcopyenv_vt\",\n  // DLRVCOPYENV_VT\n  //\n  \"$tempenver\",\n  // T_DLRTEMPENVER\n  //\n  \"$solver_assert\",\n  // T_DLRSOLASSERT\n  \"$solver_verify\"\n  // T_DLRSOLVERIFY\n  ],\n  keywords_srp: [\n  //\n  \"#if\",\n  // T_SRPIF\n  \"#ifdef\",\n  // T_SRPIFDEF\n  \"#ifndef\",\n  // T_SRPIFNDEF\n  //\n  \"#then\",\n  // T_SRPTHEN\n  //\n  \"#elif\",\n  // T_SRPELIF\n  \"#elifdef\",\n  // T_SRPELIFDEF\n  \"#elifndef\",\n  // T_SRPELIFNDEF\n  //\n  \"#else\",\n  // T_SRPELSE\n  \"#endif\",\n  // T_SRPENDIF\n  //\n  \"#error\",\n  // T_SRPERROR\n  //\n  \"#prerr\",\n  // T_SRPPRERR // outpui to stderr\n  \"#print\",\n  // T_SRPPRINT // output to stdout\n  //\n  \"#assert\",\n  // T_SRPASSERT\n  //\n  \"#undef\",\n  // T_SRPUNDEF\n  \"#define\",\n  // T_SRPDEFINE\n  //\n  \"#include\",\n  // T_SRPINCLUDE\n  \"#require\",\n  // T_SRPREQUIRE\n  //\n  \"#pragma\",\n  // T_SRPPRAGMA // HX: general pragma\n  \"#codegen2\",\n  // T_SRPCODEGEN2 // for level-2 codegen\n  \"#codegen3\"\n  // T_SRPCODEGEN3 // for level-3 codegen\n  //\n  // HX: end of special tokens\n  //\n  ],\n  irregular_keyword_list: [\"val+\", \"val-\", \"val\", \"case+\", \"case-\", \"case\", \"addr@\", \"addr\", \"fold@\", \"free@\", \"fix@\", \"fix\", \"lam@\", \"lam\", \"llam@\", \"llam\", \"viewt@ype+\", \"viewt@ype-\", \"viewt@ype\", \"viewtype+\", \"viewtype-\", \"viewtype\", \"view+\", \"view-\", \"view@\", \"view\", \"type+\", \"type-\", \"type\", \"vtype+\", \"vtype-\", \"vtype\", \"vt@ype+\", \"vt@ype-\", \"vt@ype\", \"viewt@ype+\", \"viewt@ype-\", \"viewt@ype\", \"viewtype+\", \"viewtype-\", \"viewtype\", \"prop+\", \"prop-\", \"prop\", \"type+\", \"type-\", \"type\", \"t@ype\", \"t@ype+\", \"t@ype-\", \"abst@ype\", \"abstype\", \"absviewt@ype\", \"absvt@ype\", \"for*\", \"for\", \"while*\", \"while\"],\n  keywords_types: [\"bool\", \"double\", \"byte\", \"int\", \"short\", \"char\", \"void\", \"unit\", \"long\", \"float\", \"string\", \"strptr\"],\n  // TODO: reference for this?\n  keywords_effects: [\"0\",\n  // no effects\n  \"fun\", \"clo\", \"prf\", \"funclo\", \"cloptr\", \"cloref\", \"ref\", \"ntm\", \"1\"\n  // all effects\n  ],\n  operators: [\"@\",\n  // T_AT\n  \"!\",\n  // T_BANG\n  \"|\",\n  // T_BAR\n  \"`\",\n  // T_BQUOTE\n  \":\",\n  // T_COLON\n  \"$\",\n  // T_DOLLAR\n  \".\",\n  // T_DOT\n  \"=\",\n  // T_EQ\n  \"#\",\n  // T_HASH\n  \"~\",\n  // T_TILDE\n  //\n  \"..\",\n  // T_DOTDOT\n  \"...\",\n  // T_DOTDOTDOT\n  //\n  \"=>\",\n  // T_EQGT\n  // \"=<\", // T_EQLT\n  \"=<>\",\n  // T_EQLTGT\n  \"=/=>\",\n  // T_EQSLASHEQGT\n  \"=>>\",\n  // T_EQGTGT\n  \"=/=>>\",\n  // T_EQSLASHEQGTGT\n  //\n  \"<\",\n  // T_LT // opening a tmparg\n  \">\",\n  // T_GT // closing a tmparg\n  //\n  \"><\",\n  // T_GTLT\n  //\n  \".<\",\n  // T_DOTLT\n  \">.\",\n  // T_GTDOT\n  //\n  \".<>.\",\n  // T_DOTLTGTDOT\n  //\n  \"->\",\n  // T_MINUSGT\n  //\"-<\", // T_MINUSLT\n  \"-<>\"\n  // T_MINUSLTGT\n  //\n  /*\n  \t\t\":<\", // T_COLONLT\n  */],\n  brackets: [{\n    open: \",(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  },\n  // meta-programming syntax\n  {\n    open: \"`(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"%(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"'(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"'{\",\n    close: \"}\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"@(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"@{\",\n    close: \"}\",\n    token: \"delimiter.brace\"\n  }, {\n    open: \"@[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"#[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"{\",\n    close: \"}\",\n    token: \"delimiter.curly\"\n  }, {\n    open: \"[\",\n    close: \"]\",\n    token: \"delimiter.square\"\n  }, {\n    open: \"(\",\n    close: \")\",\n    token: \"delimiter.parenthesis\"\n  }, {\n    open: \"<\",\n    close: \">\",\n    token: \"delimiter.angle\"\n  }],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  // The main tokenizer for ATS/Postiats\n  // reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing.dats\n  tokenizer: {\n    root: [\n    // lexing_blankseq0\n    {\n      regex: /[ \\t\\r\\n]+/,\n      action: {\n        token: \"\"\n      }\n    },\n    // NOTE: (*) is an invalid ML-like comment!\n    {\n      regex: /\\(\\*\\)/,\n      action: {\n        token: \"invalid\"\n      }\n    }, {\n      regex: /\\(\\*/,\n      action: {\n        token: \"comment\",\n        next: \"lexing_COMMENT_block_ml\"\n      }\n    }, {\n      regex: /\\(/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.parenthesis' }*/\n    }, {\n      regex: /\\)/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.parenthesis' }*/\n    }, {\n      regex: /\\[/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.bracket' }*/\n    }, {\n      regex: /\\]/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.bracket' }*/\n    }, {\n      regex: /\\{/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.brace' }*/\n    }, {\n      regex: /\\}/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.brace' }*/\n    },\n    // lexing_COMMA\n    {\n      regex: /,\\(/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.parenthesis' }*/\n    },\n    // meta-programming syntax\n    {\n      regex: /,/,\n      action: {\n        token: \"delimiter.comma\"\n      }\n    }, {\n      regex: /;/,\n      action: {\n        token: \"delimiter.semicolon\"\n      }\n    },\n    // lexing_AT\n    {\n      regex: /@\\(/,\n      action: \"@brackets\"\n      /* { token: 'delimiter.parenthesis' }*/\n    }, {\n      regex: /@\\[/,\n      action: \"@brackets\"\n      /* { token: 'delimiter.bracket' }*/\n    }, {\n      regex: /@\\{/,\n      action: \"@brackets\"\n      /*{ token: 'delimiter.brace' }*/\n    },\n    // lexing_COLON\n    {\n      regex: /:</,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EFFECT_commaseq0\"\n      }\n    },\n    // T_COLONLT\n    /*\n    \t\t\tlexing_DOT:\n    \n    \t\t\t. // SYMBOLIC => lexing_IDENT_sym\n    \t\t\t. FLOATDOT => lexing_FLOAT_deciexp\n    \t\t\t. DIGIT => T_DOTINT\n    \t\t\t*/\n    {\n      regex: /\\.@symbolic+/,\n      action: {\n        token: \"identifier.sym\"\n      }\n    },\n    // FLOATDOT case\n    {\n      regex: /\\.@digit*@fexponent@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /\\.@digit+/,\n      action: {\n        token: \"number.float\"\n      }\n    },\n    // T_DOTINT\n    // lexing_DOLLAR:\n    // '$' IDENTFST IDENTRST* => lexing_IDENT_dlr, _ => lexing_IDENT_sym\n    {\n      regex: /\\$@IDENTFST@IDENTRST*/,\n      action: {\n        cases: {\n          \"@keywords_dlr\": {\n            token: \"keyword.dlr\"\n          },\n          \"@default\": {\n            token: \"namespace\"\n          }\n          // most likely a module qualifier\n        }\n      }\n    },\n    // lexing_SHARP:\n    // '#' IDENTFST IDENTRST* => lexing_ident_srp, _ => lexing_IDENT_sym\n    {\n      regex: /\\#@IDENTFST@IDENTRST*/,\n      action: {\n        cases: {\n          \"@keywords_srp\": {\n            token: \"keyword.srp\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    },\n    // lexing_PERCENT:\n    {\n      regex: /%\\(/,\n      action: {\n        token: \"delimiter.parenthesis\"\n      }\n    }, {\n      regex: /^%{(#|\\^|\\$)?/,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EXTCODE\",\n        nextEmbedded: \"text/javascript\"\n      }\n    }, {\n      regex: /^%}/,\n      action: {\n        token: \"keyword\"\n      }\n    },\n    // lexing_QUOTE\n    {\n      regex: /'\\(/,\n      action: {\n        token: \"delimiter.parenthesis\"\n      }\n    }, {\n      regex: /'\\[/,\n      action: {\n        token: \"delimiter.bracket\"\n      }\n    }, {\n      regex: /'\\{/,\n      action: {\n        token: \"delimiter.brace\"\n      }\n    }, [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]], [/'[^\\\\']'/, \"string\"],\n    // lexing_DQUOTE\n    [/\"/, \"string.quote\", \"@lexing_DQUOTE\"],\n    // lexing_BQUOTE\n    {\n      regex: /`\\(/,\n      action: \"@brackets\"\n      /* { token: 'delimiter.parenthesis' }*/\n    },\n    // TODO: otherwise, try lexing_IDENT_sym\n    {\n      regex: /\\\\/,\n      action: {\n        token: \"punctuation\"\n      }\n    },\n    // just T_BACKSLASH\n    // lexing_IDENT_alp:\n    // NOTE: (?!regex) is syntax for \"not-followed-by\" regex\n    // to resolve ambiguity such as foreach$fwork being incorrectly lexed as [for] [each$fwork]!\n    {\n      regex: /@irregular_keywords(?!@IDENTRST)/,\n      action: {\n        token: \"keyword\"\n      }\n    }, {\n      regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n      action: {\n        cases: {\n          // TODO: dynload and staload should be specially parsed\n          // dynload whitespace+ \"special_string\"\n          // this special string is really:\n          //  '/' '\\\\' '.' => punctuation\n          // ({\\$)([a-zA-Z_][a-zA-Z_0-9]*)(}) => punctuation,keyword,punctuation\n          // [^\"] => identifier/literal\n          \"@keywords\": {\n            token: \"keyword\"\n          },\n          \"@keywords_types\": {\n            token: \"type\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    },\n    // lexing_IDENT_sym:\n    {\n      regex: /\\/\\/\\/\\//,\n      action: {\n        token: \"comment\",\n        next: \"@lexing_COMMENT_rest\"\n      }\n    }, {\n      regex: /\\/\\/.*$/,\n      action: {\n        token: \"comment\"\n      }\n    }, {\n      regex: /\\/\\*/,\n      action: {\n        token: \"comment\",\n        next: \"@lexing_COMMENT_block_c\"\n      }\n    },\n    // AS-20160627: specifically for effect annotations\n    {\n      regex: /-<|=</,\n      action: {\n        token: \"keyword\",\n        next: \"@lexing_EFFECT_commaseq0\"\n      }\n    }, {\n      regex: /@symbolic+/,\n      action: {\n        cases: {\n          \"@operators\": \"keyword\",\n          \"@default\": \"operator\"\n        }\n      }\n    },\n    // lexing_ZERO:\n    // FIXME: this one is quite messy/unfinished yet\n    // TODO: lexing_INT_hex\n    // - testing_hexiexp => lexing_FLOAT_hexiexp\n    // - testing_fexponent_bin => lexing_FLOAT_hexiexp\n    // - testing_intspseq0 => T_INT_hex\n    // lexing_INT_hex:\n    {\n      regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /0[xX]@xdigit+@INTSP*/,\n      action: {\n        token: \"number.hex\"\n      }\n    }, {\n      regex: /0[0-7]+(?![0-9])@INTSP*/,\n      action: {\n        token: \"number.octal\"\n      }\n    },\n    // lexing_INT_oct\n    //{regex: /0/, action: { token: 'number' } }, // INTZERO\n    // lexing_INT_dec:\n    // - testing_deciexp => lexing_FLOAT_deciexp\n    // - testing_fexponent => lexing_FLOAT_deciexp\n    // - otherwise => intspseq0 ([0-9]*[lLuU]?)\n    {\n      regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n      action: {\n        token: \"number.float\"\n      }\n    }, {\n      regex: /@digit@digitseq0@INTSP*/,\n      action: {\n        token: \"number.decimal\"\n      }\n    },\n    // DIGIT, if followed by digitseq0, is lexing_INT_dec\n    {\n      regex: /@digit+@INTSP*/,\n      action: {\n        token: \"number\"\n      }\n    }],\n    lexing_COMMENT_block_ml: [[/[^\\(\\*]+/, \"comment\"], [/\\(\\*/, \"comment\", \"@push\"], [/\\(\\*/, \"comment.invalid\"], [/\\*\\)/, \"comment\", \"@pop\"], [/\\*/, \"comment\"]],\n    lexing_COMMENT_block_c: [[/[^\\/*]+/, \"comment\"],\n    // [/\\/\\*/, 'comment', '@push' ],    // nested C-style block comments not allowed\n    // [/\\/\\*/,    'comment.invalid' ],\t// NOTE: this breaks block comments in the shape of /* //*/\n    [/\\*\\//, \"comment\", \"@pop\"], [/[\\/*]/, \"comment\"]],\n    lexing_COMMENT_rest: [[/$/, \"comment\", \"@pop\"],\n    // FIXME: does it match? docs say 'no'\n    [/.*/, \"comment\"]],\n    // NOTE: added by AS, specifically for highlighting\n    lexing_EFFECT_commaseq0: [{\n      regex: /@IDENTFST@IDENTRST+|@digit+/,\n      action: {\n        cases: {\n          \"@keywords_effects\": {\n            token: \"type.effect\"\n          },\n          \"@default\": {\n            token: \"identifier\"\n          }\n        }\n      }\n    }, {\n      regex: /,/,\n      action: {\n        token: \"punctuation\"\n      }\n    }, {\n      regex: />/,\n      action: {\n        token: \"@rematch\",\n        next: \"@pop\"\n      }\n    }],\n    lexing_EXTCODE: [{\n      regex: /^%}/,\n      action: {\n        token: \"@rematch\",\n        next: \"@pop\",\n        nextEmbedded: \"@pop\"\n      }\n    }, {\n      regex: /[^%]+/,\n      action: \"\"\n    }],\n    lexing_DQUOTE: [{\n      regex: /\"/,\n      action: {\n        token: \"string.quote\",\n        next: \"@pop\"\n      }\n    },\n    // AS-20160628: additional hi-lighting for variables in staload/dynload strings\n    {\n      regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n      action: [{\n        token: \"string.escape\"\n      }, {\n        token: \"identifier\"\n      }, {\n        token: \"string.escape\"\n      }]\n    }, {\n      regex: /\\\\$/,\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n      action: {\n        token: \"string.escape\"\n      }\n    }, {\n      regex: /[^\\\\\"]+/,\n      action: {\n        token: \"string\"\n      }\n    }]\n  }\n};\nexport { conf, language };","map":{"version":3,"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","language","tokenPostfix","defaultToken","keywords","keywords_dlr","keywords_srp","irregular_keyword_list","keywords_types","keywords_effects","operators","token","symbols","IDENTFST","IDENTRST","symbolic","digit","digitseq0","xdigit","xdigitseq0","INTSP","FLOATSP","fexponent","fexponent_bin","deciexp","hexiexp","irregular_keywords","ESCHAR","start","tokenizer","root","regex","action","next","cases","nextEmbedded","lexing_COMMENT_block_ml","lexing_COMMENT_block_c","lexing_COMMENT_rest","lexing_EFFECT_commaseq0","lexing_EXTCODE","lexing_DQUOTE"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  autoClosingPairs: [\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] }\n  ]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  // TODO: staload and dynload are followed by a special kind of string literals\n  // with {$IDENTIFER} variables, and it also may make sense to highlight\n  // the punctuation (. and / and \\) differently.\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: \"invalid\",\n  // keyword reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing_token.dats\n  keywords: [\n    //\n    \"abstype\",\n    // ABSTYPE\n    \"abst0ype\",\n    // ABST0YPE\n    \"absprop\",\n    // ABSPROP\n    \"absview\",\n    // ABSVIEW\n    \"absvtype\",\n    // ABSVIEWTYPE\n    \"absviewtype\",\n    // ABSVIEWTYPE\n    \"absvt0ype\",\n    // ABSVIEWT0YPE\n    \"absviewt0ype\",\n    // ABSVIEWT0YPE\n    //\n    \"as\",\n    // T_AS\n    //\n    \"and\",\n    // T_AND\n    //\n    \"assume\",\n    // T_ASSUME\n    //\n    \"begin\",\n    // T_BEGIN\n    //\n    /*\n    \t\t\"case\", // CASE\n    */\n    //\n    \"classdec\",\n    // T_CLASSDEC\n    //\n    \"datasort\",\n    // T_DATASORT\n    //\n    \"datatype\",\n    // DATATYPE\n    \"dataprop\",\n    // DATAPROP\n    \"dataview\",\n    // DATAVIEW\n    \"datavtype\",\n    // DATAVIEWTYPE\n    \"dataviewtype\",\n    // DATAVIEWTYPE\n    //\n    \"do\",\n    // T_DO\n    //\n    \"end\",\n    // T_END\n    //\n    \"extern\",\n    // T_EXTERN\n    \"extype\",\n    // T_EXTYPE\n    \"extvar\",\n    // T_EXTVAR\n    //\n    \"exception\",\n    // T_EXCEPTION\n    //\n    \"fn\",\n    // FN // non-recursive\n    \"fnx\",\n    // FNX // mutual tail-rec.\n    \"fun\",\n    // FUN // general-recursive\n    //\n    \"prfn\",\n    // PRFN\n    \"prfun\",\n    // PRFUN\n    //\n    \"praxi\",\n    // PRAXI\n    \"castfn\",\n    // CASTFN\n    //\n    \"if\",\n    // T_IF\n    \"then\",\n    // T_THEN\n    \"else\",\n    // T_ELSE\n    //\n    \"ifcase\",\n    // T_IFCASE\n    //\n    \"in\",\n    // T_IN\n    //\n    \"infix\",\n    // INFIX\n    \"infixl\",\n    // INFIXL\n    \"infixr\",\n    // INFIXR\n    \"prefix\",\n    // PREFIX\n    \"postfix\",\n    // POSTFIX\n    //\n    \"implmnt\",\n    // IMPLMNT // 0\n    \"implement\",\n    // IMPLEMENT // 1\n    //\n    \"primplmnt\",\n    // PRIMPLMNT // ~1\n    \"primplement\",\n    // PRIMPLMNT // ~1\n    //\n    \"import\",\n    // T_IMPORT // for importing packages\n    //\n    /*\n    \t\t\"lam\", // LAM\n    \t\t\"llam\", // LLAM\n    \t\t\"fix\", // FIX\n    */\n    //\n    \"let\",\n    // T_LET\n    //\n    \"local\",\n    // T_LOCAL\n    //\n    \"macdef\",\n    // MACDEF\n    \"macrodef\",\n    // MACRODEF\n    //\n    \"nonfix\",\n    // T_NONFIX\n    //\n    \"symelim\",\n    // T_SYMELIM\n    \"symintr\",\n    // T_SYMINTR\n    \"overload\",\n    // T_OVERLOAD\n    //\n    \"of\",\n    // T_OF\n    \"op\",\n    // T_OP\n    //\n    \"rec\",\n    // T_REC\n    //\n    \"sif\",\n    // T_SIF\n    \"scase\",\n    // T_SCASE\n    //\n    \"sortdef\",\n    // T_SORTDEF\n    /*\n    // HX: [sta] is now deprecated\n    */\n    \"sta\",\n    // T_STACST\n    \"stacst\",\n    // T_STACST\n    \"stadef\",\n    // T_STADEF\n    \"static\",\n    // T_STATIC\n    /*\n    \t\t\"stavar\", // T_STAVAR\n    */\n    //\n    \"staload\",\n    // T_STALOAD\n    \"dynload\",\n    // T_DYNLOAD\n    //\n    \"try\",\n    // T_TRY\n    //\n    \"tkindef\",\n    // T_TKINDEF // HX-2012-05-23\n    //\n    /*\n    \t\t\"type\", // TYPE\n    */\n    \"typedef\",\n    // TYPEDEF\n    \"propdef\",\n    // PROPDEF\n    \"viewdef\",\n    // VIEWDEF\n    \"vtypedef\",\n    // VIEWTYPEDEF\n    \"viewtypedef\",\n    // VIEWTYPEDEF\n    //\n    /*\n    \t\t\"val\", // VAL\n    */\n    \"prval\",\n    // PRVAL\n    //\n    \"var\",\n    // VAR\n    \"prvar\",\n    // PRVAR\n    //\n    \"when\",\n    // T_WHEN\n    \"where\",\n    // T_WHERE\n    //\n    /*\n    \t\t\"for\", // T_FOR\n    \t\t\"while\", // T_WHILE\n    */\n    //\n    \"with\",\n    // T_WITH\n    //\n    \"withtype\",\n    // WITHTYPE\n    \"withprop\",\n    // WITHPROP\n    \"withview\",\n    // WITHVIEW\n    \"withvtype\",\n    // WITHVIEWTYPE\n    \"withviewtype\"\n    // WITHVIEWTYPE\n    //\n  ],\n  keywords_dlr: [\n    \"$delay\",\n    // DLRDELAY\n    \"$ldelay\",\n    // DLRLDELAY\n    //\n    \"$arrpsz\",\n    // T_DLRARRPSZ\n    \"$arrptrsize\",\n    // T_DLRARRPSZ\n    //\n    \"$d2ctype\",\n    // T_DLRD2CTYPE\n    //\n    \"$effmask\",\n    // DLREFFMASK\n    \"$effmask_ntm\",\n    // DLREFFMASK_NTM\n    \"$effmask_exn\",\n    // DLREFFMASK_EXN\n    \"$effmask_ref\",\n    // DLREFFMASK_REF\n    \"$effmask_wrt\",\n    // DLREFFMASK_WRT\n    \"$effmask_all\",\n    // DLREFFMASK_ALL\n    //\n    \"$extern\",\n    // T_DLREXTERN\n    \"$extkind\",\n    // T_DLREXTKIND\n    \"$extype\",\n    // T_DLREXTYPE\n    \"$extype_struct\",\n    // T_DLREXTYPE_STRUCT\n    //\n    \"$extval\",\n    // T_DLREXTVAL\n    \"$extfcall\",\n    // T_DLREXTFCALL\n    \"$extmcall\",\n    // T_DLREXTMCALL\n    //\n    \"$literal\",\n    // T_DLRLITERAL\n    //\n    \"$myfilename\",\n    // T_DLRMYFILENAME\n    \"$mylocation\",\n    // T_DLRMYLOCATION\n    \"$myfunction\",\n    // T_DLRMYFUNCTION\n    //\n    \"$lst\",\n    // DLRLST\n    \"$lst_t\",\n    // DLRLST_T\n    \"$lst_vt\",\n    // DLRLST_VT\n    \"$list\",\n    // DLRLST\n    \"$list_t\",\n    // DLRLST_T\n    \"$list_vt\",\n    // DLRLST_VT\n    //\n    \"$rec\",\n    // DLRREC\n    \"$rec_t\",\n    // DLRREC_T\n    \"$rec_vt\",\n    // DLRREC_VT\n    \"$record\",\n    // DLRREC\n    \"$record_t\",\n    // DLRREC_T\n    \"$record_vt\",\n    // DLRREC_VT\n    //\n    \"$tup\",\n    // DLRTUP\n    \"$tup_t\",\n    // DLRTUP_T\n    \"$tup_vt\",\n    // DLRTUP_VT\n    \"$tuple\",\n    // DLRTUP\n    \"$tuple_t\",\n    // DLRTUP_T\n    \"$tuple_vt\",\n    // DLRTUP_VT\n    //\n    \"$break\",\n    // T_DLRBREAK\n    \"$continue\",\n    // T_DLRCONTINUE\n    //\n    \"$raise\",\n    // T_DLRRAISE\n    //\n    \"$showtype\",\n    // T_DLRSHOWTYPE\n    //\n    \"$vcopyenv_v\",\n    // DLRVCOPYENV_V\n    \"$vcopyenv_vt\",\n    // DLRVCOPYENV_VT\n    //\n    \"$tempenver\",\n    // T_DLRTEMPENVER\n    //\n    \"$solver_assert\",\n    // T_DLRSOLASSERT\n    \"$solver_verify\"\n    // T_DLRSOLVERIFY\n  ],\n  keywords_srp: [\n    //\n    \"#if\",\n    // T_SRPIF\n    \"#ifdef\",\n    // T_SRPIFDEF\n    \"#ifndef\",\n    // T_SRPIFNDEF\n    //\n    \"#then\",\n    // T_SRPTHEN\n    //\n    \"#elif\",\n    // T_SRPELIF\n    \"#elifdef\",\n    // T_SRPELIFDEF\n    \"#elifndef\",\n    // T_SRPELIFNDEF\n    //\n    \"#else\",\n    // T_SRPELSE\n    \"#endif\",\n    // T_SRPENDIF\n    //\n    \"#error\",\n    // T_SRPERROR\n    //\n    \"#prerr\",\n    // T_SRPPRERR // outpui to stderr\n    \"#print\",\n    // T_SRPPRINT // output to stdout\n    //\n    \"#assert\",\n    // T_SRPASSERT\n    //\n    \"#undef\",\n    // T_SRPUNDEF\n    \"#define\",\n    // T_SRPDEFINE\n    //\n    \"#include\",\n    // T_SRPINCLUDE\n    \"#require\",\n    // T_SRPREQUIRE\n    //\n    \"#pragma\",\n    // T_SRPPRAGMA // HX: general pragma\n    \"#codegen2\",\n    // T_SRPCODEGEN2 // for level-2 codegen\n    \"#codegen3\"\n    // T_SRPCODEGEN3 // for level-3 codegen\n    //\n    // HX: end of special tokens\n    //\n  ],\n  irregular_keyword_list: [\n    \"val+\",\n    \"val-\",\n    \"val\",\n    \"case+\",\n    \"case-\",\n    \"case\",\n    \"addr@\",\n    \"addr\",\n    \"fold@\",\n    \"free@\",\n    \"fix@\",\n    \"fix\",\n    \"lam@\",\n    \"lam\",\n    \"llam@\",\n    \"llam\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"view+\",\n    \"view-\",\n    \"view@\",\n    \"view\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"vtype+\",\n    \"vtype-\",\n    \"vtype\",\n    \"vt@ype+\",\n    \"vt@ype-\",\n    \"vt@ype\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"prop+\",\n    \"prop-\",\n    \"prop\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"t@ype\",\n    \"t@ype+\",\n    \"t@ype-\",\n    \"abst@ype\",\n    \"abstype\",\n    \"absviewt@ype\",\n    \"absvt@ype\",\n    \"for*\",\n    \"for\",\n    \"while*\",\n    \"while\"\n  ],\n  keywords_types: [\n    \"bool\",\n    \"double\",\n    \"byte\",\n    \"int\",\n    \"short\",\n    \"char\",\n    \"void\",\n    \"unit\",\n    \"long\",\n    \"float\",\n    \"string\",\n    \"strptr\"\n  ],\n  // TODO: reference for this?\n  keywords_effects: [\n    \"0\",\n    // no effects\n    \"fun\",\n    \"clo\",\n    \"prf\",\n    \"funclo\",\n    \"cloptr\",\n    \"cloref\",\n    \"ref\",\n    \"ntm\",\n    \"1\"\n    // all effects\n  ],\n  operators: [\n    \"@\",\n    // T_AT\n    \"!\",\n    // T_BANG\n    \"|\",\n    // T_BAR\n    \"`\",\n    // T_BQUOTE\n    \":\",\n    // T_COLON\n    \"$\",\n    // T_DOLLAR\n    \".\",\n    // T_DOT\n    \"=\",\n    // T_EQ\n    \"#\",\n    // T_HASH\n    \"~\",\n    // T_TILDE\n    //\n    \"..\",\n    // T_DOTDOT\n    \"...\",\n    // T_DOTDOTDOT\n    //\n    \"=>\",\n    // T_EQGT\n    // \"=<\", // T_EQLT\n    \"=<>\",\n    // T_EQLTGT\n    \"=/=>\",\n    // T_EQSLASHEQGT\n    \"=>>\",\n    // T_EQGTGT\n    \"=/=>>\",\n    // T_EQSLASHEQGTGT\n    //\n    \"<\",\n    // T_LT // opening a tmparg\n    \">\",\n    // T_GT // closing a tmparg\n    //\n    \"><\",\n    // T_GTLT\n    //\n    \".<\",\n    // T_DOTLT\n    \">.\",\n    // T_GTDOT\n    //\n    \".<>.\",\n    // T_DOTLTGTDOT\n    //\n    \"->\",\n    // T_MINUSGT\n    //\"-<\", // T_MINUSLT\n    \"-<>\"\n    // T_MINUSLTGT\n    //\n    /*\n    \t\t\":<\", // T_COLONLT\n    */\n  ],\n  brackets: [\n    { open: \",(\", close: \")\", token: \"delimiter.parenthesis\" },\n    // meta-programming syntax\n    { open: \"`(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"%(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'{\", close: \"}\", token: \"delimiter.parenthesis\" },\n    { open: \"@(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"@{\", close: \"}\", token: \"delimiter.brace\" },\n    { open: \"@[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"#[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  // The main tokenizer for ATS/Postiats\n  // reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing.dats\n  tokenizer: {\n    root: [\n      // lexing_blankseq0\n      { regex: /[ \\t\\r\\n]+/, action: { token: \"\" } },\n      // NOTE: (*) is an invalid ML-like comment!\n      { regex: /\\(\\*\\)/, action: { token: \"invalid\" } },\n      {\n        regex: /\\(\\*/,\n        action: { token: \"comment\", next: \"lexing_COMMENT_block_ml\" }\n      },\n      {\n        regex: /\\(/,\n        action: \"@brackets\"\n        /*{ token: 'delimiter.parenthesis' }*/\n      },\n      {\n        regex: /\\)/,\n        action: \"@brackets\"\n        /*{ token: 'delimiter.parenthesis' }*/\n      },\n      {\n        regex: /\\[/,\n        action: \"@brackets\"\n        /*{ token: 'delimiter.bracket' }*/\n      },\n      {\n        regex: /\\]/,\n        action: \"@brackets\"\n        /*{ token: 'delimiter.bracket' }*/\n      },\n      {\n        regex: /\\{/,\n        action: \"@brackets\"\n        /*{ token: 'delimiter.brace' }*/\n      },\n      {\n        regex: /\\}/,\n        action: \"@brackets\"\n        /*{ token: 'delimiter.brace' }*/\n      },\n      // lexing_COMMA\n      {\n        regex: /,\\(/,\n        action: \"@brackets\"\n        /*{ token: 'delimiter.parenthesis' }*/\n      },\n      // meta-programming syntax\n      { regex: /,/, action: { token: \"delimiter.comma\" } },\n      { regex: /;/, action: { token: \"delimiter.semicolon\" } },\n      // lexing_AT\n      {\n        regex: /@\\(/,\n        action: \"@brackets\"\n        /* { token: 'delimiter.parenthesis' }*/\n      },\n      {\n        regex: /@\\[/,\n        action: \"@brackets\"\n        /* { token: 'delimiter.bracket' }*/\n      },\n      {\n        regex: /@\\{/,\n        action: \"@brackets\"\n        /*{ token: 'delimiter.brace' }*/\n      },\n      // lexing_COLON\n      {\n        regex: /:</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      // T_COLONLT\n      /*\n      \t\t\tlexing_DOT:\n      \n      \t\t\t. // SYMBOLIC => lexing_IDENT_sym\n      \t\t\t. FLOATDOT => lexing_FLOAT_deciexp\n      \t\t\t. DIGIT => T_DOTINT\n      \t\t\t*/\n      { regex: /\\.@symbolic+/, action: { token: \"identifier.sym\" } },\n      // FLOATDOT case\n      {\n        regex: /\\.@digit*@fexponent@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /\\.@digit+/, action: { token: \"number.float\" } },\n      // T_DOTINT\n      // lexing_DOLLAR:\n      // '$' IDENTFST IDENTRST* => lexing_IDENT_dlr, _ => lexing_IDENT_sym\n      {\n        regex: /\\$@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_dlr\": { token: \"keyword.dlr\" },\n            \"@default\": { token: \"namespace\" }\n            // most likely a module qualifier\n          }\n        }\n      },\n      // lexing_SHARP:\n      // '#' IDENTFST IDENTRST* => lexing_ident_srp, _ => lexing_IDENT_sym\n      {\n        regex: /\\#@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_srp\": { token: \"keyword.srp\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      // lexing_PERCENT:\n      { regex: /%\\(/, action: { token: \"delimiter.parenthesis\" } },\n      {\n        regex: /^%{(#|\\^|\\$)?/,\n        action: {\n          token: \"keyword\",\n          next: \"@lexing_EXTCODE\",\n          nextEmbedded: \"text/javascript\"\n        }\n      },\n      { regex: /^%}/, action: { token: \"keyword\" } },\n      // lexing_QUOTE\n      { regex: /'\\(/, action: { token: \"delimiter.parenthesis\" } },\n      { regex: /'\\[/, action: { token: \"delimiter.bracket\" } },\n      { regex: /'\\{/, action: { token: \"delimiter.brace\" } },\n      [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'[^\\\\']'/, \"string\"],\n      // lexing_DQUOTE\n      [/\"/, \"string.quote\", \"@lexing_DQUOTE\"],\n      // lexing_BQUOTE\n      {\n        regex: /`\\(/,\n        action: \"@brackets\"\n        /* { token: 'delimiter.parenthesis' }*/\n      },\n      // TODO: otherwise, try lexing_IDENT_sym\n      { regex: /\\\\/, action: { token: \"punctuation\" } },\n      // just T_BACKSLASH\n      // lexing_IDENT_alp:\n      // NOTE: (?!regex) is syntax for \"not-followed-by\" regex\n      // to resolve ambiguity such as foreach$fwork being incorrectly lexed as [for] [each$fwork]!\n      {\n        regex: /@irregular_keywords(?!@IDENTRST)/,\n        action: { token: \"keyword\" }\n      },\n      {\n        regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n        action: {\n          cases: {\n            // TODO: dynload and staload should be specially parsed\n            // dynload whitespace+ \"special_string\"\n            // this special string is really:\n            //  '/' '\\\\' '.' => punctuation\n            // ({\\$)([a-zA-Z_][a-zA-Z_0-9]*)(}) => punctuation,keyword,punctuation\n            // [^\"] => identifier/literal\n            \"@keywords\": { token: \"keyword\" },\n            \"@keywords_types\": { token: \"type\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      // lexing_IDENT_sym:\n      {\n        regex: /\\/\\/\\/\\//,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_rest\" }\n      },\n      { regex: /\\/\\/.*$/, action: { token: \"comment\" } },\n      {\n        regex: /\\/\\*/,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_block_c\" }\n      },\n      // AS-20160627: specifically for effect annotations\n      {\n        regex: /-<|=</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      {\n        regex: /@symbolic+/,\n        action: {\n          cases: {\n            \"@operators\": \"keyword\",\n            \"@default\": \"operator\"\n          }\n        }\n      },\n      // lexing_ZERO:\n      // FIXME: this one is quite messy/unfinished yet\n      // TODO: lexing_INT_hex\n      // - testing_hexiexp => lexing_FLOAT_hexiexp\n      // - testing_fexponent_bin => lexing_FLOAT_hexiexp\n      // - testing_intspseq0 => T_INT_hex\n      // lexing_INT_hex:\n      {\n        regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /0[xX]@xdigit+@INTSP*/, action: { token: \"number.hex\" } },\n      {\n        regex: /0[0-7]+(?![0-9])@INTSP*/,\n        action: { token: \"number.octal\" }\n      },\n      // lexing_INT_oct\n      //{regex: /0/, action: { token: 'number' } }, // INTZERO\n      // lexing_INT_dec:\n      // - testing_deciexp => lexing_FLOAT_deciexp\n      // - testing_fexponent => lexing_FLOAT_deciexp\n      // - otherwise => intspseq0 ([0-9]*[lLuU]?)\n      {\n        regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      {\n        regex: /@digit@digitseq0@INTSP*/,\n        action: { token: \"number.decimal\" }\n      },\n      // DIGIT, if followed by digitseq0, is lexing_INT_dec\n      { regex: /@digit+@INTSP*/, action: { token: \"number\" } }\n    ],\n    lexing_COMMENT_block_ml: [\n      [/[^\\(\\*]+/, \"comment\"],\n      [/\\(\\*/, \"comment\", \"@push\"],\n      [/\\(\\*/, \"comment.invalid\"],\n      [/\\*\\)/, \"comment\", \"@pop\"],\n      [/\\*/, \"comment\"]\n    ],\n    lexing_COMMENT_block_c: [\n      [/[^\\/*]+/, \"comment\"],\n      // [/\\/\\*/, 'comment', '@push' ],    // nested C-style block comments not allowed\n      // [/\\/\\*/,    'comment.invalid' ],\t// NOTE: this breaks block comments in the shape of /* //*/\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    lexing_COMMENT_rest: [\n      [/$/, \"comment\", \"@pop\"],\n      // FIXME: does it match? docs say 'no'\n      [/.*/, \"comment\"]\n    ],\n    // NOTE: added by AS, specifically for highlighting\n    lexing_EFFECT_commaseq0: [\n      {\n        regex: /@IDENTFST@IDENTRST+|@digit+/,\n        action: {\n          cases: {\n            \"@keywords_effects\": { token: \"type.effect\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /,/, action: { token: \"punctuation\" } },\n      { regex: />/, action: { token: \"@rematch\", next: \"@pop\" } }\n    ],\n    lexing_EXTCODE: [\n      {\n        regex: /^%}/,\n        action: {\n          token: \"@rematch\",\n          next: \"@pop\",\n          nextEmbedded: \"@pop\"\n        }\n      },\n      { regex: /[^%]+/, action: \"\" }\n    ],\n    lexing_DQUOTE: [\n      { regex: /\"/, action: { token: \"string.quote\", next: \"@pop\" } },\n      // AS-20160628: additional hi-lighting for variables in staload/dynload strings\n      {\n        regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n        action: [{ token: \"string.escape\" }, { token: \"identifier\" }, { token: \"string.escape\" }]\n      },\n      { regex: /\\\\$/, action: { token: \"string.escape\" } },\n      {\n        regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n        action: { token: \"string.escape\" }\n      },\n      { regex: /[^\\\\\"]+/, action: { token: \"string\" } }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,IAAIA,IAAI,GAAG;EACTC,QAAQ,EAAE;IACRC,WAAW,EAAE,IAAI;IACjBC,YAAY,EAAE,CAAC,IAAI,EAAE,IAAI;EAC3B,CAAC;EACDC,QAAQ,EAAE,CACR,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,GAAG,CAAC,CACX;EACDC,gBAAgB,EAAE,CAChB;IAAEC,IAAI,EAAE,GAAG;IAAEC,KAAK,EAAE,GAAG;IAAEC,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS;EAAE,CAAC,EACvD;IAAEF,IAAI,EAAE,GAAG;IAAEC,KAAK,EAAE,GAAG;IAAEC,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS;EAAE,CAAC,EACvD;IAAEF,IAAI,EAAE,GAAG;IAAEC,KAAK,EAAE,GAAG;IAAEC,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS;EAAE,CAAC,EACvD;IAAEF,IAAI,EAAE,GAAG;IAAEC,KAAK,EAAE,GAAG;IAAEC,KAAK,EAAE,CAAC,QAAQ,EAAE,SAAS;EAAE,CAAC;AAE3D,CAAC;AACD,IAAIC,QAAQ,GAAG;EACbC,YAAY,EAAE,OAAO;EACrB;EACA;EACA;EACA;EACAC,YAAY,EAAE,SAAS;EACvB;EACAC,QAAQ,EAAE;EACR;EACA,SAAS;EACT;EACA,UAAU;EACV;EACA,SAAS;EACT;EACA,SAAS;EACT;EACA,UAAU;EACV;EACA,aAAa;EACb;EACA,WAAW;EACX;EACA,cAAc;EACd;EACA;EACA,IAAI;EACJ;EACA;EACA,KAAK;EACL;EACA;EACA,QAAQ;EACR;EACA;EACA,OAAO;EACP;EACA;EACA;AACJ;AACA;EACI;EACA,UAAU;EACV;EACA;EACA,UAAU;EACV;EACA;EACA,UAAU;EACV;EACA,UAAU;EACV;EACA,UAAU;EACV;EACA,WAAW;EACX;EACA,cAAc;EACd;EACA;EACA,IAAI;EACJ;EACA;EACA,KAAK;EACL;EACA;EACA,QAAQ;EACR;EACA,QAAQ;EACR;EACA,QAAQ;EACR;EACA;EACA,WAAW;EACX;EACA;EACA,IAAI;EACJ;EACA,KAAK;EACL;EACA,KAAK;EACL;EACA;EACA,MAAM;EACN;EACA,OAAO;EACP;EACA;EACA,OAAO;EACP;EACA,QAAQ;EACR;EACA;EACA,IAAI;EACJ;EACA,MAAM;EACN;EACA,MAAM;EACN;EACA;EACA,QAAQ;EACR;EACA;EACA,IAAI;EACJ;EACA;EACA,OAAO;EACP;EACA,QAAQ;EACR;EACA,QAAQ;EACR;EACA,QAAQ;EACR;EACA,SAAS;EACT;EACA;EACA,SAAS;EACT;EACA,WAAW;EACX;EACA;EACA,WAAW;EACX;EACA,aAAa;EACb;EACA;EACA,QAAQ;EACR;EACA;EACA;AACJ;AACA;AACA;AACA;EACI;EACA,KAAK;EACL;EACA;EACA,OAAO;EACP;EACA;EACA,QAAQ;EACR;EACA,UAAU;EACV;EACA;EACA,QAAQ;EACR;EACA;EACA,SAAS;EACT;EACA,SAAS;EACT;EACA,UAAU;EACV;EACA;EACA,IAAI;EACJ;EACA,IAAI;EACJ;EACA;EACA,KAAK;EACL;EACA;EACA,KAAK;EACL;EACA,OAAO;EACP;EACA;EACA,SAAS;EACT;EACA;AACJ;AACA;EACI,KAAK;EACL;EACA,QAAQ;EACR;EACA,QAAQ;EACR;EACA,QAAQ;EACR;EACA;AACJ;AACA;EACI;EACA,SAAS;EACT;EACA,SAAS;EACT;EACA;EACA,KAAK;EACL;EACA;EACA,SAAS;EACT;EACA;EACA;AACJ;AACA;EACI,SAAS;EACT;EACA,SAAS;EACT;EACA,SAAS;EACT;EACA,UAAU;EACV;EACA,aAAa;EACb;EACA;EACA;AACJ;AACA;EACI,OAAO;EACP;EACA;EACA,KAAK;EACL;EACA,OAAO;EACP;EACA;EACA,MAAM;EACN;EACA,OAAO;EACP;EACA;EACA;AACJ;AACA;AACA;EACI;EACA,MAAM;EACN;EACA;EACA,UAAU;EACV;EACA,UAAU;EACV;EACA,UAAU;EACV;EACA,WAAW;EACX;EACA;EACA;EACA;EAAA,CACD;EACDC,YAAY,EAAE,CACZ,QAAQ;EACR;EACA,SAAS;EACT;EACA;EACA,SAAS;EACT;EACA,aAAa;EACb;EACA;EACA,UAAU;EACV;EACA;EACA,UAAU;EACV;EACA,cAAc;EACd;EACA,cAAc;EACd;EACA,cAAc;EACd;EACA,cAAc;EACd;EACA,cAAc;EACd;EACA;EACA,SAAS;EACT;EACA,UAAU;EACV;EACA,SAAS;EACT;EACA,gBAAgB;EAChB;EACA;EACA,SAAS;EACT;EACA,WAAW;EACX;EACA,WAAW;EACX;EACA;EACA,UAAU;EACV;EACA;EACA,aAAa;EACb;EACA,aAAa;EACb;EACA,aAAa;EACb;EACA;EACA,MAAM;EACN;EACA,QAAQ;EACR;EACA,SAAS;EACT;EACA,OAAO;EACP;EACA,SAAS;EACT;EACA,UAAU;EACV;EACA;EACA,MAAM;EACN;EACA,QAAQ;EACR;EACA,SAAS;EACT;EACA,SAAS;EACT;EACA,WAAW;EACX;EACA,YAAY;EACZ;EACA;EACA,MAAM;EACN;EACA,QAAQ;EACR;EACA,SAAS;EACT;EACA,QAAQ;EACR;EACA,UAAU;EACV;EACA,WAAW;EACX;EACA;EACA,QAAQ;EACR;EACA,WAAW;EACX;EACA;EACA,QAAQ;EACR;EACA;EACA,WAAW;EACX;EACA;EACA,aAAa;EACb;EACA,cAAc;EACd;EACA;EACA,YAAY;EACZ;EACA;EACA,gBAAgB;EAChB;EACA;EACA;EAAA,CACD;EACDC,YAAY,EAAE;EACZ;EACA,KAAK;EACL;EACA,QAAQ;EACR;EACA,SAAS;EACT;EACA;EACA,OAAO;EACP;EACA;EACA,OAAO;EACP;EACA,UAAU;EACV;EACA,WAAW;EACX;EACA;EACA,OAAO;EACP;EACA,QAAQ;EACR;EACA;EACA,QAAQ;EACR;EACA;EACA,QAAQ;EACR;EACA,QAAQ;EACR;EACA;EACA,SAAS;EACT;EACA;EACA,QAAQ;EACR;EACA,SAAS;EACT;EACA;EACA,UAAU;EACV;EACA,UAAU;EACV;EACA;EACA,SAAS;EACT;EACA,WAAW;EACX;EACA;EACA;EACA;EACA;EACA;EAAA,CACD;EACDC,sBAAsB,EAAE,CACtB,MAAM,EACN,MAAM,EACN,KAAK,EACL,OAAO,EACP,OAAO,EACP,MAAM,EACN,OAAO,EACP,MAAM,EACN,OAAO,EACP,OAAO,EACP,MAAM,EACN,KAAK,EACL,MAAM,EACN,KAAK,EACL,OAAO,EACP,MAAM,EACN,YAAY,EACZ,YAAY,EACZ,WAAW,EACX,WAAW,EACX,WAAW,EACX,UAAU,EACV,OAAO,EACP,OAAO,EACP,OAAO,EACP,MAAM,EACN,OAAO,EACP,OAAO,EACP,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,SAAS,EACT,SAAS,EACT,QAAQ,EACR,YAAY,EACZ,YAAY,EACZ,WAAW,EACX,WAAW,EACX,WAAW,EACX,UAAU,EACV,OAAO,EACP,OAAO,EACP,MAAM,EACN,OAAO,EACP,OAAO,EACP,MAAM,EACN,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,SAAS,EACT,cAAc,EACd,WAAW,EACX,MAAM,EACN,KAAK,EACL,QAAQ,EACR,OAAO,CACR;EACDC,cAAc,EAAE,CACd,MAAM,EACN,QAAQ,EACR,MAAM,EACN,KAAK,EACL,OAAO,EACP,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,EACN,OAAO,EACP,QAAQ,EACR,QAAQ,CACT;EACD;EACAC,gBAAgB,EAAE,CAChB,GAAG;EACH;EACA,KAAK,EACL,KAAK,EACL,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,KAAK,EACL;EACA;EAAA,CACD;EACDC,SAAS,EAAE,CACT,GAAG;EACH;EACA,GAAG;EACH;EACA,GAAG;EACH;EACA,GAAG;EACH;EACA,GAAG;EACH;EACA,GAAG;EACH;EACA,GAAG;EACH;EACA,GAAG;EACH;EACA,GAAG;EACH;EACA,GAAG;EACH;EACA;EACA,IAAI;EACJ;EACA,KAAK;EACL;EACA;EACA,IAAI;EACJ;EACA;EACA,KAAK;EACL;EACA,MAAM;EACN;EACA,KAAK;EACL;EAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}