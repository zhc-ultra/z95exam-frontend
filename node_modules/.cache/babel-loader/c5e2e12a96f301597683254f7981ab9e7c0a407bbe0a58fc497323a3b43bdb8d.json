{"ast":null,"code":"import _toConsumableArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { getLanguageTagSettingPlainKey } from './configuration.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport var Extensions = {\n  Configuration: 'base.contributions.configuration'\n};\nexport var allSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var applicationSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var machineSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var machineOverridableSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var windowSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var resourceSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nvar contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nvar ConfigurationRegistry = /*#__PURE__*/function () {\n  function ConfigurationRegistry() {\n    _classCallCheck(this, ConfigurationRegistry);\n    this.overrideIdentifiers = new Set();\n    this._onDidSchemaChange = new Emitter();\n    this._onDidUpdateConfiguration = new Emitter();\n    this.configurationDefaultsOverrides = new Map();\n    this.defaultLanguageConfigurationOverridesNode = {\n      id: 'defaultOverrides',\n      title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n      properties: {}\n    };\n    this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n    this.resourceLanguageSettingsSchema = {\n      properties: {},\n      patternProperties: {},\n      additionalProperties: true,\n      allowTrailingCommas: true,\n      allowComments: true\n    };\n    this.configurationProperties = {};\n    this.policyConfigurations = new Map();\n    this.excludedConfigurationProperties = {};\n    contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n    this.registerOverridePropertyPatternKey();\n  }\n  return _createClass(ConfigurationRegistry, [{\n    key: \"registerConfiguration\",\n    value: function registerConfiguration(configuration) {\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.registerConfigurations([configuration], validate);\n    }\n  }, {\n    key: \"registerConfigurations\",\n    value: function registerConfigurations(configurations) {\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var properties = new Set();\n      this.doRegisterConfigurations(configurations, validate, properties);\n      contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n      this._onDidSchemaChange.fire();\n      this._onDidUpdateConfiguration.fire({\n        properties: properties\n      });\n    }\n  }, {\n    key: \"registerDefaultConfigurations\",\n    value: function registerDefaultConfigurations(configurationDefaults) {\n      var properties = new Set();\n      this.doRegisterDefaultConfigurations(configurationDefaults, properties);\n      this._onDidSchemaChange.fire();\n      this._onDidUpdateConfiguration.fire({\n        properties: properties,\n        defaultsOverrides: true\n      });\n    }\n  }, {\n    key: \"doRegisterDefaultConfigurations\",\n    value: function doRegisterDefaultConfigurations(configurationDefaults, bucket) {\n      var _a;\n      var overrideIdentifiers = [];\n      var _iterator = _createForOfIteratorHelper(configurationDefaults),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _step.value,\n            overrides = _step$value.overrides,\n            source = _step$value.source;\n          for (var key in overrides) {\n            bucket.add(key);\n            if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n              var configurationDefaultOverride = this.configurationDefaultsOverrides.get(key);\n              var valuesSources = (_a = configurationDefaultOverride === null || configurationDefaultOverride === void 0 ? void 0 : configurationDefaultOverride.valuesSources) !== null && _a !== void 0 ? _a : new Map();\n              if (source) {\n                for (var _i = 0, _Object$keys = Object.keys(overrides[key]); _i < _Object$keys.length; _i++) {\n                  var configuration = _Object$keys[_i];\n                  valuesSources.set(configuration, source);\n                }\n              }\n              var defaultValue = _objectSpread(_objectSpread({}, (configurationDefaultOverride === null || configurationDefaultOverride === void 0 ? void 0 : configurationDefaultOverride.value) || {}), overrides[key]);\n              this.configurationDefaultsOverrides.set(key, {\n                source: source,\n                value: defaultValue,\n                valuesSources: valuesSources\n              });\n              var plainKey = getLanguageTagSettingPlainKey(key);\n              var property = {\n                type: 'object',\n                \"default\": defaultValue,\n                description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", plainKey),\n                $ref: resourceLanguageSettingsSchemaId,\n                defaultDefaultValue: defaultValue,\n                source: types.isString(source) ? undefined : source,\n                defaultValueSource: source\n              };\n              overrideIdentifiers.push.apply(overrideIdentifiers, _toConsumableArray(overrideIdentifiersFromKey(key)));\n              this.configurationProperties[key] = property;\n              this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n            } else {\n              this.configurationDefaultsOverrides.set(key, {\n                value: overrides[key],\n                source: source\n              });\n              var _property = this.configurationProperties[key];\n              if (_property) {\n                this.updatePropertyDefaultValue(key, _property);\n                this.updateSchema(key, _property);\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n    }\n  }, {\n    key: \"registerOverrideIdentifiers\",\n    value: function registerOverrideIdentifiers(overrideIdentifiers) {\n      this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n      this._onDidSchemaChange.fire();\n    }\n  }, {\n    key: \"doRegisterOverrideIdentifiers\",\n    value: function doRegisterOverrideIdentifiers(overrideIdentifiers) {\n      var _iterator2 = _createForOfIteratorHelper(overrideIdentifiers),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var overrideIdentifier = _step2.value;\n          this.overrideIdentifiers.add(overrideIdentifier);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      this.updateOverridePropertyPatternKey();\n    }\n  }, {\n    key: \"doRegisterConfigurations\",\n    value: function doRegisterConfigurations(configurations, validate, bucket) {\n      var _this = this;\n      configurations.forEach(function (configuration) {\n        _this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties, undefined, bucket);\n        _this.configurationContributors.push(configuration);\n        _this.registerJSONConfiguration(configuration);\n      });\n    }\n  }, {\n    key: \"validateAndRegisterProperties\",\n    value: function validateAndRegisterProperties(configuration) {\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var extensionInfo = arguments.length > 2 ? arguments[2] : undefined;\n      var restrictedProperties = arguments.length > 3 ? arguments[3] : undefined;\n      var scope = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 3;\n      var bucket = arguments.length > 5 ? arguments[5] : undefined;\n      var _a;\n      scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n      var properties = configuration.properties;\n      if (properties) {\n        for (var key in properties) {\n          var property = properties[key];\n          if (validate && validateProperty(key, property)) {\n            delete properties[key];\n            continue;\n          }\n          property.source = extensionInfo;\n          // update default value\n          property.defaultDefaultValue = properties[key][\"default\"];\n          this.updatePropertyDefaultValue(key, property);\n          // update scope\n          if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n            property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n          } else {\n            property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n            property.restricted = types.isUndefinedOrNull(property.restricted) ? !!(restrictedProperties === null || restrictedProperties === void 0 ? void 0 : restrictedProperties.includes(key)) : property.restricted;\n          }\n          // Add to properties maps\n          // Property is included by default if 'included' is unspecified\n          if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n            this.excludedConfigurationProperties[key] = properties[key];\n            delete properties[key];\n            continue;\n          } else {\n            this.configurationProperties[key] = properties[key];\n            if ((_a = properties[key].policy) === null || _a === void 0 ? void 0 : _a.name) {\n              this.policyConfigurations.set(properties[key].policy.name, key);\n            }\n          }\n          if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n            // If not set, default deprecationMessage to the markdown source\n            properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n          }\n          bucket.add(key);\n        }\n      }\n      var subNodes = configuration.allOf;\n      if (subNodes) {\n        var _iterator3 = _createForOfIteratorHelper(subNodes),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var node = _step3.value;\n            this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope, bucket);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    }\n  }, {\n    key: \"getConfigurationProperties\",\n    value: function getConfigurationProperties() {\n      return this.configurationProperties;\n    }\n  }, {\n    key: \"getPolicyConfigurations\",\n    value: function getPolicyConfigurations() {\n      return this.policyConfigurations;\n    }\n  }, {\n    key: \"registerJSONConfiguration\",\n    value: function registerJSONConfiguration(configuration) {\n      var _this2 = this;\n      var register = function register(configuration) {\n        var properties = configuration.properties;\n        if (properties) {\n          for (var key in properties) {\n            _this2.updateSchema(key, properties[key]);\n          }\n        }\n        var subNodes = configuration.allOf;\n        subNodes === null || subNodes === void 0 ? void 0 : subNodes.forEach(register);\n      };\n      register(configuration);\n    }\n  }, {\n    key: \"updateSchema\",\n    value: function updateSchema(key, property) {\n      allSettings.properties[key] = property;\n      switch (property.scope) {\n        case 1 /* ConfigurationScope.APPLICATION */:\n          applicationSettings.properties[key] = property;\n          break;\n        case 2 /* ConfigurationScope.MACHINE */:\n          machineSettings.properties[key] = property;\n          break;\n        case 6 /* ConfigurationScope.MACHINE_OVERRIDABLE */:\n          machineOverridableSettings.properties[key] = property;\n          break;\n        case 3 /* ConfigurationScope.WINDOW */:\n          windowSettings.properties[key] = property;\n          break;\n        case 4 /* ConfigurationScope.RESOURCE */:\n          resourceSettings.properties[key] = property;\n          break;\n        case 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */:\n          resourceSettings.properties[key] = property;\n          this.resourceLanguageSettingsSchema.properties[key] = property;\n          break;\n      }\n    }\n  }, {\n    key: \"updateOverridePropertyPatternKey\",\n    value: function updateOverridePropertyPatternKey() {\n      var _iterator4 = _createForOfIteratorHelper(this.overrideIdentifiers.values()),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var overrideIdentifier = _step4.value;\n          var overrideIdentifierProperty = \"[\".concat(overrideIdentifier, \"]\");\n          var resourceLanguagePropertiesSchema = {\n            type: 'object',\n            description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n            errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n            $ref: resourceLanguageSettingsSchemaId\n          };\n          this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n          allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n          applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n          machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n          machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n          windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n          resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"registerOverridePropertyPatternKey\",\n    value: function registerOverridePropertyPatternKey() {\n      var resourceLanguagePropertiesSchema = {\n        type: 'object',\n        description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n        errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n        $ref: resourceLanguageSettingsSchemaId\n      };\n      allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n      applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n      machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n      machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n      windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n      resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n      this._onDidSchemaChange.fire();\n    }\n  }, {\n    key: \"updatePropertyDefaultValue\",\n    value: function updatePropertyDefaultValue(key, property) {\n      var configurationdefaultOverride = this.configurationDefaultsOverrides.get(key);\n      var defaultValue = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.value;\n      var defaultSource = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.source;\n      if (types.isUndefined(defaultValue)) {\n        defaultValue = property.defaultDefaultValue;\n        defaultSource = undefined;\n      }\n      if (types.isUndefined(defaultValue)) {\n        defaultValue = getDefaultValue(property.type);\n      }\n      property[\"default\"] = defaultValue;\n      property.defaultValueSource = defaultSource;\n    }\n  }]);\n}();\nvar OVERRIDE_IDENTIFIER_PATTERN = \"\\\\[([^\\\\]]+)\\\\]\";\nvar OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport var OVERRIDE_PROPERTY_PATTERN = \"^(\".concat(OVERRIDE_IDENTIFIER_PATTERN, \")+$\");\nexport var OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n  var identifiers = [];\n  if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n    var matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n    while (matches === null || matches === void 0 ? void 0 : matches.length) {\n      var identifier = matches[1].trim();\n      if (identifier) {\n        identifiers.push(identifier);\n      }\n      matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n    }\n  }\n  return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n  var t = Array.isArray(type) ? type[0] : type;\n  switch (t) {\n    case 'boolean':\n      return false;\n    case 'integer':\n    case 'number':\n      return 0;\n    case 'string':\n      return '';\n    case 'array':\n      return [];\n    case 'object':\n      return {};\n    default:\n      return null;\n  }\n}\nvar configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property, schema) {\n  var _a, _b, _c, _d;\n  if (!property.trim()) {\n    return nls.localize('config.property.empty', \"Cannot register an empty property\");\n  }\n  if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n    return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n  }\n  if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n    return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n  }\n  if (((_a = schema.policy) === null || _a === void 0 ? void 0 : _a.name) && configurationRegistry.getPolicyConfigurations().get((_b = schema.policy) === null || _b === void 0 ? void 0 : _b.name) !== undefined) {\n    return nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, (_c = schema.policy) === null || _c === void 0 ? void 0 : _c.name, configurationRegistry.getPolicyConfigurations().get((_d = schema.policy) === null || _d === void 0 ? void 0 : _d.name));\n  }\n  return null;\n}","map":{"version":3,"names":["distinct","Emitter","types","nls","getLanguageTagSettingPlainKey","Extensions","JSONExtensions","Registry","Configuration","allSettings","properties","patternProperties","applicationSettings","machineSettings","machineOverridableSettings","windowSettings","resourceSettings","resourceLanguageSettingsSchemaId","contributionRegistry","as","JSONContribution","ConfigurationRegistry","_classCallCheck","overrideIdentifiers","Set","_onDidSchemaChange","_onDidUpdateConfiguration","configurationDefaultsOverrides","Map","defaultLanguageConfigurationOverridesNode","id","title","localize","configurationContributors","resourceLanguageSettingsSchema","additionalProperties","allowTrailingCommas","allowComments","configurationProperties","policyConfigurations","excludedConfigurationProperties","registerSchema","registerOverridePropertyPatternKey","_createClass","key","value","registerConfiguration","configuration","validate","arguments","length","undefined","registerConfigurations","configurations","doRegisterConfigurations","fire","registerDefaultConfigurations","configurationDefaults","doRegisterDefaultConfigurations","defaultsOverrides","bucket","_a","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","overrides","source","add","OVERRIDE_PROPERTY_REGEX","test","configurationDefaultOverride","get","valuesSources","_i","_Object$keys","Object","keys","set","defaultValue","_objectSpread","plainKey","property","type","description","$ref","defaultDefaultValue","isString","defaultValueSource","push","apply","_toConsumableArray","overrideIdentifiersFromKey","updatePropertyDefaultValue","updateSchema","err","e","f","doRegisterOverrideIdentifiers","registerOverrideIdentifiers","_iterator2","_step2","overrideIdentifier","updateOverridePropertyPatternKey","_this","forEach","validateAndRegisterProperties","extensionInfo","restrictedProperties","registerJSONConfiguration","scope","isUndefinedOrNull","validateProperty","restricted","includes","hasOwnProperty","included","policy","name","deprecationMessage","markdownDeprecationMessage","subNodes","allOf","_iterator3","_step3","node","getConfigurationProperties","getPolicyConfigurations","_this2","register","_iterator4","values","_step4","overrideIdentifierProperty","concat","resourceLanguagePropertiesSchema","errorMessage","OVERRIDE_PROPERTY_PATTERN","configurationdefaultOverride","defaultSource","isUndefined","getDefaultValue","OVERRIDE_IDENTIFIER_PATTERN","OVERRIDE_IDENTIFIER_REGEX","RegExp","identifiers","matches","exec","identifier","trim","t","Array","isArray","configurationRegistry","schema","_b","_c","_d"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { distinct } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as types from '../../../base/common/types.js';\nimport * as nls from '../../../nls.js';\nimport { getLanguageTagSettingPlainKey } from './configuration.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { Registry } from '../../registry/common/platform.js';\nexport const Extensions = {\n    Configuration: 'base.contributions.configuration'\n};\nexport const allSettings = { properties: {}, patternProperties: {} };\nexport const applicationSettings = { properties: {}, patternProperties: {} };\nexport const machineSettings = { properties: {}, patternProperties: {} };\nexport const machineOverridableSettings = { properties: {}, patternProperties: {} };\nexport const windowSettings = { properties: {}, patternProperties: {} };\nexport const resourceSettings = { properties: {}, patternProperties: {} };\nexport const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';\nconst contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\nclass ConfigurationRegistry {\n    constructor() {\n        this.overrideIdentifiers = new Set();\n        this._onDidSchemaChange = new Emitter();\n        this._onDidUpdateConfiguration = new Emitter();\n        this.configurationDefaultsOverrides = new Map();\n        this.defaultLanguageConfigurationOverridesNode = {\n            id: 'defaultOverrides',\n            title: nls.localize('defaultLanguageConfigurationOverrides.title', \"Default Language Configuration Overrides\"),\n            properties: {}\n        };\n        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];\n        this.resourceLanguageSettingsSchema = {\n            properties: {},\n            patternProperties: {},\n            additionalProperties: true,\n            allowTrailingCommas: true,\n            allowComments: true\n        };\n        this.configurationProperties = {};\n        this.policyConfigurations = new Map();\n        this.excludedConfigurationProperties = {};\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this.registerOverridePropertyPatternKey();\n    }\n    registerConfiguration(configuration, validate = true) {\n        this.registerConfigurations([configuration], validate);\n    }\n    registerConfigurations(configurations, validate = true) {\n        const properties = new Set();\n        this.doRegisterConfigurations(configurations, validate, properties);\n        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties });\n    }\n    registerDefaultConfigurations(configurationDefaults) {\n        const properties = new Set();\n        this.doRegisterDefaultConfigurations(configurationDefaults, properties);\n        this._onDidSchemaChange.fire();\n        this._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });\n    }\n    doRegisterDefaultConfigurations(configurationDefaults, bucket) {\n        var _a;\n        const overrideIdentifiers = [];\n        for (const { overrides, source } of configurationDefaults) {\n            for (const key in overrides) {\n                bucket.add(key);\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    const configurationDefaultOverride = this.configurationDefaultsOverrides.get(key);\n                    const valuesSources = (_a = configurationDefaultOverride === null || configurationDefaultOverride === void 0 ? void 0 : configurationDefaultOverride.valuesSources) !== null && _a !== void 0 ? _a : new Map();\n                    if (source) {\n                        for (const configuration of Object.keys(overrides[key])) {\n                            valuesSources.set(configuration, source);\n                        }\n                    }\n                    const defaultValue = { ...((configurationDefaultOverride === null || configurationDefaultOverride === void 0 ? void 0 : configurationDefaultOverride.value) || {}), ...overrides[key] };\n                    this.configurationDefaultsOverrides.set(key, { source, value: defaultValue, valuesSources });\n                    const plainKey = getLanguageTagSettingPlainKey(key);\n                    const property = {\n                        type: 'object',\n                        default: defaultValue,\n                        description: nls.localize('defaultLanguageConfiguration.description', \"Configure settings to be overridden for the {0} language.\", plainKey),\n                        $ref: resourceLanguageSettingsSchemaId,\n                        defaultDefaultValue: defaultValue,\n                        source: types.isString(source) ? undefined : source,\n                        defaultValueSource: source\n                    };\n                    overrideIdentifiers.push(...overrideIdentifiersFromKey(key));\n                    this.configurationProperties[key] = property;\n                    this.defaultLanguageConfigurationOverridesNode.properties[key] = property;\n                }\n                else {\n                    this.configurationDefaultsOverrides.set(key, { value: overrides[key], source });\n                    const property = this.configurationProperties[key];\n                    if (property) {\n                        this.updatePropertyDefaultValue(key, property);\n                        this.updateSchema(key, property);\n                    }\n                }\n            }\n        }\n        this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n    }\n    registerOverrideIdentifiers(overrideIdentifiers) {\n        this.doRegisterOverrideIdentifiers(overrideIdentifiers);\n        this._onDidSchemaChange.fire();\n    }\n    doRegisterOverrideIdentifiers(overrideIdentifiers) {\n        for (const overrideIdentifier of overrideIdentifiers) {\n            this.overrideIdentifiers.add(overrideIdentifier);\n        }\n        this.updateOverridePropertyPatternKey();\n    }\n    doRegisterConfigurations(configurations, validate, bucket) {\n        configurations.forEach(configuration => {\n            this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties, undefined, bucket);\n            this.configurationContributors.push(configuration);\n            this.registerJSONConfiguration(configuration);\n        });\n    }\n    validateAndRegisterProperties(configuration, validate = true, extensionInfo, restrictedProperties, scope = 3 /* ConfigurationScope.WINDOW */, bucket) {\n        var _a;\n        scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n        const properties = configuration.properties;\n        if (properties) {\n            for (const key in properties) {\n                const property = properties[key];\n                if (validate && validateProperty(key, property)) {\n                    delete properties[key];\n                    continue;\n                }\n                property.source = extensionInfo;\n                // update default value\n                property.defaultDefaultValue = properties[key].default;\n                this.updatePropertyDefaultValue(key, property);\n                // update scope\n                if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n                    property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n                }\n                else {\n                    property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n                    property.restricted = types.isUndefinedOrNull(property.restricted) ? !!(restrictedProperties === null || restrictedProperties === void 0 ? void 0 : restrictedProperties.includes(key)) : property.restricted;\n                }\n                // Add to properties maps\n                // Property is included by default if 'included' is unspecified\n                if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n                    this.excludedConfigurationProperties[key] = properties[key];\n                    delete properties[key];\n                    continue;\n                }\n                else {\n                    this.configurationProperties[key] = properties[key];\n                    if ((_a = properties[key].policy) === null || _a === void 0 ? void 0 : _a.name) {\n                        this.policyConfigurations.set(properties[key].policy.name, key);\n                    }\n                }\n                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {\n                    // If not set, default deprecationMessage to the markdown source\n                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;\n                }\n                bucket.add(key);\n            }\n        }\n        const subNodes = configuration.allOf;\n        if (subNodes) {\n            for (const node of subNodes) {\n                this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope, bucket);\n            }\n        }\n    }\n    getConfigurationProperties() {\n        return this.configurationProperties;\n    }\n    getPolicyConfigurations() {\n        return this.policyConfigurations;\n    }\n    registerJSONConfiguration(configuration) {\n        const register = (configuration) => {\n            const properties = configuration.properties;\n            if (properties) {\n                for (const key in properties) {\n                    this.updateSchema(key, properties[key]);\n                }\n            }\n            const subNodes = configuration.allOf;\n            subNodes === null || subNodes === void 0 ? void 0 : subNodes.forEach(register);\n        };\n        register(configuration);\n    }\n    updateSchema(key, property) {\n        allSettings.properties[key] = property;\n        switch (property.scope) {\n            case 1 /* ConfigurationScope.APPLICATION */:\n                applicationSettings.properties[key] = property;\n                break;\n            case 2 /* ConfigurationScope.MACHINE */:\n                machineSettings.properties[key] = property;\n                break;\n            case 6 /* ConfigurationScope.MACHINE_OVERRIDABLE */:\n                machineOverridableSettings.properties[key] = property;\n                break;\n            case 3 /* ConfigurationScope.WINDOW */:\n                windowSettings.properties[key] = property;\n                break;\n            case 4 /* ConfigurationScope.RESOURCE */:\n                resourceSettings.properties[key] = property;\n                break;\n            case 5 /* ConfigurationScope.LANGUAGE_OVERRIDABLE */:\n                resourceSettings.properties[key] = property;\n                this.resourceLanguageSettingsSchema.properties[key] = property;\n                break;\n        }\n    }\n    updateOverridePropertyPatternKey() {\n        for (const overrideIdentifier of this.overrideIdentifiers.values()) {\n            const overrideIdentifierProperty = `[${overrideIdentifier}]`;\n            const resourceLanguagePropertiesSchema = {\n                type: 'object',\n                description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n                errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n                $ref: resourceLanguageSettingsSchemaId,\n            };\n            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);\n            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;\n        }\n    }\n    registerOverridePropertyPatternKey() {\n        const resourceLanguagePropertiesSchema = {\n            type: 'object',\n            description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n            errorMessage: nls.localize('overrideSettings.errorMessage', \"This setting does not support per-language configuration.\"),\n            $ref: resourceLanguageSettingsSchemaId,\n        };\n        allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;\n        this._onDidSchemaChange.fire();\n    }\n    updatePropertyDefaultValue(key, property) {\n        const configurationdefaultOverride = this.configurationDefaultsOverrides.get(key);\n        let defaultValue = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.value;\n        let defaultSource = configurationdefaultOverride === null || configurationdefaultOverride === void 0 ? void 0 : configurationdefaultOverride.source;\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = property.defaultDefaultValue;\n            defaultSource = undefined;\n        }\n        if (types.isUndefined(defaultValue)) {\n            defaultValue = getDefaultValue(property.type);\n        }\n        property.default = defaultValue;\n        property.defaultValueSource = defaultSource;\n    }\n}\nconst OVERRIDE_IDENTIFIER_PATTERN = `\\\\[([^\\\\]]+)\\\\]`;\nconst OVERRIDE_IDENTIFIER_REGEX = new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g');\nexport const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;\nexport const OVERRIDE_PROPERTY_REGEX = new RegExp(OVERRIDE_PROPERTY_PATTERN);\nexport function overrideIdentifiersFromKey(key) {\n    const identifiers = [];\n    if (OVERRIDE_PROPERTY_REGEX.test(key)) {\n        let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        while (matches === null || matches === void 0 ? void 0 : matches.length) {\n            const identifier = matches[1].trim();\n            if (identifier) {\n                identifiers.push(identifier);\n            }\n            matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);\n        }\n    }\n    return distinct(identifiers);\n}\nexport function getDefaultValue(type) {\n    const t = Array.isArray(type) ? type[0] : type;\n    switch (t) {\n        case 'boolean':\n            return false;\n        case 'integer':\n        case 'number':\n            return 0;\n        case 'string':\n            return '';\n        case 'array':\n            return [];\n        case 'object':\n            return {};\n        default:\n            return null;\n    }\n}\nconst configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property, schema) {\n    var _a, _b, _c, _d;\n    if (!property.trim()) {\n        return nls.localize('config.property.empty', \"Cannot register an empty property\");\n    }\n    if (OVERRIDE_PROPERTY_REGEX.test(property)) {\n        return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n    }\n    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n        return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n    }\n    if (((_a = schema.policy) === null || _a === void 0 ? void 0 : _a.name) && configurationRegistry.getPolicyConfigurations().get((_b = schema.policy) === null || _b === void 0 ? void 0 : _b.name) !== undefined) {\n        return nls.localize('config.policy.duplicate', \"Cannot register '{0}'. The associated policy {1} is already registered with {2}.\", property, (_c = schema.policy) === null || _c === void 0 ? void 0 : _c.name, configurationRegistry.getPolicyConfigurations().get((_d = schema.policy) === null || _d === void 0 ? void 0 : _d.name));\n    }\n    return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}