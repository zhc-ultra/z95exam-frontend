{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-math').ToOptions} Options\n *\n * @typedef {import('mdast-util-math')} DoNotTouchAsThisImportIncludesMathInTree\n */\n\nimport { math } from 'micromark-extension-math';\nimport { mathFromMarkdown, mathToMarkdown } from 'mdast-util-math';\n\n/**\n * Plugin to support math.\n *\n * @type {import('unified').Plugin<[Options?] | void[], Root, Root>}\n */\nexport default function remarkMath() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var data = this.data();\n  add('micromarkExtensions', math(options));\n  add('fromMarkdownExtensions', mathFromMarkdown());\n  add('toMarkdownExtensions', mathToMarkdown(options));\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    var list = /** @type {unknown[]} */\n    // Other extensions\n    /* c8 ignore next 2 */\n    data[field] ? data[field] : data[field] = [];\n    list.push(value);\n  }\n}","map":{"version":3,"names":["math","mathFromMarkdown","mathToMarkdown","remarkMath","options","arguments","length","undefined","data","add","field","value","list","push"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/remark-math/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-math').ToOptions} Options\n *\n * @typedef {import('mdast-util-math')} DoNotTouchAsThisImportIncludesMathInTree\n */\n\nimport {math} from 'micromark-extension-math'\nimport {mathFromMarkdown, mathToMarkdown} from 'mdast-util-math'\n\n/**\n * Plugin to support math.\n *\n * @type {import('unified').Plugin<[Options?] | void[], Root, Root>}\n */\nexport default function remarkMath(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', math(options))\n  add('fromMarkdownExtensions', mathFromMarkdown())\n  add('toMarkdownExtensions', mathToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,IAAI,QAAO,0BAA0B;AAC7C,SAAQC,gBAAgB,EAAEC,cAAc,QAAO,iBAAiB;;AAEhE;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,UAAUA,CAAA,EAAe;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC7C,IAAMG,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC,CAAC;EAExBC,GAAG,CAAC,qBAAqB,EAAET,IAAI,CAACI,OAAO,CAAC,CAAC;EACzCK,GAAG,CAAC,wBAAwB,EAAER,gBAAgB,CAAC,CAAC,CAAC;EACjDQ,GAAG,CAAC,sBAAsB,EAAEP,cAAc,CAACE,OAAO,CAAC,CAAC;;EAEpD;AACF;AACA;AACA;EACE,SAASK,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAE;IACzB,IAAMC,IAAI,GAAG;IACX;IACA;IACAJ,IAAI,CAACE,KAAK,CAAC,GAAGF,IAAI,CAACE,KAAK,CAAC,GAAIF,IAAI,CAACE,KAAK,CAAC,GAAG,EAC5C;IAEDE,IAAI,CAACC,IAAI,CAACF,KAAK,CAAC;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}