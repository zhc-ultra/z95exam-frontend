{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _get from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { getWindow, scheduleAtNextAnimationFrame } from '../../../base/browser/dom.js';\nexport var ElementSizeObserver = /*#__PURE__*/function (_Disposable) {\n  function ElementSizeObserver(referenceDomElement, dimension) {\n    var _this;\n    _classCallCheck(this, ElementSizeObserver);\n    _this = _callSuper(this, ElementSizeObserver);\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._referenceDomElement = referenceDomElement;\n    _this._width = -1;\n    _this._height = -1;\n    _this._resizeObserver = null;\n    _this.measureReferenceDomElement(false, dimension);\n    return _this;\n  }\n  _inherits(ElementSizeObserver, _Disposable);\n  return _createClass(ElementSizeObserver, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.stopObserving();\n      _get(_getPrototypeOf(ElementSizeObserver.prototype), \"dispose\", this).call(this);\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this._width;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this._height;\n    }\n  }, {\n    key: \"startObserving\",\n    value: function startObserving() {\n      var _this2 = this;\n      if (!this._resizeObserver && this._referenceDomElement) {\n        // We want to react to the resize observer only once per animation frame\n        // The first time the resize observer fires, we will react to it immediately.\n        // Otherwise we will postpone to the next animation frame.\n        // We'll use `observeContentRect` to store the content rect we received.\n        var observedDimenstion = null;\n        var observeNow = function observeNow() {\n          if (observedDimenstion) {\n            _this2.observe({\n              width: observedDimenstion.width,\n              height: observedDimenstion.height\n            });\n          } else {\n            _this2.observe();\n          }\n        };\n        var shouldObserve = false;\n        var alreadyObservedThisAnimationFrame = false;\n        var update = function update() {\n          if (shouldObserve && !alreadyObservedThisAnimationFrame) {\n            try {\n              shouldObserve = false;\n              alreadyObservedThisAnimationFrame = true;\n              observeNow();\n            } finally {\n              scheduleAtNextAnimationFrame(getWindow(_this2._referenceDomElement), function () {\n                alreadyObservedThisAnimationFrame = false;\n                update();\n              });\n            }\n          }\n        };\n        this._resizeObserver = new ResizeObserver(function (entries) {\n          if (entries && entries[0] && entries[0].contentRect) {\n            observedDimenstion = {\n              width: entries[0].contentRect.width,\n              height: entries[0].contentRect.height\n            };\n          } else {\n            observedDimenstion = null;\n          }\n          shouldObserve = true;\n          update();\n        });\n        this._resizeObserver.observe(this._referenceDomElement);\n      }\n    }\n  }, {\n    key: \"stopObserving\",\n    value: function stopObserving() {\n      if (this._resizeObserver) {\n        this._resizeObserver.disconnect();\n        this._resizeObserver = null;\n      }\n    }\n  }, {\n    key: \"observe\",\n    value: function observe(dimension) {\n      this.measureReferenceDomElement(true, dimension);\n    }\n  }, {\n    key: \"measureReferenceDomElement\",\n    value: function measureReferenceDomElement(emitEvent, dimension) {\n      var observedWidth = 0;\n      var observedHeight = 0;\n      if (dimension) {\n        observedWidth = dimension.width;\n        observedHeight = dimension.height;\n      } else if (this._referenceDomElement) {\n        observedWidth = this._referenceDomElement.clientWidth;\n        observedHeight = this._referenceDomElement.clientHeight;\n      }\n      observedWidth = Math.max(5, observedWidth);\n      observedHeight = Math.max(5, observedHeight);\n      if (this._width !== observedWidth || this._height !== observedHeight) {\n        this._width = observedWidth;\n        this._height = observedHeight;\n        if (emitEvent) {\n          this._onDidChange.fire();\n        }\n      }\n    }\n  }]);\n}(Disposable);","map":{"version":3,"names":["Disposable","Emitter","getWindow","scheduleAtNextAnimationFrame","ElementSizeObserver","_Disposable","referenceDomElement","dimension","_this","_classCallCheck","_callSuper","_onDidChange","_register","onDidChange","event","_referenceDomElement","_width","_height","_resizeObserver","measureReferenceDomElement","_inherits","_createClass","key","value","dispose","stopObserving","_get","_getPrototypeOf","prototype","call","getWidth","getHeight","startObserving","_this2","observedDimenstion","observeNow","observe","width","height","shouldObserve","alreadyObservedThisAnimationFrame","update","ResizeObserver","entries","contentRect","disconnect","emitEvent","observedWidth","observedHeight","clientWidth","clientHeight","Math","max","fire"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/browser/config/elementSizeObserver.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { getWindow, scheduleAtNextAnimationFrame } from '../../../base/browser/dom.js';\nexport class ElementSizeObserver extends Disposable {\n    constructor(referenceDomElement, dimension) {\n        super();\n        this._onDidChange = this._register(new Emitter());\n        this.onDidChange = this._onDidChange.event;\n        this._referenceDomElement = referenceDomElement;\n        this._width = -1;\n        this._height = -1;\n        this._resizeObserver = null;\n        this.measureReferenceDomElement(false, dimension);\n    }\n    dispose() {\n        this.stopObserving();\n        super.dispose();\n    }\n    getWidth() {\n        return this._width;\n    }\n    getHeight() {\n        return this._height;\n    }\n    startObserving() {\n        if (!this._resizeObserver && this._referenceDomElement) {\n            // We want to react to the resize observer only once per animation frame\n            // The first time the resize observer fires, we will react to it immediately.\n            // Otherwise we will postpone to the next animation frame.\n            // We'll use `observeContentRect` to store the content rect we received.\n            let observedDimenstion = null;\n            const observeNow = () => {\n                if (observedDimenstion) {\n                    this.observe({ width: observedDimenstion.width, height: observedDimenstion.height });\n                }\n                else {\n                    this.observe();\n                }\n            };\n            let shouldObserve = false;\n            let alreadyObservedThisAnimationFrame = false;\n            const update = () => {\n                if (shouldObserve && !alreadyObservedThisAnimationFrame) {\n                    try {\n                        shouldObserve = false;\n                        alreadyObservedThisAnimationFrame = true;\n                        observeNow();\n                    }\n                    finally {\n                        scheduleAtNextAnimationFrame(getWindow(this._referenceDomElement), () => {\n                            alreadyObservedThisAnimationFrame = false;\n                            update();\n                        });\n                    }\n                }\n            };\n            this._resizeObserver = new ResizeObserver((entries) => {\n                if (entries && entries[0] && entries[0].contentRect) {\n                    observedDimenstion = { width: entries[0].contentRect.width, height: entries[0].contentRect.height };\n                }\n                else {\n                    observedDimenstion = null;\n                }\n                shouldObserve = true;\n                update();\n            });\n            this._resizeObserver.observe(this._referenceDomElement);\n        }\n    }\n    stopObserving() {\n        if (this._resizeObserver) {\n            this._resizeObserver.disconnect();\n            this._resizeObserver = null;\n        }\n    }\n    observe(dimension) {\n        this.measureReferenceDomElement(true, dimension);\n    }\n    measureReferenceDomElement(emitEvent, dimension) {\n        let observedWidth = 0;\n        let observedHeight = 0;\n        if (dimension) {\n            observedWidth = dimension.width;\n            observedHeight = dimension.height;\n        }\n        else if (this._referenceDomElement) {\n            observedWidth = this._referenceDomElement.clientWidth;\n            observedHeight = this._referenceDomElement.clientHeight;\n        }\n        observedWidth = Math.max(5, observedWidth);\n        observedHeight = Math.max(5, observedHeight);\n        if (this._width !== observedWidth || this._height !== observedHeight) {\n            this._width = observedWidth;\n            this._height = observedHeight;\n            if (emitEvent) {\n                this._onDidChange.fire();\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}