{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.global-this.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.create.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transformErrorForSerialization } from '../errors.js';\nimport { Emitter } from '../event.js';\nimport { Disposable } from '../lifecycle.js';\nimport { getAllMethodNames } from '../objects.js';\nimport { isWeb } from '../platform.js';\nimport * as strings from '../strings.js';\nvar INITIALIZE = '$initialize';\nvar webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n  if (!isWeb) {\n    // running tests\n    return;\n  }\n  if (!webWorkerWarningLogged) {\n    webWorkerWarningLogged = true;\n    console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n  }\n  console.warn(err.message);\n}\nvar RequestMessage = /*#__PURE__*/_createClass(function RequestMessage(vsWorker, req, method, args) {\n  _classCallCheck(this, RequestMessage);\n  this.vsWorker = vsWorker;\n  this.req = req;\n  this.method = method;\n  this.args = args;\n  this.type = 0 /* MessageType.Request */;\n});\nvar ReplyMessage = /*#__PURE__*/_createClass(function ReplyMessage(vsWorker, seq, res, err) {\n  _classCallCheck(this, ReplyMessage);\n  this.vsWorker = vsWorker;\n  this.seq = seq;\n  this.res = res;\n  this.err = err;\n  this.type = 1 /* MessageType.Reply */;\n});\nvar SubscribeEventMessage = /*#__PURE__*/_createClass(function SubscribeEventMessage(vsWorker, req, eventName, arg) {\n  _classCallCheck(this, SubscribeEventMessage);\n  this.vsWorker = vsWorker;\n  this.req = req;\n  this.eventName = eventName;\n  this.arg = arg;\n  this.type = 2 /* MessageType.SubscribeEvent */;\n});\nvar EventMessage = /*#__PURE__*/_createClass(function EventMessage(vsWorker, req, event) {\n  _classCallCheck(this, EventMessage);\n  this.vsWorker = vsWorker;\n  this.req = req;\n  this.event = event;\n  this.type = 3 /* MessageType.Event */;\n});\nvar UnsubscribeEventMessage = /*#__PURE__*/_createClass(function UnsubscribeEventMessage(vsWorker, req) {\n  _classCallCheck(this, UnsubscribeEventMessage);\n  this.vsWorker = vsWorker;\n  this.req = req;\n  this.type = 4 /* MessageType.UnsubscribeEvent */;\n});\nvar SimpleWorkerProtocol = /*#__PURE__*/function () {\n  function SimpleWorkerProtocol(handler) {\n    _classCallCheck(this, SimpleWorkerProtocol);\n    this._workerId = -1;\n    this._handler = handler;\n    this._lastSentReq = 0;\n    this._pendingReplies = Object.create(null);\n    this._pendingEmitters = new Map();\n    this._pendingEvents = new Map();\n  }\n  return _createClass(SimpleWorkerProtocol, [{\n    key: \"setWorkerId\",\n    value: function setWorkerId(workerId) {\n      this._workerId = workerId;\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(method, args) {\n      var _this = this;\n      var req = String(++this._lastSentReq);\n      return new Promise(function (resolve, reject) {\n        _this._pendingReplies[req] = {\n          resolve: resolve,\n          reject: reject\n        };\n        _this._send(new RequestMessage(_this._workerId, req, method, args));\n      });\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(eventName, arg) {\n      var _this2 = this;\n      var req = null;\n      var emitter = new Emitter({\n        onWillAddFirstListener: function onWillAddFirstListener() {\n          req = String(++_this2._lastSentReq);\n          _this2._pendingEmitters.set(req, emitter);\n          _this2._send(new SubscribeEventMessage(_this2._workerId, req, eventName, arg));\n        },\n        onDidRemoveLastListener: function onDidRemoveLastListener() {\n          _this2._pendingEmitters[\"delete\"](req);\n          _this2._send(new UnsubscribeEventMessage(_this2._workerId, req));\n          req = null;\n        }\n      });\n      return emitter.event;\n    }\n  }, {\n    key: \"handleMessage\",\n    value: function handleMessage(message) {\n      if (!message || !message.vsWorker) {\n        return;\n      }\n      if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n        return;\n      }\n      this._handleMessage(message);\n    }\n  }, {\n    key: \"_handleMessage\",\n    value: function _handleMessage(msg) {\n      switch (msg.type) {\n        case 1 /* MessageType.Reply */:\n          return this._handleReplyMessage(msg);\n        case 0 /* MessageType.Request */:\n          return this._handleRequestMessage(msg);\n        case 2 /* MessageType.SubscribeEvent */:\n          return this._handleSubscribeEventMessage(msg);\n        case 3 /* MessageType.Event */:\n          return this._handleEventMessage(msg);\n        case 4 /* MessageType.UnsubscribeEvent */:\n          return this._handleUnsubscribeEventMessage(msg);\n      }\n    }\n  }, {\n    key: \"_handleReplyMessage\",\n    value: function _handleReplyMessage(replyMessage) {\n      if (!this._pendingReplies[replyMessage.seq]) {\n        console.warn('Got reply to unknown seq');\n        return;\n      }\n      var reply = this._pendingReplies[replyMessage.seq];\n      delete this._pendingReplies[replyMessage.seq];\n      if (replyMessage.err) {\n        var err = replyMessage.err;\n        if (replyMessage.err.$isError) {\n          err = new Error();\n          err.name = replyMessage.err.name;\n          err.message = replyMessage.err.message;\n          err.stack = replyMessage.err.stack;\n        }\n        reply.reject(err);\n        return;\n      }\n      reply.resolve(replyMessage.res);\n    }\n  }, {\n    key: \"_handleRequestMessage\",\n    value: function _handleRequestMessage(requestMessage) {\n      var _this3 = this;\n      var req = requestMessage.req;\n      var result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n      result.then(function (r) {\n        _this3._send(new ReplyMessage(_this3._workerId, req, r, undefined));\n      }, function (e) {\n        if (e.detail instanceof Error) {\n          // Loading errors have a detail property that points to the actual error\n          e.detail = transformErrorForSerialization(e.detail);\n        }\n        _this3._send(new ReplyMessage(_this3._workerId, req, undefined, transformErrorForSerialization(e)));\n      });\n    }\n  }, {\n    key: \"_handleSubscribeEventMessage\",\n    value: function _handleSubscribeEventMessage(msg) {\n      var _this4 = this;\n      var req = msg.req;\n      var disposable = this._handler.handleEvent(msg.eventName, msg.arg)(function (event) {\n        _this4._send(new EventMessage(_this4._workerId, req, event));\n      });\n      this._pendingEvents.set(req, disposable);\n    }\n  }, {\n    key: \"_handleEventMessage\",\n    value: function _handleEventMessage(msg) {\n      if (!this._pendingEmitters.has(msg.req)) {\n        console.warn('Got event for unknown req');\n        return;\n      }\n      this._pendingEmitters.get(msg.req).fire(msg.event);\n    }\n  }, {\n    key: \"_handleUnsubscribeEventMessage\",\n    value: function _handleUnsubscribeEventMessage(msg) {\n      if (!this._pendingEvents.has(msg.req)) {\n        console.warn('Got unsubscribe for unknown req');\n        return;\n      }\n      this._pendingEvents.get(msg.req).dispose();\n      this._pendingEvents[\"delete\"](msg.req);\n    }\n  }, {\n    key: \"_send\",\n    value: function _send(msg) {\n      var transfer = [];\n      if (msg.type === 0 /* MessageType.Request */) {\n        for (var i = 0; i < msg.args.length; i++) {\n          if (msg.args[i] instanceof ArrayBuffer) {\n            transfer.push(msg.args[i]);\n          }\n        }\n      } else if (msg.type === 1 /* MessageType.Reply */) {\n        if (msg.res instanceof ArrayBuffer) {\n          transfer.push(msg.res);\n        }\n      }\n      this._handler.sendMessage(msg, transfer);\n    }\n  }]);\n}();\n/**\n * Main thread side\n */\nexport var SimpleWorkerClient = /*#__PURE__*/function (_Disposable) {\n  function SimpleWorkerClient(workerFactory, moduleId, host) {\n    var _this5;\n    _classCallCheck(this, SimpleWorkerClient);\n    _this5 = _callSuper(this, SimpleWorkerClient);\n    var lazyProxyReject = null;\n    _this5._worker = _this5._register(workerFactory.create('vs/base/common/worker/simpleWorker', function (msg) {\n      _this5._protocol.handleMessage(msg);\n    }, function (err) {\n      // in Firefox, web workers fail lazily :(\n      // we will reject the proxy\n      lazyProxyReject === null || lazyProxyReject === void 0 ? void 0 : lazyProxyReject(err);\n    }));\n    _this5._protocol = new SimpleWorkerProtocol({\n      sendMessage: function sendMessage(msg, transfer) {\n        _this5._worker.postMessage(msg, transfer);\n      },\n      handleMessage: function handleMessage(method, args) {\n        if (typeof host[method] !== 'function') {\n          return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n        }\n        try {\n          return Promise.resolve(host[method].apply(host, args));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      },\n      handleEvent: function handleEvent(eventName, arg) {\n        if (propertyIsDynamicEvent(eventName)) {\n          var event = host[eventName].call(host, arg);\n          if (typeof event !== 'function') {\n            throw new Error(\"Missing dynamic event \".concat(eventName, \" on main thread host.\"));\n          }\n          return event;\n        }\n        if (propertyIsEvent(eventName)) {\n          var _event = host[eventName];\n          if (typeof _event !== 'function') {\n            throw new Error(\"Missing event \".concat(eventName, \" on main thread host.\"));\n          }\n          return _event;\n        }\n        throw new Error(\"Malformed event name \".concat(eventName));\n      }\n    });\n    _this5._protocol.setWorkerId(_this5._worker.getId());\n    // Gather loader configuration\n    var loaderConfiguration = null;\n    var globalRequire = globalThis.require;\n    if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {\n      // Get the configuration from the Monaco AMD Loader\n      loaderConfiguration = globalRequire.getConfig();\n    } else if (typeof globalThis.requirejs !== 'undefined') {\n      // Get the configuration from requirejs\n      loaderConfiguration = globalThis.requirejs.s.contexts._.config;\n    }\n    var hostMethods = getAllMethodNames(host);\n    // Send initialize message\n    _this5._onModuleLoaded = _this5._protocol.sendMessage(INITIALIZE, [_this5._worker.getId(), JSON.parse(JSON.stringify(loaderConfiguration)), moduleId, hostMethods]);\n    // Create proxy to loaded code\n    var proxyMethodRequest = function proxyMethodRequest(method, args) {\n      return _this5._request(method, args);\n    };\n    var proxyListen = function proxyListen(eventName, arg) {\n      return _this5._protocol.listen(eventName, arg);\n    };\n    _this5._lazyProxy = new Promise(function (resolve, reject) {\n      lazyProxyReject = reject;\n      _this5._onModuleLoaded.then(function (availableMethods) {\n        resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));\n      }, function (e) {\n        reject(e);\n        _this5._onError('Worker failed to load ' + moduleId, e);\n      });\n    });\n    return _this5;\n  }\n  _inherits(SimpleWorkerClient, _Disposable);\n  return _createClass(SimpleWorkerClient, [{\n    key: \"getProxyObject\",\n    value: function getProxyObject() {\n      return this._lazyProxy;\n    }\n  }, {\n    key: \"_request\",\n    value: function _request(method, args) {\n      var _this6 = this;\n      return new Promise(function (resolve, reject) {\n        _this6._onModuleLoaded.then(function () {\n          _this6._protocol.sendMessage(method, args).then(resolve, reject);\n        }, reject);\n      });\n    }\n  }, {\n    key: \"_onError\",\n    value: function _onError(message, error) {\n      console.error(message);\n      console.info(error);\n    }\n  }]);\n}(Disposable);\nfunction propertyIsEvent(name) {\n  // Assume a property is an event if it has a form of \"onSomething\"\n  return name[0] === 'o' && name[1] === 'n' && strings.isUpperAsciiLetter(name.charCodeAt(2));\n}\nfunction propertyIsDynamicEvent(name) {\n  // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n  return /^onDynamic/.test(name) && strings.isUpperAsciiLetter(name.charCodeAt(9));\n}\nfunction createProxyObject(methodNames, invoke, proxyListen) {\n  var createProxyMethod = function createProxyMethod(method) {\n    return function () {\n      var args = Array.prototype.slice.call(arguments, 0);\n      return invoke(method, args);\n    };\n  };\n  var createProxyDynamicEvent = function createProxyDynamicEvent(eventName) {\n    return function (arg) {\n      return proxyListen(eventName, arg);\n    };\n  };\n  var result = {};\n  var _iterator = _createForOfIteratorHelper(methodNames),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var methodName = _step.value;\n      if (propertyIsDynamicEvent(methodName)) {\n        result[methodName] = createProxyDynamicEvent(methodName);\n        continue;\n      }\n      if (propertyIsEvent(methodName)) {\n        result[methodName] = proxyListen(methodName, undefined);\n        continue;\n      }\n      result[methodName] = createProxyMethod(methodName);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return result;\n}\n/**\n * Worker side\n */\nexport var SimpleWorkerServer = /*#__PURE__*/function () {\n  function SimpleWorkerServer(postMessage, requestHandlerFactory) {\n    var _this7 = this;\n    _classCallCheck(this, SimpleWorkerServer);\n    this._requestHandlerFactory = requestHandlerFactory;\n    this._requestHandler = null;\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: function sendMessage(msg, transfer) {\n        postMessage(msg, transfer);\n      },\n      handleMessage: function handleMessage(method, args) {\n        return _this7._handleMessage(method, args);\n      },\n      handleEvent: function handleEvent(eventName, arg) {\n        return _this7._handleEvent(eventName, arg);\n      }\n    });\n  }\n  return _createClass(SimpleWorkerServer, [{\n    key: \"onmessage\",\n    value: function onmessage(msg) {\n      this._protocol.handleMessage(msg);\n    }\n  }, {\n    key: \"_handleMessage\",\n    value: function _handleMessage(method, args) {\n      if (method === INITIALIZE) {\n        return this.initialize(args[0], args[1], args[2], args[3]);\n      }\n      if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n        return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n      }\n      try {\n        return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }\n  }, {\n    key: \"_handleEvent\",\n    value: function _handleEvent(eventName, arg) {\n      if (!this._requestHandler) {\n        throw new Error(\"Missing requestHandler\");\n      }\n      if (propertyIsDynamicEvent(eventName)) {\n        var event = this._requestHandler[eventName].call(this._requestHandler, arg);\n        if (typeof event !== 'function') {\n          throw new Error(\"Missing dynamic event \".concat(eventName, \" on request handler.\"));\n        }\n        return event;\n      }\n      if (propertyIsEvent(eventName)) {\n        var _event2 = this._requestHandler[eventName];\n        if (typeof _event2 !== 'function') {\n          throw new Error(\"Missing event \".concat(eventName, \" on request handler.\"));\n        }\n        return _event2;\n      }\n      throw new Error(\"Malformed event name \".concat(eventName));\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(workerId, loaderConfig, moduleId, hostMethods) {\n      var _this8 = this;\n      this._protocol.setWorkerId(workerId);\n      var proxyMethodRequest = function proxyMethodRequest(method, args) {\n        return _this8._protocol.sendMessage(method, args);\n      };\n      var proxyListen = function proxyListen(eventName, arg) {\n        return _this8._protocol.listen(eventName, arg);\n      };\n      var hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);\n      if (this._requestHandlerFactory) {\n        // static request handler\n        this._requestHandler = this._requestHandlerFactory(hostProxy);\n        return Promise.resolve(getAllMethodNames(this._requestHandler));\n      }\n      if (loaderConfig) {\n        // Remove 'baseUrl', handling it is beyond scope for now\n        if (typeof loaderConfig.baseUrl !== 'undefined') {\n          delete loaderConfig['baseUrl'];\n        }\n        if (typeof loaderConfig.paths !== 'undefined') {\n          if (typeof loaderConfig.paths.vs !== 'undefined') {\n            delete loaderConfig.paths['vs'];\n          }\n        }\n        if (typeof loaderConfig.trustedTypesPolicy !== 'undefined') {\n          // don't use, it has been destroyed during serialize\n          delete loaderConfig['trustedTypesPolicy'];\n        }\n        // Since this is in a web worker, enable catching errors\n        loaderConfig.catchError = true;\n        globalThis.require.config(loaderConfig);\n      }\n      return new Promise(function (resolve, reject) {\n        // Use the global require to be sure to get the global config\n        // ESM-comment-begin\n        // \t\t\tconst req = (globalThis.require || require);\n        // ESM-comment-end\n        // ESM-uncomment-begin\n        var req = globalThis.require;\n        // ESM-uncomment-end\n        req([moduleId], function (module) {\n          _this8._requestHandler = module.create(hostProxy);\n          if (!_this8._requestHandler) {\n            reject(new Error(\"No RequestHandler!\"));\n            return;\n          }\n          resolve(getAllMethodNames(_this8._requestHandler));\n        }, reject);\n      });\n    }\n  }]);\n}();\n/**\n * Called on the worker side\n * @skipMangle\n */\nexport function create(postMessage) {\n  return new SimpleWorkerServer(postMessage, null);\n}","map":{"version":3,"names":["transformErrorForSerialization","Emitter","Disposable","getAllMethodNames","isWeb","strings","INITIALIZE","webWorkerWarningLogged","logOnceWebWorkerWarning","err","console","warn","message","RequestMessage","_createClass","vsWorker","req","method","args","_classCallCheck","type","ReplyMessage","seq","res","SubscribeEventMessage","eventName","arg","EventMessage","event","UnsubscribeEventMessage","SimpleWorkerProtocol","handler","_workerId","_handler","_lastSentReq","_pendingReplies","Object","create","_pendingEmitters","Map","_pendingEvents","key","value","setWorkerId","workerId","sendMessage","_this","String","Promise","resolve","reject","_send","listen","_this2","emitter","onWillAddFirstListener","set","onDidRemoveLastListener","handleMessage","_handleMessage","msg","_handleReplyMessage","_handleRequestMessage","_handleSubscribeEventMessage","_handleEventMessage","_handleUnsubscribeEventMessage","replyMessage","reply","$isError","Error","name","stack","requestMessage","_this3","result","then","r","undefined","e","detail","_this4","disposable","handleEvent","has","get","fire","dispose","transfer","i","length","ArrayBuffer","push","SimpleWorkerClient","_Disposable","workerFactory","moduleId","host","_this5","_callSuper","lazyProxyReject","_worker","_register","_protocol","postMessage","apply","propertyIsDynamicEvent","call","concat","propertyIsEvent","getId","loaderConfiguration","globalRequire","globalThis","require","getConfig","requirejs","s","contexts","_","config","hostMethods","_onModuleLoaded","JSON","parse","stringify","proxyMethodRequest","_request","proxyListen","_lazyProxy","availableMethods","createProxyObject","_onError","_inherits","getProxyObject","_this6","error","info","isUpperAsciiLetter","charCodeAt","test","methodNames","invoke","createProxyMethod","Array","prototype","slice","arguments","createProxyDynamicEvent","_iterator","_createForOfIteratorHelper","_step","n","done","methodName","f","SimpleWorkerServer","requestHandlerFactory","_this7","_requestHandlerFactory","_requestHandler","_handleEvent","onmessage","initialize","loaderConfig","_this8","hostProxy","baseUrl","paths","vs","trustedTypesPolicy","catchError","module"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { transformErrorForSerialization } from '../errors.js';\nimport { Emitter } from '../event.js';\nimport { Disposable } from '../lifecycle.js';\nimport { getAllMethodNames } from '../objects.js';\nimport { isWeb } from '../platform.js';\nimport * as strings from '../strings.js';\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n    if (!isWeb) {\n        // running tests\n        return;\n    }\n    if (!webWorkerWarningLogged) {\n        webWorkerWarningLogged = true;\n        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n    }\n    console.warn(err.message);\n}\nclass RequestMessage {\n    constructor(vsWorker, req, method, args) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.method = method;\n        this.args = args;\n        this.type = 0 /* MessageType.Request */;\n    }\n}\nclass ReplyMessage {\n    constructor(vsWorker, seq, res, err) {\n        this.vsWorker = vsWorker;\n        this.seq = seq;\n        this.res = res;\n        this.err = err;\n        this.type = 1 /* MessageType.Reply */;\n    }\n}\nclass SubscribeEventMessage {\n    constructor(vsWorker, req, eventName, arg) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.eventName = eventName;\n        this.arg = arg;\n        this.type = 2 /* MessageType.SubscribeEvent */;\n    }\n}\nclass EventMessage {\n    constructor(vsWorker, req, event) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.event = event;\n        this.type = 3 /* MessageType.Event */;\n    }\n}\nclass UnsubscribeEventMessage {\n    constructor(vsWorker, req) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.type = 4 /* MessageType.UnsubscribeEvent */;\n    }\n}\nclass SimpleWorkerProtocol {\n    constructor(handler) {\n        this._workerId = -1;\n        this._handler = handler;\n        this._lastSentReq = 0;\n        this._pendingReplies = Object.create(null);\n        this._pendingEmitters = new Map();\n        this._pendingEvents = new Map();\n    }\n    setWorkerId(workerId) {\n        this._workerId = workerId;\n    }\n    sendMessage(method, args) {\n        const req = String(++this._lastSentReq);\n        return new Promise((resolve, reject) => {\n            this._pendingReplies[req] = {\n                resolve: resolve,\n                reject: reject\n            };\n            this._send(new RequestMessage(this._workerId, req, method, args));\n        });\n    }\n    listen(eventName, arg) {\n        let req = null;\n        const emitter = new Emitter({\n            onWillAddFirstListener: () => {\n                req = String(++this._lastSentReq);\n                this._pendingEmitters.set(req, emitter);\n                this._send(new SubscribeEventMessage(this._workerId, req, eventName, arg));\n            },\n            onDidRemoveLastListener: () => {\n                this._pendingEmitters.delete(req);\n                this._send(new UnsubscribeEventMessage(this._workerId, req));\n                req = null;\n            }\n        });\n        return emitter.event;\n    }\n    handleMessage(message) {\n        if (!message || !message.vsWorker) {\n            return;\n        }\n        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n            return;\n        }\n        this._handleMessage(message);\n    }\n    _handleMessage(msg) {\n        switch (msg.type) {\n            case 1 /* MessageType.Reply */:\n                return this._handleReplyMessage(msg);\n            case 0 /* MessageType.Request */:\n                return this._handleRequestMessage(msg);\n            case 2 /* MessageType.SubscribeEvent */:\n                return this._handleSubscribeEventMessage(msg);\n            case 3 /* MessageType.Event */:\n                return this._handleEventMessage(msg);\n            case 4 /* MessageType.UnsubscribeEvent */:\n                return this._handleUnsubscribeEventMessage(msg);\n        }\n    }\n    _handleReplyMessage(replyMessage) {\n        if (!this._pendingReplies[replyMessage.seq]) {\n            console.warn('Got reply to unknown seq');\n            return;\n        }\n        const reply = this._pendingReplies[replyMessage.seq];\n        delete this._pendingReplies[replyMessage.seq];\n        if (replyMessage.err) {\n            let err = replyMessage.err;\n            if (replyMessage.err.$isError) {\n                err = new Error();\n                err.name = replyMessage.err.name;\n                err.message = replyMessage.err.message;\n                err.stack = replyMessage.err.stack;\n            }\n            reply.reject(err);\n            return;\n        }\n        reply.resolve(replyMessage.res);\n    }\n    _handleRequestMessage(requestMessage) {\n        const req = requestMessage.req;\n        const result = this._handler.handleMessage(requestMessage.method, requestMessage.args);\n        result.then((r) => {\n            this._send(new ReplyMessage(this._workerId, req, r, undefined));\n        }, (e) => {\n            if (e.detail instanceof Error) {\n                // Loading errors have a detail property that points to the actual error\n                e.detail = transformErrorForSerialization(e.detail);\n            }\n            this._send(new ReplyMessage(this._workerId, req, undefined, transformErrorForSerialization(e)));\n        });\n    }\n    _handleSubscribeEventMessage(msg) {\n        const req = msg.req;\n        const disposable = this._handler.handleEvent(msg.eventName, msg.arg)((event) => {\n            this._send(new EventMessage(this._workerId, req, event));\n        });\n        this._pendingEvents.set(req, disposable);\n    }\n    _handleEventMessage(msg) {\n        if (!this._pendingEmitters.has(msg.req)) {\n            console.warn('Got event for unknown req');\n            return;\n        }\n        this._pendingEmitters.get(msg.req).fire(msg.event);\n    }\n    _handleUnsubscribeEventMessage(msg) {\n        if (!this._pendingEvents.has(msg.req)) {\n            console.warn('Got unsubscribe for unknown req');\n            return;\n        }\n        this._pendingEvents.get(msg.req).dispose();\n        this._pendingEvents.delete(msg.req);\n    }\n    _send(msg) {\n        const transfer = [];\n        if (msg.type === 0 /* MessageType.Request */) {\n            for (let i = 0; i < msg.args.length; i++) {\n                if (msg.args[i] instanceof ArrayBuffer) {\n                    transfer.push(msg.args[i]);\n                }\n            }\n        }\n        else if (msg.type === 1 /* MessageType.Reply */) {\n            if (msg.res instanceof ArrayBuffer) {\n                transfer.push(msg.res);\n            }\n        }\n        this._handler.sendMessage(msg, transfer);\n    }\n}\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient extends Disposable {\n    constructor(workerFactory, moduleId, host) {\n        super();\n        let lazyProxyReject = null;\n        this._worker = this._register(workerFactory.create('vs/base/common/worker/simpleWorker', (msg) => {\n            this._protocol.handleMessage(msg);\n        }, (err) => {\n            // in Firefox, web workers fail lazily :(\n            // we will reject the proxy\n            lazyProxyReject === null || lazyProxyReject === void 0 ? void 0 : lazyProxyReject(err);\n        }));\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                this._worker.postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => {\n                if (typeof host[method] !== 'function') {\n                    return Promise.reject(new Error('Missing method ' + method + ' on main thread host.'));\n                }\n                try {\n                    return Promise.resolve(host[method].apply(host, args));\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n            },\n            handleEvent: (eventName, arg) => {\n                if (propertyIsDynamicEvent(eventName)) {\n                    const event = host[eventName].call(host, arg);\n                    if (typeof event !== 'function') {\n                        throw new Error(`Missing dynamic event ${eventName} on main thread host.`);\n                    }\n                    return event;\n                }\n                if (propertyIsEvent(eventName)) {\n                    const event = host[eventName];\n                    if (typeof event !== 'function') {\n                        throw new Error(`Missing event ${eventName} on main thread host.`);\n                    }\n                    return event;\n                }\n                throw new Error(`Malformed event name ${eventName}`);\n            }\n        });\n        this._protocol.setWorkerId(this._worker.getId());\n        // Gather loader configuration\n        let loaderConfiguration = null;\n        const globalRequire = globalThis.require;\n        if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {\n            // Get the configuration from the Monaco AMD Loader\n            loaderConfiguration = globalRequire.getConfig();\n        }\n        else if (typeof globalThis.requirejs !== 'undefined') {\n            // Get the configuration from requirejs\n            loaderConfiguration = globalThis.requirejs.s.contexts._.config;\n        }\n        const hostMethods = getAllMethodNames(host);\n        // Send initialize message\n        this._onModuleLoaded = this._protocol.sendMessage(INITIALIZE, [\n            this._worker.getId(),\n            JSON.parse(JSON.stringify(loaderConfiguration)),\n            moduleId,\n            hostMethods,\n        ]);\n        // Create proxy to loaded code\n        const proxyMethodRequest = (method, args) => {\n            return this._request(method, args);\n        };\n        const proxyListen = (eventName, arg) => {\n            return this._protocol.listen(eventName, arg);\n        };\n        this._lazyProxy = new Promise((resolve, reject) => {\n            lazyProxyReject = reject;\n            this._onModuleLoaded.then((availableMethods) => {\n                resolve(createProxyObject(availableMethods, proxyMethodRequest, proxyListen));\n            }, (e) => {\n                reject(e);\n                this._onError('Worker failed to load ' + moduleId, e);\n            });\n        });\n    }\n    getProxyObject() {\n        return this._lazyProxy;\n    }\n    _request(method, args) {\n        return new Promise((resolve, reject) => {\n            this._onModuleLoaded.then(() => {\n                this._protocol.sendMessage(method, args).then(resolve, reject);\n            }, reject);\n        });\n    }\n    _onError(message, error) {\n        console.error(message);\n        console.info(error);\n    }\n}\nfunction propertyIsEvent(name) {\n    // Assume a property is an event if it has a form of \"onSomething\"\n    return name[0] === 'o' && name[1] === 'n' && strings.isUpperAsciiLetter(name.charCodeAt(2));\n}\nfunction propertyIsDynamicEvent(name) {\n    // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n    return /^onDynamic/.test(name) && strings.isUpperAsciiLetter(name.charCodeAt(9));\n}\nfunction createProxyObject(methodNames, invoke, proxyListen) {\n    const createProxyMethod = (method) => {\n        return function () {\n            const args = Array.prototype.slice.call(arguments, 0);\n            return invoke(method, args);\n        };\n    };\n    const createProxyDynamicEvent = (eventName) => {\n        return function (arg) {\n            return proxyListen(eventName, arg);\n        };\n    };\n    const result = {};\n    for (const methodName of methodNames) {\n        if (propertyIsDynamicEvent(methodName)) {\n            result[methodName] = createProxyDynamicEvent(methodName);\n            continue;\n        }\n        if (propertyIsEvent(methodName)) {\n            result[methodName] = proxyListen(methodName, undefined);\n            continue;\n        }\n        result[methodName] = createProxyMethod(methodName);\n    }\n    return result;\n}\n/**\n * Worker side\n */\nexport class SimpleWorkerServer {\n    constructor(postMessage, requestHandlerFactory) {\n        this._requestHandlerFactory = requestHandlerFactory;\n        this._requestHandler = null;\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                postMessage(msg, transfer);\n            },\n            handleMessage: (method, args) => this._handleMessage(method, args),\n            handleEvent: (eventName, arg) => this._handleEvent(eventName, arg)\n        });\n    }\n    onmessage(msg) {\n        this._protocol.handleMessage(msg);\n    }\n    _handleMessage(method, args) {\n        if (method === INITIALIZE) {\n            return this.initialize(args[0], args[1], args[2], args[3]);\n        }\n        if (!this._requestHandler || typeof this._requestHandler[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._requestHandler[method].apply(this._requestHandler, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    _handleEvent(eventName, arg) {\n        if (!this._requestHandler) {\n            throw new Error(`Missing requestHandler`);\n        }\n        if (propertyIsDynamicEvent(eventName)) {\n            const event = this._requestHandler[eventName].call(this._requestHandler, arg);\n            if (typeof event !== 'function') {\n                throw new Error(`Missing dynamic event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        if (propertyIsEvent(eventName)) {\n            const event = this._requestHandler[eventName];\n            if (typeof event !== 'function') {\n                throw new Error(`Missing event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        throw new Error(`Malformed event name ${eventName}`);\n    }\n    initialize(workerId, loaderConfig, moduleId, hostMethods) {\n        this._protocol.setWorkerId(workerId);\n        const proxyMethodRequest = (method, args) => {\n            return this._protocol.sendMessage(method, args);\n        };\n        const proxyListen = (eventName, arg) => {\n            return this._protocol.listen(eventName, arg);\n        };\n        const hostProxy = createProxyObject(hostMethods, proxyMethodRequest, proxyListen);\n        if (this._requestHandlerFactory) {\n            // static request handler\n            this._requestHandler = this._requestHandlerFactory(hostProxy);\n            return Promise.resolve(getAllMethodNames(this._requestHandler));\n        }\n        if (loaderConfig) {\n            // Remove 'baseUrl', handling it is beyond scope for now\n            if (typeof loaderConfig.baseUrl !== 'undefined') {\n                delete loaderConfig['baseUrl'];\n            }\n            if (typeof loaderConfig.paths !== 'undefined') {\n                if (typeof loaderConfig.paths.vs !== 'undefined') {\n                    delete loaderConfig.paths['vs'];\n                }\n            }\n            if (typeof loaderConfig.trustedTypesPolicy !== 'undefined') {\n                // don't use, it has been destroyed during serialize\n                delete loaderConfig['trustedTypesPolicy'];\n            }\n            // Since this is in a web worker, enable catching errors\n            loaderConfig.catchError = true;\n            globalThis.require.config(loaderConfig);\n        }\n        return new Promise((resolve, reject) => {\n            // Use the global require to be sure to get the global config\n            // ESM-comment-begin\n            // \t\t\tconst req = (globalThis.require || require);\n            // ESM-comment-end\n            // ESM-uncomment-begin\n            const req = globalThis.require;\n            // ESM-uncomment-end\n            req([moduleId], (module) => {\n                this._requestHandler = module.create(hostProxy);\n                if (!this._requestHandler) {\n                    reject(new Error(`No RequestHandler!`));\n                    return;\n                }\n                resolve(getAllMethodNames(this._requestHandler));\n            }, reject);\n        });\n    }\n}\n/**\n * Called on the worker side\n * @skipMangle\n */\nexport function create(postMessage) {\n    return new SimpleWorkerServer(postMessage, null);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}