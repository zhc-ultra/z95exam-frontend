{"ast":null,"code":"import _slicedToArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nvar Uint8Matrix = /*#__PURE__*/function () {\n  function Uint8Matrix(rows, cols, defaultValue) {\n    _classCallCheck(this, Uint8Matrix);\n    var data = new Uint8Array(rows * cols);\n    for (var i = 0, len = rows * cols; i < len; i++) {\n      data[i] = defaultValue;\n    }\n    this._data = data;\n    this.rows = rows;\n    this.cols = cols;\n  }\n  return _createClass(Uint8Matrix, [{\n    key: \"get\",\n    value: function get(row, col) {\n      return this._data[row * this.cols + col];\n    }\n  }, {\n    key: \"set\",\n    value: function set(row, col, value) {\n      this._data[row * this.cols + col] = value;\n    }\n  }]);\n}();\nexport var StateMachine = /*#__PURE__*/function () {\n  function StateMachine(edges) {\n    _classCallCheck(this, StateMachine);\n    var maxCharCode = 0;\n    var maxState = 0 /* State.Invalid */;\n    for (var i = 0, len = edges.length; i < len; i++) {\n      var _edges$i = _slicedToArray(edges[i], 3),\n        from = _edges$i[0],\n        chCode = _edges$i[1],\n        to = _edges$i[2];\n      if (chCode > maxCharCode) {\n        maxCharCode = chCode;\n      }\n      if (from > maxState) {\n        maxState = from;\n      }\n      if (to > maxState) {\n        maxState = to;\n      }\n    }\n    maxCharCode++;\n    maxState++;\n    var states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);\n    for (var _i = 0, _len = edges.length; _i < _len; _i++) {\n      var _edges$_i = _slicedToArray(edges[_i], 3),\n        _from = _edges$_i[0],\n        _chCode = _edges$_i[1],\n        _to = _edges$_i[2];\n      states.set(_from, _chCode, _to);\n    }\n    this._states = states;\n    this._maxCharCode = maxCharCode;\n  }\n  return _createClass(StateMachine, [{\n    key: \"nextState\",\n    value: function nextState(currentState, chCode) {\n      if (chCode < 0 || chCode >= this._maxCharCode) {\n        return 0 /* State.Invalid */;\n      }\n      return this._states.get(currentState, chCode);\n    }\n  }]);\n}();\n// State machine for http:// or https:// or file://\nvar _stateMachine = null;\nfunction getStateMachine() {\n  if (_stateMachine === null) {\n    _stateMachine = new StateMachine([[1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */], [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */], [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */], [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */], [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */], [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */], [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */], [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */], [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */], [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */], [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */], [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */], [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */], [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */], [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */], [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */], [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */], [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */], [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */], [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */], [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */], [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */]]);\n  }\n  return _stateMachine;\n}\nvar _classifier = null;\nfunction getClassifier() {\n  if (_classifier === null) {\n    _classifier = new CharacterClassifier(0 /* CharacterClass.None */);\n    // allow-any-unicode-next-line\n    var FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n    for (var i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n      _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);\n    }\n    var CANNOT_END_WITH_CHARACTERS = '.,;:';\n    for (var _i2 = 0; _i2 < CANNOT_END_WITH_CHARACTERS.length; _i2++) {\n      _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(_i2), 2 /* CharacterClass.CannotEndIn */);\n    }\n  }\n  return _classifier;\n}\nexport var LinkComputer = /*#__PURE__*/function () {\n  function LinkComputer() {\n    _classCallCheck(this, LinkComputer);\n  }\n  return _createClass(LinkComputer, null, [{\n    key: \"_createLink\",\n    value: function _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n      // Do not allow to end link in certain characters...\n      var lastIncludedCharIndex = linkEndIndex - 1;\n      do {\n        var chCode = line.charCodeAt(lastIncludedCharIndex);\n        var chClass = classifier.get(chCode);\n        if (chClass !== 2 /* CharacterClass.CannotEndIn */) {\n          break;\n        }\n        lastIncludedCharIndex--;\n      } while (lastIncludedCharIndex > linkBeginIndex);\n      // Handle links enclosed in parens, square brackets and curlys.\n      if (linkBeginIndex > 0) {\n        var charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n        var lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n        if (charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */ || charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */ || charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */) {\n          // Do not end in ) if ( is before the link start\n          // Do not end in ] if [ is before the link start\n          // Do not end in } if { is before the link start\n          lastIncludedCharIndex--;\n        }\n      }\n      return {\n        range: {\n          startLineNumber: lineNumber,\n          startColumn: linkBeginIndex + 1,\n          endLineNumber: lineNumber,\n          endColumn: lastIncludedCharIndex + 2\n        },\n        url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n      };\n    }\n  }, {\n    key: \"computeLinks\",\n    value: function computeLinks(model) {\n      var stateMachine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getStateMachine();\n      var classifier = getClassifier();\n      var result = [];\n      for (var i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n        var line = model.getLineContent(i);\n        var len = line.length;\n        var j = 0;\n        var linkBeginIndex = 0;\n        var linkBeginChCode = 0;\n        var state = 1 /* State.Start */;\n        var hasOpenParens = false;\n        var hasOpenSquareBracket = false;\n        var inSquareBrackets = false;\n        var hasOpenCurlyBracket = false;\n        while (j < len) {\n          var resetStateMachine = false;\n          var chCode = line.charCodeAt(j);\n          if (state === 13 /* State.Accept */) {\n            var chClass = void 0;\n            switch (chCode) {\n              case 40 /* CharCode.OpenParen */:\n                hasOpenParens = true;\n                chClass = 0 /* CharacterClass.None */;\n                break;\n              case 41 /* CharCode.CloseParen */:\n                chClass = hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */;\n                break;\n              case 91 /* CharCode.OpenSquareBracket */:\n                inSquareBrackets = true;\n                hasOpenSquareBracket = true;\n                chClass = 0 /* CharacterClass.None */;\n                break;\n              case 93 /* CharCode.CloseSquareBracket */:\n                inSquareBrackets = false;\n                chClass = hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */;\n                break;\n              case 123 /* CharCode.OpenCurlyBrace */:\n                hasOpenCurlyBracket = true;\n                chClass = 0 /* CharacterClass.None */;\n                break;\n              case 125 /* CharCode.CloseCurlyBrace */:\n                chClass = hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */;\n                break;\n              // The following three rules make it that ' or \" or ` are allowed inside links\n              // only if the link is wrapped by some other quote character\n              case 39 /* CharCode.SingleQuote */:\n              case 34 /* CharCode.DoubleQuote */:\n              case 96 /* CharCode.BackTick */:\n                if (linkBeginChCode === chCode) {\n                  chClass = 1 /* CharacterClass.ForceTermination */;\n                } else if (linkBeginChCode === 39 /* CharCode.SingleQuote */ || linkBeginChCode === 34 /* CharCode.DoubleQuote */ || linkBeginChCode === 96 /* CharCode.BackTick */) {\n                  chClass = 0 /* CharacterClass.None */;\n                } else {\n                  chClass = 1 /* CharacterClass.ForceTermination */;\n                }\n                break;\n              case 42 /* CharCode.Asterisk */:\n                // `*` terminates a link if the link began with `*`\n                chClass = linkBeginChCode === 42 /* CharCode.Asterisk */ ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                break;\n              case 124 /* CharCode.Pipe */:\n                // `|` terminates a link if the link began with `|`\n                chClass = linkBeginChCode === 124 /* CharCode.Pipe */ ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                break;\n              case 32 /* CharCode.Space */:\n                // ` ` allow space in between [ and ]\n                chClass = inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */;\n                break;\n              default:\n                chClass = classifier.get(chCode);\n            }\n            // Check if character terminates link\n            if (chClass === 1 /* CharacterClass.ForceTermination */) {\n              result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n              resetStateMachine = true;\n            }\n          } else if (state === 12 /* State.End */) {\n            var _chClass = void 0;\n            if (chCode === 91 /* CharCode.OpenSquareBracket */) {\n              // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n              hasOpenSquareBracket = true;\n              _chClass = 0 /* CharacterClass.None */;\n            } else {\n              _chClass = classifier.get(chCode);\n            }\n            // Check if character terminates link\n            if (_chClass === 1 /* CharacterClass.ForceTermination */) {\n              resetStateMachine = true;\n            } else {\n              state = 13 /* State.Accept */;\n            }\n          } else {\n            state = stateMachine.nextState(state, chCode);\n            if (state === 0 /* State.Invalid */) {\n              resetStateMachine = true;\n            }\n          }\n          if (resetStateMachine) {\n            state = 1 /* State.Start */;\n            hasOpenParens = false;\n            hasOpenSquareBracket = false;\n            hasOpenCurlyBracket = false;\n            // Record where the link started\n            linkBeginIndex = j + 1;\n            linkBeginChCode = chCode;\n          }\n          j++;\n        }\n        if (state === 13 /* State.Accept */) {\n          result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n        }\n      }\n      return result;\n    }\n  }]);\n}();\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model) {\n  if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n    // Unknown caller!\n    return [];\n  }\n  return LinkComputer.computeLinks(model);\n}","map":{"version":3,"names":["CharacterClassifier","Uint8Matrix","rows","cols","defaultValue","_classCallCheck","data","Uint8Array","i","len","_data","_createClass","key","value","get","row","col","set","StateMachine","edges","maxCharCode","maxState","length","_edges$i","_slicedToArray","from","chCode","to","states","_edges$_i","_states","_maxCharCode","nextState","currentState","_stateMachine","getStateMachine","_classifier","getClassifier","FORCE_TERMINATION_CHARACTERS","charCodeAt","CANNOT_END_WITH_CHARACTERS","LinkComputer","_createLink","classifier","line","lineNumber","linkBeginIndex","linkEndIndex","lastIncludedCharIndex","chClass","charCodeBeforeLink","lastCharCodeInLink","range","startLineNumber","startColumn","endLineNumber","endColumn","url","substring","computeLinks","model","stateMachine","arguments","undefined","result","lineCount","getLineCount","getLineContent","j","linkBeginChCode","state","hasOpenParens","hasOpenSquareBracket","inSquareBrackets","hasOpenCurlyBracket","resetStateMachine","push"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/languages/linkComputer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CharacterClassifier } from '../core/characterClassifier.js';\nclass Uint8Matrix {\n    constructor(rows, cols, defaultValue) {\n        const data = new Uint8Array(rows * cols);\n        for (let i = 0, len = rows * cols; i < len; i++) {\n            data[i] = defaultValue;\n        }\n        this._data = data;\n        this.rows = rows;\n        this.cols = cols;\n    }\n    get(row, col) {\n        return this._data[row * this.cols + col];\n    }\n    set(row, col, value) {\n        this._data[row * this.cols + col] = value;\n    }\n}\nexport class StateMachine {\n    constructor(edges) {\n        let maxCharCode = 0;\n        let maxState = 0 /* State.Invalid */;\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            if (chCode > maxCharCode) {\n                maxCharCode = chCode;\n            }\n            if (from > maxState) {\n                maxState = from;\n            }\n            if (to > maxState) {\n                maxState = to;\n            }\n        }\n        maxCharCode++;\n        maxState++;\n        const states = new Uint8Matrix(maxState, maxCharCode, 0 /* State.Invalid */);\n        for (let i = 0, len = edges.length; i < len; i++) {\n            const [from, chCode, to] = edges[i];\n            states.set(from, chCode, to);\n        }\n        this._states = states;\n        this._maxCharCode = maxCharCode;\n    }\n    nextState(currentState, chCode) {\n        if (chCode < 0 || chCode >= this._maxCharCode) {\n            return 0 /* State.Invalid */;\n        }\n        return this._states.get(currentState, chCode);\n    }\n}\n// State machine for http:// or https:// or file://\nlet _stateMachine = null;\nfunction getStateMachine() {\n    if (_stateMachine === null) {\n        _stateMachine = new StateMachine([\n            [1 /* State.Start */, 104 /* CharCode.h */, 2 /* State.H */],\n            [1 /* State.Start */, 72 /* CharCode.H */, 2 /* State.H */],\n            [1 /* State.Start */, 102 /* CharCode.f */, 6 /* State.F */],\n            [1 /* State.Start */, 70 /* CharCode.F */, 6 /* State.F */],\n            [2 /* State.H */, 116 /* CharCode.t */, 3 /* State.HT */],\n            [2 /* State.H */, 84 /* CharCode.T */, 3 /* State.HT */],\n            [3 /* State.HT */, 116 /* CharCode.t */, 4 /* State.HTT */],\n            [3 /* State.HT */, 84 /* CharCode.T */, 4 /* State.HTT */],\n            [4 /* State.HTT */, 112 /* CharCode.p */, 5 /* State.HTTP */],\n            [4 /* State.HTT */, 80 /* CharCode.P */, 5 /* State.HTTP */],\n            [5 /* State.HTTP */, 115 /* CharCode.s */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 83 /* CharCode.S */, 9 /* State.BeforeColon */],\n            [5 /* State.HTTP */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [6 /* State.F */, 105 /* CharCode.i */, 7 /* State.FI */],\n            [6 /* State.F */, 73 /* CharCode.I */, 7 /* State.FI */],\n            [7 /* State.FI */, 108 /* CharCode.l */, 8 /* State.FIL */],\n            [7 /* State.FI */, 76 /* CharCode.L */, 8 /* State.FIL */],\n            [8 /* State.FIL */, 101 /* CharCode.e */, 9 /* State.BeforeColon */],\n            [8 /* State.FIL */, 69 /* CharCode.E */, 9 /* State.BeforeColon */],\n            [9 /* State.BeforeColon */, 58 /* CharCode.Colon */, 10 /* State.AfterColon */],\n            [10 /* State.AfterColon */, 47 /* CharCode.Slash */, 11 /* State.AlmostThere */],\n            [11 /* State.AlmostThere */, 47 /* CharCode.Slash */, 12 /* State.End */],\n        ]);\n    }\n    return _stateMachine;\n}\nlet _classifier = null;\nfunction getClassifier() {\n    if (_classifier === null) {\n        _classifier = new CharacterClassifier(0 /* CharacterClass.None */);\n        // allow-any-unicode-next-line\n        const FORCE_TERMINATION_CHARACTERS = ' \\t<>\\'\\\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…';\n        for (let i = 0; i < FORCE_TERMINATION_CHARACTERS.length; i++) {\n            _classifier.set(FORCE_TERMINATION_CHARACTERS.charCodeAt(i), 1 /* CharacterClass.ForceTermination */);\n        }\n        const CANNOT_END_WITH_CHARACTERS = '.,;:';\n        for (let i = 0; i < CANNOT_END_WITH_CHARACTERS.length; i++) {\n            _classifier.set(CANNOT_END_WITH_CHARACTERS.charCodeAt(i), 2 /* CharacterClass.CannotEndIn */);\n        }\n    }\n    return _classifier;\n}\nexport class LinkComputer {\n    static _createLink(classifier, line, lineNumber, linkBeginIndex, linkEndIndex) {\n        // Do not allow to end link in certain characters...\n        let lastIncludedCharIndex = linkEndIndex - 1;\n        do {\n            const chCode = line.charCodeAt(lastIncludedCharIndex);\n            const chClass = classifier.get(chCode);\n            if (chClass !== 2 /* CharacterClass.CannotEndIn */) {\n                break;\n            }\n            lastIncludedCharIndex--;\n        } while (lastIncludedCharIndex > linkBeginIndex);\n        // Handle links enclosed in parens, square brackets and curlys.\n        if (linkBeginIndex > 0) {\n            const charCodeBeforeLink = line.charCodeAt(linkBeginIndex - 1);\n            const lastCharCodeInLink = line.charCodeAt(lastIncludedCharIndex);\n            if ((charCodeBeforeLink === 40 /* CharCode.OpenParen */ && lastCharCodeInLink === 41 /* CharCode.CloseParen */)\n                || (charCodeBeforeLink === 91 /* CharCode.OpenSquareBracket */ && lastCharCodeInLink === 93 /* CharCode.CloseSquareBracket */)\n                || (charCodeBeforeLink === 123 /* CharCode.OpenCurlyBrace */ && lastCharCodeInLink === 125 /* CharCode.CloseCurlyBrace */)) {\n                // Do not end in ) if ( is before the link start\n                // Do not end in ] if [ is before the link start\n                // Do not end in } if { is before the link start\n                lastIncludedCharIndex--;\n            }\n        }\n        return {\n            range: {\n                startLineNumber: lineNumber,\n                startColumn: linkBeginIndex + 1,\n                endLineNumber: lineNumber,\n                endColumn: lastIncludedCharIndex + 2\n            },\n            url: line.substring(linkBeginIndex, lastIncludedCharIndex + 1)\n        };\n    }\n    static computeLinks(model, stateMachine = getStateMachine()) {\n        const classifier = getClassifier();\n        const result = [];\n        for (let i = 1, lineCount = model.getLineCount(); i <= lineCount; i++) {\n            const line = model.getLineContent(i);\n            const len = line.length;\n            let j = 0;\n            let linkBeginIndex = 0;\n            let linkBeginChCode = 0;\n            let state = 1 /* State.Start */;\n            let hasOpenParens = false;\n            let hasOpenSquareBracket = false;\n            let inSquareBrackets = false;\n            let hasOpenCurlyBracket = false;\n            while (j < len) {\n                let resetStateMachine = false;\n                const chCode = line.charCodeAt(j);\n                if (state === 13 /* State.Accept */) {\n                    let chClass;\n                    switch (chCode) {\n                        case 40 /* CharCode.OpenParen */:\n                            hasOpenParens = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 41 /* CharCode.CloseParen */:\n                            chClass = (hasOpenParens ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 91 /* CharCode.OpenSquareBracket */:\n                            inSquareBrackets = true;\n                            hasOpenSquareBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 93 /* CharCode.CloseSquareBracket */:\n                            inSquareBrackets = false;\n                            chClass = (hasOpenSquareBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        case 123 /* CharCode.OpenCurlyBrace */:\n                            hasOpenCurlyBracket = true;\n                            chClass = 0 /* CharacterClass.None */;\n                            break;\n                        case 125 /* CharCode.CloseCurlyBrace */:\n                            chClass = (hasOpenCurlyBracket ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        // The following three rules make it that ' or \" or ` are allowed inside links\n                        // only if the link is wrapped by some other quote character\n                        case 39 /* CharCode.SingleQuote */:\n                        case 34 /* CharCode.DoubleQuote */:\n                        case 96 /* CharCode.BackTick */:\n                            if (linkBeginChCode === chCode) {\n                                chClass = 1 /* CharacterClass.ForceTermination */;\n                            }\n                            else if (linkBeginChCode === 39 /* CharCode.SingleQuote */ || linkBeginChCode === 34 /* CharCode.DoubleQuote */ || linkBeginChCode === 96 /* CharCode.BackTick */) {\n                                chClass = 0 /* CharacterClass.None */;\n                            }\n                            else {\n                                chClass = 1 /* CharacterClass.ForceTermination */;\n                            }\n                            break;\n                        case 42 /* CharCode.Asterisk */:\n                            // `*` terminates a link if the link began with `*`\n                            chClass = (linkBeginChCode === 42 /* CharCode.Asterisk */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 124 /* CharCode.Pipe */:\n                            // `|` terminates a link if the link began with `|`\n                            chClass = (linkBeginChCode === 124 /* CharCode.Pipe */) ? 1 /* CharacterClass.ForceTermination */ : 0 /* CharacterClass.None */;\n                            break;\n                        case 32 /* CharCode.Space */:\n                            // ` ` allow space in between [ and ]\n                            chClass = (inSquareBrackets ? 0 /* CharacterClass.None */ : 1 /* CharacterClass.ForceTermination */);\n                            break;\n                        default:\n                            chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, j));\n                        resetStateMachine = true;\n                    }\n                }\n                else if (state === 12 /* State.End */) {\n                    let chClass;\n                    if (chCode === 91 /* CharCode.OpenSquareBracket */) {\n                        // Allow for the authority part to contain ipv6 addresses which contain [ and ]\n                        hasOpenSquareBracket = true;\n                        chClass = 0 /* CharacterClass.None */;\n                    }\n                    else {\n                        chClass = classifier.get(chCode);\n                    }\n                    // Check if character terminates link\n                    if (chClass === 1 /* CharacterClass.ForceTermination */) {\n                        resetStateMachine = true;\n                    }\n                    else {\n                        state = 13 /* State.Accept */;\n                    }\n                }\n                else {\n                    state = stateMachine.nextState(state, chCode);\n                    if (state === 0 /* State.Invalid */) {\n                        resetStateMachine = true;\n                    }\n                }\n                if (resetStateMachine) {\n                    state = 1 /* State.Start */;\n                    hasOpenParens = false;\n                    hasOpenSquareBracket = false;\n                    hasOpenCurlyBracket = false;\n                    // Record where the link started\n                    linkBeginIndex = j + 1;\n                    linkBeginChCode = chCode;\n                }\n                j++;\n            }\n            if (state === 13 /* State.Accept */) {\n                result.push(LinkComputer._createLink(classifier, line, i, linkBeginIndex, len));\n            }\n        }\n        return result;\n    }\n}\n/**\n * Returns an array of all links contains in the provided\n * document. *Note* that this operation is computational\n * expensive and should not run in the UI thread.\n */\nexport function computeLinks(model) {\n    if (!model || typeof model.getLineCount !== 'function' || typeof model.getLineContent !== 'function') {\n        // Unknown caller!\n        return [];\n    }\n    return LinkComputer.computeLinks(model);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}