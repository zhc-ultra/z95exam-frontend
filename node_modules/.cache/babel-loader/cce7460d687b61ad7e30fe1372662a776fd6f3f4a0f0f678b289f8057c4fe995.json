{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport var ColumnSelection = /*#__PURE__*/function () {\n  function ColumnSelection() {\n    _classCallCheck(this, ColumnSelection);\n  }\n  return _createClass(ColumnSelection, null, [{\n    key: \"columnSelect\",\n    value: function columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n      var lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n      var reversed = fromLineNumber > toLineNumber;\n      var isRTL = fromVisibleColumn > toVisibleColumn;\n      var isLTR = fromVisibleColumn < toVisibleColumn;\n      var result = [];\n      // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n      for (var i = 0; i < lineCount; i++) {\n        var lineNumber = fromLineNumber + (reversed ? -i : i);\n        var startColumn = config.columnFromVisibleColumn(model, lineNumber, fromVisibleColumn);\n        var endColumn = config.columnFromVisibleColumn(model, lineNumber, toVisibleColumn);\n        var visibleStartColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, startColumn));\n        var visibleEndColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, endColumn));\n        // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n        if (isLTR) {\n          if (visibleStartColumn > toVisibleColumn) {\n            continue;\n          }\n          if (visibleEndColumn < fromVisibleColumn) {\n            continue;\n          }\n        }\n        if (isRTL) {\n          if (visibleEndColumn > fromVisibleColumn) {\n            continue;\n          }\n          if (visibleStartColumn < toVisibleColumn) {\n            continue;\n          }\n        }\n        result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, endColumn), 0));\n      }\n      if (result.length === 0) {\n        // We are after all the lines, so add cursor at the end of each line\n        for (var _i = 0; _i < lineCount; _i++) {\n          var _lineNumber = fromLineNumber + (reversed ? -_i : _i);\n          var maxColumn = model.getLineMaxColumn(_lineNumber);\n          result.push(new SingleCursorState(new Range(_lineNumber, maxColumn, _lineNumber, maxColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(_lineNumber, maxColumn), 0));\n        }\n      }\n      return {\n        viewStates: result,\n        reversed: reversed,\n        fromLineNumber: fromLineNumber,\n        fromVisualColumn: fromVisibleColumn,\n        toLineNumber: toLineNumber,\n        toVisualColumn: toVisibleColumn\n      };\n    }\n  }, {\n    key: \"columnSelectLeft\",\n    value: function columnSelectLeft(config, model, prevColumnSelectData) {\n      var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n      if (toViewVisualColumn > 0) {\n        toViewVisualColumn--;\n      }\n      return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n  }, {\n    key: \"columnSelectRight\",\n    value: function columnSelectRight(config, model, prevColumnSelectData) {\n      var maxVisualViewColumn = 0;\n      var minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n      var maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n      for (var lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n        var lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n        var lineMaxVisualViewColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, lineMaxViewColumn));\n        maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n      }\n      var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n      if (toViewVisualColumn < maxVisualViewColumn) {\n        toViewVisualColumn++;\n      }\n      return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n  }, {\n    key: \"columnSelectUp\",\n    value: function columnSelectUp(config, model, prevColumnSelectData, isPaged) {\n      var linesCount = isPaged ? config.pageSize : 1;\n      var toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n      return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n  }, {\n    key: \"columnSelectDown\",\n    value: function columnSelectDown(config, model, prevColumnSelectData, isPaged) {\n      var linesCount = isPaged ? config.pageSize : 1;\n      var toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n      return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n  }]);\n}();","map":{"version":3,"names":["SingleCursorState","Position","Range","ColumnSelection","_classCallCheck","_createClass","key","value","columnSelect","config","model","fromLineNumber","fromVisibleColumn","toLineNumber","toVisibleColumn","lineCount","Math","abs","reversed","isRTL","isLTR","result","i","lineNumber","startColumn","columnFromVisibleColumn","endColumn","visibleStartColumn","visibleColumnFromColumn","visibleEndColumn","push","length","maxColumn","getLineMaxColumn","viewStates","fromVisualColumn","toVisualColumn","columnSelectLeft","prevColumnSelectData","toViewVisualColumn","fromViewLineNumber","fromViewVisualColumn","toViewLineNumber","columnSelectRight","maxVisualViewColumn","minViewLineNumber","min","maxViewLineNumber","max","lineMaxViewColumn","lineMaxVisualViewColumn","columnSelectUp","isPaged","linesCount","pageSize","columnSelectDown","getLineCount"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorColumnSelection.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { SingleCursorState } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nexport class ColumnSelection {\n    static columnSelect(config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n        const lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n        const reversed = (fromLineNumber > toLineNumber);\n        const isRTL = (fromVisibleColumn > toVisibleColumn);\n        const isLTR = (fromVisibleColumn < toVisibleColumn);\n        const result = [];\n        // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n        for (let i = 0; i < lineCount; i++) {\n            const lineNumber = fromLineNumber + (reversed ? -i : i);\n            const startColumn = config.columnFromVisibleColumn(model, lineNumber, fromVisibleColumn);\n            const endColumn = config.columnFromVisibleColumn(model, lineNumber, toVisibleColumn);\n            const visibleStartColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, startColumn));\n            const visibleEndColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, endColumn));\n            // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n            if (isLTR) {\n                if (visibleStartColumn > toVisibleColumn) {\n                    continue;\n                }\n                if (visibleEndColumn < fromVisibleColumn) {\n                    continue;\n                }\n            }\n            if (isRTL) {\n                if (visibleEndColumn > fromVisibleColumn) {\n                    continue;\n                }\n                if (visibleStartColumn < toVisibleColumn) {\n                    continue;\n                }\n            }\n            result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, endColumn), 0));\n        }\n        if (result.length === 0) {\n            // We are after all the lines, so add cursor at the end of each line\n            for (let i = 0; i < lineCount; i++) {\n                const lineNumber = fromLineNumber + (reversed ? -i : i);\n                const maxColumn = model.getLineMaxColumn(lineNumber);\n                result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0 /* SelectionStartKind.Simple */, 0, new Position(lineNumber, maxColumn), 0));\n            }\n        }\n        return {\n            viewStates: result,\n            reversed: reversed,\n            fromLineNumber: fromLineNumber,\n            fromVisualColumn: fromVisibleColumn,\n            toLineNumber: toLineNumber,\n            toVisualColumn: toVisibleColumn\n        };\n    }\n    static columnSelectLeft(config, model, prevColumnSelectData) {\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n        if (toViewVisualColumn > 0) {\n            toViewVisualColumn--;\n        }\n        return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n    static columnSelectRight(config, model, prevColumnSelectData) {\n        let maxVisualViewColumn = 0;\n        const minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n        const maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n        for (let lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n            const lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n            const lineMaxVisualViewColumn = config.visibleColumnFromColumn(model, new Position(lineNumber, lineMaxViewColumn));\n            maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n        }\n        let toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n        if (toViewVisualColumn < maxVisualViewColumn) {\n            toViewVisualColumn++;\n        }\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n    }\n    static columnSelectUp(config, model, prevColumnSelectData, isPaged) {\n        const linesCount = isPaged ? config.pageSize : 1;\n        const toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n    static columnSelectDown(config, model, prevColumnSelectData, isPaged) {\n        const linesCount = isPaged ? config.pageSize : 1;\n        const toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n    }\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,SAASA,iBAAiB,QAAQ,oBAAoB;AACtD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,KAAK,QAAQ,kBAAkB;AACxC,WAAaC,eAAe;EAAA,SAAAA,gBAAA;IAAAC,eAAA,OAAAD,eAAA;EAAA;EAAA,OAAAE,YAAA,CAAAF,eAAA;IAAAG,GAAA;IAAAC,KAAA,EACxB,SAAAC,aAAoBC,MAAM,EAAEC,KAAK,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,eAAe,EAAE;MACjG,IAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACJ,YAAY,GAAGF,cAAc,CAAC,GAAG,CAAC;MAC7D,IAAMO,QAAQ,GAAIP,cAAc,GAAGE,YAAa;MAChD,IAAMM,KAAK,GAAIP,iBAAiB,GAAGE,eAAgB;MACnD,IAAMM,KAAK,GAAIR,iBAAiB,GAAGE,eAAgB;MACnD,IAAMO,MAAM,GAAG,EAAE;MACjB;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,SAAS,EAAEO,CAAC,EAAE,EAAE;QAChC,IAAMC,UAAU,GAAGZ,cAAc,IAAIO,QAAQ,GAAG,CAACI,CAAC,GAAGA,CAAC,CAAC;QACvD,IAAME,WAAW,GAAGf,MAAM,CAACgB,uBAAuB,CAACf,KAAK,EAAEa,UAAU,EAAEX,iBAAiB,CAAC;QACxF,IAAMc,SAAS,GAAGjB,MAAM,CAACgB,uBAAuB,CAACf,KAAK,EAAEa,UAAU,EAAET,eAAe,CAAC;QACpF,IAAMa,kBAAkB,GAAGlB,MAAM,CAACmB,uBAAuB,CAAClB,KAAK,EAAE,IAAIT,QAAQ,CAACsB,UAAU,EAAEC,WAAW,CAAC,CAAC;QACvG,IAAMK,gBAAgB,GAAGpB,MAAM,CAACmB,uBAAuB,CAAClB,KAAK,EAAE,IAAIT,QAAQ,CAACsB,UAAU,EAAEG,SAAS,CAAC,CAAC;QACnG;QACA,IAAIN,KAAK,EAAE;UACP,IAAIO,kBAAkB,GAAGb,eAAe,EAAE;YACtC;UACJ;UACA,IAAIe,gBAAgB,GAAGjB,iBAAiB,EAAE;YACtC;UACJ;QACJ;QACA,IAAIO,KAAK,EAAE;UACP,IAAIU,gBAAgB,GAAGjB,iBAAiB,EAAE;YACtC;UACJ;UACA,IAAIe,kBAAkB,GAAGb,eAAe,EAAE;YACtC;UACJ;QACJ;QACAO,MAAM,CAACS,IAAI,CAAC,IAAI9B,iBAAiB,CAAC,IAAIE,KAAK,CAACqB,UAAU,EAAEC,WAAW,EAAED,UAAU,EAAEC,WAAW,CAAC,EAAE,CAAC,CAAC,iCAAiC,CAAC,EAAE,IAAIvB,QAAQ,CAACsB,UAAU,EAAEG,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MACjL;MACA,IAAIL,MAAM,CAACU,MAAM,KAAK,CAAC,EAAE;QACrB;QACA,KAAK,IAAIT,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGP,SAAS,EAAEO,EAAC,EAAE,EAAE;UAChC,IAAMC,WAAU,GAAGZ,cAAc,IAAIO,QAAQ,GAAG,CAACI,EAAC,GAAGA,EAAC,CAAC;UACvD,IAAMU,SAAS,GAAGtB,KAAK,CAACuB,gBAAgB,CAACV,WAAU,CAAC;UACpDF,MAAM,CAACS,IAAI,CAAC,IAAI9B,iBAAiB,CAAC,IAAIE,KAAK,CAACqB,WAAU,EAAES,SAAS,EAAET,WAAU,EAAES,SAAS,CAAC,EAAE,CAAC,CAAC,iCAAiC,CAAC,EAAE,IAAI/B,QAAQ,CAACsB,WAAU,EAAES,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;QAC7K;MACJ;MACA,OAAO;QACHE,UAAU,EAAEb,MAAM;QAClBH,QAAQ,EAAEA,QAAQ;QAClBP,cAAc,EAAEA,cAAc;QAC9BwB,gBAAgB,EAAEvB,iBAAiB;QACnCC,YAAY,EAAEA,YAAY;QAC1BuB,cAAc,EAAEtB;MACpB,CAAC;IACL;EAAC;IAAAR,GAAA;IAAAC,KAAA,EACD,SAAA8B,iBAAwB5B,MAAM,EAAEC,KAAK,EAAE4B,oBAAoB,EAAE;MACzD,IAAIC,kBAAkB,GAAGD,oBAAoB,CAACC,kBAAkB;MAChE,IAAIA,kBAAkB,GAAG,CAAC,EAAE;QACxBA,kBAAkB,EAAE;MACxB;MACA,OAAOpC,eAAe,CAACK,YAAY,CAACC,MAAM,EAAEC,KAAK,EAAE4B,oBAAoB,CAACE,kBAAkB,EAAEF,oBAAoB,CAACG,oBAAoB,EAAEH,oBAAoB,CAACI,gBAAgB,EAAEH,kBAAkB,CAAC;IACrM;EAAC;IAAAjC,GAAA;IAAAC,KAAA,EACD,SAAAoC,kBAAyBlC,MAAM,EAAEC,KAAK,EAAE4B,oBAAoB,EAAE;MAC1D,IAAIM,mBAAmB,GAAG,CAAC;MAC3B,IAAMC,iBAAiB,GAAG7B,IAAI,CAAC8B,GAAG,CAACR,oBAAoB,CAACE,kBAAkB,EAAEF,oBAAoB,CAACI,gBAAgB,CAAC;MAClH,IAAMK,iBAAiB,GAAG/B,IAAI,CAACgC,GAAG,CAACV,oBAAoB,CAACE,kBAAkB,EAAEF,oBAAoB,CAACI,gBAAgB,CAAC;MAClH,KAAK,IAAInB,UAAU,GAAGsB,iBAAiB,EAAEtB,UAAU,IAAIwB,iBAAiB,EAAExB,UAAU,EAAE,EAAE;QACpF,IAAM0B,iBAAiB,GAAGvC,KAAK,CAACuB,gBAAgB,CAACV,UAAU,CAAC;QAC5D,IAAM2B,uBAAuB,GAAGzC,MAAM,CAACmB,uBAAuB,CAAClB,KAAK,EAAE,IAAIT,QAAQ,CAACsB,UAAU,EAAE0B,iBAAiB,CAAC,CAAC;QAClHL,mBAAmB,GAAG5B,IAAI,CAACgC,GAAG,CAACJ,mBAAmB,EAAEM,uBAAuB,CAAC;MAChF;MACA,IAAIX,kBAAkB,GAAGD,oBAAoB,CAACC,kBAAkB;MAChE,IAAIA,kBAAkB,GAAGK,mBAAmB,EAAE;QAC1CL,kBAAkB,EAAE;MACxB;MACA,OAAO,IAAI,CAAC/B,YAAY,CAACC,MAAM,EAAEC,KAAK,EAAE4B,oBAAoB,CAACE,kBAAkB,EAAEF,oBAAoB,CAACG,oBAAoB,EAAEH,oBAAoB,CAACI,gBAAgB,EAAEH,kBAAkB,CAAC;IAC1L;EAAC;IAAAjC,GAAA;IAAAC,KAAA,EACD,SAAA4C,eAAsB1C,MAAM,EAAEC,KAAK,EAAE4B,oBAAoB,EAAEc,OAAO,EAAE;MAChE,IAAMC,UAAU,GAAGD,OAAO,GAAG3C,MAAM,CAAC6C,QAAQ,GAAG,CAAC;MAChD,IAAMZ,gBAAgB,GAAG1B,IAAI,CAACgC,GAAG,CAAC,CAAC,EAAEV,oBAAoB,CAACI,gBAAgB,GAAGW,UAAU,CAAC;MACxF,OAAO,IAAI,CAAC7C,YAAY,CAACC,MAAM,EAAEC,KAAK,EAAE4B,oBAAoB,CAACE,kBAAkB,EAAEF,oBAAoB,CAACG,oBAAoB,EAAEC,gBAAgB,EAAEJ,oBAAoB,CAACC,kBAAkB,CAAC;IAC1L;EAAC;IAAAjC,GAAA;IAAAC,KAAA,EACD,SAAAgD,iBAAwB9C,MAAM,EAAEC,KAAK,EAAE4B,oBAAoB,EAAEc,OAAO,EAAE;MAClE,IAAMC,UAAU,GAAGD,OAAO,GAAG3C,MAAM,CAAC6C,QAAQ,GAAG,CAAC;MAChD,IAAMZ,gBAAgB,GAAG1B,IAAI,CAAC8B,GAAG,CAACpC,KAAK,CAAC8C,YAAY,CAAC,CAAC,EAAElB,oBAAoB,CAACI,gBAAgB,GAAGW,UAAU,CAAC;MAC3G,OAAO,IAAI,CAAC7C,YAAY,CAACC,MAAM,EAAEC,KAAK,EAAE4B,oBAAoB,CAACE,kBAAkB,EAAEF,oBAAoB,CAACG,oBAAoB,EAAEC,gBAAgB,EAAEJ,oBAAoB,CAACC,kBAAkB,CAAC;IAC1L;EAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}