{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport { EVENT_KEY_CODE_MAP, KeyCodeUtils } from '../common/keyCodes.js';\nimport { KeyCodeChord } from '../common/keybindings.js';\nimport * as platform from '../common/platform.js';\nfunction extractKeyCode(e) {\n  if (e.charCode) {\n    // \"keypress\" events mostly\n    var _char = String.fromCharCode(e.charCode).toUpperCase();\n    return KeyCodeUtils.fromString(_char);\n  }\n  var keyCode = e.keyCode;\n  // browser quirks\n  if (keyCode === 3) {\n    return 7 /* KeyCode.PauseBreak */;\n  } else if (browser.isFirefox) {\n    switch (keyCode) {\n      case 59:\n        return 85 /* KeyCode.Semicolon */;\n      case 60:\n        if (platform.isLinux) {\n          return 97 /* KeyCode.IntlBackslash */;\n        }\n        break;\n      case 61:\n        return 86 /* KeyCode.Equal */;\n      // based on: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#numpad_keys\n      case 107:\n        return 109 /* KeyCode.NumpadAdd */;\n      case 109:\n        return 111 /* KeyCode.NumpadSubtract */;\n      case 173:\n        return 88 /* KeyCode.Minus */;\n      case 224:\n        if (platform.isMacintosh) {\n          return 57 /* KeyCode.Meta */;\n        }\n        break;\n    }\n  } else if (browser.isWebKit) {\n    if (platform.isMacintosh && keyCode === 93) {\n      // the two meta keys in the Mac have different key codes (91 and 93)\n      return 57 /* KeyCode.Meta */;\n    } else if (!platform.isMacintosh && keyCode === 92) {\n      return 57 /* KeyCode.Meta */;\n    }\n  }\n  // cross browser keycodes:\n  return EVENT_KEY_CODE_MAP[keyCode] || 0 /* KeyCode.Unknown */;\n}\nvar ctrlKeyMod = platform.isMacintosh ? 256 /* KeyMod.WinCtrl */ : 2048 /* KeyMod.CtrlCmd */;\nvar altKeyMod = 512 /* KeyMod.Alt */;\nvar shiftKeyMod = 1024 /* KeyMod.Shift */;\nvar metaKeyMod = platform.isMacintosh ? 2048 /* KeyMod.CtrlCmd */ : 256 /* KeyMod.WinCtrl */;\nexport var StandardKeyboardEvent = /*#__PURE__*/function () {\n  function StandardKeyboardEvent(source) {\n    _classCallCheck(this, StandardKeyboardEvent);\n    var _a;\n    this._standardKeyboardEventBrand = true;\n    var e = source;\n    this.browserEvent = e;\n    this.target = e.target;\n    this.ctrlKey = e.ctrlKey;\n    this.shiftKey = e.shiftKey;\n    this.altKey = e.altKey;\n    this.metaKey = e.metaKey;\n    this.altGraphKey = (_a = e.getModifierState) === null || _a === void 0 ? void 0 : _a.call(e, 'AltGraph');\n    this.keyCode = extractKeyCode(e);\n    this.code = e.code;\n    // console.info(e.type + \": keyCode: \" + e.keyCode + \", which: \" + e.which + \", charCode: \" + e.charCode + \", detail: \" + e.detail + \" ====> \" + this.keyCode + ' -- ' + KeyCode[this.keyCode]);\n    this.ctrlKey = this.ctrlKey || this.keyCode === 5 /* KeyCode.Ctrl */;\n    this.altKey = this.altKey || this.keyCode === 6 /* KeyCode.Alt */;\n    this.shiftKey = this.shiftKey || this.keyCode === 4 /* KeyCode.Shift */;\n    this.metaKey = this.metaKey || this.keyCode === 57 /* KeyCode.Meta */;\n    this._asKeybinding = this._computeKeybinding();\n    this._asKeyCodeChord = this._computeKeyCodeChord();\n    // console.log(`code: ${e.code}, keyCode: ${e.keyCode}, key: ${e.key}`);\n  }\n  return _createClass(StandardKeyboardEvent, [{\n    key: \"preventDefault\",\n    value: function preventDefault() {\n      if (this.browserEvent && this.browserEvent.preventDefault) {\n        this.browserEvent.preventDefault();\n      }\n    }\n  }, {\n    key: \"stopPropagation\",\n    value: function stopPropagation() {\n      if (this.browserEvent && this.browserEvent.stopPropagation) {\n        this.browserEvent.stopPropagation();\n      }\n    }\n  }, {\n    key: \"toKeyCodeChord\",\n    value: function toKeyCodeChord() {\n      return this._asKeyCodeChord;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this._asKeybinding === other;\n    }\n  }, {\n    key: \"_computeKeybinding\",\n    value: function _computeKeybinding() {\n      var key = 0 /* KeyCode.Unknown */;\n      if (this.keyCode !== 5 /* KeyCode.Ctrl */ && this.keyCode !== 4 /* KeyCode.Shift */ && this.keyCode !== 6 /* KeyCode.Alt */ && this.keyCode !== 57 /* KeyCode.Meta */) {\n        key = this.keyCode;\n      }\n      var result = 0;\n      if (this.ctrlKey) {\n        result |= ctrlKeyMod;\n      }\n      if (this.altKey) {\n        result |= altKeyMod;\n      }\n      if (this.shiftKey) {\n        result |= shiftKeyMod;\n      }\n      if (this.metaKey) {\n        result |= metaKeyMod;\n      }\n      result |= key;\n      return result;\n    }\n  }, {\n    key: \"_computeKeyCodeChord\",\n    value: function _computeKeyCodeChord() {\n      var key = 0 /* KeyCode.Unknown */;\n      if (this.keyCode !== 5 /* KeyCode.Ctrl */ && this.keyCode !== 4 /* KeyCode.Shift */ && this.keyCode !== 6 /* KeyCode.Alt */ && this.keyCode !== 57 /* KeyCode.Meta */) {\n        key = this.keyCode;\n      }\n      return new KeyCodeChord(this.ctrlKey, this.shiftKey, this.altKey, this.metaKey, key);\n    }\n  }]);\n}();","map":{"version":3,"names":["browser","EVENT_KEY_CODE_MAP","KeyCodeUtils","KeyCodeChord","platform","extractKeyCode","e","charCode","char","String","fromCharCode","toUpperCase","fromString","keyCode","isFirefox","isLinux","isMacintosh","isWebKit","ctrlKeyMod","altKeyMod","shiftKeyMod","metaKeyMod","StandardKeyboardEvent","source","_classCallCheck","_a","_standardKeyboardEventBrand","browserEvent","target","ctrlKey","shiftKey","altKey","metaKey","altGraphKey","getModifierState","call","code","_asKeybinding","_computeKeybinding","_asKeyCodeChord","_computeKeyCodeChord","_createClass","key","value","preventDefault","stopPropagation","toKeyCodeChord","equals","other","result"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/base/browser/keyboardEvent.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport { EVENT_KEY_CODE_MAP, KeyCodeUtils } from '../common/keyCodes.js';\nimport { KeyCodeChord } from '../common/keybindings.js';\nimport * as platform from '../common/platform.js';\nfunction extractKeyCode(e) {\n    if (e.charCode) {\n        // \"keypress\" events mostly\n        const char = String.fromCharCode(e.charCode).toUpperCase();\n        return KeyCodeUtils.fromString(char);\n    }\n    const keyCode = e.keyCode;\n    // browser quirks\n    if (keyCode === 3) {\n        return 7 /* KeyCode.PauseBreak */;\n    }\n    else if (browser.isFirefox) {\n        switch (keyCode) {\n            case 59: return 85 /* KeyCode.Semicolon */;\n            case 60:\n                if (platform.isLinux) {\n                    return 97 /* KeyCode.IntlBackslash */;\n                }\n                break;\n            case 61: return 86 /* KeyCode.Equal */;\n            // based on: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#numpad_keys\n            case 107: return 109 /* KeyCode.NumpadAdd */;\n            case 109: return 111 /* KeyCode.NumpadSubtract */;\n            case 173: return 88 /* KeyCode.Minus */;\n            case 224:\n                if (platform.isMacintosh) {\n                    return 57 /* KeyCode.Meta */;\n                }\n                break;\n        }\n    }\n    else if (browser.isWebKit) {\n        if (platform.isMacintosh && keyCode === 93) {\n            // the two meta keys in the Mac have different key codes (91 and 93)\n            return 57 /* KeyCode.Meta */;\n        }\n        else if (!platform.isMacintosh && keyCode === 92) {\n            return 57 /* KeyCode.Meta */;\n        }\n    }\n    // cross browser keycodes:\n    return EVENT_KEY_CODE_MAP[keyCode] || 0 /* KeyCode.Unknown */;\n}\nconst ctrlKeyMod = (platform.isMacintosh ? 256 /* KeyMod.WinCtrl */ : 2048 /* KeyMod.CtrlCmd */);\nconst altKeyMod = 512 /* KeyMod.Alt */;\nconst shiftKeyMod = 1024 /* KeyMod.Shift */;\nconst metaKeyMod = (platform.isMacintosh ? 2048 /* KeyMod.CtrlCmd */ : 256 /* KeyMod.WinCtrl */);\nexport class StandardKeyboardEvent {\n    constructor(source) {\n        var _a;\n        this._standardKeyboardEventBrand = true;\n        const e = source;\n        this.browserEvent = e;\n        this.target = e.target;\n        this.ctrlKey = e.ctrlKey;\n        this.shiftKey = e.shiftKey;\n        this.altKey = e.altKey;\n        this.metaKey = e.metaKey;\n        this.altGraphKey = (_a = e.getModifierState) === null || _a === void 0 ? void 0 : _a.call(e, 'AltGraph');\n        this.keyCode = extractKeyCode(e);\n        this.code = e.code;\n        // console.info(e.type + \": keyCode: \" + e.keyCode + \", which: \" + e.which + \", charCode: \" + e.charCode + \", detail: \" + e.detail + \" ====> \" + this.keyCode + ' -- ' + KeyCode[this.keyCode]);\n        this.ctrlKey = this.ctrlKey || this.keyCode === 5 /* KeyCode.Ctrl */;\n        this.altKey = this.altKey || this.keyCode === 6 /* KeyCode.Alt */;\n        this.shiftKey = this.shiftKey || this.keyCode === 4 /* KeyCode.Shift */;\n        this.metaKey = this.metaKey || this.keyCode === 57 /* KeyCode.Meta */;\n        this._asKeybinding = this._computeKeybinding();\n        this._asKeyCodeChord = this._computeKeyCodeChord();\n        // console.log(`code: ${e.code}, keyCode: ${e.keyCode}, key: ${e.key}`);\n    }\n    preventDefault() {\n        if (this.browserEvent && this.browserEvent.preventDefault) {\n            this.browserEvent.preventDefault();\n        }\n    }\n    stopPropagation() {\n        if (this.browserEvent && this.browserEvent.stopPropagation) {\n            this.browserEvent.stopPropagation();\n        }\n    }\n    toKeyCodeChord() {\n        return this._asKeyCodeChord;\n    }\n    equals(other) {\n        return this._asKeybinding === other;\n    }\n    _computeKeybinding() {\n        let key = 0 /* KeyCode.Unknown */;\n        if (this.keyCode !== 5 /* KeyCode.Ctrl */ && this.keyCode !== 4 /* KeyCode.Shift */ && this.keyCode !== 6 /* KeyCode.Alt */ && this.keyCode !== 57 /* KeyCode.Meta */) {\n            key = this.keyCode;\n        }\n        let result = 0;\n        if (this.ctrlKey) {\n            result |= ctrlKeyMod;\n        }\n        if (this.altKey) {\n            result |= altKeyMod;\n        }\n        if (this.shiftKey) {\n            result |= shiftKeyMod;\n        }\n        if (this.metaKey) {\n            result |= metaKeyMod;\n        }\n        result |= key;\n        return result;\n    }\n    _computeKeyCodeChord() {\n        let key = 0 /* KeyCode.Unknown */;\n        if (this.keyCode !== 5 /* KeyCode.Ctrl */ && this.keyCode !== 4 /* KeyCode.Shift */ && this.keyCode !== 6 /* KeyCode.Alt */ && this.keyCode !== 57 /* KeyCode.Meta */) {\n            key = this.keyCode;\n        }\n        return new KeyCodeChord(this.ctrlKey, this.shiftKey, this.altKey, this.metaKey, key);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}