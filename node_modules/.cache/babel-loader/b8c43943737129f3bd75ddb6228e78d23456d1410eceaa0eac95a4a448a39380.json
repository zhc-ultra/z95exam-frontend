{"ast":null,"code":"import _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction resetGlobalRegex(reg) {\n  if (reg.global) {\n    reg.lastIndex = 0;\n  }\n  return true;\n}\nexport var IndentRulesSupport = /*#__PURE__*/function () {\n  function IndentRulesSupport(indentationRules) {\n    _classCallCheck(this, IndentRulesSupport);\n    this._indentationRules = indentationRules;\n  }\n  return _createClass(IndentRulesSupport, [{\n    key: \"shouldIncrease\",\n    value: function shouldIncrease(text) {\n      if (this._indentationRules) {\n        if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\n          return true;\n        }\n        // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n        // \treturn true;\n        // }\n      }\n      return false;\n    }\n  }, {\n    key: \"shouldDecrease\",\n    value: function shouldDecrease(text) {\n      if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"shouldIndentNextLine\",\n    value: function shouldIndentNextLine(text) {\n      if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"shouldIgnore\",\n    value: function shouldIgnore(text) {\n      // the text matches `unIndentedLinePattern`\n      if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"getIndentMetadata\",\n    value: function getIndentMetadata(text) {\n      var ret = 0;\n      if (this.shouldIncrease(text)) {\n        ret += 1 /* IndentConsts.INCREASE_MASK */;\n      }\n      if (this.shouldDecrease(text)) {\n        ret += 2 /* IndentConsts.DECREASE_MASK */;\n      }\n      if (this.shouldIndentNextLine(text)) {\n        ret += 4 /* IndentConsts.INDENT_NEXTLINE_MASK */;\n      }\n      if (this.shouldIgnore(text)) {\n        ret += 8 /* IndentConsts.UNINDENT_MASK */;\n      }\n      return ret;\n    }\n  }]);\n}();","map":{"version":3,"names":["resetGlobalRegex","reg","global","lastIndex","IndentRulesSupport","indentationRules","_classCallCheck","_indentationRules","_createClass","key","value","shouldIncrease","text","increaseIndentPattern","test","shouldDecrease","decreaseIndentPattern","shouldIndentNextLine","indentNextLinePattern","shouldIgnore","unIndentedLinePattern","getIndentMetadata","ret"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/languages/supports/indentRules.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction resetGlobalRegex(reg) {\n    if (reg.global) {\n        reg.lastIndex = 0;\n    }\n    return true;\n}\nexport class IndentRulesSupport {\n    constructor(indentationRules) {\n        this._indentationRules = indentationRules;\n    }\n    shouldIncrease(text) {\n        if (this._indentationRules) {\n            if (this._indentationRules.increaseIndentPattern && resetGlobalRegex(this._indentationRules.increaseIndentPattern) && this._indentationRules.increaseIndentPattern.test(text)) {\n                return true;\n            }\n            // if (this._indentationRules.indentNextLinePattern && this._indentationRules.indentNextLinePattern.test(text)) {\n            // \treturn true;\n            // }\n        }\n        return false;\n    }\n    shouldDecrease(text) {\n        if (this._indentationRules && this._indentationRules.decreaseIndentPattern && resetGlobalRegex(this._indentationRules.decreaseIndentPattern) && this._indentationRules.decreaseIndentPattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIndentNextLine(text) {\n        if (this._indentationRules && this._indentationRules.indentNextLinePattern && resetGlobalRegex(this._indentationRules.indentNextLinePattern) && this._indentationRules.indentNextLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    shouldIgnore(text) {\n        // the text matches `unIndentedLinePattern`\n        if (this._indentationRules && this._indentationRules.unIndentedLinePattern && resetGlobalRegex(this._indentationRules.unIndentedLinePattern) && this._indentationRules.unIndentedLinePattern.test(text)) {\n            return true;\n        }\n        return false;\n    }\n    getIndentMetadata(text) {\n        let ret = 0;\n        if (this.shouldIncrease(text)) {\n            ret += 1 /* IndentConsts.INCREASE_MASK */;\n        }\n        if (this.shouldDecrease(text)) {\n            ret += 2 /* IndentConsts.DECREASE_MASK */;\n        }\n        if (this.shouldIndentNextLine(text)) {\n            ret += 4 /* IndentConsts.INDENT_NEXTLINE_MASK */;\n        }\n        if (this.shouldIgnore(text)) {\n            ret += 8 /* IndentConsts.UNINDENT_MASK */;\n        }\n        return ret;\n    }\n}\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,SAASA,gBAAgBA,CAACC,GAAG,EAAE;EAC3B,IAAIA,GAAG,CAACC,MAAM,EAAE;IACZD,GAAG,CAACE,SAAS,GAAG,CAAC;EACrB;EACA,OAAO,IAAI;AACf;AACA,WAAaC,kBAAkB;EAC3B,SAAAA,mBAAYC,gBAAgB,EAAE;IAAAC,eAAA,OAAAF,kBAAA;IAC1B,IAAI,CAACG,iBAAiB,GAAGF,gBAAgB;EAC7C;EAAC,OAAAG,YAAA,CAAAJ,kBAAA;IAAAK,GAAA;IAAAC,KAAA,EACD,SAAAC,eAAeC,IAAI,EAAE;MACjB,IAAI,IAAI,CAACL,iBAAiB,EAAE;QACxB,IAAI,IAAI,CAACA,iBAAiB,CAACM,qBAAqB,IAAIb,gBAAgB,CAAC,IAAI,CAACO,iBAAiB,CAACM,qBAAqB,CAAC,IAAI,IAAI,CAACN,iBAAiB,CAACM,qBAAqB,CAACC,IAAI,CAACF,IAAI,CAAC,EAAE;UAC3K,OAAO,IAAI;QACf;QACA;QACA;QACA;MACJ;MACA,OAAO,KAAK;IAChB;EAAC;IAAAH,GAAA;IAAAC,KAAA,EACD,SAAAK,eAAeH,IAAI,EAAE;MACjB,IAAI,IAAI,CAACL,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACS,qBAAqB,IAAIhB,gBAAgB,CAAC,IAAI,CAACO,iBAAiB,CAACS,qBAAqB,CAAC,IAAI,IAAI,CAACT,iBAAiB,CAACS,qBAAqB,CAACF,IAAI,CAACF,IAAI,CAAC,EAAE;QACrM,OAAO,IAAI;MACf;MACA,OAAO,KAAK;IAChB;EAAC;IAAAH,GAAA;IAAAC,KAAA,EACD,SAAAO,qBAAqBL,IAAI,EAAE;MACvB,IAAI,IAAI,CAACL,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACW,qBAAqB,IAAIlB,gBAAgB,CAAC,IAAI,CAACO,iBAAiB,CAACW,qBAAqB,CAAC,IAAI,IAAI,CAACX,iBAAiB,CAACW,qBAAqB,CAACJ,IAAI,CAACF,IAAI,CAAC,EAAE;QACrM,OAAO,IAAI;MACf;MACA,OAAO,KAAK;IAChB;EAAC;IAAAH,GAAA;IAAAC,KAAA,EACD,SAAAS,aAAaP,IAAI,EAAE;MACf;MACA,IAAI,IAAI,CAACL,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACa,qBAAqB,IAAIpB,gBAAgB,CAAC,IAAI,CAACO,iBAAiB,CAACa,qBAAqB,CAAC,IAAI,IAAI,CAACb,iBAAiB,CAACa,qBAAqB,CAACN,IAAI,CAACF,IAAI,CAAC,EAAE;QACrM,OAAO,IAAI;MACf;MACA,OAAO,KAAK;IAChB;EAAC;IAAAH,GAAA;IAAAC,KAAA,EACD,SAAAW,kBAAkBT,IAAI,EAAE;MACpB,IAAIU,GAAG,GAAG,CAAC;MACX,IAAI,IAAI,CAACX,cAAc,CAACC,IAAI,CAAC,EAAE;QAC3BU,GAAG,IAAI,CAAC,CAAC;MACb;MACA,IAAI,IAAI,CAACP,cAAc,CAACH,IAAI,CAAC,EAAE;QAC3BU,GAAG,IAAI,CAAC,CAAC;MACb;MACA,IAAI,IAAI,CAACL,oBAAoB,CAACL,IAAI,CAAC,EAAE;QACjCU,GAAG,IAAI,CAAC,CAAC;MACb;MACA,IAAI,IAAI,CAACH,YAAY,CAACP,IAAI,CAAC,EAAE;QACzBU,GAAG,IAAI,CAAC,CAAC;MACb;MACA,OAAOA,GAAG;IACd;EAAC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}