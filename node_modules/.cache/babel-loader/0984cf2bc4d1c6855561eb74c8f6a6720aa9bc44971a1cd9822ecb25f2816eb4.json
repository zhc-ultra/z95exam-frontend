{"ast":null,"code":"import _typeof from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.is-nan.js\";\n/**\n * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap\n * @typedef {DefaultTreeAdapterMap['document']} P5Document\n * @typedef {DefaultTreeAdapterMap['documentFragment']} P5Fragment\n * @typedef {DefaultTreeAdapterMap['element']} P5Element\n * @typedef {DefaultTreeAdapterMap['node']} P5Node\n * @typedef {DefaultTreeAdapterMap['documentType']} P5Doctype\n * @typedef {DefaultTreeAdapterMap['commentNode']} P5Comment\n * @typedef {DefaultTreeAdapterMap['textNode']} P5Text\n * @typedef {DefaultTreeAdapterMap['parentNode']} P5Parent\n * @typedef {import('parse5').Token.Attribute} P5Attribute\n * @typedef {Exclude<P5Node, P5Document | P5Fragment>} P5Child\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Content} Content\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {'html' | 'svg'} Space\n *\n * @typedef Options\n *   Configuration.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in.\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n */\n\nimport { stringify as commas } from 'comma-separated-tokens';\nimport { html, svg, find } from 'property-information';\nimport { stringify as spaces } from 'space-separated-tokens';\nimport { webNamespaces } from 'web-namespaces';\nimport { zwitch } from 'zwitch';\nvar own = {}.hasOwnProperty;\n\n/** @type {(from: Node, schema: Schema) => P5Node} */\nvar one = zwitch('type', {\n  handlers: {\n    root: root,\n    element: element,\n    text: text,\n    comment: comment,\n    doctype: doctype\n  }\n});\n\n/**\n * Transform a hast tree to Parse5â€™s AST.\n *\n * @param {Node} tree\n *   Tree to transform.\n * @param {Options | Space | null | undefined} [options]\n *   Configuration.\n * @returns {P5Node}\n *   `parse5` node.\n */\nexport function toParse5(tree, options) {\n  var space = options && _typeof(options) === 'object' ? options.space : options;\n  return one(tree, space === 'svg' ? svg : html);\n}\n\n/**\n * @param {Root} node\n * @param {Schema} schema\n *   Current schema.\n * @returns {P5Document}\n */\nfunction root(node, schema) {\n  /** @type {P5Document} */\n  var result = {\n    nodeName: '#document',\n    // @ts-expect-error: `parse5` uses enums, which are actually strings.\n    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',\n    childNodes: []\n  };\n  result.childNodes = all(node.children, result, schema);\n  patch(node, result);\n  return result;\n}\n\n/**\n * @param {Root} node\n * @param {Schema} schema\n *   Current schema.\n * @returns {P5Fragment}\n */\nfunction fragment(node, schema) {\n  /** @type {P5Fragment} */\n  var result = {\n    nodeName: '#document-fragment',\n    childNodes: []\n  };\n  result.childNodes = all(node.children, result, schema);\n  patch(node, result);\n  return result;\n}\n\n/**\n * @param {Doctype} node\n * @returns {P5Doctype}\n */\nfunction doctype(node) {\n  /** @type {P5Doctype} */\n  var result = {\n    nodeName: '#documentType',\n    name: 'html',\n    publicId: '',\n    systemId: '',\n    // @ts-expect-error: change to `null` in a major?\n    parentNode: undefined\n  };\n  patch(node, result);\n  return result;\n}\n\n/**\n * @param {Text} node\n * @returns {P5Text}\n */\nfunction text(node) {\n  /** @type {P5Text} */\n  var result = {\n    nodeName: '#text',\n    value: node.value,\n    // @ts-expect-error: no `parentNode`\n    parentNode: undefined\n  };\n  patch(node, result);\n  return result;\n}\n\n/**\n * @param {Comment} node\n * @returns {P5Comment}\n */\nfunction comment(node) {\n  /** @type {P5Comment} */\n  var result = {\n    nodeName: '#comment',\n    data: node.value,\n    // @ts-expect-error: no `parentNode`\n    parentNode: undefined\n  };\n  patch(node, result);\n  return result;\n}\n\n/**\n * @param {Element} node\n * @param {Schema} schema\n *   Current schema.\n * @returns {P5Element}\n *   `parse5` node.\n */\nfunction element(node, schema) {\n  var parentSchema = schema;\n  var currentSchema = parentSchema;\n  if (node.type === 'element' && node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    currentSchema = svg;\n  }\n\n  /** @type {Array<P5Attribute>} */\n  var attrs = [];\n  /** @type {string} */\n  var prop;\n  if (node.properties) {\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        var _result = createProperty(currentSchema, prop, node.properties[prop]);\n        if (_result) {\n          attrs.push(_result);\n        }\n      }\n    }\n  }\n\n  /** @type {P5Element} */\n  var result = {\n    nodeName: node.tagName,\n    tagName: node.tagName,\n    attrs: attrs,\n    // @ts-expect-error: html and svg both have a space.\n    namespaceURI: webNamespaces[currentSchema.space],\n    childNodes: [],\n    // @ts-expect-error: no `parentNode`\n    parentNode: undefined\n  };\n  result.childNodes = all(node.children, result, currentSchema);\n  patch(node, result);\n  if (node.tagName === 'template' && node.content) {\n    // @ts-expect-error: `parse5` types are wrong.\n    result.content = fragment(node.content, currentSchema);\n  }\n  return result;\n}\n\n/**\n * Handle a property.\n *\n * @param {Schema} schema\n *   Current schema.\n * @param {string} prop\n *   Key.\n * @param {Array<string | number> | string | number | boolean | null | undefined} value\n *   hast property value.\n * @returns {P5Attribute | void}\n *   Field for runtime, optional.\n */\nfunction createProperty(schema, prop, value) {\n  var info = find(schema, prop);\n\n  // Ignore nullish and `NaN` values.\n  if (value === undefined || value === null || value === false || typeof value === 'number' && Number.isNaN(value) || !value && info[\"boolean\"]) {\n    return;\n  }\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value);\n  }\n\n  /** @type {P5Attribute} */\n  var attribute = {\n    name: info.attribute,\n    value: value === true ? '' : String(value)\n  };\n  if (info.space && info.space !== 'html' && info.space !== 'svg') {\n    var index = attribute.name.indexOf(':');\n    if (index < 0) {\n      attribute.prefix = '';\n    } else {\n      attribute.name = attribute.name.slice(index + 1);\n      attribute.prefix = info.attribute.slice(0, index);\n    }\n    attribute.namespace = webNamespaces[info.space];\n  }\n  return attribute;\n}\n\n/**\n * Transform all hast nodes.\n *\n * @param {Array<Content>} children\n *   List of children.\n * @param {P5Parent} parentNode\n *   `parse5` parent node.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Array<P5Child>}\n *   Transformed children.\n */\nfunction all(children, parentNode, schema) {\n  var index = -1;\n  /** @type {Array<P5Child>} */\n  var results = [];\n  if (children) {\n    while (++index < children.length) {\n      /** @type {P5Child} */\n      // @ts-expect-error assume no document.\n      var child = one(children[index], schema);\n      child.parentNode = parentNode;\n      results.push(child);\n    }\n  }\n  return results;\n}\n\n/**\n * Add position info from `from` to `to`.\n *\n * @param {Node} from\n *   hast node.\n * @param {P5Node} to\n *   `parse5` node.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  var position = from.position;\n  if (position && position.start && position.end) {\n    to.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      // @ts-expect-error assume this is set.\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      // @ts-expect-error assume this is set.\n      endOffset: position.end.offset\n    };\n  }\n}","map":{"version":3,"names":["stringify","commas","html","svg","find","spaces","webNamespaces","zwitch","own","hasOwnProperty","one","handlers","root","element","text","comment","doctype","toParse5","tree","options","space","_typeof","node","schema","result","nodeName","mode","data","quirksMode","childNodes","all","children","patch","fragment","name","publicId","systemId","parentNode","undefined","value","parentSchema","currentSchema","type","tagName","toLowerCase","attrs","prop","properties","call","createProperty","push","namespaceURI","content","info","Number","isNaN","Array","isArray","commaSeparated","attribute","String","index","indexOf","prefix","slice","namespace","results","length","child","from","to","position","start","end","sourceCodeLocation","startLine","line","startCol","column","startOffset","offset","endLine","endCol","endOffset"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/hast-util-to-parse5/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap\n * @typedef {DefaultTreeAdapterMap['document']} P5Document\n * @typedef {DefaultTreeAdapterMap['documentFragment']} P5Fragment\n * @typedef {DefaultTreeAdapterMap['element']} P5Element\n * @typedef {DefaultTreeAdapterMap['node']} P5Node\n * @typedef {DefaultTreeAdapterMap['documentType']} P5Doctype\n * @typedef {DefaultTreeAdapterMap['commentNode']} P5Comment\n * @typedef {DefaultTreeAdapterMap['textNode']} P5Text\n * @typedef {DefaultTreeAdapterMap['parentNode']} P5Parent\n * @typedef {import('parse5').Token.Attribute} P5Attribute\n * @typedef {Exclude<P5Node, P5Document | P5Fragment>} P5Child\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Content} Content\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {'html' | 'svg'} Space\n *\n * @typedef Options\n *   Configuration.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in.\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {html, svg, find} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\nconst own = {}.hasOwnProperty\n\n/** @type {(from: Node, schema: Schema) => P5Node} */\nconst one = zwitch('type', {handlers: {root, element, text, comment, doctype}})\n\n/**\n * Transform a hast tree to Parse5â€™s AST.\n *\n * @param {Node} tree\n *   Tree to transform.\n * @param {Options | Space | null | undefined} [options]\n *   Configuration.\n * @returns {P5Node}\n *   `parse5` node.\n */\nexport function toParse5(tree, options) {\n  const space = options && typeof options === 'object' ? options.space : options\n  return one(tree, space === 'svg' ? svg : html)\n}\n\n/**\n * @param {Root} node\n * @param {Schema} schema\n *   Current schema.\n * @returns {P5Document}\n */\nfunction root(node, schema) {\n  /** @type {P5Document} */\n  const result = {\n    nodeName: '#document',\n    // @ts-expect-error: `parse5` uses enums, which are actually strings.\n    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',\n    childNodes: []\n  }\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Root} node\n * @param {Schema} schema\n *   Current schema.\n * @returns {P5Fragment}\n */\nfunction fragment(node, schema) {\n  /** @type {P5Fragment} */\n  const result = {nodeName: '#document-fragment', childNodes: []}\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Doctype} node\n * @returns {P5Doctype}\n */\nfunction doctype(node) {\n  /** @type {P5Doctype} */\n  const result = {\n    nodeName: '#documentType',\n    name: 'html',\n    publicId: '',\n    systemId: '',\n    // @ts-expect-error: change to `null` in a major?\n    parentNode: undefined\n  }\n\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Text} node\n * @returns {P5Text}\n */\nfunction text(node) {\n  /** @type {P5Text} */\n  const result = {\n    nodeName: '#text',\n    value: node.value,\n    // @ts-expect-error: no `parentNode`\n    parentNode: undefined\n  }\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Comment} node\n * @returns {P5Comment}\n */\nfunction comment(node) {\n  /** @type {P5Comment} */\n  const result = {\n    nodeName: '#comment',\n    data: node.value,\n    // @ts-expect-error: no `parentNode`\n    parentNode: undefined\n  }\n\n  patch(node, result)\n\n  return result\n}\n\n/**\n * @param {Element} node\n * @param {Schema} schema\n *   Current schema.\n * @returns {P5Element}\n *   `parse5` node.\n */\nfunction element(node, schema) {\n  const parentSchema = schema\n  let currentSchema = parentSchema\n\n  if (\n    node.type === 'element' &&\n    node.tagName.toLowerCase() === 'svg' &&\n    parentSchema.space === 'html'\n  ) {\n    currentSchema = svg\n  }\n\n  /** @type {Array<P5Attribute>} */\n  const attrs = []\n  /** @type {string} */\n  let prop\n\n  if (node.properties) {\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          currentSchema,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          attrs.push(result)\n        }\n      }\n    }\n  }\n\n  /** @type {P5Element} */\n  const result = {\n    nodeName: node.tagName,\n    tagName: node.tagName,\n    attrs,\n    // @ts-expect-error: html and svg both have a space.\n    namespaceURI: webNamespaces[currentSchema.space],\n    childNodes: [],\n    // @ts-expect-error: no `parentNode`\n    parentNode: undefined\n  }\n  result.childNodes = all(node.children, result, currentSchema)\n  patch(node, result)\n\n  if (node.tagName === 'template' && node.content) {\n    // @ts-expect-error: `parse5` types are wrong.\n    result.content = fragment(node.content, currentSchema)\n  }\n\n  return result\n}\n\n/**\n * Handle a property.\n *\n * @param {Schema} schema\n *   Current schema.\n * @param {string} prop\n *   Key.\n * @param {Array<string | number> | string | number | boolean | null | undefined} value\n *   hast property value.\n * @returns {P5Attribute | void}\n *   Field for runtime, optional.\n */\nfunction createProperty(schema, prop, value) {\n  const info = find(schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === undefined ||\n    value === null ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value)) ||\n    (!value && info.boolean)\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  /** @type {P5Attribute} */\n  const attribute = {\n    name: info.attribute,\n    value: value === true ? '' : String(value)\n  }\n\n  if (info.space && info.space !== 'html' && info.space !== 'svg') {\n    const index = attribute.name.indexOf(':')\n\n    if (index < 0) {\n      attribute.prefix = ''\n    } else {\n      attribute.name = attribute.name.slice(index + 1)\n      attribute.prefix = info.attribute.slice(0, index)\n    }\n\n    attribute.namespace = webNamespaces[info.space]\n  }\n\n  return attribute\n}\n\n/**\n * Transform all hast nodes.\n *\n * @param {Array<Content>} children\n *   List of children.\n * @param {P5Parent} parentNode\n *   `parse5` parent node.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Array<P5Child>}\n *   Transformed children.\n */\nfunction all(children, parentNode, schema) {\n  let index = -1\n  /** @type {Array<P5Child>} */\n  const results = []\n\n  if (children) {\n    while (++index < children.length) {\n      /** @type {P5Child} */\n      // @ts-expect-error assume no document.\n      const child = one(children[index], schema)\n\n      child.parentNode = parentNode\n\n      results.push(child)\n    }\n  }\n\n  return results\n}\n\n/**\n * Add position info from `from` to `to`.\n *\n * @param {Node} from\n *   hast node.\n * @param {P5Node} to\n *   `parse5` node.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  const position = from.position\n\n  if (position && position.start && position.end) {\n    to.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      // @ts-expect-error assume this is set.\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      // @ts-expect-error assume this is set.\n      endOffset: position.end.offset\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}