{"ast":null,"code":"import _toConsumableArray from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _callSuper from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/z95_exam_frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.number.max-safe-integer.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../../../base/common/errors.js';\nimport { CursorColumns } from '../../../core/cursorColumns.js';\nimport { lengthAdd, lengthGetLineCount, lengthToObj, lengthZero } from './length.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\n/**\n * The base implementation for all AST nodes.\n*/\nvar BaseAstNode = /*#__PURE__*/function () {\n  function BaseAstNode(length) {\n    _classCallCheck(this, BaseAstNode);\n    this._length = length;\n  }\n  return _createClass(BaseAstNode, [{\n    key: \"length\",\n    get:\n    /**\n     * The length of the entire node, which should equal the sum of lengths of all children.\n    */\n    function get() {\n      return this._length;\n    }\n  }]);\n}();\n/**\n * Represents a bracket pair including its child (e.g. `{ ... }`).\n * Might be unclosed.\n * Immutable, if all children are immutable.\n*/\nexport var PairAstNode = /*#__PURE__*/function (_BaseAstNode) {\n  function PairAstNode(length, openingBracket, child, closingBracket, missingOpeningBracketIds) {\n    var _this;\n    _classCallCheck(this, PairAstNode);\n    _this = _callSuper(this, PairAstNode, [length]);\n    _this.openingBracket = openingBracket;\n    _this.child = child;\n    _this.closingBracket = closingBracket;\n    _this.missingOpeningBracketIds = missingOpeningBracketIds;\n    return _this;\n  }\n  _inherits(PairAstNode, _BaseAstNode);\n  return _createClass(PairAstNode, [{\n    key: \"kind\",\n    get: function get() {\n      return 2 /* AstNodeKind.Pair */;\n    }\n  }, {\n    key: \"listHeight\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"childrenLength\",\n    get: function get() {\n      return 3;\n    }\n  }, {\n    key: \"getChild\",\n    value: function getChild(idx) {\n      switch (idx) {\n        case 0:\n          return this.openingBracket;\n        case 1:\n          return this.child;\n        case 2:\n          return this.closingBracket;\n      }\n      throw new Error('Invalid child index');\n    }\n    /**\n     * Avoid using this property, it allocates an array!\n    */\n  }, {\n    key: \"children\",\n    get: function get() {\n      var result = [];\n      result.push(this.openingBracket);\n      if (this.child) {\n        result.push(this.child);\n      }\n      if (this.closingBracket) {\n        result.push(this.closingBracket);\n      }\n      return result;\n    }\n  }, {\n    key: \"canBeReused\",\n    value: function canBeReused(openBracketIds) {\n      if (this.closingBracket === null) {\n        // Unclosed pair ast nodes only\n        // end at the end of the document\n        // or when a parent node is closed.\n        // This could be improved:\n        // Only return false if some next token is neither \"undefined\" nor a bracket that closes a parent.\n        return false;\n      }\n      if (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"deepClone\",\n    value: function deepClone() {\n      return new PairAstNode(this.length, this.openingBracket.deepClone(), this.child && this.child.deepClone(), this.closingBracket && this.closingBracket.deepClone(), this.missingOpeningBracketIds);\n    }\n  }, {\n    key: \"computeMinIndentation\",\n    value: function computeMinIndentation(offset, textModel) {\n      return this.child ? this.child.computeMinIndentation(lengthAdd(offset, this.openingBracket.length), textModel) : Number.MAX_SAFE_INTEGER;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(openingBracket, child, closingBracket) {\n      var length = openingBracket.length;\n      if (child) {\n        length = lengthAdd(length, child.length);\n      }\n      if (closingBracket) {\n        length = lengthAdd(length, closingBracket.length);\n      }\n      return new PairAstNode(length, openingBracket, child, closingBracket, child ? child.missingOpeningBracketIds : SmallImmutableSet.getEmpty());\n    }\n  }]);\n}(BaseAstNode);\nexport var ListAstNode = /*#__PURE__*/function (_BaseAstNode2) {\n  /**\n   * Use ListAstNode.create.\n  */\n  function ListAstNode(length, listHeight, _missingOpeningBracketIds) {\n    var _this2;\n    _classCallCheck(this, ListAstNode);\n    _this2 = _callSuper(this, ListAstNode, [length]);\n    _this2.listHeight = listHeight;\n    _this2._missingOpeningBracketIds = _missingOpeningBracketIds;\n    _this2.cachedMinIndentation = -1;\n    return _this2;\n  }\n  _inherits(ListAstNode, _BaseAstNode2);\n  return _createClass(ListAstNode, [{\n    key: \"kind\",\n    get: function get() {\n      return 4 /* AstNodeKind.List */;\n    }\n  }, {\n    key: \"missingOpeningBracketIds\",\n    get: function get() {\n      return this._missingOpeningBracketIds;\n    }\n  }, {\n    key: \"throwIfImmutable\",\n    value: function throwIfImmutable() {\n      // NOOP\n    }\n  }, {\n    key: \"makeLastElementMutable\",\n    value: function makeLastElementMutable() {\n      this.throwIfImmutable();\n      var childCount = this.childrenLength;\n      if (childCount === 0) {\n        return undefined;\n      }\n      var lastChild = this.getChild(childCount - 1);\n      var mutable = lastChild.kind === 4 /* AstNodeKind.List */ ? lastChild.toMutable() : lastChild;\n      if (lastChild !== mutable) {\n        this.setChild(childCount - 1, mutable);\n      }\n      return mutable;\n    }\n  }, {\n    key: \"makeFirstElementMutable\",\n    value: function makeFirstElementMutable() {\n      this.throwIfImmutable();\n      var childCount = this.childrenLength;\n      if (childCount === 0) {\n        return undefined;\n      }\n      var firstChild = this.getChild(0);\n      var mutable = firstChild.kind === 4 /* AstNodeKind.List */ ? firstChild.toMutable() : firstChild;\n      if (firstChild !== mutable) {\n        this.setChild(0, mutable);\n      }\n      return mutable;\n    }\n  }, {\n    key: \"canBeReused\",\n    value: function canBeReused(openBracketIds) {\n      if (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n        return false;\n      }\n      if (this.childrenLength === 0) {\n        // Don't reuse empty lists.\n        return false;\n      }\n      var lastChild = this;\n      while (lastChild.kind === 4 /* AstNodeKind.List */) {\n        var lastLength = lastChild.childrenLength;\n        if (lastLength === 0) {\n          // Empty lists should never be contained in other lists.\n          throw new BugIndicatingError();\n        }\n        lastChild = lastChild.getChild(lastLength - 1);\n      }\n      return lastChild.canBeReused(openBracketIds);\n    }\n  }, {\n    key: \"handleChildrenChanged\",\n    value: function handleChildrenChanged() {\n      this.throwIfImmutable();\n      var count = this.childrenLength;\n      var length = this.getChild(0).length;\n      var unopenedBrackets = this.getChild(0).missingOpeningBracketIds;\n      for (var i = 1; i < count; i++) {\n        var child = this.getChild(i);\n        length = lengthAdd(length, child.length);\n        unopenedBrackets = unopenedBrackets.merge(child.missingOpeningBracketIds);\n      }\n      this._length = length;\n      this._missingOpeningBracketIds = unopenedBrackets;\n      this.cachedMinIndentation = -1;\n    }\n  }, {\n    key: \"computeMinIndentation\",\n    value: function computeMinIndentation(offset, textModel) {\n      if (this.cachedMinIndentation !== -1) {\n        return this.cachedMinIndentation;\n      }\n      var minIndentation = Number.MAX_SAFE_INTEGER;\n      var childOffset = offset;\n      for (var i = 0; i < this.childrenLength; i++) {\n        var child = this.getChild(i);\n        if (child) {\n          minIndentation = Math.min(minIndentation, child.computeMinIndentation(childOffset, textModel));\n          childOffset = lengthAdd(childOffset, child.length);\n        }\n      }\n      this.cachedMinIndentation = minIndentation;\n      return minIndentation;\n    }\n  }], [{\n    key: \"create23\",\n    value:\n    /**\n     * This method uses more memory-efficient list nodes that can only store 2 or 3 children.\n    */\n    function create23(item1, item2, item3) {\n      var immutable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var length = item1.length;\n      var missingBracketIds = item1.missingOpeningBracketIds;\n      if (item1.listHeight !== item2.listHeight) {\n        throw new Error('Invalid list heights');\n      }\n      length = lengthAdd(length, item2.length);\n      missingBracketIds = missingBracketIds.merge(item2.missingOpeningBracketIds);\n      if (item3) {\n        if (item1.listHeight !== item3.listHeight) {\n          throw new Error('Invalid list heights');\n        }\n        length = lengthAdd(length, item3.length);\n        missingBracketIds = missingBracketIds.merge(item3.missingOpeningBracketIds);\n      }\n      return immutable ? new Immutable23ListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds) : new TwoThreeListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds);\n    }\n  }, {\n    key: \"getEmpty\",\n    value: function getEmpty() {\n      return new ImmutableArrayListAstNode(lengthZero, 0, [], SmallImmutableSet.getEmpty());\n    }\n  }]);\n}(BaseAstNode);\nvar TwoThreeListAstNode = /*#__PURE__*/function (_ListAstNode) {\n  function TwoThreeListAstNode(length, listHeight, _item1, _item2, _item3, missingOpeningBracketIds) {\n    var _this3;\n    _classCallCheck(this, TwoThreeListAstNode);\n    _this3 = _callSuper(this, TwoThreeListAstNode, [length, listHeight, missingOpeningBracketIds]);\n    _this3._item1 = _item1;\n    _this3._item2 = _item2;\n    _this3._item3 = _item3;\n    return _this3;\n  }\n  _inherits(TwoThreeListAstNode, _ListAstNode);\n  return _createClass(TwoThreeListAstNode, [{\n    key: \"childrenLength\",\n    get: function get() {\n      return this._item3 !== null ? 3 : 2;\n    }\n  }, {\n    key: \"getChild\",\n    value: function getChild(idx) {\n      switch (idx) {\n        case 0:\n          return this._item1;\n        case 1:\n          return this._item2;\n        case 2:\n          return this._item3;\n      }\n      throw new Error('Invalid child index');\n    }\n  }, {\n    key: \"setChild\",\n    value: function setChild(idx, node) {\n      switch (idx) {\n        case 0:\n          this._item1 = node;\n          return;\n        case 1:\n          this._item2 = node;\n          return;\n        case 2:\n          this._item3 = node;\n          return;\n      }\n      throw new Error('Invalid child index');\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      return this._item3 ? [this._item1, this._item2, this._item3] : [this._item1, this._item2];\n    }\n  }, {\n    key: \"item1\",\n    get: function get() {\n      return this._item1;\n    }\n  }, {\n    key: \"item2\",\n    get: function get() {\n      return this._item2;\n    }\n  }, {\n    key: \"item3\",\n    get: function get() {\n      return this._item3;\n    }\n  }, {\n    key: \"deepClone\",\n    value: function deepClone() {\n      return new TwoThreeListAstNode(this.length, this.listHeight, this._item1.deepClone(), this._item2.deepClone(), this._item3 ? this._item3.deepClone() : null, this.missingOpeningBracketIds);\n    }\n  }, {\n    key: \"appendChildOfSameHeight\",\n    value: function appendChildOfSameHeight(node) {\n      if (this._item3) {\n        throw new Error('Cannot append to a full (2,3) tree node');\n      }\n      this.throwIfImmutable();\n      this._item3 = node;\n      this.handleChildrenChanged();\n    }\n  }, {\n    key: \"unappendChild\",\n    value: function unappendChild() {\n      if (!this._item3) {\n        throw new Error('Cannot remove from a non-full (2,3) tree node');\n      }\n      this.throwIfImmutable();\n      var result = this._item3;\n      this._item3 = null;\n      this.handleChildrenChanged();\n      return result;\n    }\n  }, {\n    key: \"prependChildOfSameHeight\",\n    value: function prependChildOfSameHeight(node) {\n      if (this._item3) {\n        throw new Error('Cannot prepend to a full (2,3) tree node');\n      }\n      this.throwIfImmutable();\n      this._item3 = this._item2;\n      this._item2 = this._item1;\n      this._item1 = node;\n      this.handleChildrenChanged();\n    }\n  }, {\n    key: \"unprependChild\",\n    value: function unprependChild() {\n      if (!this._item3) {\n        throw new Error('Cannot remove from a non-full (2,3) tree node');\n      }\n      this.throwIfImmutable();\n      var result = this._item1;\n      this._item1 = this._item2;\n      this._item2 = this._item3;\n      this._item3 = null;\n      this.handleChildrenChanged();\n      return result;\n    }\n  }, {\n    key: \"toMutable\",\n    value: function toMutable() {\n      return this;\n    }\n  }]);\n}(ListAstNode);\n/**\n * Immutable, if all children are immutable.\n*/\nvar Immutable23ListAstNode = /*#__PURE__*/function (_TwoThreeListAstNode) {\n  function Immutable23ListAstNode() {\n    _classCallCheck(this, Immutable23ListAstNode);\n    return _callSuper(this, Immutable23ListAstNode, arguments);\n  }\n  _inherits(Immutable23ListAstNode, _TwoThreeListAstNode);\n  return _createClass(Immutable23ListAstNode, [{\n    key: \"toMutable\",\n    value: function toMutable() {\n      return new TwoThreeListAstNode(this.length, this.listHeight, this.item1, this.item2, this.item3, this.missingOpeningBracketIds);\n    }\n  }, {\n    key: \"throwIfImmutable\",\n    value: function throwIfImmutable() {\n      throw new Error('this instance is immutable');\n    }\n  }]);\n}(TwoThreeListAstNode);\n/**\n * For debugging.\n*/\nvar ArrayListAstNode = /*#__PURE__*/function (_ListAstNode2) {\n  function ArrayListAstNode(length, listHeight, _children, missingOpeningBracketIds) {\n    var _this4;\n    _classCallCheck(this, ArrayListAstNode);\n    _this4 = _callSuper(this, ArrayListAstNode, [length, listHeight, missingOpeningBracketIds]);\n    _this4._children = _children;\n    return _this4;\n  }\n  _inherits(ArrayListAstNode, _ListAstNode2);\n  return _createClass(ArrayListAstNode, [{\n    key: \"childrenLength\",\n    get: function get() {\n      return this._children.length;\n    }\n  }, {\n    key: \"getChild\",\n    value: function getChild(idx) {\n      return this._children[idx];\n    }\n  }, {\n    key: \"setChild\",\n    value: function setChild(idx, child) {\n      this._children[idx] = child;\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      return this._children;\n    }\n  }, {\n    key: \"deepClone\",\n    value: function deepClone() {\n      var children = new Array(this._children.length);\n      for (var i = 0; i < this._children.length; i++) {\n        children[i] = this._children[i].deepClone();\n      }\n      return new ArrayListAstNode(this.length, this.listHeight, children, this.missingOpeningBracketIds);\n    }\n  }, {\n    key: \"appendChildOfSameHeight\",\n    value: function appendChildOfSameHeight(node) {\n      this.throwIfImmutable();\n      this._children.push(node);\n      this.handleChildrenChanged();\n    }\n  }, {\n    key: \"unappendChild\",\n    value: function unappendChild() {\n      this.throwIfImmutable();\n      var item = this._children.pop();\n      this.handleChildrenChanged();\n      return item;\n    }\n  }, {\n    key: \"prependChildOfSameHeight\",\n    value: function prependChildOfSameHeight(node) {\n      this.throwIfImmutable();\n      this._children.unshift(node);\n      this.handleChildrenChanged();\n    }\n  }, {\n    key: \"unprependChild\",\n    value: function unprependChild() {\n      this.throwIfImmutable();\n      var item = this._children.shift();\n      this.handleChildrenChanged();\n      return item;\n    }\n  }, {\n    key: \"toMutable\",\n    value: function toMutable() {\n      return this;\n    }\n  }]);\n}(ListAstNode);\n/**\n * Immutable, if all children are immutable.\n*/\nvar ImmutableArrayListAstNode = /*#__PURE__*/function (_ArrayListAstNode) {\n  function ImmutableArrayListAstNode() {\n    _classCallCheck(this, ImmutableArrayListAstNode);\n    return _callSuper(this, ImmutableArrayListAstNode, arguments);\n  }\n  _inherits(ImmutableArrayListAstNode, _ArrayListAstNode);\n  return _createClass(ImmutableArrayListAstNode, [{\n    key: \"toMutable\",\n    value: function toMutable() {\n      return new ArrayListAstNode(this.length, this.listHeight, _toConsumableArray(this.children), this.missingOpeningBracketIds);\n    }\n  }, {\n    key: \"throwIfImmutable\",\n    value: function throwIfImmutable() {\n      throw new Error('this instance is immutable');\n    }\n  }]);\n}(ArrayListAstNode);\nvar emptyArray = [];\nvar ImmutableLeafAstNode = /*#__PURE__*/function (_BaseAstNode3) {\n  function ImmutableLeafAstNode() {\n    _classCallCheck(this, ImmutableLeafAstNode);\n    return _callSuper(this, ImmutableLeafAstNode, arguments);\n  }\n  _inherits(ImmutableLeafAstNode, _BaseAstNode3);\n  return _createClass(ImmutableLeafAstNode, [{\n    key: \"listHeight\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"childrenLength\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"getChild\",\n    value: function getChild(idx) {\n      return null;\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      return emptyArray;\n    }\n  }, {\n    key: \"deepClone\",\n    value: function deepClone() {\n      return this;\n    }\n  }]);\n}(BaseAstNode);\nexport var TextAstNode = /*#__PURE__*/function (_ImmutableLeafAstNode) {\n  function TextAstNode() {\n    _classCallCheck(this, TextAstNode);\n    return _callSuper(this, TextAstNode, arguments);\n  }\n  _inherits(TextAstNode, _ImmutableLeafAstNode);\n  return _createClass(TextAstNode, [{\n    key: \"kind\",\n    get: function get() {\n      return 0 /* AstNodeKind.Text */;\n    }\n  }, {\n    key: \"missingOpeningBracketIds\",\n    get: function get() {\n      return SmallImmutableSet.getEmpty();\n    }\n  }, {\n    key: \"canBeReused\",\n    value: function canBeReused(_openedBracketIds) {\n      return true;\n    }\n  }, {\n    key: \"computeMinIndentation\",\n    value: function computeMinIndentation(offset, textModel) {\n      var start = lengthToObj(offset);\n      // Text ast nodes don't have partial indentation (ensured by the tokenizer).\n      // Thus, if this text node does not start at column 0, the first line cannot have any indentation at all.\n      var startLineNumber = (start.columnCount === 0 ? start.lineCount : start.lineCount + 1) + 1;\n      var endLineNumber = lengthGetLineCount(lengthAdd(offset, this.length)) + 1;\n      var result = Number.MAX_SAFE_INTEGER;\n      for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n        var firstNonWsColumn = textModel.getLineFirstNonWhitespaceColumn(lineNumber);\n        var lineContent = textModel.getLineContent(lineNumber);\n        if (firstNonWsColumn === 0) {\n          continue;\n        }\n        var visibleColumn = CursorColumns.visibleColumnFromColumn(lineContent, firstNonWsColumn, textModel.getOptions().tabSize);\n        result = Math.min(result, visibleColumn);\n      }\n      return result;\n    }\n  }]);\n}(ImmutableLeafAstNode);\nexport var BracketAstNode = /*#__PURE__*/function (_ImmutableLeafAstNode2) {\n  function BracketAstNode(length, bracketInfo,\n  /**\n   * In case of a opening bracket, this is the id of the opening bracket.\n   * In case of a closing bracket, this contains the ids of all opening brackets it can close.\n  */\n  bracketIds) {\n    var _this5;\n    _classCallCheck(this, BracketAstNode);\n    _this5 = _callSuper(this, BracketAstNode, [length]);\n    _this5.bracketInfo = bracketInfo;\n    _this5.bracketIds = bracketIds;\n    return _this5;\n  }\n  _inherits(BracketAstNode, _ImmutableLeafAstNode2);\n  return _createClass(BracketAstNode, [{\n    key: \"kind\",\n    get: function get() {\n      return 1 /* AstNodeKind.Bracket */;\n    }\n  }, {\n    key: \"missingOpeningBracketIds\",\n    get: function get() {\n      return SmallImmutableSet.getEmpty();\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return this.bracketInfo.bracketText;\n    }\n  }, {\n    key: \"languageId\",\n    get: function get() {\n      return this.bracketInfo.languageId;\n    }\n  }, {\n    key: \"canBeReused\",\n    value: function canBeReused(_openedBracketIds) {\n      // These nodes could be reused,\n      // but not in a general way.\n      // Their parent may be reused.\n      return false;\n    }\n  }, {\n    key: \"computeMinIndentation\",\n    value: function computeMinIndentation(offset, textModel) {\n      return Number.MAX_SAFE_INTEGER;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(length, bracketInfo, bracketIds) {\n      var node = new BracketAstNode(length, bracketInfo, bracketIds);\n      return node;\n    }\n  }]);\n}(ImmutableLeafAstNode);\nexport var InvalidBracketAstNode = /*#__PURE__*/function (_ImmutableLeafAstNode3) {\n  function InvalidBracketAstNode(closingBrackets, length) {\n    var _this6;\n    _classCallCheck(this, InvalidBracketAstNode);\n    _this6 = _callSuper(this, InvalidBracketAstNode, [length]);\n    _this6.missingOpeningBracketIds = closingBrackets;\n    return _this6;\n  }\n  _inherits(InvalidBracketAstNode, _ImmutableLeafAstNode3);\n  return _createClass(InvalidBracketAstNode, [{\n    key: \"kind\",\n    get: function get() {\n      return 3 /* AstNodeKind.UnexpectedClosingBracket */;\n    }\n  }, {\n    key: \"canBeReused\",\n    value: function canBeReused(openedBracketIds) {\n      return !openedBracketIds.intersects(this.missingOpeningBracketIds);\n    }\n  }, {\n    key: \"computeMinIndentation\",\n    value: function computeMinIndentation(offset, textModel) {\n      return Number.MAX_SAFE_INTEGER;\n    }\n  }]);\n}(ImmutableLeafAstNode);","map":{"version":3,"names":["BugIndicatingError","CursorColumns","lengthAdd","lengthGetLineCount","lengthToObj","lengthZero","SmallImmutableSet","BaseAstNode","length","_classCallCheck","_length","_createClass","key","get","PairAstNode","_BaseAstNode","openingBracket","child","closingBracket","missingOpeningBracketIds","_this","_callSuper","_inherits","value","getChild","idx","Error","result","push","canBeReused","openBracketIds","intersects","deepClone","computeMinIndentation","offset","textModel","Number","MAX_SAFE_INTEGER","create","getEmpty","ListAstNode","_BaseAstNode2","listHeight","_missingOpeningBracketIds","_this2","cachedMinIndentation","throwIfImmutable","makeLastElementMutable","childCount","childrenLength","undefined","lastChild","mutable","kind","toMutable","setChild","makeFirstElementMutable","firstChild","lastLength","handleChildrenChanged","count","unopenedBrackets","i","merge","minIndentation","childOffset","Math","min","create23","item1","item2","item3","immutable","arguments","missingBracketIds","Immutable23ListAstNode","TwoThreeListAstNode","ImmutableArrayListAstNode","_ListAstNode","_item1","_item2","_item3","_this3","node","appendChildOfSameHeight","unappendChild","prependChildOfSameHeight","unprependChild","_TwoThreeListAstNode","ArrayListAstNode","_ListAstNode2","_children","_this4","children","Array","item","pop","unshift","shift","_ArrayListAstNode","_toConsumableArray","emptyArray","ImmutableLeafAstNode","_BaseAstNode3","TextAstNode","_ImmutableLeafAstNode","_openedBracketIds","start","startLineNumber","columnCount","lineCount","endLineNumber","lineNumber","firstNonWsColumn","getLineFirstNonWhitespaceColumn","lineContent","getLineContent","visibleColumn","visibleColumnFromColumn","getOptions","tabSize","BracketAstNode","_ImmutableLeafAstNode2","bracketInfo","bracketIds","_this5","bracketText","languageId","InvalidBracketAstNode","_ImmutableLeafAstNode3","closingBrackets","_this6","openedBracketIds"],"sources":["/Users/yinger/Desktop/z95_exam_frontend/node_modules/monaco-editor/esm/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/ast.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { BugIndicatingError } from '../../../../../base/common/errors.js';\nimport { CursorColumns } from '../../../core/cursorColumns.js';\nimport { lengthAdd, lengthGetLineCount, lengthToObj, lengthZero } from './length.js';\nimport { SmallImmutableSet } from './smallImmutableSet.js';\n/**\n * The base implementation for all AST nodes.\n*/\nclass BaseAstNode {\n    /**\n     * The length of the entire node, which should equal the sum of lengths of all children.\n    */\n    get length() {\n        return this._length;\n    }\n    constructor(length) {\n        this._length = length;\n    }\n}\n/**\n * Represents a bracket pair including its child (e.g. `{ ... }`).\n * Might be unclosed.\n * Immutable, if all children are immutable.\n*/\nexport class PairAstNode extends BaseAstNode {\n    static create(openingBracket, child, closingBracket) {\n        let length = openingBracket.length;\n        if (child) {\n            length = lengthAdd(length, child.length);\n        }\n        if (closingBracket) {\n            length = lengthAdd(length, closingBracket.length);\n        }\n        return new PairAstNode(length, openingBracket, child, closingBracket, child ? child.missingOpeningBracketIds : SmallImmutableSet.getEmpty());\n    }\n    get kind() {\n        return 2 /* AstNodeKind.Pair */;\n    }\n    get listHeight() {\n        return 0;\n    }\n    get childrenLength() {\n        return 3;\n    }\n    getChild(idx) {\n        switch (idx) {\n            case 0: return this.openingBracket;\n            case 1: return this.child;\n            case 2: return this.closingBracket;\n        }\n        throw new Error('Invalid child index');\n    }\n    /**\n     * Avoid using this property, it allocates an array!\n    */\n    get children() {\n        const result = [];\n        result.push(this.openingBracket);\n        if (this.child) {\n            result.push(this.child);\n        }\n        if (this.closingBracket) {\n            result.push(this.closingBracket);\n        }\n        return result;\n    }\n    constructor(length, openingBracket, child, closingBracket, missingOpeningBracketIds) {\n        super(length);\n        this.openingBracket = openingBracket;\n        this.child = child;\n        this.closingBracket = closingBracket;\n        this.missingOpeningBracketIds = missingOpeningBracketIds;\n    }\n    canBeReused(openBracketIds) {\n        if (this.closingBracket === null) {\n            // Unclosed pair ast nodes only\n            // end at the end of the document\n            // or when a parent node is closed.\n            // This could be improved:\n            // Only return false if some next token is neither \"undefined\" nor a bracket that closes a parent.\n            return false;\n        }\n        if (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n            return false;\n        }\n        return true;\n    }\n    deepClone() {\n        return new PairAstNode(this.length, this.openingBracket.deepClone(), this.child && this.child.deepClone(), this.closingBracket && this.closingBracket.deepClone(), this.missingOpeningBracketIds);\n    }\n    computeMinIndentation(offset, textModel) {\n        return this.child ? this.child.computeMinIndentation(lengthAdd(offset, this.openingBracket.length), textModel) : Number.MAX_SAFE_INTEGER;\n    }\n}\nexport class ListAstNode extends BaseAstNode {\n    /**\n     * This method uses more memory-efficient list nodes that can only store 2 or 3 children.\n    */\n    static create23(item1, item2, item3, immutable = false) {\n        let length = item1.length;\n        let missingBracketIds = item1.missingOpeningBracketIds;\n        if (item1.listHeight !== item2.listHeight) {\n            throw new Error('Invalid list heights');\n        }\n        length = lengthAdd(length, item2.length);\n        missingBracketIds = missingBracketIds.merge(item2.missingOpeningBracketIds);\n        if (item3) {\n            if (item1.listHeight !== item3.listHeight) {\n                throw new Error('Invalid list heights');\n            }\n            length = lengthAdd(length, item3.length);\n            missingBracketIds = missingBracketIds.merge(item3.missingOpeningBracketIds);\n        }\n        return immutable\n            ? new Immutable23ListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds)\n            : new TwoThreeListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds);\n    }\n    static getEmpty() {\n        return new ImmutableArrayListAstNode(lengthZero, 0, [], SmallImmutableSet.getEmpty());\n    }\n    get kind() {\n        return 4 /* AstNodeKind.List */;\n    }\n    get missingOpeningBracketIds() {\n        return this._missingOpeningBracketIds;\n    }\n    /**\n     * Use ListAstNode.create.\n    */\n    constructor(length, listHeight, _missingOpeningBracketIds) {\n        super(length);\n        this.listHeight = listHeight;\n        this._missingOpeningBracketIds = _missingOpeningBracketIds;\n        this.cachedMinIndentation = -1;\n    }\n    throwIfImmutable() {\n        // NOOP\n    }\n    makeLastElementMutable() {\n        this.throwIfImmutable();\n        const childCount = this.childrenLength;\n        if (childCount === 0) {\n            return undefined;\n        }\n        const lastChild = this.getChild(childCount - 1);\n        const mutable = lastChild.kind === 4 /* AstNodeKind.List */ ? lastChild.toMutable() : lastChild;\n        if (lastChild !== mutable) {\n            this.setChild(childCount - 1, mutable);\n        }\n        return mutable;\n    }\n    makeFirstElementMutable() {\n        this.throwIfImmutable();\n        const childCount = this.childrenLength;\n        if (childCount === 0) {\n            return undefined;\n        }\n        const firstChild = this.getChild(0);\n        const mutable = firstChild.kind === 4 /* AstNodeKind.List */ ? firstChild.toMutable() : firstChild;\n        if (firstChild !== mutable) {\n            this.setChild(0, mutable);\n        }\n        return mutable;\n    }\n    canBeReused(openBracketIds) {\n        if (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n            return false;\n        }\n        if (this.childrenLength === 0) {\n            // Don't reuse empty lists.\n            return false;\n        }\n        let lastChild = this;\n        while (lastChild.kind === 4 /* AstNodeKind.List */) {\n            const lastLength = lastChild.childrenLength;\n            if (lastLength === 0) {\n                // Empty lists should never be contained in other lists.\n                throw new BugIndicatingError();\n            }\n            lastChild = lastChild.getChild(lastLength - 1);\n        }\n        return lastChild.canBeReused(openBracketIds);\n    }\n    handleChildrenChanged() {\n        this.throwIfImmutable();\n        const count = this.childrenLength;\n        let length = this.getChild(0).length;\n        let unopenedBrackets = this.getChild(0).missingOpeningBracketIds;\n        for (let i = 1; i < count; i++) {\n            const child = this.getChild(i);\n            length = lengthAdd(length, child.length);\n            unopenedBrackets = unopenedBrackets.merge(child.missingOpeningBracketIds);\n        }\n        this._length = length;\n        this._missingOpeningBracketIds = unopenedBrackets;\n        this.cachedMinIndentation = -1;\n    }\n    computeMinIndentation(offset, textModel) {\n        if (this.cachedMinIndentation !== -1) {\n            return this.cachedMinIndentation;\n        }\n        let minIndentation = Number.MAX_SAFE_INTEGER;\n        let childOffset = offset;\n        for (let i = 0; i < this.childrenLength; i++) {\n            const child = this.getChild(i);\n            if (child) {\n                minIndentation = Math.min(minIndentation, child.computeMinIndentation(childOffset, textModel));\n                childOffset = lengthAdd(childOffset, child.length);\n            }\n        }\n        this.cachedMinIndentation = minIndentation;\n        return minIndentation;\n    }\n}\nclass TwoThreeListAstNode extends ListAstNode {\n    get childrenLength() {\n        return this._item3 !== null ? 3 : 2;\n    }\n    getChild(idx) {\n        switch (idx) {\n            case 0: return this._item1;\n            case 1: return this._item2;\n            case 2: return this._item3;\n        }\n        throw new Error('Invalid child index');\n    }\n    setChild(idx, node) {\n        switch (idx) {\n            case 0:\n                this._item1 = node;\n                return;\n            case 1:\n                this._item2 = node;\n                return;\n            case 2:\n                this._item3 = node;\n                return;\n        }\n        throw new Error('Invalid child index');\n    }\n    get children() {\n        return this._item3 ? [this._item1, this._item2, this._item3] : [this._item1, this._item2];\n    }\n    get item1() {\n        return this._item1;\n    }\n    get item2() {\n        return this._item2;\n    }\n    get item3() {\n        return this._item3;\n    }\n    constructor(length, listHeight, _item1, _item2, _item3, missingOpeningBracketIds) {\n        super(length, listHeight, missingOpeningBracketIds);\n        this._item1 = _item1;\n        this._item2 = _item2;\n        this._item3 = _item3;\n    }\n    deepClone() {\n        return new TwoThreeListAstNode(this.length, this.listHeight, this._item1.deepClone(), this._item2.deepClone(), this._item3 ? this._item3.deepClone() : null, this.missingOpeningBracketIds);\n    }\n    appendChildOfSameHeight(node) {\n        if (this._item3) {\n            throw new Error('Cannot append to a full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        this._item3 = node;\n        this.handleChildrenChanged();\n    }\n    unappendChild() {\n        if (!this._item3) {\n            throw new Error('Cannot remove from a non-full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        const result = this._item3;\n        this._item3 = null;\n        this.handleChildrenChanged();\n        return result;\n    }\n    prependChildOfSameHeight(node) {\n        if (this._item3) {\n            throw new Error('Cannot prepend to a full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        this._item3 = this._item2;\n        this._item2 = this._item1;\n        this._item1 = node;\n        this.handleChildrenChanged();\n    }\n    unprependChild() {\n        if (!this._item3) {\n            throw new Error('Cannot remove from a non-full (2,3) tree node');\n        }\n        this.throwIfImmutable();\n        const result = this._item1;\n        this._item1 = this._item2;\n        this._item2 = this._item3;\n        this._item3 = null;\n        this.handleChildrenChanged();\n        return result;\n    }\n    toMutable() {\n        return this;\n    }\n}\n/**\n * Immutable, if all children are immutable.\n*/\nclass Immutable23ListAstNode extends TwoThreeListAstNode {\n    toMutable() {\n        return new TwoThreeListAstNode(this.length, this.listHeight, this.item1, this.item2, this.item3, this.missingOpeningBracketIds);\n    }\n    throwIfImmutable() {\n        throw new Error('this instance is immutable');\n    }\n}\n/**\n * For debugging.\n*/\nclass ArrayListAstNode extends ListAstNode {\n    get childrenLength() {\n        return this._children.length;\n    }\n    getChild(idx) {\n        return this._children[idx];\n    }\n    setChild(idx, child) {\n        this._children[idx] = child;\n    }\n    get children() {\n        return this._children;\n    }\n    constructor(length, listHeight, _children, missingOpeningBracketIds) {\n        super(length, listHeight, missingOpeningBracketIds);\n        this._children = _children;\n    }\n    deepClone() {\n        const children = new Array(this._children.length);\n        for (let i = 0; i < this._children.length; i++) {\n            children[i] = this._children[i].deepClone();\n        }\n        return new ArrayListAstNode(this.length, this.listHeight, children, this.missingOpeningBracketIds);\n    }\n    appendChildOfSameHeight(node) {\n        this.throwIfImmutable();\n        this._children.push(node);\n        this.handleChildrenChanged();\n    }\n    unappendChild() {\n        this.throwIfImmutable();\n        const item = this._children.pop();\n        this.handleChildrenChanged();\n        return item;\n    }\n    prependChildOfSameHeight(node) {\n        this.throwIfImmutable();\n        this._children.unshift(node);\n        this.handleChildrenChanged();\n    }\n    unprependChild() {\n        this.throwIfImmutable();\n        const item = this._children.shift();\n        this.handleChildrenChanged();\n        return item;\n    }\n    toMutable() {\n        return this;\n    }\n}\n/**\n * Immutable, if all children are immutable.\n*/\nclass ImmutableArrayListAstNode extends ArrayListAstNode {\n    toMutable() {\n        return new ArrayListAstNode(this.length, this.listHeight, [...this.children], this.missingOpeningBracketIds);\n    }\n    throwIfImmutable() {\n        throw new Error('this instance is immutable');\n    }\n}\nconst emptyArray = [];\nclass ImmutableLeafAstNode extends BaseAstNode {\n    get listHeight() {\n        return 0;\n    }\n    get childrenLength() {\n        return 0;\n    }\n    getChild(idx) {\n        return null;\n    }\n    get children() {\n        return emptyArray;\n    }\n    deepClone() {\n        return this;\n    }\n}\nexport class TextAstNode extends ImmutableLeafAstNode {\n    get kind() {\n        return 0 /* AstNodeKind.Text */;\n    }\n    get missingOpeningBracketIds() {\n        return SmallImmutableSet.getEmpty();\n    }\n    canBeReused(_openedBracketIds) {\n        return true;\n    }\n    computeMinIndentation(offset, textModel) {\n        const start = lengthToObj(offset);\n        // Text ast nodes don't have partial indentation (ensured by the tokenizer).\n        // Thus, if this text node does not start at column 0, the first line cannot have any indentation at all.\n        const startLineNumber = (start.columnCount === 0 ? start.lineCount : start.lineCount + 1) + 1;\n        const endLineNumber = lengthGetLineCount(lengthAdd(offset, this.length)) + 1;\n        let result = Number.MAX_SAFE_INTEGER;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const firstNonWsColumn = textModel.getLineFirstNonWhitespaceColumn(lineNumber);\n            const lineContent = textModel.getLineContent(lineNumber);\n            if (firstNonWsColumn === 0) {\n                continue;\n            }\n            const visibleColumn = CursorColumns.visibleColumnFromColumn(lineContent, firstNonWsColumn, textModel.getOptions().tabSize);\n            result = Math.min(result, visibleColumn);\n        }\n        return result;\n    }\n}\nexport class BracketAstNode extends ImmutableLeafAstNode {\n    static create(length, bracketInfo, bracketIds) {\n        const node = new BracketAstNode(length, bracketInfo, bracketIds);\n        return node;\n    }\n    get kind() {\n        return 1 /* AstNodeKind.Bracket */;\n    }\n    get missingOpeningBracketIds() {\n        return SmallImmutableSet.getEmpty();\n    }\n    constructor(length, bracketInfo, \n    /**\n     * In case of a opening bracket, this is the id of the opening bracket.\n     * In case of a closing bracket, this contains the ids of all opening brackets it can close.\n    */\n    bracketIds) {\n        super(length);\n        this.bracketInfo = bracketInfo;\n        this.bracketIds = bracketIds;\n    }\n    get text() {\n        return this.bracketInfo.bracketText;\n    }\n    get languageId() {\n        return this.bracketInfo.languageId;\n    }\n    canBeReused(_openedBracketIds) {\n        // These nodes could be reused,\n        // but not in a general way.\n        // Their parent may be reused.\n        return false;\n    }\n    computeMinIndentation(offset, textModel) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n}\nexport class InvalidBracketAstNode extends ImmutableLeafAstNode {\n    get kind() {\n        return 3 /* AstNodeKind.UnexpectedClosingBracket */;\n    }\n    constructor(closingBrackets, length) {\n        super(length);\n        this.missingOpeningBracketIds = closingBrackets;\n    }\n    canBeReused(openedBracketIds) {\n        return !openedBracketIds.intersects(this.missingOpeningBracketIds);\n    }\n    computeMinIndentation(offset, textModel) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}