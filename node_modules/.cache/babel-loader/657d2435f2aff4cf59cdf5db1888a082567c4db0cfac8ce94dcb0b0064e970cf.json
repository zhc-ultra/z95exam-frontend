{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _typeof from \"/Users/yinger/Desktop/algo_evaluator_front/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.substr.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar FoldingController_1;\nimport { createCancelablePromise, Delayer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport * as types from '../../../../base/common/types.js';\nimport './folding.css';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerInstantiatedEditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { FoldingRangeKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { FoldingModel, getNextFoldLine, getParentFoldLine, getPreviousFoldLine, setCollapseStateAtLevel, setCollapseStateForMatchingLines, setCollapseStateForRest, setCollapseStateForType, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateUp, toggleCollapseState } from './foldingModel.js';\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\nimport { IndentRangeProvider } from './indentRangeProvider.js';\nimport * as nls from '../../../../nls.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { FoldingDecorationProvider } from './foldingDecorations.js';\nimport { FoldingRegions } from './foldingRanges.js';\nimport { SyntaxRangeProvider } from './syntaxRangeProvider.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nvar CONTEXT_FOLDING_ENABLED = new RawContextKey('foldingEnabled', false);\nvar FoldingController = FoldingController_1 = /*#__PURE__*/function (_Disposable) {\n  function FoldingController(editor, contextKeyService, languageConfigurationService, notificationService, languageFeatureDebounceService, languageFeaturesService) {\n    var _this;\n    _classCallCheck(this, FoldingController);\n    _this = _callSuper(this, FoldingController);\n    _this.contextKeyService = contextKeyService;\n    _this.languageConfigurationService = languageConfigurationService;\n    _this.languageFeaturesService = languageFeaturesService;\n    _this.localToDispose = _this._register(new DisposableStore());\n    _this.editor = editor;\n    _this._foldingLimitReporter = new RangesLimitReporter(editor);\n    var options = _this.editor.getOptions();\n    _this._isEnabled = options.get(43 /* EditorOption.folding */);\n    _this._useFoldingProviders = options.get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n    _this._unfoldOnClickAfterEndOfLine = options.get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n    _this._restoringViewState = false;\n    _this._currentModelHasFoldedImports = false;\n    _this._foldingImportsByDefault = options.get(46 /* EditorOption.foldingImportsByDefault */);\n    _this.updateDebounceInfo = languageFeatureDebounceService[\"for\"](languageFeaturesService.foldingRangeProvider, 'Folding', {\n      min: 200\n    });\n    _this.foldingModel = null;\n    _this.hiddenRangeModel = null;\n    _this.rangeProvider = null;\n    _this.foldingRegionPromise = null;\n    _this.foldingModelPromise = null;\n    _this.updateScheduler = null;\n    _this.cursorChangedScheduler = null;\n    _this.mouseDownInfo = null;\n    _this.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n    _this.foldingDecorationProvider.showFoldingControls = options.get(110 /* EditorOption.showFoldingControls */);\n    _this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n    _this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(_this.contextKeyService);\n    _this.foldingEnabled.set(_this._isEnabled);\n    _this._register(_this.editor.onDidChangeModel(function () {\n      return _this.onModelChanged();\n    }));\n    _this._register(_this.editor.onDidChangeConfiguration(function (e) {\n      if (e.hasChanged(43 /* EditorOption.folding */)) {\n        _this._isEnabled = _this.editor.getOptions().get(43 /* EditorOption.folding */);\n        _this.foldingEnabled.set(_this._isEnabled);\n        _this.onModelChanged();\n      }\n      if (e.hasChanged(47 /* EditorOption.foldingMaximumRegions */)) {\n        _this.onModelChanged();\n      }\n      if (e.hasChanged(110 /* EditorOption.showFoldingControls */) || e.hasChanged(45 /* EditorOption.foldingHighlight */)) {\n        var _options = _this.editor.getOptions();\n        _this.foldingDecorationProvider.showFoldingControls = _options.get(110 /* EditorOption.showFoldingControls */);\n        _this.foldingDecorationProvider.showFoldingHighlights = _options.get(45 /* EditorOption.foldingHighlight */);\n        _this.triggerFoldingModelChanged();\n      }\n      if (e.hasChanged(44 /* EditorOption.foldingStrategy */)) {\n        _this._useFoldingProviders = _this.editor.getOptions().get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n        _this.onFoldingStrategyChanged();\n      }\n      if (e.hasChanged(48 /* EditorOption.unfoldOnClickAfterEndOfLine */)) {\n        _this._unfoldOnClickAfterEndOfLine = _this.editor.getOptions().get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n      }\n      if (e.hasChanged(46 /* EditorOption.foldingImportsByDefault */)) {\n        _this._foldingImportsByDefault = _this.editor.getOptions().get(46 /* EditorOption.foldingImportsByDefault */);\n      }\n    }));\n    _this.onModelChanged();\n    return _this;\n  }\n  /**\n   * Store view state.\n   */\n  _inherits(FoldingController, _Disposable);\n  return _createClass(FoldingController, [{\n    key: \"saveViewState\",\n    value: function saveViewState() {\n      var model = this.editor.getModel();\n      if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n        return {};\n      }\n      if (this.foldingModel) {\n        // disposed ?\n        var collapsedRegions = this.foldingModel.getMemento();\n        var provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n        return {\n          collapsedRegions: collapsedRegions,\n          lineCount: model.getLineCount(),\n          provider: provider,\n          foldedImports: this._currentModelHasFoldedImports\n        };\n      }\n      return undefined;\n    }\n    /**\n     * Restore view state.\n     */\n  }, {\n    key: \"restoreViewState\",\n    value: function restoreViewState(state) {\n      var model = this.editor.getModel();\n      if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n        return;\n      }\n      if (!state) {\n        return;\n      }\n      this._currentModelHasFoldedImports = !!state.foldedImports;\n      if (state.collapsedRegions && state.collapsedRegions.length > 0 && this.foldingModel) {\n        this._restoringViewState = true;\n        try {\n          this.foldingModel.applyMemento(state.collapsedRegions);\n        } finally {\n          this._restoringViewState = false;\n        }\n      }\n    }\n  }, {\n    key: \"onModelChanged\",\n    value: function onModelChanged() {\n      var _this2 = this;\n      this.localToDispose.clear();\n      var model = this.editor.getModel();\n      if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n        // huge files get no view model, so they cannot support hidden areas\n        return;\n      }\n      this._currentModelHasFoldedImports = false;\n      this.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n      this.localToDispose.add(this.foldingModel);\n      this.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n      this.localToDispose.add(this.hiddenRangeModel);\n      this.localToDispose.add(this.hiddenRangeModel.onDidChange(function (hr) {\n        return _this2.onHiddenRangesChanges(hr);\n      }));\n      this.updateScheduler = new Delayer(this.updateDebounceInfo.get(model));\n      this.cursorChangedScheduler = new RunOnceScheduler(function () {\n        return _this2.revealCursor();\n      }, 200);\n      this.localToDispose.add(this.cursorChangedScheduler);\n      this.localToDispose.add(this.languageFeaturesService.foldingRangeProvider.onDidChange(function () {\n        return _this2.onFoldingStrategyChanged();\n      }));\n      this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(function () {\n        return _this2.onFoldingStrategyChanged();\n      })); // covers model language changes as well\n      this.localToDispose.add(this.editor.onDidChangeModelContent(function (e) {\n        return _this2.onDidChangeModelContent(e);\n      }));\n      this.localToDispose.add(this.editor.onDidChangeCursorPosition(function () {\n        return _this2.onCursorPositionChanged();\n      }));\n      this.localToDispose.add(this.editor.onMouseDown(function (e) {\n        return _this2.onEditorMouseDown(e);\n      }));\n      this.localToDispose.add(this.editor.onMouseUp(function (e) {\n        return _this2.onEditorMouseUp(e);\n      }));\n      this.localToDispose.add({\n        dispose: function dispose() {\n          var _a, _b;\n          if (_this2.foldingRegionPromise) {\n            _this2.foldingRegionPromise.cancel();\n            _this2.foldingRegionPromise = null;\n          }\n          (_a = _this2.updateScheduler) === null || _a === void 0 ? void 0 : _a.cancel();\n          _this2.updateScheduler = null;\n          _this2.foldingModel = null;\n          _this2.foldingModelPromise = null;\n          _this2.hiddenRangeModel = null;\n          _this2.cursorChangedScheduler = null;\n          (_b = _this2.rangeProvider) === null || _b === void 0 ? void 0 : _b.dispose();\n          _this2.rangeProvider = null;\n        }\n      });\n      this.triggerFoldingModelChanged();\n    }\n  }, {\n    key: \"onFoldingStrategyChanged\",\n    value: function onFoldingStrategyChanged() {\n      var _a;\n      (_a = this.rangeProvider) === null || _a === void 0 ? void 0 : _a.dispose();\n      this.rangeProvider = null;\n      this.triggerFoldingModelChanged();\n    }\n  }, {\n    key: \"getRangeProvider\",\n    value: function getRangeProvider(editorModel) {\n      var _this3 = this;\n      if (this.rangeProvider) {\n        return this.rangeProvider;\n      }\n      var indentRangeProvider = new IndentRangeProvider(editorModel, this.languageConfigurationService, this._foldingLimitReporter);\n      this.rangeProvider = indentRangeProvider; // fallback\n      if (this._useFoldingProviders && this.foldingModel) {\n        var selectedProviders = FoldingController_1.getFoldingRangeProviders(this.languageFeaturesService, editorModel);\n        if (selectedProviders.length > 0) {\n          this.rangeProvider = new SyntaxRangeProvider(editorModel, selectedProviders, function () {\n            return _this3.triggerFoldingModelChanged();\n          }, this._foldingLimitReporter, indentRangeProvider);\n        }\n      }\n      return this.rangeProvider;\n    }\n  }, {\n    key: \"getFoldingModel\",\n    value: function getFoldingModel() {\n      return this.foldingModelPromise;\n    }\n  }, {\n    key: \"onDidChangeModelContent\",\n    value: function onDidChangeModelContent(e) {\n      var _a;\n      (_a = this.hiddenRangeModel) === null || _a === void 0 ? void 0 : _a.notifyChangeModelContent(e);\n      this.triggerFoldingModelChanged();\n    }\n  }, {\n    key: \"triggerFoldingModelChanged\",\n    value: function triggerFoldingModelChanged() {\n      var _this4 = this;\n      if (this.updateScheduler) {\n        if (this.foldingRegionPromise) {\n          this.foldingRegionPromise.cancel();\n          this.foldingRegionPromise = null;\n        }\n        this.foldingModelPromise = this.updateScheduler.trigger(function () {\n          var foldingModel = _this4.foldingModel;\n          if (!foldingModel) {\n            // null if editor has been disposed, or folding turned off\n            return null;\n          }\n          var sw = new StopWatch();\n          var provider = _this4.getRangeProvider(foldingModel.textModel);\n          var foldingRegionPromise = _this4.foldingRegionPromise = createCancelablePromise(function (token) {\n            return provider.compute(token);\n          });\n          return foldingRegionPromise.then(function (foldingRanges) {\n            if (foldingRanges && foldingRegionPromise === _this4.foldingRegionPromise) {\n              // new request or cancelled in the meantime?\n              var scrollState;\n              if (_this4._foldingImportsByDefault && !_this4._currentModelHasFoldedImports) {\n                var hasChanges = foldingRanges.setCollapsedAllOfType(FoldingRangeKind.Imports.value, true);\n                if (hasChanges) {\n                  scrollState = StableEditorScrollState.capture(_this4.editor);\n                  _this4._currentModelHasFoldedImports = hasChanges;\n                }\n              }\n              // some cursors might have moved into hidden regions, make sure they are in expanded regions\n              var selections = _this4.editor.getSelections();\n              var selectionLineNumbers = selections ? selections.map(function (s) {\n                return s.startLineNumber;\n              }) : [];\n              foldingModel.update(foldingRanges, selectionLineNumbers);\n              scrollState === null || scrollState === void 0 ? void 0 : scrollState.restore(_this4.editor);\n              // update debounce info\n              var newValue = _this4.updateDebounceInfo.update(foldingModel.textModel, sw.elapsed());\n              if (_this4.updateScheduler) {\n                _this4.updateScheduler.defaultDelay = newValue;\n              }\n            }\n            return foldingModel;\n          });\n        }).then(undefined, function (err) {\n          onUnexpectedError(err);\n          return null;\n        });\n      }\n    }\n  }, {\n    key: \"onHiddenRangesChanges\",\n    value: function onHiddenRangesChanges(hiddenRanges) {\n      if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\n        var selections = this.editor.getSelections();\n        if (selections) {\n          if (this.hiddenRangeModel.adjustSelections(selections)) {\n            this.editor.setSelections(selections);\n          }\n        }\n      }\n      this.editor.setHiddenAreas(hiddenRanges, this);\n    }\n  }, {\n    key: \"onCursorPositionChanged\",\n    value: function onCursorPositionChanged() {\n      if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n        this.cursorChangedScheduler.schedule();\n      }\n    }\n  }, {\n    key: \"revealCursor\",\n    value: function revealCursor() {\n      var _this5 = this;\n      var foldingModel = this.getFoldingModel();\n      if (!foldingModel) {\n        return;\n      }\n      foldingModel.then(function (foldingModel) {\n        if (foldingModel) {\n          var selections = _this5.editor.getSelections();\n          if (selections && selections.length > 0) {\n            var toToggle = [];\n            var _iterator = _createForOfIteratorHelper(selections),\n              _step;\n            try {\n              var _loop = function _loop() {\n                var selection = _step.value;\n                var lineNumber = selection.selectionStartLineNumber;\n                if (_this5.hiddenRangeModel && _this5.hiddenRangeModel.isHidden(lineNumber)) {\n                  toToggle.push.apply(toToggle, _toConsumableArray(foldingModel.getAllRegionsAtLine(lineNumber, function (r) {\n                    return r.isCollapsed && lineNumber > r.startLineNumber;\n                  })));\n                }\n              };\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                _loop();\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            if (toToggle.length) {\n              foldingModel.toggleCollapseState(toToggle);\n              _this5.reveal(selections[0].getPosition());\n            }\n          }\n        }\n      }).then(undefined, onUnexpectedError);\n    }\n  }, {\n    key: \"onEditorMouseDown\",\n    value: function onEditorMouseDown(e) {\n      this.mouseDownInfo = null;\n      if (!this.hiddenRangeModel || !e.target || !e.target.range) {\n        return;\n      }\n      if (!e.event.leftButton && !e.event.middleButton) {\n        return;\n      }\n      var range = e.target.range;\n      var iconClicked = false;\n      switch (e.target.type) {\n        case 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */:\n          {\n            var data = e.target.detail;\n            var offsetLeftInGutter = e.target.element.offsetLeft;\n            var gutterOffsetX = data.offsetX - offsetLeftInGutter;\n            // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n            // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n            if (gutterOffsetX < 4) {\n              // the whitespace between the border and the real folding icon border is 4px\n              return;\n            }\n            iconClicked = true;\n            break;\n          }\n        case 7 /* MouseTargetType.CONTENT_EMPTY */:\n          {\n            if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\n              var _data = e.target.detail;\n              if (!_data.isAfterLines) {\n                break;\n              }\n            }\n            return;\n          }\n        case 6 /* MouseTargetType.CONTENT_TEXT */:\n          {\n            if (this.hiddenRangeModel.hasRanges()) {\n              var model = this.editor.getModel();\n              if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n                break;\n              }\n            }\n            return;\n          }\n        default:\n          return;\n      }\n      this.mouseDownInfo = {\n        lineNumber: range.startLineNumber,\n        iconClicked: iconClicked\n      };\n    }\n  }, {\n    key: \"onEditorMouseUp\",\n    value: function onEditorMouseUp(e) {\n      var foldingModel = this.foldingModel;\n      if (!foldingModel || !this.mouseDownInfo || !e.target) {\n        return;\n      }\n      var lineNumber = this.mouseDownInfo.lineNumber;\n      var iconClicked = this.mouseDownInfo.iconClicked;\n      var range = e.target.range;\n      if (!range || range.startLineNumber !== lineNumber) {\n        return;\n      }\n      if (iconClicked) {\n        if (e.target.type !== 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n          return;\n        }\n      } else {\n        var model = this.editor.getModel();\n        if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n          return;\n        }\n      }\n      var region = foldingModel.getRegionAtLine(lineNumber);\n      if (region && region.startLineNumber === lineNumber) {\n        var isCollapsed = region.isCollapsed;\n        if (iconClicked || isCollapsed) {\n          var surrounding = e.event.altKey;\n          var toToggle = [];\n          if (surrounding) {\n            var filter = function filter(otherRegion) {\n              return !otherRegion.containedBy(region) && !region.containedBy(otherRegion);\n            };\n            var toMaybeToggle = foldingModel.getRegionsInside(null, filter);\n            var _iterator2 = _createForOfIteratorHelper(toMaybeToggle),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var r = _step2.value;\n                if (r.isCollapsed) {\n                  toToggle.push(r);\n                }\n              }\n              // if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            if (toToggle.length === 0) {\n              toToggle = toMaybeToggle;\n            }\n          } else {\n            var recursive = e.event.middleButton || e.event.shiftKey;\n            if (recursive) {\n              var _iterator3 = _createForOfIteratorHelper(foldingModel.getRegionsInside(region)),\n                _step3;\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  var _r = _step3.value;\n                  if (_r.isCollapsed === isCollapsed) {\n                    toToggle.push(_r);\n                  }\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            }\n            // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\n            if (isCollapsed || !recursive || toToggle.length === 0) {\n              toToggle.push(region);\n            }\n          }\n          foldingModel.toggleCollapseState(toToggle);\n          this.reveal({\n            lineNumber: lineNumber,\n            column: 1\n          });\n        }\n      }\n    }\n  }, {\n    key: \"reveal\",\n    value: function reveal(position) {\n      this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* ScrollType.Smooth */);\n    }\n  }], [{\n    key: \"get\",\n    value: function get(editor) {\n      return editor.getContribution(FoldingController_1.ID);\n    }\n  }, {\n    key: \"getFoldingRangeProviders\",\n    value: function getFoldingRangeProviders(languageFeaturesService, model) {\n      var _a, _b;\n      var foldingRangeProviders = languageFeaturesService.foldingRangeProvider.ordered(model);\n      return (_b = (_a = FoldingController_1._foldingRangeSelector) === null || _a === void 0 ? void 0 : _a.call(FoldingController_1, foldingRangeProviders, model)) !== null && _b !== void 0 ? _b : foldingRangeProviders;\n    }\n  }]);\n}(Disposable);\nFoldingController.ID = 'editor.contrib.folding';\nFoldingController = FoldingController_1 = __decorate([__param(1, IContextKeyService), __param(2, ILanguageConfigurationService), __param(3, INotificationService), __param(4, ILanguageFeatureDebounceService), __param(5, ILanguageFeaturesService)], FoldingController);\nexport { FoldingController };\nexport var RangesLimitReporter = /*#__PURE__*/function () {\n  function RangesLimitReporter(editor) {\n    _classCallCheck(this, RangesLimitReporter);\n    this.editor = editor;\n    this._onDidChange = new Emitter();\n    this._computed = 0;\n    this._limited = false;\n  }\n  return _createClass(RangesLimitReporter, [{\n    key: \"limit\",\n    get: function get() {\n      return this.editor.getOptions().get(47 /* EditorOption.foldingMaximumRegions */);\n    }\n  }, {\n    key: \"update\",\n    value: function update(computed, limited) {\n      if (computed !== this._computed || limited !== this._limited) {\n        this._computed = computed;\n        this._limited = limited;\n        this._onDidChange.fire();\n      }\n    }\n  }]);\n}();\nvar FoldingAction = /*#__PURE__*/function (_EditorAction) {\n  function FoldingAction() {\n    _classCallCheck(this, FoldingAction);\n    return _callSuper(this, FoldingAction, arguments);\n  }\n  _inherits(FoldingAction, _EditorAction);\n  return _createClass(FoldingAction, [{\n    key: \"runEditorCommand\",\n    value: function runEditorCommand(accessor, editor, args) {\n      var _this6 = this;\n      var languageConfigurationService = accessor.get(ILanguageConfigurationService);\n      var foldingController = FoldingController.get(editor);\n      if (!foldingController) {\n        return;\n      }\n      var foldingModelPromise = foldingController.getFoldingModel();\n      if (foldingModelPromise) {\n        this.reportTelemetry(accessor, editor);\n        return foldingModelPromise.then(function (foldingModel) {\n          if (foldingModel) {\n            _this6.invoke(foldingController, foldingModel, editor, args, languageConfigurationService);\n            var selection = editor.getSelection();\n            if (selection) {\n              foldingController.reveal(selection.getStartPosition());\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"getSelectedLines\",\n    value: function getSelectedLines(editor) {\n      var selections = editor.getSelections();\n      return selections ? selections.map(function (s) {\n        return s.startLineNumber;\n      }) : [];\n    }\n  }, {\n    key: \"getLineNumbers\",\n    value: function getLineNumbers(args, editor) {\n      if (args && args.selectionLines) {\n        return args.selectionLines.map(function (l) {\n          return l + 1;\n        }); // to 0-bases line numbers\n      }\n      return this.getSelectedLines(editor);\n    }\n  }, {\n    key: \"run\",\n    value: function run(_accessor, _editor) {}\n  }]);\n}(EditorAction);\nfunction foldingArgumentsConstraint(args) {\n  if (!types.isUndefined(args)) {\n    if (!types.isObject(args)) {\n      return false;\n    }\n    var foldingArgs = args;\n    if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n      return false;\n    }\n    if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n      return false;\n    }\n    if (!types.isUndefined(foldingArgs.selectionLines) && (!Array.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n      return false;\n    }\n  }\n  return true;\n}\nvar UnfoldAction = /*#__PURE__*/function (_FoldingAction) {\n  function UnfoldAction() {\n    _classCallCheck(this, UnfoldAction);\n    return _callSuper(this, UnfoldAction, [{\n      id: 'editor.unfold',\n      label: nls.localize('unfoldAction.label', \"Unfold\"),\n      alias: 'Unfold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 94 /* KeyCode.BracketRight */,\n        mac: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      metadata: {\n        description: 'Unfold the content in the editor',\n        args: [{\n          name: 'Unfold editor argument',\n          description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t\\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\\n\\t\\t\\t\\t\\t\\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\\n\\t\\t\\t\\t\\t\\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\\n\\t\\t\\t\\t\\t\\t\",\n          constraint: foldingArgumentsConstraint,\n          schema: {\n            'type': 'object',\n            'properties': {\n              'levels': {\n                'type': 'number',\n                'default': 1\n              },\n              'direction': {\n                'type': 'string',\n                'enum': ['up', 'down'],\n                'default': 'down'\n              },\n              'selectionLines': {\n                'type': 'array',\n                'items': {\n                  'type': 'number'\n                }\n              }\n            }\n          }\n        }]\n      }\n    }]);\n  }\n  _inherits(UnfoldAction, _FoldingAction);\n  return _createClass(UnfoldAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor, args) {\n      var levels = args && args.levels || 1;\n      var lineNumbers = this.getLineNumbers(args, editor);\n      if (args && args.direction === 'up') {\n        setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n      } else {\n        setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n      }\n    }\n  }]);\n}(FoldingAction);\nvar UnFoldRecursivelyAction = /*#__PURE__*/function (_FoldingAction2) {\n  function UnFoldRecursivelyAction() {\n    _classCallCheck(this, UnFoldRecursivelyAction);\n    return _callSuper(this, UnFoldRecursivelyAction, [{\n      id: 'editor.unfoldRecursively',\n      label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n      alias: 'Unfold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(UnFoldRecursivelyAction, _FoldingAction2);\n  return _createClass(UnFoldRecursivelyAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor, _args) {\n      setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n    }\n  }]);\n}(FoldingAction);\nvar FoldAction = /*#__PURE__*/function (_FoldingAction3) {\n  function FoldAction() {\n    _classCallCheck(this, FoldAction);\n    return _callSuper(this, FoldAction, [{\n      id: 'editor.fold',\n      label: nls.localize('foldAction.label', \"Fold\"),\n      alias: 'Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 92 /* KeyCode.BracketLeft */,\n        mac: {\n          primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */\n        },\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      },\n      metadata: {\n        description: 'Fold the content in the editor',\n        args: [{\n          name: 'Fold editor argument',\n          description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t\\t\\t* 'levels': Number of levels to fold.\\n\\t\\t\\t\\t\\t\\t\\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\\n\\t\\t\\t\\t\\t\\t\\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\\n\\t\\t\\t\\t\\t\\t\\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\\n\\t\\t\\t\\t\\t\\t\",\n          constraint: foldingArgumentsConstraint,\n          schema: {\n            'type': 'object',\n            'properties': {\n              'levels': {\n                'type': 'number'\n              },\n              'direction': {\n                'type': 'string',\n                'enum': ['up', 'down']\n              },\n              'selectionLines': {\n                'type': 'array',\n                'items': {\n                  'type': 'number'\n                }\n              }\n            }\n          }\n        }]\n      }\n    }]);\n  }\n  _inherits(FoldAction, _FoldingAction3);\n  return _createClass(FoldAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor, args) {\n      var lineNumbers = this.getLineNumbers(args, editor);\n      var levels = args && args.levels;\n      var direction = args && args.direction;\n      if (typeof levels !== 'number' && typeof direction !== 'string') {\n        // fold the region at the location or if already collapsed, the first uncollapsed parent instead.\n        setCollapseStateUp(foldingModel, true, lineNumbers);\n      } else {\n        if (direction === 'up') {\n          setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\n        } else {\n          setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\n        }\n      }\n    }\n  }]);\n}(FoldingAction);\nvar ToggleFoldAction = /*#__PURE__*/function (_FoldingAction4) {\n  function ToggleFoldAction() {\n    _classCallCheck(this, ToggleFoldAction);\n    return _callSuper(this, ToggleFoldAction, [{\n      id: 'editor.toggleFold',\n      label: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\n      alias: 'Toggle Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 42 /* KeyCode.KeyL */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(ToggleFoldAction, _FoldingAction4);\n  return _createClass(ToggleFoldAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor) {\n      var selectedLines = this.getSelectedLines(editor);\n      toggleCollapseState(foldingModel, 1, selectedLines);\n    }\n  }]);\n}(FoldingAction);\nvar FoldRecursivelyAction = /*#__PURE__*/function (_FoldingAction5) {\n  function FoldRecursivelyAction() {\n    _classCallCheck(this, FoldRecursivelyAction);\n    return _callSuper(this, FoldRecursivelyAction, [{\n      id: 'editor.foldRecursively',\n      label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n      alias: 'Fold Recursively',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(FoldRecursivelyAction, _FoldingAction5);\n  return _createClass(FoldRecursivelyAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor) {\n      var selectedLines = this.getSelectedLines(editor);\n      setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n    }\n  }]);\n}(FoldingAction);\nvar FoldAllBlockCommentsAction = /*#__PURE__*/function (_FoldingAction6) {\n  function FoldAllBlockCommentsAction() {\n    _classCallCheck(this, FoldAllBlockCommentsAction);\n    return _callSuper(this, FoldAllBlockCommentsAction, [{\n      id: 'editor.foldAllBlockComments',\n      label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n      alias: 'Fold All Block Comments',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 90 /* KeyCode.Slash */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(FoldAllBlockCommentsAction, _FoldingAction6);\n  return _createClass(FoldAllBlockCommentsAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n      if (foldingModel.regions.hasTypes()) {\n        setCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n      } else {\n        var editorModel = editor.getModel();\n        if (!editorModel) {\n          return;\n        }\n        var comments = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).comments;\n        if (comments && comments.blockCommentStartToken) {\n          var regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n          setCollapseStateForMatchingLines(foldingModel, regExp, true);\n        }\n      }\n    }\n  }]);\n}(FoldingAction);\nvar FoldAllRegionsAction = /*#__PURE__*/function (_FoldingAction7) {\n  function FoldAllRegionsAction() {\n    _classCallCheck(this, FoldAllRegionsAction);\n    return _callSuper(this, FoldAllRegionsAction, [{\n      id: 'editor.foldAllMarkerRegions',\n      label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n      alias: 'Fold All Regions',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 29 /* KeyCode.Digit8 */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(FoldAllRegionsAction, _FoldingAction7);\n  return _createClass(FoldAllRegionsAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n      if (foldingModel.regions.hasTypes()) {\n        setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n      } else {\n        var editorModel = editor.getModel();\n        if (!editorModel) {\n          return;\n        }\n        var foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n        if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n          var regExp = new RegExp(foldingRules.markers.start);\n          setCollapseStateForMatchingLines(foldingModel, regExp, true);\n        }\n      }\n    }\n  }]);\n}(FoldingAction);\nvar UnfoldAllRegionsAction = /*#__PURE__*/function (_FoldingAction8) {\n  function UnfoldAllRegionsAction() {\n    _classCallCheck(this, UnfoldAllRegionsAction);\n    return _callSuper(this, UnfoldAllRegionsAction, [{\n      id: 'editor.unfoldAllMarkerRegions',\n      label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n      alias: 'Unfold All Regions',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 30 /* KeyCode.Digit9 */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(UnfoldAllRegionsAction, _FoldingAction8);\n  return _createClass(UnfoldAllRegionsAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n      if (foldingModel.regions.hasTypes()) {\n        setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n      } else {\n        var editorModel = editor.getModel();\n        if (!editorModel) {\n          return;\n        }\n        var foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n        if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n          var regExp = new RegExp(foldingRules.markers.start);\n          setCollapseStateForMatchingLines(foldingModel, regExp, false);\n        }\n      }\n    }\n  }]);\n}(FoldingAction);\nvar FoldAllExceptAction = /*#__PURE__*/function (_FoldingAction9) {\n  function FoldAllExceptAction() {\n    _classCallCheck(this, FoldAllExceptAction);\n    return _callSuper(this, FoldAllExceptAction, [{\n      id: 'editor.foldAllExcept',\n      label: nls.localize('foldAllExcept.label', \"Fold All Except Selected\"),\n      alias: 'Fold All Except Selected',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 88 /* KeyCode.Minus */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(FoldAllExceptAction, _FoldingAction9);\n  return _createClass(FoldAllExceptAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor) {\n      var selectedLines = this.getSelectedLines(editor);\n      setCollapseStateForRest(foldingModel, true, selectedLines);\n    }\n  }]);\n}(FoldingAction);\nvar UnfoldAllExceptAction = /*#__PURE__*/function (_FoldingAction10) {\n  function UnfoldAllExceptAction() {\n    _classCallCheck(this, UnfoldAllExceptAction);\n    return _callSuper(this, UnfoldAllExceptAction, [{\n      id: 'editor.unfoldAllExcept',\n      label: nls.localize('unfoldAllExcept.label', \"Unfold All Except Selected\"),\n      alias: 'Unfold All Except Selected',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 86 /* KeyCode.Equal */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(UnfoldAllExceptAction, _FoldingAction10);\n  return _createClass(UnfoldAllExceptAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor) {\n      var selectedLines = this.getSelectedLines(editor);\n      setCollapseStateForRest(foldingModel, false, selectedLines);\n    }\n  }]);\n}(FoldingAction);\nvar FoldAllAction = /*#__PURE__*/function (_FoldingAction11) {\n  function FoldAllAction() {\n    _classCallCheck(this, FoldAllAction);\n    return _callSuper(this, FoldAllAction, [{\n      id: 'editor.foldAll',\n      label: nls.localize('foldAllAction.label', \"Fold All\"),\n      alias: 'Fold All',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 21 /* KeyCode.Digit0 */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(FoldAllAction, _FoldingAction11);\n  return _createClass(FoldAllAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, _editor) {\n      setCollapseStateLevelsDown(foldingModel, true);\n    }\n  }]);\n}(FoldingAction);\nvar UnfoldAllAction = /*#__PURE__*/function (_FoldingAction12) {\n  function UnfoldAllAction() {\n    _classCallCheck(this, UnfoldAllAction);\n    return _callSuper(this, UnfoldAllAction, [{\n      id: 'editor.unfoldAll',\n      label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n      alias: 'Unfold All',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 40 /* KeyCode.KeyJ */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(UnfoldAllAction, _FoldingAction12);\n  return _createClass(UnfoldAllAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, _editor) {\n      setCollapseStateLevelsDown(foldingModel, false);\n    }\n  }]);\n}(FoldingAction);\nvar FoldLevelAction = /*#__PURE__*/function (_FoldingAction13) {\n  function FoldLevelAction() {\n    _classCallCheck(this, FoldLevelAction);\n    return _callSuper(this, FoldLevelAction, arguments);\n  }\n  _inherits(FoldLevelAction, _FoldingAction13);\n  return _createClass(FoldLevelAction, [{\n    key: \"getFoldingLevel\",\n    value: function getFoldingLevel() {\n      return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n    }\n  }, {\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor) {\n      setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n    }\n  }]);\n}(FoldingAction);\nFoldLevelAction.ID_PREFIX = 'editor.foldLevel';\nFoldLevelAction.ID = function (level) {\n  return FoldLevelAction.ID_PREFIX + level;\n};\n/** Action to go to the parent fold of current line */\nvar GotoParentFoldAction = /*#__PURE__*/function (_FoldingAction14) {\n  function GotoParentFoldAction() {\n    _classCallCheck(this, GotoParentFoldAction);\n    return _callSuper(this, GotoParentFoldAction, [{\n      id: 'editor.gotoParentFold',\n      label: nls.localize('gotoParentFold.label', \"Go to Parent Fold\"),\n      alias: 'Go to Parent Fold',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(GotoParentFoldAction, _FoldingAction14);\n  return _createClass(GotoParentFoldAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor) {\n      var selectedLines = this.getSelectedLines(editor);\n      if (selectedLines.length > 0) {\n        var startLineNumber = getParentFoldLine(selectedLines[0], foldingModel);\n        if (startLineNumber !== null) {\n          editor.setSelection({\n            startLineNumber: startLineNumber,\n            startColumn: 1,\n            endLineNumber: startLineNumber,\n            endColumn: 1\n          });\n        }\n      }\n    }\n  }]);\n}(FoldingAction);\n/** Action to go to the previous fold of current line */\nvar GotoPreviousFoldAction = /*#__PURE__*/function (_FoldingAction15) {\n  function GotoPreviousFoldAction() {\n    _classCallCheck(this, GotoPreviousFoldAction);\n    return _callSuper(this, GotoPreviousFoldAction, [{\n      id: 'editor.gotoPreviousFold',\n      label: nls.localize('gotoPreviousFold.label', \"Go to Previous Folding Range\"),\n      alias: 'Go to Previous Folding Range',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(GotoPreviousFoldAction, _FoldingAction15);\n  return _createClass(GotoPreviousFoldAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor) {\n      var selectedLines = this.getSelectedLines(editor);\n      if (selectedLines.length > 0) {\n        var startLineNumber = getPreviousFoldLine(selectedLines[0], foldingModel);\n        if (startLineNumber !== null) {\n          editor.setSelection({\n            startLineNumber: startLineNumber,\n            startColumn: 1,\n            endLineNumber: startLineNumber,\n            endColumn: 1\n          });\n        }\n      }\n    }\n  }]);\n}(FoldingAction);\n/** Action to go to the next fold of current line */\nvar GotoNextFoldAction = /*#__PURE__*/function (_FoldingAction16) {\n  function GotoNextFoldAction() {\n    _classCallCheck(this, GotoNextFoldAction);\n    return _callSuper(this, GotoNextFoldAction, [{\n      id: 'editor.gotoNextFold',\n      label: nls.localize('gotoNextFold.label', \"Go to Next Folding Range\"),\n      alias: 'Go to Next Folding Range',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(GotoNextFoldAction, _FoldingAction16);\n  return _createClass(GotoNextFoldAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor) {\n      var selectedLines = this.getSelectedLines(editor);\n      if (selectedLines.length > 0) {\n        var startLineNumber = getNextFoldLine(selectedLines[0], foldingModel);\n        if (startLineNumber !== null) {\n          editor.setSelection({\n            startLineNumber: startLineNumber,\n            startColumn: 1,\n            endLineNumber: startLineNumber,\n            endColumn: 1\n          });\n        }\n      }\n    }\n  }]);\n}(FoldingAction);\nvar FoldRangeFromSelectionAction = /*#__PURE__*/function (_FoldingAction17) {\n  function FoldRangeFromSelectionAction() {\n    _classCallCheck(this, FoldRangeFromSelectionAction);\n    return _callSuper(this, FoldRangeFromSelectionAction, [{\n      id: 'editor.createFoldingRangeFromSelection',\n      label: nls.localize('createManualFoldRange.label', \"Create Folding Range from Selection\"),\n      alias: 'Create Folding Range from Selection',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 87 /* KeyCode.Comma */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(FoldRangeFromSelectionAction, _FoldingAction17);\n  return _createClass(FoldRangeFromSelectionAction, [{\n    key: \"invoke\",\n    value: function invoke(_foldingController, foldingModel, editor) {\n      var _a;\n      var collapseRanges = [];\n      var selections = editor.getSelections();\n      if (selections) {\n        var _iterator4 = _createForOfIteratorHelper(selections),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var selection = _step4.value;\n            var endLineNumber = selection.endLineNumber;\n            if (selection.endColumn === 1) {\n              --endLineNumber;\n            }\n            if (endLineNumber > selection.startLineNumber) {\n              collapseRanges.push({\n                startLineNumber: selection.startLineNumber,\n                endLineNumber: endLineNumber,\n                type: undefined,\n                isCollapsed: true,\n                source: 1 /* FoldSource.userDefined */\n              });\n              editor.setSelection({\n                startLineNumber: selection.startLineNumber,\n                startColumn: 1,\n                endLineNumber: selection.startLineNumber,\n                endColumn: 1\n              });\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        if (collapseRanges.length > 0) {\n          collapseRanges.sort(function (a, b) {\n            return a.startLineNumber - b.startLineNumber;\n          });\n          var newRanges = FoldingRegions.sanitizeAndMerge(foldingModel.regions, collapseRanges, (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.getLineCount());\n          foldingModel.updatePost(FoldingRegions.fromFoldRanges(newRanges));\n        }\n      }\n    }\n  }]);\n}(FoldingAction);\nvar RemoveFoldRangeFromSelectionAction = /*#__PURE__*/function (_FoldingAction18) {\n  function RemoveFoldRangeFromSelectionAction() {\n    _classCallCheck(this, RemoveFoldRangeFromSelectionAction);\n    return _callSuper(this, RemoveFoldRangeFromSelectionAction, [{\n      id: 'editor.removeManualFoldingRanges',\n      label: nls.localize('removeManualFoldingRanges.label', \"Remove Manual Folding Ranges\"),\n      alias: 'Remove Manual Folding Ranges',\n      precondition: CONTEXT_FOLDING_ENABLED,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */),\n        weight: 100 /* KeybindingWeight.EditorContrib */\n      }\n    }]);\n  }\n  _inherits(RemoveFoldRangeFromSelectionAction, _FoldingAction18);\n  return _createClass(RemoveFoldRangeFromSelectionAction, [{\n    key: \"invoke\",\n    value: function invoke(foldingController, foldingModel, editor) {\n      var selections = editor.getSelections();\n      if (selections) {\n        var ranges = [];\n        var _iterator5 = _createForOfIteratorHelper(selections),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var selection = _step5.value;\n            var startLineNumber = selection.startLineNumber,\n              endLineNumber = selection.endLineNumber;\n            ranges.push(endLineNumber >= startLineNumber ? {\n              startLineNumber: startLineNumber,\n              endLineNumber: endLineNumber\n            } : {\n              endLineNumber: endLineNumber,\n              startLineNumber: startLineNumber\n            });\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n        foldingModel.removeManualRanges(ranges);\n        foldingController.triggerFoldingModelChanged();\n      }\n    }\n  }]);\n}(FoldingAction);\nregisterEditorContribution(FoldingController.ID, FoldingController, 0 /* EditorContributionInstantiation.Eager */); // eager because it uses `saveViewState`/`restoreViewState`\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\nregisterEditorAction(FoldAllExceptAction);\nregisterEditorAction(UnfoldAllExceptAction);\nregisterEditorAction(ToggleFoldAction);\nregisterEditorAction(GotoParentFoldAction);\nregisterEditorAction(GotoPreviousFoldAction);\nregisterEditorAction(GotoNextFoldAction);\nregisterEditorAction(FoldRangeFromSelectionAction);\nregisterEditorAction(RemoveFoldRangeFromSelectionAction);\nfor (var i = 1; i <= 7; i++) {\n  registerInstantiatedEditorAction(new FoldLevelAction({\n    id: FoldLevelAction.ID(i),\n    label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n    alias: \"Fold Level \".concat(i),\n    precondition: CONTEXT_FOLDING_ENABLED,\n    kbOpts: {\n      kbExpr: EditorContextKeys.editorTextFocus,\n      primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 21 /* KeyCode.Digit0 */ + i),\n      weight: 100 /* KeybindingWeight.EditorContrib */\n    }\n  }));\n}\nCommandsRegistry.registerCommand('_executeFoldingRangeProvider', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(accessor) {\n    var _len,\n      args,\n      _key,\n      resource,\n      languageFeaturesService,\n      model,\n      configurationService,\n      languageConfigurationService,\n      strategy,\n      foldingLimitReporter,\n      indentRangeProvider,\n      rangeProvider,\n      providers,\n      ranges,\n      result,\n      _i,\n      type,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          for (_len = _args2.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = _args2[_key];\n          }\n          resource = args[0];\n          if (resource instanceof URI) {\n            _context.next = 4;\n            break;\n          }\n          throw illegalArgument();\n        case 4:\n          languageFeaturesService = accessor.get(ILanguageFeaturesService);\n          model = accessor.get(IModelService).getModel(resource);\n          if (model) {\n            _context.next = 8;\n            break;\n          }\n          throw illegalArgument();\n        case 8:\n          configurationService = accessor.get(IConfigurationService);\n          if (configurationService.getValue('editor.folding', {\n            resource: resource\n          })) {\n            _context.next = 11;\n            break;\n          }\n          return _context.abrupt(\"return\", []);\n        case 11:\n          languageConfigurationService = accessor.get(ILanguageConfigurationService);\n          strategy = configurationService.getValue('editor.foldingStrategy', {\n            resource: resource\n          });\n          _context.t0 = function update(computed, limited) {};\n          foldingLimitReporter = {\n            get limit() {\n              return configurationService.getValue('editor.foldingMaximumRegions', {\n                resource: resource\n              });\n            },\n            update: _context.t0\n          };\n          indentRangeProvider = new IndentRangeProvider(model, languageConfigurationService, foldingLimitReporter);\n          rangeProvider = indentRangeProvider;\n          if (strategy !== 'indentation') {\n            providers = FoldingController.getFoldingRangeProviders(languageFeaturesService, model);\n            if (providers.length) {\n              rangeProvider = new SyntaxRangeProvider(model, providers, function () {}, foldingLimitReporter, indentRangeProvider);\n            }\n          }\n          _context.next = 20;\n          return rangeProvider.compute(CancellationToken.None);\n        case 20:\n          ranges = _context.sent;\n          result = [];\n          _context.prev = 22;\n          if (ranges) {\n            for (_i = 0; _i < ranges.length; _i++) {\n              type = ranges.getType(_i);\n              result.push({\n                start: ranges.getStartLineNumber(_i),\n                end: ranges.getEndLineNumber(_i),\n                kind: type ? FoldingRangeKind.fromValue(type) : undefined\n              });\n            }\n          }\n          return _context.abrupt(\"return\", result);\n        case 25:\n          _context.prev = 25;\n          rangeProvider.dispose();\n          return _context.finish(25);\n        case 28:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[22,, 25, 28]]);\n  }));\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","_typeof","decorate","i","defineProperty","__param","paramIndex","decorator","FoldingController_1","createCancelablePromise","Delayer","RunOnceScheduler","CancellationToken","illegalArgument","onUnexpectedError","KeyChord","Disposable","DisposableStore","escapeRegExpCharacters","types","StableEditorScrollState","EditorAction","registerEditorAction","registerEditorContribution","registerInstantiatedEditorAction","EditorContextKeys","FoldingRangeKind","ILanguageConfigurationService","FoldingModel","getNextFoldLine","getParentFoldLine","getPreviousFoldLine","setCollapseStateAtLevel","setCollapseStateForMatchingLines","setCollapseStateForRest","setCollapseStateForType","setCollapseStateLevelsDown","setCollapseStateLevelsUp","setCollapseStateUp","toggleCollapseState","HiddenRangeModel","IndentRangeProvider","nls","IContextKeyService","RawContextKey","FoldingDecorationProvider","FoldingRegions","SyntaxRangeProvider","INotificationService","ILanguageFeatureDebounceService","StopWatch","ILanguageFeaturesService","Emitter","CommandsRegistry","URI","IModelService","IConfigurationService","CONTEXT_FOLDING_ENABLED","FoldingController","_Disposable","editor","contextKeyService","languageConfigurationService","notificationService","languageFeatureDebounceService","languageFeaturesService","_this","_classCallCheck","_callSuper","localToDispose","_register","_foldingLimitReporter","RangesLimitReporter","options","getOptions","_isEnabled","get","_useFoldingProviders","_unfoldOnClickAfterEndOfLine","_restoringViewState","_currentModelHasFoldedImports","_foldingImportsByDefault","updateDebounceInfo","foldingRangeProvider","min","foldingModel","hiddenRangeModel","rangeProvider","foldingRegionPromise","foldingModelPromise","updateScheduler","cursorChangedScheduler","mouseDownInfo","foldingDecorationProvider","showFoldingControls","showFoldingHighlights","foldingEnabled","bindTo","set","onDidChangeModel","onModelChanged","onDidChangeConfiguration","e","hasChanged","triggerFoldingModelChanged","onFoldingStrategyChanged","_inherits","_createClass","value","saveViewState","model","getModel","isTooLargeForTokenization","collapsedRegions","getMemento","provider","id","undefined","lineCount","getLineCount","foldedImports","restoreViewState","state","applyMemento","_this2","clear","add","onDidChange","hr","onHiddenRangesChanges","revealCursor","onDidChangeModelLanguageConfiguration","onDidChangeModelContent","onDidChangeCursorPosition","onCursorPositionChanged","onMouseDown","onEditorMouseDown","onMouseUp","onEditorMouseUp","dispose","_a","_b","cancel","getRangeProvider","editorModel","_this3","indentRangeProvider","selectedProviders","getFoldingRangeProviders","getFoldingModel","notifyChangeModelContent","_this4","trigger","sw","textModel","token","compute","then","foldingRanges","scrollState","hasChanges","setCollapsedAllOfType","Imports","capture","selections","getSelections","selectionLineNumbers","map","s","startLineNumber","update","restore","newValue","elapsed","defaultDelay","err","hiddenRanges","adjustSelections","setSelections","setHiddenAreas","hasRanges","schedule","_this5","toToggle","_iterator","_createForOfIteratorHelper","_step","_loop","selection","lineNumber","selectionStartLineNumber","isHidden","push","apply","_toConsumableArray","getAllRegionsAtLine","isCollapsed","n","done","f","reveal","getPosition","range","event","leftButton","middleButton","iconClicked","type","data","detail","offsetLeftInGutter","element","offsetLeft","gutterOffsetX","offsetX","isAfterLines","startColumn","getLineMaxColumn","region","getRegionAtLine","surrounding","altKey","filter","otherRegion","containedBy","toMaybeToggle","getRegionsInside","_iterator2","_step2","recursive","shiftKey","_iterator3","_step3","column","position","revealPositionInCenterIfOutsideViewport","getContribution","ID","foldingRangeProviders","ordered","_foldingRangeSelector","call","_onDidChange","_computed","_limited","computed","limited","fire","FoldingAction","_EditorAction","runEditorCommand","accessor","args","_this6","foldingController","reportTelemetry","invoke","getSelection","getStartPosition","getSelectedLines","getLineNumbers","selectionLines","l","run","_accessor","_editor","foldingArgumentsConstraint","isUndefined","isObject","foldingArgs","levels","isNumber","direction","isString","Array","isArray","every","UnfoldAction","_FoldingAction","label","localize","alias","precondition","kbOpts","kbExpr","editorTextFocus","primary","mac","weight","metadata","description","name","constraint","schema","_foldingController","lineNumbers","UnFoldRecursivelyAction","_FoldingAction2","_args","Number","MAX_VALUE","FoldAction","_FoldingAction3","ToggleFoldAction","_FoldingAction4","selectedLines","FoldRecursivelyAction","_FoldingAction5","FoldAllBlockCommentsAction","_FoldingAction6","regions","hasTypes","Comment","comments","getLanguageConfiguration","getLanguageId","blockCommentStartToken","regExp","RegExp","FoldAllRegionsAction","_FoldingAction7","Region","foldingRules","markers","start","UnfoldAllRegionsAction","_FoldingAction8","FoldAllExceptAction","_FoldingAction9","UnfoldAllExceptAction","_FoldingAction10","FoldAllAction","_FoldingAction11","UnfoldAllAction","_FoldingAction12","FoldLevelAction","_FoldingAction13","getFoldingLevel","parseInt","substr","ID_PREFIX","level","GotoParentFoldAction","_FoldingAction14","setSelection","endLineNumber","endColumn","GotoPreviousFoldAction","_FoldingAction15","GotoNextFoldAction","_FoldingAction16","FoldRangeFromSelectionAction","_FoldingAction17","collapseRanges","_iterator4","_step4","source","sort","a","b","newRanges","sanitizeAndMerge","updatePost","fromFoldRanges","RemoveFoldRangeFromSelectionAction","_FoldingAction18","ranges","_iterator5","_step5","removeManualRanges","concat","registerCommand","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_len","_key","resource","configurationService","strategy","foldingLimitReporter","providers","result","_i","_args2","wrap","_callee$","_context","prev","next","getValue","abrupt","t0","limit","None","sent","getType","getStartLineNumber","end","getEndLineNumber","kind","fromValue","finish","stop","_x"],"sources":["/Users/yinger/Desktop/algo_evaluator_front/node_modules/monaco-editor/esm/vs/editor/contrib/folding/browser/folding.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar FoldingController_1;\nimport { createCancelablePromise, Delayer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { illegalArgument, onUnexpectedError } from '../../../../base/common/errors.js';\nimport { KeyChord } from '../../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { escapeRegExpCharacters } from '../../../../base/common/strings.js';\nimport * as types from '../../../../base/common/types.js';\nimport './folding.css';\nimport { StableEditorScrollState } from '../../../browser/stableEditorScroll.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution, registerInstantiatedEditorAction } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { FoldingRangeKind } from '../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { FoldingModel, getNextFoldLine, getParentFoldLine as getParentFoldLine, getPreviousFoldLine, setCollapseStateAtLevel, setCollapseStateForMatchingLines, setCollapseStateForRest, setCollapseStateForType, setCollapseStateLevelsDown, setCollapseStateLevelsUp, setCollapseStateUp, toggleCollapseState } from './foldingModel.js';\nimport { HiddenRangeModel } from './hiddenRangeModel.js';\nimport { IndentRangeProvider } from './indentRangeProvider.js';\nimport * as nls from '../../../../nls.js';\nimport { IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { FoldingDecorationProvider } from './foldingDecorations.js';\nimport { FoldingRegions } from './foldingRanges.js';\nimport { SyntaxRangeProvider } from './syntaxRangeProvider.js';\nimport { INotificationService } from '../../../../platform/notification/common/notification.js';\nimport { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce.js';\nimport { StopWatch } from '../../../../base/common/stopwatch.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nconst CONTEXT_FOLDING_ENABLED = new RawContextKey('foldingEnabled', false);\nlet FoldingController = FoldingController_1 = class FoldingController extends Disposable {\n    static get(editor) {\n        return editor.getContribution(FoldingController_1.ID);\n    }\n    static getFoldingRangeProviders(languageFeaturesService, model) {\n        var _a, _b;\n        const foldingRangeProviders = languageFeaturesService.foldingRangeProvider.ordered(model);\n        return (_b = ((_a = FoldingController_1._foldingRangeSelector) === null || _a === void 0 ? void 0 : _a.call(FoldingController_1, foldingRangeProviders, model))) !== null && _b !== void 0 ? _b : foldingRangeProviders;\n    }\n    constructor(editor, contextKeyService, languageConfigurationService, notificationService, languageFeatureDebounceService, languageFeaturesService) {\n        super();\n        this.contextKeyService = contextKeyService;\n        this.languageConfigurationService = languageConfigurationService;\n        this.languageFeaturesService = languageFeaturesService;\n        this.localToDispose = this._register(new DisposableStore());\n        this.editor = editor;\n        this._foldingLimitReporter = new RangesLimitReporter(editor);\n        const options = this.editor.getOptions();\n        this._isEnabled = options.get(43 /* EditorOption.folding */);\n        this._useFoldingProviders = options.get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n        this._unfoldOnClickAfterEndOfLine = options.get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n        this._restoringViewState = false;\n        this._currentModelHasFoldedImports = false;\n        this._foldingImportsByDefault = options.get(46 /* EditorOption.foldingImportsByDefault */);\n        this.updateDebounceInfo = languageFeatureDebounceService.for(languageFeaturesService.foldingRangeProvider, 'Folding', { min: 200 });\n        this.foldingModel = null;\n        this.hiddenRangeModel = null;\n        this.rangeProvider = null;\n        this.foldingRegionPromise = null;\n        this.foldingModelPromise = null;\n        this.updateScheduler = null;\n        this.cursorChangedScheduler = null;\n        this.mouseDownInfo = null;\n        this.foldingDecorationProvider = new FoldingDecorationProvider(editor);\n        this.foldingDecorationProvider.showFoldingControls = options.get(110 /* EditorOption.showFoldingControls */);\n        this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n        this.foldingEnabled = CONTEXT_FOLDING_ENABLED.bindTo(this.contextKeyService);\n        this.foldingEnabled.set(this._isEnabled);\n        this._register(this.editor.onDidChangeModel(() => this.onModelChanged()));\n        this._register(this.editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(43 /* EditorOption.folding */)) {\n                this._isEnabled = this.editor.getOptions().get(43 /* EditorOption.folding */);\n                this.foldingEnabled.set(this._isEnabled);\n                this.onModelChanged();\n            }\n            if (e.hasChanged(47 /* EditorOption.foldingMaximumRegions */)) {\n                this.onModelChanged();\n            }\n            if (e.hasChanged(110 /* EditorOption.showFoldingControls */) || e.hasChanged(45 /* EditorOption.foldingHighlight */)) {\n                const options = this.editor.getOptions();\n                this.foldingDecorationProvider.showFoldingControls = options.get(110 /* EditorOption.showFoldingControls */);\n                this.foldingDecorationProvider.showFoldingHighlights = options.get(45 /* EditorOption.foldingHighlight */);\n                this.triggerFoldingModelChanged();\n            }\n            if (e.hasChanged(44 /* EditorOption.foldingStrategy */)) {\n                this._useFoldingProviders = this.editor.getOptions().get(44 /* EditorOption.foldingStrategy */) !== 'indentation';\n                this.onFoldingStrategyChanged();\n            }\n            if (e.hasChanged(48 /* EditorOption.unfoldOnClickAfterEndOfLine */)) {\n                this._unfoldOnClickAfterEndOfLine = this.editor.getOptions().get(48 /* EditorOption.unfoldOnClickAfterEndOfLine */);\n            }\n            if (e.hasChanged(46 /* EditorOption.foldingImportsByDefault */)) {\n                this._foldingImportsByDefault = this.editor.getOptions().get(46 /* EditorOption.foldingImportsByDefault */);\n            }\n        }));\n        this.onModelChanged();\n    }\n    /**\n     * Store view state.\n     */\n    saveViewState() {\n        const model = this.editor.getModel();\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization()) {\n            return {};\n        }\n        if (this.foldingModel) { // disposed ?\n            const collapsedRegions = this.foldingModel.getMemento();\n            const provider = this.rangeProvider ? this.rangeProvider.id : undefined;\n            return { collapsedRegions, lineCount: model.getLineCount(), provider, foldedImports: this._currentModelHasFoldedImports };\n        }\n        return undefined;\n    }\n    /**\n     * Restore view state.\n     */\n    restoreViewState(state) {\n        const model = this.editor.getModel();\n        if (!model || !this._isEnabled || model.isTooLargeForTokenization() || !this.hiddenRangeModel) {\n            return;\n        }\n        if (!state) {\n            return;\n        }\n        this._currentModelHasFoldedImports = !!state.foldedImports;\n        if (state.collapsedRegions && state.collapsedRegions.length > 0 && this.foldingModel) {\n            this._restoringViewState = true;\n            try {\n                this.foldingModel.applyMemento(state.collapsedRegions);\n            }\n            finally {\n                this._restoringViewState = false;\n            }\n        }\n    }\n    onModelChanged() {\n        this.localToDispose.clear();\n        const model = this.editor.getModel();\n        if (!this._isEnabled || !model || model.isTooLargeForTokenization()) {\n            // huge files get no view model, so they cannot support hidden areas\n            return;\n        }\n        this._currentModelHasFoldedImports = false;\n        this.foldingModel = new FoldingModel(model, this.foldingDecorationProvider);\n        this.localToDispose.add(this.foldingModel);\n        this.hiddenRangeModel = new HiddenRangeModel(this.foldingModel);\n        this.localToDispose.add(this.hiddenRangeModel);\n        this.localToDispose.add(this.hiddenRangeModel.onDidChange(hr => this.onHiddenRangesChanges(hr)));\n        this.updateScheduler = new Delayer(this.updateDebounceInfo.get(model));\n        this.cursorChangedScheduler = new RunOnceScheduler(() => this.revealCursor(), 200);\n        this.localToDispose.add(this.cursorChangedScheduler);\n        this.localToDispose.add(this.languageFeaturesService.foldingRangeProvider.onDidChange(() => this.onFoldingStrategyChanged()));\n        this.localToDispose.add(this.editor.onDidChangeModelLanguageConfiguration(() => this.onFoldingStrategyChanged())); // covers model language changes as well\n        this.localToDispose.add(this.editor.onDidChangeModelContent(e => this.onDidChangeModelContent(e)));\n        this.localToDispose.add(this.editor.onDidChangeCursorPosition(() => this.onCursorPositionChanged()));\n        this.localToDispose.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));\n        this.localToDispose.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));\n        this.localToDispose.add({\n            dispose: () => {\n                var _a, _b;\n                if (this.foldingRegionPromise) {\n                    this.foldingRegionPromise.cancel();\n                    this.foldingRegionPromise = null;\n                }\n                (_a = this.updateScheduler) === null || _a === void 0 ? void 0 : _a.cancel();\n                this.updateScheduler = null;\n                this.foldingModel = null;\n                this.foldingModelPromise = null;\n                this.hiddenRangeModel = null;\n                this.cursorChangedScheduler = null;\n                (_b = this.rangeProvider) === null || _b === void 0 ? void 0 : _b.dispose();\n                this.rangeProvider = null;\n            }\n        });\n        this.triggerFoldingModelChanged();\n    }\n    onFoldingStrategyChanged() {\n        var _a;\n        (_a = this.rangeProvider) === null || _a === void 0 ? void 0 : _a.dispose();\n        this.rangeProvider = null;\n        this.triggerFoldingModelChanged();\n    }\n    getRangeProvider(editorModel) {\n        if (this.rangeProvider) {\n            return this.rangeProvider;\n        }\n        const indentRangeProvider = new IndentRangeProvider(editorModel, this.languageConfigurationService, this._foldingLimitReporter);\n        this.rangeProvider = indentRangeProvider; // fallback\n        if (this._useFoldingProviders && this.foldingModel) {\n            const selectedProviders = FoldingController_1.getFoldingRangeProviders(this.languageFeaturesService, editorModel);\n            if (selectedProviders.length > 0) {\n                this.rangeProvider = new SyntaxRangeProvider(editorModel, selectedProviders, () => this.triggerFoldingModelChanged(), this._foldingLimitReporter, indentRangeProvider);\n            }\n        }\n        return this.rangeProvider;\n    }\n    getFoldingModel() {\n        return this.foldingModelPromise;\n    }\n    onDidChangeModelContent(e) {\n        var _a;\n        (_a = this.hiddenRangeModel) === null || _a === void 0 ? void 0 : _a.notifyChangeModelContent(e);\n        this.triggerFoldingModelChanged();\n    }\n    triggerFoldingModelChanged() {\n        if (this.updateScheduler) {\n            if (this.foldingRegionPromise) {\n                this.foldingRegionPromise.cancel();\n                this.foldingRegionPromise = null;\n            }\n            this.foldingModelPromise = this.updateScheduler.trigger(() => {\n                const foldingModel = this.foldingModel;\n                if (!foldingModel) { // null if editor has been disposed, or folding turned off\n                    return null;\n                }\n                const sw = new StopWatch();\n                const provider = this.getRangeProvider(foldingModel.textModel);\n                const foldingRegionPromise = this.foldingRegionPromise = createCancelablePromise(token => provider.compute(token));\n                return foldingRegionPromise.then(foldingRanges => {\n                    if (foldingRanges && foldingRegionPromise === this.foldingRegionPromise) { // new request or cancelled in the meantime?\n                        let scrollState;\n                        if (this._foldingImportsByDefault && !this._currentModelHasFoldedImports) {\n                            const hasChanges = foldingRanges.setCollapsedAllOfType(FoldingRangeKind.Imports.value, true);\n                            if (hasChanges) {\n                                scrollState = StableEditorScrollState.capture(this.editor);\n                                this._currentModelHasFoldedImports = hasChanges;\n                            }\n                        }\n                        // some cursors might have moved into hidden regions, make sure they are in expanded regions\n                        const selections = this.editor.getSelections();\n                        const selectionLineNumbers = selections ? selections.map(s => s.startLineNumber) : [];\n                        foldingModel.update(foldingRanges, selectionLineNumbers);\n                        scrollState === null || scrollState === void 0 ? void 0 : scrollState.restore(this.editor);\n                        // update debounce info\n                        const newValue = this.updateDebounceInfo.update(foldingModel.textModel, sw.elapsed());\n                        if (this.updateScheduler) {\n                            this.updateScheduler.defaultDelay = newValue;\n                        }\n                    }\n                    return foldingModel;\n                });\n            }).then(undefined, (err) => {\n                onUnexpectedError(err);\n                return null;\n            });\n        }\n    }\n    onHiddenRangesChanges(hiddenRanges) {\n        if (this.hiddenRangeModel && hiddenRanges.length && !this._restoringViewState) {\n            const selections = this.editor.getSelections();\n            if (selections) {\n                if (this.hiddenRangeModel.adjustSelections(selections)) {\n                    this.editor.setSelections(selections);\n                }\n            }\n        }\n        this.editor.setHiddenAreas(hiddenRanges, this);\n    }\n    onCursorPositionChanged() {\n        if (this.hiddenRangeModel && this.hiddenRangeModel.hasRanges()) {\n            this.cursorChangedScheduler.schedule();\n        }\n    }\n    revealCursor() {\n        const foldingModel = this.getFoldingModel();\n        if (!foldingModel) {\n            return;\n        }\n        foldingModel.then(foldingModel => {\n            if (foldingModel) {\n                const selections = this.editor.getSelections();\n                if (selections && selections.length > 0) {\n                    const toToggle = [];\n                    for (const selection of selections) {\n                        const lineNumber = selection.selectionStartLineNumber;\n                        if (this.hiddenRangeModel && this.hiddenRangeModel.isHidden(lineNumber)) {\n                            toToggle.push(...foldingModel.getAllRegionsAtLine(lineNumber, r => r.isCollapsed && lineNumber > r.startLineNumber));\n                        }\n                    }\n                    if (toToggle.length) {\n                        foldingModel.toggleCollapseState(toToggle);\n                        this.reveal(selections[0].getPosition());\n                    }\n                }\n            }\n        }).then(undefined, onUnexpectedError);\n    }\n    onEditorMouseDown(e) {\n        this.mouseDownInfo = null;\n        if (!this.hiddenRangeModel || !e.target || !e.target.range) {\n            return;\n        }\n        if (!e.event.leftButton && !e.event.middleButton) {\n            return;\n        }\n        const range = e.target.range;\n        let iconClicked = false;\n        switch (e.target.type) {\n            case 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */: {\n                const data = e.target.detail;\n                const offsetLeftInGutter = e.target.element.offsetLeft;\n                const gutterOffsetX = data.offsetX - offsetLeftInGutter;\n                // const gutterOffsetX = data.offsetX - data.glyphMarginWidth - data.lineNumbersWidth - data.glyphMarginLeft;\n                // TODO@joao TODO@alex TODO@martin this is such that we don't collide with dirty diff\n                if (gutterOffsetX < 4) { // the whitespace between the border and the real folding icon border is 4px\n                    return;\n                }\n                iconClicked = true;\n                break;\n            }\n            case 7 /* MouseTargetType.CONTENT_EMPTY */: {\n                if (this._unfoldOnClickAfterEndOfLine && this.hiddenRangeModel.hasRanges()) {\n                    const data = e.target.detail;\n                    if (!data.isAfterLines) {\n                        break;\n                    }\n                }\n                return;\n            }\n            case 6 /* MouseTargetType.CONTENT_TEXT */: {\n                if (this.hiddenRangeModel.hasRanges()) {\n                    const model = this.editor.getModel();\n                    if (model && range.startColumn === model.getLineMaxColumn(range.startLineNumber)) {\n                        break;\n                    }\n                }\n                return;\n            }\n            default:\n                return;\n        }\n        this.mouseDownInfo = { lineNumber: range.startLineNumber, iconClicked };\n    }\n    onEditorMouseUp(e) {\n        const foldingModel = this.foldingModel;\n        if (!foldingModel || !this.mouseDownInfo || !e.target) {\n            return;\n        }\n        const lineNumber = this.mouseDownInfo.lineNumber;\n        const iconClicked = this.mouseDownInfo.iconClicked;\n        const range = e.target.range;\n        if (!range || range.startLineNumber !== lineNumber) {\n            return;\n        }\n        if (iconClicked) {\n            if (e.target.type !== 4 /* MouseTargetType.GUTTER_LINE_DECORATIONS */) {\n                return;\n            }\n        }\n        else {\n            const model = this.editor.getModel();\n            if (!model || range.startColumn !== model.getLineMaxColumn(lineNumber)) {\n                return;\n            }\n        }\n        const region = foldingModel.getRegionAtLine(lineNumber);\n        if (region && region.startLineNumber === lineNumber) {\n            const isCollapsed = region.isCollapsed;\n            if (iconClicked || isCollapsed) {\n                const surrounding = e.event.altKey;\n                let toToggle = [];\n                if (surrounding) {\n                    const filter = (otherRegion) => !otherRegion.containedBy(region) && !region.containedBy(otherRegion);\n                    const toMaybeToggle = foldingModel.getRegionsInside(null, filter);\n                    for (const r of toMaybeToggle) {\n                        if (r.isCollapsed) {\n                            toToggle.push(r);\n                        }\n                    }\n                    // if any surrounding regions are folded, unfold those. Otherwise, fold all surrounding\n                    if (toToggle.length === 0) {\n                        toToggle = toMaybeToggle;\n                    }\n                }\n                else {\n                    const recursive = e.event.middleButton || e.event.shiftKey;\n                    if (recursive) {\n                        for (const r of foldingModel.getRegionsInside(region)) {\n                            if (r.isCollapsed === isCollapsed) {\n                                toToggle.push(r);\n                            }\n                        }\n                    }\n                    // when recursive, first only collapse all children. If all are already folded or there are no children, also fold parent.\n                    if (isCollapsed || !recursive || toToggle.length === 0) {\n                        toToggle.push(region);\n                    }\n                }\n                foldingModel.toggleCollapseState(toToggle);\n                this.reveal({ lineNumber, column: 1 });\n            }\n        }\n    }\n    reveal(position) {\n        this.editor.revealPositionInCenterIfOutsideViewport(position, 0 /* ScrollType.Smooth */);\n    }\n};\nFoldingController.ID = 'editor.contrib.folding';\nFoldingController = FoldingController_1 = __decorate([\n    __param(1, IContextKeyService),\n    __param(2, ILanguageConfigurationService),\n    __param(3, INotificationService),\n    __param(4, ILanguageFeatureDebounceService),\n    __param(5, ILanguageFeaturesService)\n], FoldingController);\nexport { FoldingController };\nexport class RangesLimitReporter {\n    constructor(editor) {\n        this.editor = editor;\n        this._onDidChange = new Emitter();\n        this._computed = 0;\n        this._limited = false;\n    }\n    get limit() {\n        return this.editor.getOptions().get(47 /* EditorOption.foldingMaximumRegions */);\n    }\n    update(computed, limited) {\n        if (computed !== this._computed || limited !== this._limited) {\n            this._computed = computed;\n            this._limited = limited;\n            this._onDidChange.fire();\n        }\n    }\n}\nclass FoldingAction extends EditorAction {\n    runEditorCommand(accessor, editor, args) {\n        const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n        const foldingController = FoldingController.get(editor);\n        if (!foldingController) {\n            return;\n        }\n        const foldingModelPromise = foldingController.getFoldingModel();\n        if (foldingModelPromise) {\n            this.reportTelemetry(accessor, editor);\n            return foldingModelPromise.then(foldingModel => {\n                if (foldingModel) {\n                    this.invoke(foldingController, foldingModel, editor, args, languageConfigurationService);\n                    const selection = editor.getSelection();\n                    if (selection) {\n                        foldingController.reveal(selection.getStartPosition());\n                    }\n                }\n            });\n        }\n    }\n    getSelectedLines(editor) {\n        const selections = editor.getSelections();\n        return selections ? selections.map(s => s.startLineNumber) : [];\n    }\n    getLineNumbers(args, editor) {\n        if (args && args.selectionLines) {\n            return args.selectionLines.map(l => l + 1); // to 0-bases line numbers\n        }\n        return this.getSelectedLines(editor);\n    }\n    run(_accessor, _editor) {\n    }\n}\nfunction foldingArgumentsConstraint(args) {\n    if (!types.isUndefined(args)) {\n        if (!types.isObject(args)) {\n            return false;\n        }\n        const foldingArgs = args;\n        if (!types.isUndefined(foldingArgs.levels) && !types.isNumber(foldingArgs.levels)) {\n            return false;\n        }\n        if (!types.isUndefined(foldingArgs.direction) && !types.isString(foldingArgs.direction)) {\n            return false;\n        }\n        if (!types.isUndefined(foldingArgs.selectionLines) && (!Array.isArray(foldingArgs.selectionLines) || !foldingArgs.selectionLines.every(types.isNumber))) {\n            return false;\n        }\n    }\n    return true;\n}\nclass UnfoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfold',\n            label: nls.localize('unfoldAction.label', \"Unfold\"),\n            alias: 'Unfold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 94 /* KeyCode.BracketRight */,\n                mac: {\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            metadata: {\n                description: 'Unfold the content in the editor',\n                args: [\n                    {\n                        name: 'Unfold editor argument',\n                        description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t* 'levels': Number of levels to unfold. If not set, defaults to 1.\n\t\t\t\t\t\t* 'direction': If 'up', unfold given number of levels up otherwise unfolds down.\n\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the unfold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t`,\n                        constraint: foldingArgumentsConstraint,\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'levels': {\n                                    'type': 'number',\n                                    'default': 1\n                                },\n                                'direction': {\n                                    'type': 'string',\n                                    'enum': ['up', 'down'],\n                                    'default': 'down'\n                                },\n                                'selectionLines': {\n                                    'type': 'array',\n                                    'items': {\n                                        'type': 'number'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args) {\n        const levels = args && args.levels || 1;\n        const lineNumbers = this.getLineNumbers(args, editor);\n        if (args && args.direction === 'up') {\n            setCollapseStateLevelsUp(foldingModel, false, levels, lineNumbers);\n        }\n        else {\n            setCollapseStateLevelsDown(foldingModel, false, levels, lineNumbers);\n        }\n    }\n}\nclass UnFoldRecursivelyAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldRecursively',\n            label: nls.localize('unFoldRecursivelyAction.label', \"Unfold Recursively\"),\n            alias: 'Unfold Recursively',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 94 /* KeyCode.BracketRight */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, _args) {\n        setCollapseStateLevelsDown(foldingModel, false, Number.MAX_VALUE, this.getSelectedLines(editor));\n    }\n}\nclass FoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.fold',\n            label: nls.localize('foldAction.label', \"Fold\"),\n            alias: 'Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 92 /* KeyCode.BracketLeft */,\n                mac: {\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */\n                },\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            },\n            metadata: {\n                description: 'Fold the content in the editor',\n                args: [\n                    {\n                        name: 'Fold editor argument',\n                        description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t\t\t* 'levels': Number of levels to fold.\n\t\t\t\t\t\t\t* 'direction': If 'up', folds given number of levels up otherwise folds down.\n\t\t\t\t\t\t\t* 'selectionLines': Array of the start lines (0-based) of the editor selections to apply the fold action to. If not set, the active selection(s) will be used.\n\t\t\t\t\t\t\tIf no levels or direction is set, folds the region at the locations or if already collapsed, the first uncollapsed parent instead.\n\t\t\t\t\t\t`,\n                        constraint: foldingArgumentsConstraint,\n                        schema: {\n                            'type': 'object',\n                            'properties': {\n                                'levels': {\n                                    'type': 'number',\n                                },\n                                'direction': {\n                                    'type': 'string',\n                                    'enum': ['up', 'down'],\n                                },\n                                'selectionLines': {\n                                    'type': 'array',\n                                    'items': {\n                                        'type': 'number'\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args) {\n        const lineNumbers = this.getLineNumbers(args, editor);\n        const levels = args && args.levels;\n        const direction = args && args.direction;\n        if (typeof levels !== 'number' && typeof direction !== 'string') {\n            // fold the region at the location or if already collapsed, the first uncollapsed parent instead.\n            setCollapseStateUp(foldingModel, true, lineNumbers);\n        }\n        else {\n            if (direction === 'up') {\n                setCollapseStateLevelsUp(foldingModel, true, levels || 1, lineNumbers);\n            }\n            else {\n                setCollapseStateLevelsDown(foldingModel, true, levels || 1, lineNumbers);\n            }\n        }\n    }\n}\nclass ToggleFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.toggleFold',\n            label: nls.localize('toggleFoldAction.label', \"Toggle Fold\"),\n            alias: 'Toggle Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 42 /* KeyCode.KeyL */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        toggleCollapseState(foldingModel, 1, selectedLines);\n    }\n}\nclass FoldRecursivelyAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldRecursively',\n            label: nls.localize('foldRecursivelyAction.label', \"Fold Recursively\"),\n            alias: 'Fold Recursively',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 92 /* KeyCode.BracketLeft */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        setCollapseStateLevelsDown(foldingModel, true, Number.MAX_VALUE, selectedLines);\n    }\n}\nclass FoldAllBlockCommentsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllBlockComments',\n            label: nls.localize('foldAllBlockComments.label', \"Fold All Block Comments\"),\n            alias: 'Fold All Block Comments',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 90 /* KeyCode.Slash */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Comment.value, true);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const comments = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).comments;\n            if (comments && comments.blockCommentStartToken) {\n                const regExp = new RegExp('^\\\\s*' + escapeRegExpCharacters(comments.blockCommentStartToken));\n                setCollapseStateForMatchingLines(foldingModel, regExp, true);\n            }\n        }\n    }\n}\nclass FoldAllRegionsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllMarkerRegions',\n            label: nls.localize('foldAllMarkerRegions.label', \"Fold All Regions\"),\n            alias: 'Fold All Regions',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 29 /* KeyCode.Digit8 */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, true);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n                const regExp = new RegExp(foldingRules.markers.start);\n                setCollapseStateForMatchingLines(foldingModel, regExp, true);\n            }\n        }\n    }\n}\nclass UnfoldAllRegionsAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAllMarkerRegions',\n            label: nls.localize('unfoldAllMarkerRegions.label', \"Unfold All Regions\"),\n            alias: 'Unfold All Regions',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 30 /* KeyCode.Digit9 */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor, args, languageConfigurationService) {\n        if (foldingModel.regions.hasTypes()) {\n            setCollapseStateForType(foldingModel, FoldingRangeKind.Region.value, false);\n        }\n        else {\n            const editorModel = editor.getModel();\n            if (!editorModel) {\n                return;\n            }\n            const foldingRules = languageConfigurationService.getLanguageConfiguration(editorModel.getLanguageId()).foldingRules;\n            if (foldingRules && foldingRules.markers && foldingRules.markers.start) {\n                const regExp = new RegExp(foldingRules.markers.start);\n                setCollapseStateForMatchingLines(foldingModel, regExp, false);\n            }\n        }\n    }\n}\nclass FoldAllExceptAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAllExcept',\n            label: nls.localize('foldAllExcept.label', \"Fold All Except Selected\"),\n            alias: 'Fold All Except Selected',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 88 /* KeyCode.Minus */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        setCollapseStateForRest(foldingModel, true, selectedLines);\n    }\n}\nclass UnfoldAllExceptAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAllExcept',\n            label: nls.localize('unfoldAllExcept.label', \"Unfold All Except Selected\"),\n            alias: 'Unfold All Except Selected',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 86 /* KeyCode.Equal */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        setCollapseStateForRest(foldingModel, false, selectedLines);\n    }\n}\nclass FoldAllAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.foldAll',\n            label: nls.localize('foldAllAction.label', \"Fold All\"),\n            alias: 'Fold All',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 21 /* KeyCode.Digit0 */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, _editor) {\n        setCollapseStateLevelsDown(foldingModel, true);\n    }\n}\nclass UnfoldAllAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.unfoldAll',\n            label: nls.localize('unfoldAllAction.label', \"Unfold All\"),\n            alias: 'Unfold All',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 40 /* KeyCode.KeyJ */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, _editor) {\n        setCollapseStateLevelsDown(foldingModel, false);\n    }\n}\nclass FoldLevelAction extends FoldingAction {\n    getFoldingLevel() {\n        return parseInt(this.id.substr(FoldLevelAction.ID_PREFIX.length));\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        setCollapseStateAtLevel(foldingModel, this.getFoldingLevel(), true, this.getSelectedLines(editor));\n    }\n}\nFoldLevelAction.ID_PREFIX = 'editor.foldLevel';\nFoldLevelAction.ID = (level) => FoldLevelAction.ID_PREFIX + level;\n/** Action to go to the parent fold of current line */\nclass GotoParentFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoParentFold',\n            label: nls.localize('gotoParentFold.label', \"Go to Parent Fold\"),\n            alias: 'Go to Parent Fold',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            const startLineNumber = getParentFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\n/** Action to go to the previous fold of current line */\nclass GotoPreviousFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoPreviousFold',\n            label: nls.localize('gotoPreviousFold.label', \"Go to Previous Folding Range\"),\n            alias: 'Go to Previous Folding Range',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            const startLineNumber = getPreviousFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\n/** Action to go to the next fold of current line */\nclass GotoNextFoldAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.gotoNextFold',\n            label: nls.localize('gotoNextFold.label', \"Go to Next Folding Range\"),\n            alias: 'Go to Next Folding Range',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        const selectedLines = this.getSelectedLines(editor);\n        if (selectedLines.length > 0) {\n            const startLineNumber = getNextFoldLine(selectedLines[0], foldingModel);\n            if (startLineNumber !== null) {\n                editor.setSelection({\n                    startLineNumber: startLineNumber,\n                    startColumn: 1,\n                    endLineNumber: startLineNumber,\n                    endColumn: 1\n                });\n            }\n        }\n    }\n}\nclass FoldRangeFromSelectionAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.createFoldingRangeFromSelection',\n            label: nls.localize('createManualFoldRange.label', \"Create Folding Range from Selection\"),\n            alias: 'Create Folding Range from Selection',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 87 /* KeyCode.Comma */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(_foldingController, foldingModel, editor) {\n        var _a;\n        const collapseRanges = [];\n        const selections = editor.getSelections();\n        if (selections) {\n            for (const selection of selections) {\n                let endLineNumber = selection.endLineNumber;\n                if (selection.endColumn === 1) {\n                    --endLineNumber;\n                }\n                if (endLineNumber > selection.startLineNumber) {\n                    collapseRanges.push({\n                        startLineNumber: selection.startLineNumber,\n                        endLineNumber: endLineNumber,\n                        type: undefined,\n                        isCollapsed: true,\n                        source: 1 /* FoldSource.userDefined */\n                    });\n                    editor.setSelection({\n                        startLineNumber: selection.startLineNumber,\n                        startColumn: 1,\n                        endLineNumber: selection.startLineNumber,\n                        endColumn: 1\n                    });\n                }\n            }\n            if (collapseRanges.length > 0) {\n                collapseRanges.sort((a, b) => {\n                    return a.startLineNumber - b.startLineNumber;\n                });\n                const newRanges = FoldingRegions.sanitizeAndMerge(foldingModel.regions, collapseRanges, (_a = editor.getModel()) === null || _a === void 0 ? void 0 : _a.getLineCount());\n                foldingModel.updatePost(FoldingRegions.fromFoldRanges(newRanges));\n            }\n        }\n    }\n}\nclass RemoveFoldRangeFromSelectionAction extends FoldingAction {\n    constructor() {\n        super({\n            id: 'editor.removeManualFoldingRanges',\n            label: nls.localize('removeManualFoldingRanges.label', \"Remove Manual Folding Ranges\"),\n            alias: 'Remove Manual Folding Ranges',\n            precondition: CONTEXT_FOLDING_ENABLED,\n            kbOpts: {\n                kbExpr: EditorContextKeys.editorTextFocus,\n                primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | 89 /* KeyCode.Period */),\n                weight: 100 /* KeybindingWeight.EditorContrib */\n            }\n        });\n    }\n    invoke(foldingController, foldingModel, editor) {\n        const selections = editor.getSelections();\n        if (selections) {\n            const ranges = [];\n            for (const selection of selections) {\n                const { startLineNumber, endLineNumber } = selection;\n                ranges.push(endLineNumber >= startLineNumber ? { startLineNumber, endLineNumber } : { endLineNumber, startLineNumber });\n            }\n            foldingModel.removeManualRanges(ranges);\n            foldingController.triggerFoldingModelChanged();\n        }\n    }\n}\nregisterEditorContribution(FoldingController.ID, FoldingController, 0 /* EditorContributionInstantiation.Eager */); // eager because it uses `saveViewState`/`restoreViewState`\nregisterEditorAction(UnfoldAction);\nregisterEditorAction(UnFoldRecursivelyAction);\nregisterEditorAction(FoldAction);\nregisterEditorAction(FoldRecursivelyAction);\nregisterEditorAction(FoldAllAction);\nregisterEditorAction(UnfoldAllAction);\nregisterEditorAction(FoldAllBlockCommentsAction);\nregisterEditorAction(FoldAllRegionsAction);\nregisterEditorAction(UnfoldAllRegionsAction);\nregisterEditorAction(FoldAllExceptAction);\nregisterEditorAction(UnfoldAllExceptAction);\nregisterEditorAction(ToggleFoldAction);\nregisterEditorAction(GotoParentFoldAction);\nregisterEditorAction(GotoPreviousFoldAction);\nregisterEditorAction(GotoNextFoldAction);\nregisterEditorAction(FoldRangeFromSelectionAction);\nregisterEditorAction(RemoveFoldRangeFromSelectionAction);\nfor (let i = 1; i <= 7; i++) {\n    registerInstantiatedEditorAction(new FoldLevelAction({\n        id: FoldLevelAction.ID(i),\n        label: nls.localize('foldLevelAction.label', \"Fold Level {0}\", i),\n        alias: `Fold Level ${i}`,\n        precondition: CONTEXT_FOLDING_ENABLED,\n        kbOpts: {\n            kbExpr: EditorContextKeys.editorTextFocus,\n            primary: KeyChord(2048 /* KeyMod.CtrlCmd */ | 41 /* KeyCode.KeyK */, 2048 /* KeyMod.CtrlCmd */ | (21 /* KeyCode.Digit0 */ + i)),\n            weight: 100 /* KeybindingWeight.EditorContrib */\n        }\n    }));\n}\nCommandsRegistry.registerCommand('_executeFoldingRangeProvider', async function (accessor, ...args) {\n    const [resource] = args;\n    if (!(resource instanceof URI)) {\n        throw illegalArgument();\n    }\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const model = accessor.get(IModelService).getModel(resource);\n    if (!model) {\n        throw illegalArgument();\n    }\n    const configurationService = accessor.get(IConfigurationService);\n    if (!configurationService.getValue('editor.folding', { resource })) {\n        return [];\n    }\n    const languageConfigurationService = accessor.get(ILanguageConfigurationService);\n    const strategy = configurationService.getValue('editor.foldingStrategy', { resource });\n    const foldingLimitReporter = {\n        get limit() {\n            return configurationService.getValue('editor.foldingMaximumRegions', { resource });\n        },\n        update: (computed, limited) => { }\n    };\n    const indentRangeProvider = new IndentRangeProvider(model, languageConfigurationService, foldingLimitReporter);\n    let rangeProvider = indentRangeProvider;\n    if (strategy !== 'indentation') {\n        const providers = FoldingController.getFoldingRangeProviders(languageFeaturesService, model);\n        if (providers.length) {\n            rangeProvider = new SyntaxRangeProvider(model, providers, () => { }, foldingLimitReporter, indentRangeProvider);\n        }\n    }\n    const ranges = await rangeProvider.compute(CancellationToken.None);\n    const result = [];\n    try {\n        if (ranges) {\n            for (let i = 0; i < ranges.length; i++) {\n                const type = ranges.getType(i);\n                result.push({ start: ranges.getStartLineNumber(i), end: ranges.getEndLineNumber(i), kind: type ? FoldingRangeKind.fromValue(type) : undefined });\n            }\n        }\n        return result;\n    }\n    finally {\n        rangeProvider.dispose();\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}